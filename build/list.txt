; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\list.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\list.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\list.crf FreeRTOS\list.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  vListInitialise PROC
;;;74     
;;;75     void vListInitialise( xList * const pxList )
000000  f1000108          ADD      r1,r0,#8
;;;76     {
;;;77     	/* The list structure contains a list item which is used to mark the
;;;78     	end of the list.  To initialise the list the list end is inserted
;;;79     	as the only list entry. */
;;;80     	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000004  6041              STR      r1,[r0,#4]
;;;81     
;;;82     	/* The list end value is the highest possible value in the list to
;;;83     	ensure it remains at the end of the list. */
;;;84     	pxList->xListEnd.xItemValue = portMAX_DELAY;
000006  f04f31ff          MOV      r1,#0xffffffff
00000a  6081              STR      r1,[r0,#8]
;;;85     
;;;86     	/* The list end next and previous pointers point to itself so we know
;;;87     	when the list is empty. */
;;;88     	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
00000c  f1000108          ADD      r1,r0,#8
000010  60c1              STR      r1,[r0,#0xc]
;;;89     	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000012  6101              STR      r1,[r0,#0x10]
;;;90     
;;;91     	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
000014  2100              MOVS     r1,#0
000016  6001              STR      r1,[r0,#0]
;;;92     }
000018  4770              BX       lr
;;;93     /*-----------------------------------------------------------*/
                          ENDP

                  vListInitialiseItem PROC
;;;94     
;;;95     void vListInitialiseItem( xListItem * const pxItem )
00001a  2100              MOVS     r1,#0
;;;96     {
;;;97     	/* Make sure the list item is not recorded as being on a list. */
;;;98     	pxItem->pvContainer = NULL;
00001c  6101              STR      r1,[r0,#0x10]
;;;99     }
00001e  4770              BX       lr
;;;100    /*-----------------------------------------------------------*/
                          ENDP

                  vListInsertEnd PROC
;;;101    
;;;102    void vListInsertEnd( xList * const pxList, xListItem * const pxNewListItem )
000020  6842              LDR      r2,[r0,#4]
;;;103    {
;;;104    xListItem * pxIndex;
;;;105    
;;;106    	/* Insert a new list item into pxList, but rather than sort the list,
;;;107    	makes the new list item the last item to be removed by a call to
;;;108    	pvListGetOwnerOfNextEntry. */
;;;109    	pxIndex = pxList->pxIndex;
;;;110    
;;;111    	pxNewListItem->pxNext = pxIndex;
000022  604a              STR      r2,[r1,#4]
;;;112    	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
000024  6893              LDR      r3,[r2,#8]
000026  608b              STR      r3,[r1,#8]
;;;113    	pxIndex->pxPrevious->pxNext = pxNewListItem;
000028  6893              LDR      r3,[r2,#8]
00002a  6059              STR      r1,[r3,#4]
;;;114    	pxIndex->pxPrevious = pxNewListItem;
00002c  6091              STR      r1,[r2,#8]
;;;115    
;;;116    	/* Remember which list the item is in. */
;;;117    	pxNewListItem->pvContainer = ( void * ) pxList;
00002e  6108              STR      r0,[r1,#0x10]
;;;118    
;;;119    	( pxList->uxNumberOfItems )++;
000030  6803              LDR      r3,[r0,#0]
000032  1c5b              ADDS     r3,r3,#1
000034  6003              STR      r3,[r0,#0]
;;;120    }
000036  4770              BX       lr
;;;121    /*-----------------------------------------------------------*/
                          ENDP

                  vListInsert PROC
;;;122    
;;;123    void vListInsert( xList * const pxList, xListItem * const pxNewListItem )
000038  b510              PUSH     {r4,lr}
;;;124    {
00003a  4602              MOV      r2,r0
;;;125    xListItem *pxIterator;
;;;126    portTickType xValueOfInsertion;
;;;127    
;;;128    	/* Insert the new list item into the list, sorted in ulListItem order. */
;;;129    	xValueOfInsertion = pxNewListItem->xItemValue;
00003c  680b              LDR      r3,[r1,#0]
;;;130    
;;;131    	/* If the list already contains a list item with the same item value then
;;;132    	the new list item should be placed after it.  This ensures that TCB's which
;;;133    	are stored in ready lists (all of which have the same ulListItem value)
;;;134    	get an equal share of the CPU.  However, if the xItemValue is the same as
;;;135    	the back marker the iteration loop below will not end.  This means we need
;;;136    	to guard against this by checking the value first and modifying the
;;;137    	algorithm slightly if necessary. */
;;;138    	if( xValueOfInsertion == portMAX_DELAY )
00003e  1c5c              ADDS     r4,r3,#1
000040  d101              BNE      |L1.70|
;;;139    	{
;;;140    		pxIterator = pxList->xListEnd.pxPrevious;
000042  6910              LDR      r0,[r2,#0x10]
000044  e007              B        |L1.86|
                  |L1.70|
;;;141    	}
;;;142    	else
;;;143    	{
;;;144    		/* *** NOTE ***********************************************************
;;;145    		If you find your application is crashing here then likely causes are:
;;;146    			1) Stack overflow -
;;;147    			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
;;;148    			2) Incorrect interrupt priority assignment, especially on Cortex-M3
;;;149    			   parts where numerically high priority values denote low actual
;;;150    			   interrupt priories, which can seem counter intuitive.  See
;;;151    			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
;;;152    			3) Calling an API function from within a critical section or when
;;;153    			   the scheduler is suspended, or calling an API function that does
;;;154    			   not end in "FromISR" from an interrupt.
;;;155    			4) Using a queue or semaphore before it has been initialised or
;;;156    			   before the scheduler has been started (are interrupts firing
;;;157    			   before vTaskStartScheduler() has been called?).
;;;158    		See http://www.freertos.org/FAQHelp.html for more tips.
;;;159    		**********************************************************************/
;;;160    
;;;161    		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000046  f1020008          ADD      r0,r2,#8
00004a  e000              B        |L1.78|
                  |L1.76|
00004c  6840              LDR      r0,[r0,#4]
                  |L1.78|
00004e  6844              LDR      r4,[r0,#4]
000050  6824              LDR      r4,[r4,#0]
000052  429c              CMP      r4,r3
000054  d9fa              BLS      |L1.76|
                  |L1.86|
;;;162    		{
;;;163    			/* There is nothing to do here, we are just iterating to the
;;;164    			wanted insertion position. */
;;;165    		}
;;;166    	}
;;;167    
;;;168    	pxNewListItem->pxNext = pxIterator->pxNext;
000056  6844              LDR      r4,[r0,#4]
000058  604c              STR      r4,[r1,#4]
;;;169    	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
00005a  684c              LDR      r4,[r1,#4]
00005c  60a1              STR      r1,[r4,#8]
;;;170    	pxNewListItem->pxPrevious = pxIterator;
00005e  6088              STR      r0,[r1,#8]
;;;171    	pxIterator->pxNext = pxNewListItem;
000060  6041              STR      r1,[r0,#4]
;;;172    
;;;173    	/* Remember which list the item is in.  This allows fast removal of the
;;;174    	item later. */
;;;175    	pxNewListItem->pvContainer = ( void * ) pxList;
000062  610a              STR      r2,[r1,#0x10]
;;;176    
;;;177    	( pxList->uxNumberOfItems )++;
000064  6814              LDR      r4,[r2,#0]
000066  1c64              ADDS     r4,r4,#1
000068  6014              STR      r4,[r2,#0]
;;;178    }
00006a  bd10              POP      {r4,pc}
;;;179    /*-----------------------------------------------------------*/
                          ENDP

                  uxListRemove PROC
;;;180    
;;;181    unsigned portBASE_TYPE uxListRemove( xListItem * const pxItemToRemove )
00006c  4601              MOV      r1,r0
;;;182    {
;;;183    xList * pxList;
;;;184    
;;;185    	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
00006e  e9d13001          LDRD     r3,r0,[r1,#4]
000072  6098              STR      r0,[r3,#8]
;;;186    	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
000074  e9d10301          LDRD     r0,r3,[r1,#4]
000078  6058              STR      r0,[r3,#4]
;;;187    
;;;188    	/* The list item knows which list it is in.  Obtain the list from the list
;;;189    	item. */
;;;190    	pxList = ( xList * ) pxItemToRemove->pvContainer;
00007a  690a              LDR      r2,[r1,#0x10]
;;;191    
;;;192    	/* Make sure the index is left pointing to a valid item. */
;;;193    	if( pxList->pxIndex == pxItemToRemove )
00007c  6850              LDR      r0,[r2,#4]
00007e  4288              CMP      r0,r1
000080  d101              BNE      |L1.134|
;;;194    	{
;;;195    		pxList->pxIndex = pxItemToRemove->pxPrevious;
000082  6888              LDR      r0,[r1,#8]
000084  6050              STR      r0,[r2,#4]
                  |L1.134|
;;;196    	}
;;;197    
;;;198    	pxItemToRemove->pvContainer = NULL;
000086  2000              MOVS     r0,#0
000088  6108              STR      r0,[r1,#0x10]
;;;199    	( pxList->uxNumberOfItems )--;
00008a  6810              LDR      r0,[r2,#0]
00008c  1e40              SUBS     r0,r0,#1
00008e  6010              STR      r0,[r2,#0]
;;;200    
;;;201    	return pxList->uxNumberOfItems;
000090  6810              LDR      r0,[r2,#0]
;;;202    }
000092  4770              BX       lr
;;;203    /*-----------------------------------------------------------*/
                          ENDP

