; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\netconf.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\netconf.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\netconf.crf Upnp\netconf.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  CheckNetmask PROC
;;;31     
;;;32     unsigned char   CheckNetmask(ip_addr_t * mask)
000000  b570              PUSH     {r4-r6,lr}
;;;33     {
000002  4604              MOV      r4,r0
;;;34       if(mask == NULL)
000004  b90c              CBNZ     r4,|L1.10|
;;;35         return false;
000006  2000              MOVS     r0,#0
                  |L1.8|
;;;36       DWORD t_mask = 0xFFFFFFFF;
;;;37       if(!mask->addr)
;;;38         return true;
;;;39       int i;
;;;40       for(i=0; i<25; ++i){
;;;41         if(t_mask == htonl(mask->addr))
;;;42           return true;
;;;43         t_mask <<=1;
;;;44       }
;;;45       return false;
;;;46     }
000008  bd70              POP      {r4-r6,pc}
                  |L1.10|
00000a  f04f35ff          MOV      r5,#0xffffffff        ;36
00000e  6820              LDR      r0,[r4,#0]            ;37
000010  b908              CBNZ     r0,|L1.22|
000012  2001              MOVS     r0,#1                 ;38
000014  e7f8              B        |L1.8|
                  |L1.22|
000016  2600              MOVS     r6,#0                 ;40
000018  e008              B        |L1.44|
                  |L1.26|
00001a  6820              LDR      r0,[r4,#0]            ;41
00001c  f7fffffe          BL       lwip_htonl
000020  42a8              CMP      r0,r5                 ;41
000022  d101              BNE      |L1.40|
000024  2001              MOVS     r0,#1                 ;42
000026  e7ef              B        |L1.8|
                  |L1.40|
000028  006d              LSLS     r5,r5,#1              ;43
00002a  1c76              ADDS     r6,r6,#1              ;40
                  |L1.44|
00002c  2e19              CMP      r6,#0x19              ;40
00002e  dbf4              BLT      |L1.26|
000030  2000              MOVS     r0,#0                 ;45
000032  e7e9              B        |L1.8|
;;;47     
                          ENDP

                  Localhost PROC
;;;48     ip_addr_t * Localhost(void)
000034  4837              LDR      r0,|L1.276|
;;;49     {
;;;50       if(net_context.local_ip.addr == 0)
000036  6c00              LDR      r0,[r0,#0x40]  ; net_context
000038  b908              CBNZ     r0,|L1.62|
;;;51         return NULL;
00003a  2000              MOVS     r0,#0
                  |L1.60|
;;;52       return &net_context.local_ip;
;;;53     }
00003c  4770              BX       lr
                  |L1.62|
00003e  4835              LDR      r0,|L1.276|
000040  3040              ADDS     r0,r0,#0x40           ;52
000042  e7fb              B        |L1.60|
;;;54     void   SetLocalhost(ip_addr_t * ip)
                          ENDP

                  SetLocalhost PROC
000044  b908              CBNZ     r0,|L1.74|
;;;55     {
;;;56       ip_addr_set(&net_context.local_ip,ip);
000046  2100              MOVS     r1,#0
000048  e000              B        |L1.76|
                  |L1.74|
00004a  6801              LDR      r1,[r0,#0]
                  |L1.76|
00004c  4a31              LDR      r2,|L1.276|
00004e  6411              STR      r1,[r2,#0x40]  ; net_context
;;;57     }
000050  4770              BX       lr
;;;58     ip_addr_t * GetPrimaryDNS(void)
                          ENDP

                  GetPrimaryDNS PROC
000052  4830              LDR      r0,|L1.276|
;;;59     {
;;;60       if(net_context.dns[0].addr == 0)
000054  6cc0              LDR      r0,[r0,#0x4c]  ; net_context
000056  b908              CBNZ     r0,|L1.92|
;;;61         return NULL;  
000058  2000              MOVS     r0,#0
                  |L1.90|
;;;62       return &net_context.dns[0];
;;;63     }
00005a  4770              BX       lr
                  |L1.92|
00005c  482d              LDR      r0,|L1.276|
00005e  304c              ADDS     r0,r0,#0x4c           ;62
000060  e7fb              B        |L1.90|
;;;64     void SetDNS(BYTE n,ip_addr_t *  ip)
                          ENDP

                  SetDNS PROC
000062  b909              CBNZ     r1,|L1.104|
;;;65     {
;;;66       ip_addr_set(&net_context.dns[n],ip);
000064  2200              MOVS     r2,#0
000066  e000              B        |L1.106|
                  |L1.104|
000068  680a              LDR      r2,[r1,#0]
                  |L1.106|
00006a  4b2a              LDR      r3,|L1.276|
00006c  334c              ADDS     r3,r3,#0x4c
00006e  f8432020          STR      r2,[r3,r0,LSL #2]
;;;67     }
000072  4770              BX       lr
;;;68     ip_addr_t * GetNetMask(void)
                          ENDP

                  GetNetMask PROC
000074  b510              PUSH     {r4,lr}
;;;69     {
;;;70       if(net_context.net_mask.addr == 0)
000076  4827              LDR      r0,|L1.276|
000078  6c40              LDR      r0,[r0,#0x44]  ; net_context
00007a  b908              CBNZ     r0,|L1.128|
;;;71         return NULL;  
00007c  2000              MOVS     r0,#0
                  |L1.126|
;;;72       if(!CheckNetmask(&net_context.net_mask))
;;;73         net_context.net_mask.addr = htonl(0xFFFFFF00);
;;;74       return &net_context.net_mask;
;;;75     }
00007e  bd10              POP      {r4,pc}
                  |L1.128|
000080  4824              LDR      r0,|L1.276|
000082  3044              ADDS     r0,r0,#0x44           ;72
000084  f7fffffe          BL       CheckNetmask
000088  b928              CBNZ     r0,|L1.150|
00008a  f06f00ff          MVN      r0,#0xff              ;73
00008e  f7fffffe          BL       lwip_htonl
000092  4920              LDR      r1,|L1.276|
000094  6448              STR      r0,[r1,#0x44]         ;73  ; net_context
                  |L1.150|
000096  481f              LDR      r0,|L1.276|
000098  3044              ADDS     r0,r0,#0x44           ;74
00009a  e7f0              B        |L1.126|
;;;76     void SetNetMask(ip_addr_t *  mask)
                          ENDP

                  SetNetMask PROC
00009c  b908              CBNZ     r0,|L1.162|
;;;77     {
;;;78       ip_addr_set(&net_context.net_mask,mask);
00009e  2100              MOVS     r1,#0
0000a0  e000              B        |L1.164|
                  |L1.162|
0000a2  6801              LDR      r1,[r0,#0]
                  |L1.164|
0000a4  4a1b              LDR      r2,|L1.276|
0000a6  6451              STR      r1,[r2,#0x44]  ; net_context
;;;79     }
0000a8  4770              BX       lr
;;;80     ip_addr_t *  GetGateway(void)
                          ENDP

                  GetGateway PROC
0000aa  481a              LDR      r0,|L1.276|
;;;81     {
;;;82       if(net_context.gateway_ip.addr == 0)
0000ac  6c80              LDR      r0,[r0,#0x48]  ; net_context
0000ae  b908              CBNZ     r0,|L1.180|
;;;83         return NULL;    
0000b0  2000              MOVS     r0,#0
                  |L1.178|
;;;84       return &net_context.gateway_ip;
;;;85     }
0000b2  4770              BX       lr
                  |L1.180|
0000b4  4817              LDR      r0,|L1.276|
0000b6  3048              ADDS     r0,r0,#0x48           ;84
0000b8  e7fb              B        |L1.178|
;;;86     void SetGateway(ip_addr_t *  ip)
                          ENDP

                  SetGateway PROC
0000ba  b908              CBNZ     r0,|L1.192|
;;;87     {
;;;88       ip_addr_set(&net_context.gateway_ip,ip);
0000bc  2100              MOVS     r1,#0
0000be  e000              B        |L1.194|
                  |L1.192|
0000c0  6801              LDR      r1,[r0,#0]
                  |L1.194|
0000c2  4a14              LDR      r2,|L1.276|
0000c4  6491              STR      r1,[r2,#0x48]  ; net_context
;;;89     }
0000c6  4770              BX       lr
;;;90     ip_addr_t * GetSecondaryDNS(void)
                          ENDP

                  GetSecondaryDNS PROC
0000c8  4812              LDR      r0,|L1.276|
;;;91     {
;;;92       if(net_context.dns[1].addr == 0)
0000ca  6d00              LDR      r0,[r0,#0x50]
0000cc  b908              CBNZ     r0,|L1.210|
;;;93         return NULL;    
0000ce  2000              MOVS     r0,#0
                  |L1.208|
;;;94       return &net_context.dns[1];
;;;95     }
0000d0  4770              BX       lr
                  |L1.210|
0000d2  4810              LDR      r0,|L1.276|
0000d4  3050              ADDS     r0,r0,#0x50           ;94
0000d6  e7fb              B        |L1.208|
;;;96     
                          ENDP

                  GetHostName PROC
;;;97     char *GetHostName(void)
0000d8  480e              LDR      r0,|L1.276|
;;;98     {
;;;99       return net_context.name;
;;;100    }
0000da  4770              BX       lr
;;;101    void SetHostName(char *buff)
                          ENDP

                  SetHostName PROC
0000dc  b570              PUSH     {r4-r6,lr}
;;;102    {
0000de  4605              MOV      r5,r0
;;;103      int length = strlen(buff);
0000e0  4628              MOV      r0,r5
0000e2  f7fffffe          BL       strlen
0000e6  4604              MOV      r4,r0
;;;104      if(length >=MAX_NAME_LENGTH) length = sizeof(net_context.name)-1;
0000e8  2c40              CMP      r4,#0x40
0000ea  db00              BLT      |L1.238|
0000ec  243f              MOVS     r4,#0x3f
                  |L1.238|
;;;105      memset(net_context.name,0,sizeof(net_context.name));
0000ee  2140              MOVS     r1,#0x40
0000f0  4808              LDR      r0,|L1.276|
0000f2  f7fffffe          BL       __aeabi_memclr4
;;;106      while(length--)
0000f6  e002              B        |L1.254|
                  |L1.248|
;;;107        net_context.name[length] = buff[length];
0000f8  5d28              LDRB     r0,[r5,r4]
0000fa  4906              LDR      r1,|L1.276|
0000fc  5508              STRB     r0,[r1,r4]
                  |L1.254|
0000fe  0020              MOVS     r0,r4                 ;106
000100  f1a40401          SUB      r4,r4,#1              ;106
000104  d1f8              BNE      |L1.248|
;;;108    }
000106  bd70              POP      {r4-r6,pc}
;;;109    
                          ENDP

                  htoa PROC
;;;110    char * htoa(struct in_addr * addr)
000108  b510              PUSH     {r4,lr}
;;;111    {
00010a  4604              MOV      r4,r0
;;;112      return inet_ntoa(*addr);
00010c  4620              MOV      r0,r4
00010e  f7fffffe          BL       ipaddr_ntoa
;;;113    }
000112  bd10              POP      {r4,pc}
                          ENDP

                  |L1.276|
                          DCD      net_context

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  net_context
                          %        88
