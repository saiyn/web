; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\ir_driver.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\ir_driver.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\ir_driver.crf Driver\IR_driver.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  ir_in_recive_handler PROC
;;;51     
;;;52     void ir_in_recive_handler(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;53     {
;;;54     	uint32 status;
;;;55     	uint32 time_cnt;
;;;56     	uint32 time_cur;
;;;57     	
;;;58     	status = GPIOIntStatus(IR_IN_PORT, 1);
000002  2101              MOVS     r1,#1
000004  48f6              LDR      r0,|L1.992|
000006  f7fffffe          BL       GPIOIntStatus
00000a  4606              MOV      r6,r0
;;;59     	GPIOIntClear(IR_IN_PORT, status);
00000c  4631              MOV      r1,r6
00000e  48f4              LDR      r0,|L1.992|
000010  f7fffffe          BL       GPIOIntClear
;;;60     	
;;;61     	if(GPIO_ReadSinglePin(IR_IN_PORT, IR_IN_PIN)){
000014  2102              MOVS     r1,#2
000016  48f2              LDR      r0,|L1.992|
000018  f7fffffe          BL       GPIO_ReadSinglePin
00001c  b130              CBZ      r0,|L1.44|
;;;62     		SET_IR_OUT(1);
00001e  bf00              NOP      
000020  2208              MOVS     r2,#8
000022  4611              MOV      r1,r2
000024  48ee              LDR      r0,|L1.992|
000026  f7fffffe          BL       GPIOPinWrite
00002a  e007              B        |L1.60|
                  |L1.44|
;;;63     	}else{
;;;64     		SET_IR_OUT(0);
00002c  bf00              NOP      
00002e  2200              MOVS     r2,#0
000030  2108              MOVS     r1,#8
000032  48eb              LDR      r0,|L1.992|
000034  f7fffffe          BL       GPIOPinWrite
000038  bf00              NOP      
                  |L1.58|
;;;65     		return;
;;;66     	}
;;;67     	
;;;68     	time_cur = bsp_timer0_get_time();
;;;69     	time_cnt = time_cur - ir_jack.last_time;
;;;70     	ir_jack.last_time = time_cur;
;;;71     	
;;;72     	gIr_timeout = 0;
;;;73     	switch(ir_jack.state){
;;;74     		case NEC_IDLE:
;;;75     			   
;;;76     		   ir_jack.state = NEC_LEADER;
;;;77     			break;
;;;78     		
;;;79     		case NEC_LEADER:
;;;80     			if(time_cnt < LEADER_TIME_MAX && time_cnt > LEADER_TIME_MIN){
;;;81     				ir_jack.code.val = 0;
;;;82     				ir_jack.bitcnt = 0;
;;;83     				ir_jack.state = NEC_CODE;
;;;84     			}else{
;;;85     				ir_jack.state = NEC_IDLE;
;;;86     			}
;;;87     			break;
;;;88     			
;;;89     		case NEC_CODE:
;;;90     			if(time_cnt < ONE_TIME_MAX && time_cnt > ZERO_TIME_MIN){
;;;91     				ir_jack.bitcnt++;
;;;92     				ir_jack.code.val >>= 1;
;;;93     				if(time_cnt >= MEDIAN_BIT_TIME){
;;;94     					ir_jack.code.val |= 0x80000000;
;;;95     				}
;;;96     			}
;;;97     			
;;;98     			if(ir_jack.bitcnt == 32){
;;;99     				SYS_TRACE("jack ir code =[%x],LB=%2x, HB=%2x, UB=%2x, MB=%2x \r\n", ir_jack.code.val, ir_jack.code.byte.LB, ir_jack.code.byte.HB, ir_jack.code.byte.UB, ir_jack.code.byte.MB);
;;;100    				if((ir_jack.code.byte.LB == CUSTMER_CODE_LB) && (ir_jack.code.byte.HB == CUSTMET_CODE_HB)){
;;;101    					if((ir_jack.code.byte.MB & ir_jack.code.byte.UB) == 0){
;;;102    						ring_buffer_write(IR_BACK_IN, ir_jack.code.byte.UB);
;;;103    						ir_jack.bitcnt = 0;
;;;104    						ir_jack.state = NEC_REPEATE1;
;;;105    						if((ir_commond[IR_VOL_UP] == ir_jack.code.byte.UB) || (ir_commond[IR_LFET] == ir_jack.code.byte.UB) || (ir_commond[IR_RIGHT]== ir_jack.code.byte.UB) || (ir_commond[IR_VOL_DOWN] == ir_jack.code.byte.UB)){
;;;106    							
;;;107    							repeat_thres = 5;
;;;108    							repeat_commond = ir_jack.code.byte.UB;
;;;109    						}else{
;;;110    							repeat_thres = 0;
;;;111    							repeat_commond = 0;
;;;112    						}
;;;113    						
;;;114    					  ir_jack.code.val = 0;
;;;115    					}else{
;;;116    						ir_jack.state = NEC_IDLE;
;;;117    					}
;;;118    				}else{
;;;119    					ir_jack.state = NEC_IDLE;
;;;120    				}
;;;121    			}
;;;122    			break;
;;;123    			
;;;124    		case NEC_REPEATE1:
;;;125    			ir_jack.state = NEC_REPEATE2;
;;;126    			break;
;;;127    		
;;;128    		case NEC_REPEATE2:
;;;129    			if(time_cnt <= REPEAT_TIME_MAX && time_cnt >= REPEAT_TIME_MIN){
;;;130    				if(repeat_commond){
;;;131    					ir_jack.state = NEC_REPEATE1;
;;;132    					if(repeat_thres){
;;;133    						repeat_thres--;
;;;134    					}else{
;;;135    						ring_buffer_write(IR_BACK_IN, repeat_commond);
;;;136    					}
;;;137    				}else{
;;;138    					ir_jack.state = NEC_IDLE;
;;;139    				}
;;;140    			}
;;;141    			break;
;;;142    		
;;;143    		default:
;;;144    			break;
;;;145    	}
;;;146    	
;;;147    }
00003a  bd7c              POP      {r2-r6,pc}
                  |L1.60|
00003c  f7fffffe          BL       bsp_timer0_get_time
000040  4605              MOV      r5,r0                 ;68
000042  48e8              LDR      r0,|L1.996|
000044  6880              LDR      r0,[r0,#8]            ;69  ; ir_jack
000046  1a2c              SUBS     r4,r5,r0              ;69
000048  48e6              LDR      r0,|L1.996|
00004a  6085              STR      r5,[r0,#8]            ;70  ; ir_jack
00004c  2000              MOVS     r0,#0                 ;72
00004e  49e6              LDR      r1,|L1.1000|
000050  8008              STRH     r0,[r1,#0]            ;72
000052  48e4              LDR      r0,|L1.996|
000054  7800              LDRB     r0,[r0,#0]            ;73  ; ir_jack
000056  2805              CMP      r0,#5                 ;73
000058  d274              BCS      |L1.324|
00005a  e8dff000          TBB      [pc,r0]               ;73
00005e  0307              DCB      0x03,0x07
000060  16858900          DCB      0x16,0x85,0x89,0x00
000064  2001              MOVS     r0,#1                 ;76
000066  49df              LDR      r1,|L1.996|
000068  7008              STRB     r0,[r1,#0]            ;76
00006a  e09f              B        |L1.428|
00006c  2c95              CMP      r4,#0x95              ;80
00006e  d208              BCS      |L1.130|
000070  2c7c              CMP      r4,#0x7c              ;80
000072  d906              BLS      |L1.130|
000074  2000              MOVS     r0,#0                 ;81
000076  49db              LDR      r1,|L1.996|
000078  6048              STR      r0,[r1,#4]            ;81  ; ir_jack
00007a  7048              STRB     r0,[r1,#1]            ;82
00007c  2002              MOVS     r0,#2                 ;83
00007e  7008              STRB     r0,[r1,#0]            ;83
000080  e002              B        |L1.136|
                  |L1.130|
000082  2000              MOVS     r0,#0                 ;85
000084  49d7              LDR      r1,|L1.996|
000086  7008              STRB     r0,[r1,#0]            ;85
                  |L1.136|
000088  e090              B        |L1.428|
00008a  2c1e              CMP      r4,#0x1e              ;90
00008c  d211              BCS      |L1.178|
00008e  2c08              CMP      r4,#8                 ;90
000090  d90f              BLS      |L1.178|
000092  48d4              LDR      r0,|L1.996|
000094  7840              LDRB     r0,[r0,#1]            ;91  ; ir_jack
000096  1c40              ADDS     r0,r0,#1              ;91
000098  49d2              LDR      r1,|L1.996|
00009a  7048              STRB     r0,[r1,#1]            ;91
00009c  4608              MOV      r0,r1                 ;92
00009e  6840              LDR      r0,[r0,#4]            ;92  ; ir_jack
0000a0  0840              LSRS     r0,r0,#1              ;92
0000a2  6048              STR      r0,[r1,#4]            ;92  ; ir_jack
0000a4  2c11              CMP      r4,#0x11              ;93
0000a6  d304              BCC      |L1.178|
0000a8  4608              MOV      r0,r1                 ;94
0000aa  6840              LDR      r0,[r0,#4]            ;94  ; ir_jack
0000ac  f0404000          ORR      r0,r0,#0x80000000     ;94
0000b0  6048              STR      r0,[r1,#4]            ;94  ; ir_jack
                  |L1.178|
0000b2  48cc              LDR      r0,|L1.996|
0000b4  7840              LDRB     r0,[r0,#1]            ;98  ; ir_jack
0000b6  2820              CMP      r0,#0x20              ;98
0000b8  d155              BNE      |L1.358|
0000ba  48ca              LDR      r0,|L1.996|
0000bc  79c0              LDRB     r0,[r0,#7]            ;99
0000be  49c9              LDR      r1,|L1.996|
0000c0  7989              LDRB     r1,[r1,#6]            ;99
0000c2  e9cd1000          STRD     r1,r0,[sp,#0]         ;99
0000c6  48c7              LDR      r0,|L1.996|
0000c8  7943              LDRB     r3,[r0,#5]            ;99
0000ca  7902              LDRB     r2,[r0,#4]            ;99  ; ir_jack
0000cc  6841              LDR      r1,[r0,#4]            ;99  ; ir_jack
0000ce  a0c7              ADR      r0,|L1.1004|
0000d0  f7fffffe          BL       s_printf
0000d4  48c3              LDR      r0,|L1.996|
0000d6  7900              LDRB     r0,[r0,#4]            ;100  ; ir_jack
0000d8  2821              CMP      r0,#0x21              ;100
0000da  d141              BNE      |L1.352|
0000dc  48c1              LDR      r0,|L1.996|
0000de  7940              LDRB     r0,[r0,#5]            ;100
0000e0  28db              CMP      r0,#0xdb              ;100
0000e2  d13d              BNE      |L1.352|
0000e4  48bf              LDR      r0,|L1.996|
0000e6  79c0              LDRB     r0,[r0,#7]            ;101
0000e8  49be              LDR      r1,|L1.996|
0000ea  7989              LDRB     r1,[r1,#6]            ;101
0000ec  4208              TST      r0,r1                 ;101
0000ee  d133              BNE      |L1.344|
0000f0  48bc              LDR      r0,|L1.996|
0000f2  7981              LDRB     r1,[r0,#6]            ;102
0000f4  2002              MOVS     r0,#2                 ;102
0000f6  f7fffffe          BL       ring_buffer_write
0000fa  2000              MOVS     r0,#0                 ;103
0000fc  49b9              LDR      r1,|L1.996|
0000fe  7048              STRB     r0,[r1,#1]            ;103
000100  2003              MOVS     r0,#3                 ;104
000102  7008              STRB     r0,[r1,#0]            ;104
000104  48c7              LDR      r0,|L1.1060|
000106  7801              LDRB     r1,[r0,#0]            ;105  ; ir_commond
000108  48b6              LDR      r0,|L1.996|
00010a  7980              LDRB     r0,[r0,#6]            ;105
00010c  4281              CMP      r1,r0                 ;105
00010e  d011              BEQ      |L1.308|
000110  48c4              LDR      r0,|L1.1060|
000112  7b01              LDRB     r1,[r0,#0xc]          ;105  ; ir_commond
000114  48b3              LDR      r0,|L1.996|
000116  7980              LDRB     r0,[r0,#6]            ;105
000118  4281              CMP      r1,r0                 ;105
00011a  d00b              BEQ      |L1.308|
00011c  48c1              LDR      r0,|L1.1060|
00011e  7b81              LDRB     r1,[r0,#0xe]          ;105  ; ir_commond
000120  48b0              LDR      r0,|L1.996|
000122  7980              LDRB     r0,[r0,#6]            ;105
000124  4281              CMP      r1,r0                 ;105
000126  d005              BEQ      |L1.308|
000128  48be              LDR      r0,|L1.1060|
00012a  7841              LDRB     r1,[r0,#1]            ;105  ; ir_commond
00012c  48ad              LDR      r0,|L1.996|
00012e  7980              LDRB     r0,[r0,#6]            ;105
000130  4281              CMP      r1,r0                 ;105
000132  d108              BNE      |L1.326|
                  |L1.308|
000134  2005              MOVS     r0,#5                 ;107
000136  49bc              LDR      r1,|L1.1064|
000138  7008              STRB     r0,[r1,#0]            ;107
00013a  48aa              LDR      r0,|L1.996|
00013c  7980              LDRB     r0,[r0,#6]            ;108
00013e  49bb              LDR      r1,|L1.1068|
000140  7008              STRB     r0,[r1,#0]            ;108
000142  e005              B        |L1.336|
                  |L1.324|
000144  e031              B        |L1.426|
                  |L1.326|
000146  2000              MOVS     r0,#0                 ;110
000148  49b7              LDR      r1,|L1.1064|
00014a  7008              STRB     r0,[r1,#0]            ;110
00014c  49b7              LDR      r1,|L1.1068|
00014e  7008              STRB     r0,[r1,#0]            ;111
                  |L1.336|
000150  2000              MOVS     r0,#0                 ;114
000152  49a4              LDR      r1,|L1.996|
000154  6048              STR      r0,[r1,#4]            ;114  ; ir_jack
000156  e006              B        |L1.358|
                  |L1.344|
000158  2000              MOVS     r0,#0                 ;116
00015a  49a2              LDR      r1,|L1.996|
00015c  7008              STRB     r0,[r1,#0]            ;116
00015e  e002              B        |L1.358|
                  |L1.352|
000160  2000              MOVS     r0,#0                 ;119
000162  49a0              LDR      r1,|L1.996|
000164  7008              STRB     r0,[r1,#0]            ;119
                  |L1.358|
000166  e021              B        |L1.428|
000168  2004              MOVS     r0,#4                 ;125
00016a  499e              LDR      r1,|L1.996|
00016c  7008              STRB     r0,[r1,#0]            ;125
00016e  e01d              B        |L1.428|
000170  2c82              CMP      r4,#0x82              ;129
000172  d819              BHI      |L1.424|
000174  2c64              CMP      r4,#0x64              ;129
000176  d317              BCC      |L1.424|
000178  48ac              LDR      r0,|L1.1068|
00017a  7800              LDRB     r0,[r0,#0]            ;130  ; repeat_commond
00017c  b188              CBZ      r0,|L1.418|
00017e  2003              MOVS     r0,#3                 ;131
000180  4998              LDR      r1,|L1.996|
000182  7008              STRB     r0,[r1,#0]            ;131
000184  48a8              LDR      r0,|L1.1064|
000186  7800              LDRB     r0,[r0,#0]            ;132  ; repeat_thres
000188  b128              CBZ      r0,|L1.406|
00018a  48a7              LDR      r0,|L1.1064|
00018c  7800              LDRB     r0,[r0,#0]            ;133  ; repeat_thres
00018e  1e40              SUBS     r0,r0,#1              ;133
000190  49a5              LDR      r1,|L1.1064|
000192  7008              STRB     r0,[r1,#0]            ;133
000194  e008              B        |L1.424|
                  |L1.406|
000196  48a5              LDR      r0,|L1.1068|
000198  7801              LDRB     r1,[r0,#0]            ;135  ; repeat_commond
00019a  2002              MOVS     r0,#2                 ;135
00019c  f7fffffe          BL       ring_buffer_write
0001a0  e002              B        |L1.424|
                  |L1.418|
0001a2  2000              MOVS     r0,#0                 ;138
0001a4  498f              LDR      r1,|L1.996|
0001a6  7008              STRB     r0,[r1,#0]            ;138
                  |L1.424|
0001a8  e000              B        |L1.428|
                  |L1.426|
0001aa  bf00              NOP                            ;144
                  |L1.428|
0001ac  bf00              NOP                            ;77
0001ae  bf00              NOP      
0001b0  e743              B        |L1.58|
;;;148    
                          ENDP

                  ir_front_recive_handler PROC
;;;149    
;;;150    void ir_front_recive_handler(void)
0001b2  b570              PUSH     {r4-r6,lr}
;;;151    {
;;;152    	uint32 status;
;;;153    	uint32 time_cnt;
;;;154    	uint32 time_cur;
;;;155    	
;;;156    	status = GPIOIntStatus(FRONT_IR_PORT, 1);
0001b4  2101              MOVS     r1,#1
0001b6  489e              LDR      r0,|L1.1072|
0001b8  f7fffffe          BL       GPIOIntStatus
0001bc  4606              MOV      r6,r0
;;;157    	GPIOIntClear(FRONT_IR_PORT, status);
0001be  4631              MOV      r1,r6
0001c0  489b              LDR      r0,|L1.1072|
0001c2  f7fffffe          BL       GPIOIntClear
;;;158    	
;;;159    	if(IS_IR_JACK_IN()) return;
0001c6  2108              MOVS     r1,#8
0001c8  489a              LDR      r0,|L1.1076|
0001ca  f7fffffe          BL       GPIO_ReadSinglePin
0001ce  2801              CMP      r0,#1
0001d0  d100              BNE      |L1.468|
0001d2  e000              B        |L1.470|
                  |L1.468|
0001d4  2000              MOVS     r0,#0
                  |L1.470|
0001d6  b100              CBZ      r0,|L1.474|
                  |L1.472|
;;;160    	
;;;161    	
;;;162    	if(GPIO_ReadSinglePin(FRONT_IR_PORT, FRONT_IR_PIN)){
;;;163    		SET_IR_OUT(1);
;;;164    		return;
;;;165    	}else{
;;;166    		SET_IR_OUT(0);
;;;167    	}
;;;168    	
;;;169    	time_cur = bsp_timer0_get_time();
;;;170    	time_cnt = time_cur - ir.last_time;
;;;171    	ir.last_time = time_cur;
;;;172    	
;;;173    	gIr_timeout = 0;
;;;174    	switch(ir.state){
;;;175    		case NEC_IDLE:
;;;176    			   
;;;177    		   ir.state = NEC_LEADER;
;;;178    			break;
;;;179    		
;;;180    		case NEC_LEADER:
;;;181    			if(time_cnt < LEADER_TIME_MAX && time_cnt > LEADER_TIME_MIN){
;;;182    				ir.code.val = 0;
;;;183    				ir.bitcnt = 0;
;;;184    				ir.state = NEC_CODE;
;;;185    			}else{
;;;186    				ir.state = NEC_IDLE;
;;;187    			}
;;;188    			break;
;;;189    			
;;;190    		case NEC_CODE:
;;;191    			if(time_cnt < ONE_TIME_MAX && time_cnt > ZERO_TIME_MIN){
;;;192    				ir.bitcnt++;
;;;193    				ir.code.val >>= 1;
;;;194    				if(time_cnt >= MEDIAN_BIT_TIME){
;;;195    					ir.code.val |= 0x80000000;
;;;196    				}
;;;197    			}
;;;198    			
;;;199    			if(ir.bitcnt == 32){
;;;200    				//SYS_TRACE("ir code =[%x],LB=%2x, HB=%2x, UB=%2x, MB=%2x \r\n", ir.code.val, ir.code.byte.LB, ir.code.byte.HB, ir.code.byte.UB, ir.code.byte.MB);
;;;201    				if((ir.code.byte.LB == CUSTMER_CODE_LB) && (ir.code.byte.HB == CUSTMET_CODE_HB)){
;;;202    					if((ir.code.byte.MB & ir.code.byte.UB) == 0){
;;;203    						ring_buffer_write(IR_FRONT, ir.code.byte.UB);
;;;204    						ir.bitcnt = 0;
;;;205    						ir.state = NEC_REPEATE1;
;;;206    						if((ir_commond[IR_VOL_UP] == ir.code.byte.UB) || (ir_commond[IR_LFET] == ir.code.byte.UB) || (ir_commond[IR_RIGHT]== ir.code.byte.UB) || (ir_commond[IR_VOL_DOWN] == ir.code.byte.UB)){
;;;207    							
;;;208    							repeat_thres = 5;
;;;209    							repeat_commond = ir.code.byte.UB;
;;;210    						}else{
;;;211    							repeat_thres = 0;
;;;212    							repeat_commond = 0;
;;;213    						}
;;;214    						
;;;215    					  ir.code.val = 0;
;;;216    					}else{
;;;217    						ir.state = NEC_IDLE;
;;;218    					}
;;;219    				}else{
;;;220    					ir.state = NEC_IDLE;
;;;221    				}
;;;222    			}
;;;223    			break;
;;;224    			
;;;225    		case NEC_REPEATE1:
;;;226    			ir.state = NEC_REPEATE2;
;;;227    			break;
;;;228    		
;;;229    		case NEC_REPEATE2:
;;;230    			if(time_cnt <= REPEAT_TIME_MAX && time_cnt >= REPEAT_TIME_MIN){
;;;231    				if(repeat_commond){
;;;232    					ir.state = NEC_REPEATE1;
;;;233    					if(repeat_thres){
;;;234    						repeat_thres--;
;;;235    					}else{
;;;236    						ring_buffer_write(IR_FRONT, repeat_commond);
;;;237    					}
;;;238    				}else{
;;;239    					ir.state = NEC_IDLE;
;;;240    				}
;;;241    			}
;;;242    			break;
;;;243    		
;;;244    		default:
;;;245    			break;
;;;246    	}
;;;247    	
;;;248    }
0001d8  bd70              POP      {r4-r6,pc}
                  |L1.474|
0001da  2104              MOVS     r1,#4                 ;162
0001dc  4894              LDR      r0,|L1.1072|
0001de  f7fffffe          BL       GPIO_ReadSinglePin
0001e2  b138              CBZ      r0,|L1.500|
0001e4  bf00              NOP                            ;163
0001e6  2208              MOVS     r2,#8                 ;163
0001e8  4611              MOV      r1,r2                 ;163
0001ea  487d              LDR      r0,|L1.992|
0001ec  f7fffffe          BL       GPIOPinWrite
0001f0  bf00              NOP                            ;163
0001f2  e7f1              B        |L1.472|
                  |L1.500|
0001f4  bf00              NOP                            ;166
0001f6  2200              MOVS     r2,#0                 ;166
0001f8  2108              MOVS     r1,#8                 ;166
0001fa  4879              LDR      r0,|L1.992|
0001fc  f7fffffe          BL       GPIOPinWrite
000200  bf00              NOP                            ;166
000202  f7fffffe          BL       bsp_timer0_get_time
000206  4605              MOV      r5,r0                 ;169
000208  488b              LDR      r0,|L1.1080|
00020a  6880              LDR      r0,[r0,#8]            ;170  ; ir
00020c  1a2c              SUBS     r4,r5,r0              ;170
00020e  488a              LDR      r0,|L1.1080|
000210  6085              STR      r5,[r0,#8]            ;171  ; ir
000212  2000              MOVS     r0,#0                 ;173
000214  4974              LDR      r1,|L1.1000|
000216  8008              STRH     r0,[r1,#0]            ;173
000218  4887              LDR      r0,|L1.1080|
00021a  7800              LDRB     r0,[r0,#0]            ;174  ; ir
00021c  2805              CMP      r0,#5                 ;174
00021e  d270              BCS      |L1.770|
000220  e8dff000          TBB      [pc,r0]               ;174
000224  03071678          DCB      0x03,0x07,0x16,0x78
000228  7c00              DCB      0x7c,0x00
00022a  2001              MOVS     r0,#1                 ;177
00022c  4982              LDR      r1,|L1.1080|
00022e  7008              STRB     r0,[r1,#0]            ;177
000230  e092              B        |L1.856|
000232  2c95              CMP      r4,#0x95              ;181
000234  d208              BCS      |L1.584|
000236  2c7c              CMP      r4,#0x7c              ;181
000238  d906              BLS      |L1.584|
00023a  2000              MOVS     r0,#0                 ;182
00023c  497e              LDR      r1,|L1.1080|
00023e  6048              STR      r0,[r1,#4]            ;182  ; ir
000240  7048              STRB     r0,[r1,#1]            ;183
000242  2002              MOVS     r0,#2                 ;184
000244  7008              STRB     r0,[r1,#0]            ;184
000246  e002              B        |L1.590|
                  |L1.584|
000248  2000              MOVS     r0,#0                 ;186
00024a  497b              LDR      r1,|L1.1080|
00024c  7008              STRB     r0,[r1,#0]            ;186
                  |L1.590|
00024e  e083              B        |L1.856|
000250  2c1e              CMP      r4,#0x1e              ;191
000252  d211              BCS      |L1.632|
000254  2c08              CMP      r4,#8                 ;191
000256  d90f              BLS      |L1.632|
000258  4877              LDR      r0,|L1.1080|
00025a  7840              LDRB     r0,[r0,#1]            ;192  ; ir
00025c  1c40              ADDS     r0,r0,#1              ;192
00025e  4976              LDR      r1,|L1.1080|
000260  7048              STRB     r0,[r1,#1]            ;192
000262  4608              MOV      r0,r1                 ;193
000264  6840              LDR      r0,[r0,#4]            ;193  ; ir
000266  0840              LSRS     r0,r0,#1              ;193
000268  6048              STR      r0,[r1,#4]            ;193  ; ir
00026a  2c11              CMP      r4,#0x11              ;194
00026c  d304              BCC      |L1.632|
00026e  4608              MOV      r0,r1                 ;195
000270  6840              LDR      r0,[r0,#4]            ;195  ; ir
000272  f0404000          ORR      r0,r0,#0x80000000     ;195
000276  6048              STR      r0,[r1,#4]            ;195  ; ir
                  |L1.632|
000278  486f              LDR      r0,|L1.1080|
00027a  7840              LDRB     r0,[r0,#1]            ;199  ; ir
00027c  2820              CMP      r0,#0x20              ;199
00027e  d148              BNE      |L1.786|
000280  486d              LDR      r0,|L1.1080|
000282  7900              LDRB     r0,[r0,#4]            ;201  ; ir
000284  2821              CMP      r0,#0x21              ;201
000286  d141              BNE      |L1.780|
000288  486b              LDR      r0,|L1.1080|
00028a  7940              LDRB     r0,[r0,#5]            ;201
00028c  28db              CMP      r0,#0xdb              ;201
00028e  d13d              BNE      |L1.780|
000290  4869              LDR      r0,|L1.1080|
000292  79c0              LDRB     r0,[r0,#7]            ;202
000294  4968              LDR      r1,|L1.1080|
000296  7989              LDRB     r1,[r1,#6]            ;202
000298  4208              TST      r0,r1                 ;202
00029a  d133              BNE      |L1.772|
00029c  4866              LDR      r0,|L1.1080|
00029e  7981              LDRB     r1,[r0,#6]            ;203
0002a0  2001              MOVS     r0,#1                 ;203
0002a2  f7fffffe          BL       ring_buffer_write
0002a6  2000              MOVS     r0,#0                 ;204
0002a8  4963              LDR      r1,|L1.1080|
0002aa  7048              STRB     r0,[r1,#1]            ;204
0002ac  2003              MOVS     r0,#3                 ;205
0002ae  7008              STRB     r0,[r1,#0]            ;205
0002b0  485c              LDR      r0,|L1.1060|
0002b2  7801              LDRB     r1,[r0,#0]            ;206  ; ir_commond
0002b4  4860              LDR      r0,|L1.1080|
0002b6  7980              LDRB     r0,[r0,#6]            ;206
0002b8  4281              CMP      r1,r0                 ;206
0002ba  d011              BEQ      |L1.736|
0002bc  4859              LDR      r0,|L1.1060|
0002be  7b01              LDRB     r1,[r0,#0xc]          ;206  ; ir_commond
0002c0  485d              LDR      r0,|L1.1080|
0002c2  7980              LDRB     r0,[r0,#6]            ;206
0002c4  4281              CMP      r1,r0                 ;206
0002c6  d00b              BEQ      |L1.736|
0002c8  4856              LDR      r0,|L1.1060|
0002ca  7b81              LDRB     r1,[r0,#0xe]          ;206  ; ir_commond
0002cc  485a              LDR      r0,|L1.1080|
0002ce  7980              LDRB     r0,[r0,#6]            ;206
0002d0  4281              CMP      r1,r0                 ;206
0002d2  d005              BEQ      |L1.736|
0002d4  4853              LDR      r0,|L1.1060|
0002d6  7841              LDRB     r1,[r0,#1]            ;206  ; ir_commond
0002d8  4857              LDR      r0,|L1.1080|
0002da  7980              LDRB     r0,[r0,#6]            ;206
0002dc  4281              CMP      r1,r0                 ;206
0002de  d107              BNE      |L1.752|
                  |L1.736|
0002e0  2005              MOVS     r0,#5                 ;208
0002e2  4951              LDR      r1,|L1.1064|
0002e4  7008              STRB     r0,[r1,#0]            ;208
0002e6  4854              LDR      r0,|L1.1080|
0002e8  7980              LDRB     r0,[r0,#6]            ;209
0002ea  4950              LDR      r1,|L1.1068|
0002ec  7008              STRB     r0,[r1,#0]            ;209
0002ee  e004              B        |L1.762|
                  |L1.752|
0002f0  2000              MOVS     r0,#0                 ;211
0002f2  494d              LDR      r1,|L1.1064|
0002f4  7008              STRB     r0,[r1,#0]            ;211
0002f6  494d              LDR      r1,|L1.1068|
0002f8  7008              STRB     r0,[r1,#0]            ;212
                  |L1.762|
0002fa  2000              MOVS     r0,#0                 ;215
0002fc  494e              LDR      r1,|L1.1080|
0002fe  6048              STR      r0,[r1,#4]            ;215  ; ir
000300  e007              B        |L1.786|
                  |L1.770|
000302  e028              B        |L1.854|
                  |L1.772|
000304  2000              MOVS     r0,#0                 ;217
000306  494c              LDR      r1,|L1.1080|
000308  7008              STRB     r0,[r1,#0]            ;217
00030a  e002              B        |L1.786|
                  |L1.780|
00030c  2000              MOVS     r0,#0                 ;220
00030e  494a              LDR      r1,|L1.1080|
000310  7008              STRB     r0,[r1,#0]            ;220
                  |L1.786|
000312  e021              B        |L1.856|
000314  2004              MOVS     r0,#4                 ;226
000316  4948              LDR      r1,|L1.1080|
000318  7008              STRB     r0,[r1,#0]            ;226
00031a  e01d              B        |L1.856|
00031c  2c82              CMP      r4,#0x82              ;230
00031e  d819              BHI      |L1.852|
000320  2c64              CMP      r4,#0x64              ;230
000322  d317              BCC      |L1.852|
000324  4841              LDR      r0,|L1.1068|
000326  7800              LDRB     r0,[r0,#0]            ;231  ; repeat_commond
000328  b188              CBZ      r0,|L1.846|
00032a  2003              MOVS     r0,#3                 ;232
00032c  4942              LDR      r1,|L1.1080|
00032e  7008              STRB     r0,[r1,#0]            ;232
000330  483d              LDR      r0,|L1.1064|
000332  7800              LDRB     r0,[r0,#0]            ;233  ; repeat_thres
000334  b128              CBZ      r0,|L1.834|
000336  483c              LDR      r0,|L1.1064|
000338  7800              LDRB     r0,[r0,#0]            ;234  ; repeat_thres
00033a  1e40              SUBS     r0,r0,#1              ;234
00033c  493a              LDR      r1,|L1.1064|
00033e  7008              STRB     r0,[r1,#0]            ;234
000340  e008              B        |L1.852|
                  |L1.834|
000342  483a              LDR      r0,|L1.1068|
000344  7801              LDRB     r1,[r0,#0]            ;236  ; repeat_commond
000346  2001              MOVS     r0,#1                 ;236
000348  f7fffffe          BL       ring_buffer_write
00034c  e002              B        |L1.852|
                  |L1.846|
00034e  2000              MOVS     r0,#0                 ;239
000350  4939              LDR      r1,|L1.1080|
000352  7008              STRB     r0,[r1,#0]            ;239
                  |L1.852|
000354  e000              B        |L1.856|
                  |L1.854|
000356  bf00              NOP                            ;245
                  |L1.856|
000358  bf00              NOP                            ;178
00035a  bf00              NOP      
00035c  e73c              B        |L1.472|
;;;249    
                          ENDP

                  ir_get_commond PROC
;;;250    
;;;251    bool ir_get_commond(ringbuf_device_t device, ir_commond_t *commond)
00035e  e92d41f0          PUSH     {r4-r8,lr}
;;;252    {
000362  4606              MOV      r6,r0
000364  460f              MOV      r7,r1
;;;253    	uint8 j;
;;;254    	uint8 code;
;;;255    	
;;;256    	OSAL_ASSERT(device < DEVICE_NUM);
000366  2e03              CMP      r6,#3
000368  db06              BLT      |L1.888|
00036a  4a34              LDR      r2,|L1.1084|
00036c  a134              ADR      r1,|L1.1088|
00036e  a039              ADR      r0,|L1.1108|
000370  f7fffffe          BL       s_printf
000374  bf00              NOP      
                  |L1.886|
000376  e7fe              B        |L1.886|
                  |L1.888|
;;;257    	
;;;258    	if(ring_buffer_len(device) == 0) return false;
000378  4630              MOV      r0,r6
00037a  f7fffffe          BL       ring_buffer_len
00037e  b910              CBNZ     r0,|L1.902|
000380  2000              MOVS     r0,#0
                  |L1.898|
;;;259    	
;;;260    	code = ring_buffer_read(device);
;;;261    	
;;;262    	//SYS_TRACE("check ir code = %2x\r\n", code);
;;;263    	
;;;264    	for(j = 0; j < IR_COMMOND_NUM; j++){
;;;265    		if(code == ir_commond[j]){
;;;266    			*commond = (ir_commond_t)j;
;;;267    			return true;
;;;268    		}
;;;269    	}
;;;270    	
;;;271    	return false;
;;;272    }
000382  e8bd81f0          POP      {r4-r8,pc}
                  |L1.902|
000386  4630              MOV      r0,r6                 ;260
000388  f7fffffe          BL       ring_buffer_read
00038c  4605              MOV      r5,r0                 ;260
00038e  2400              MOVS     r4,#0                 ;264
000390  e008              B        |L1.932|
                  |L1.914|
000392  4824              LDR      r0,|L1.1060|
000394  5d00              LDRB     r0,[r0,r4]            ;265
000396  42a8              CMP      r0,r5                 ;265
000398  d102              BNE      |L1.928|
00039a  703c              STRB     r4,[r7,#0]            ;266
00039c  2001              MOVS     r0,#1                 ;267
00039e  e7f0              B        |L1.898|
                  |L1.928|
0003a0  1c60              ADDS     r0,r4,#1              ;264
0003a2  b2c4              UXTB     r4,r0                 ;264
                  |L1.932|
0003a4  2c13              CMP      r4,#0x13              ;264
0003a6  dbf4              BLT      |L1.914|
0003a8  2000              MOVS     r0,#0                 ;271
0003aa  e7ea              B        |L1.898|
;;;273    
                          ENDP

                  ir_timeout_check PROC
;;;274    void ir_timeout_check(void)
0003ac  480e              LDR      r0,|L1.1000|
;;;275    {
;;;276    	if(++gIr_timeout >= 1300){
0003ae  8800              LDRH     r0,[r0,#0]  ; gIr_timeout
0003b0  1c40              ADDS     r0,r0,#1
0003b2  b280              UXTH     r0,r0
0003b4  490c              LDR      r1,|L1.1000|
0003b6  8008              STRH     r0,[r1,#0]
0003b8  f2405114          MOV      r1,#0x514
0003bc  4288              CMP      r0,r1
0003be  db0e              BLT      |L1.990|
;;;277    		gIr_timeout = 0;
0003c0  2000              MOVS     r0,#0
0003c2  4909              LDR      r1,|L1.1000|
0003c4  8008              STRH     r0,[r1,#0]
;;;278    		ir.bitcnt = 0;
0003c6  491c              LDR      r1,|L1.1080|
0003c8  7048              STRB     r0,[r1,#1]
;;;279    		ir.code.val = 0;
0003ca  6048              STR      r0,[r1,#4]  ; ir
;;;280    		ir.state = NEC_IDLE;
0003cc  7008              STRB     r0,[r1,#0]
;;;281    		
;;;282    		ir_jack.bitcnt = 0;
0003ce  4905              LDR      r1,|L1.996|
0003d0  7048              STRB     r0,[r1,#1]
;;;283    		ir_jack.code.val = 0;
0003d2  6048              STR      r0,[r1,#4]  ; ir_jack
;;;284    		ir_jack.state = NEC_IDLE;
0003d4  7008              STRB     r0,[r1,#0]
;;;285    		
;;;286    		repeat_commond = 0;
0003d6  4915              LDR      r1,|L1.1068|
0003d8  7008              STRB     r0,[r1,#0]
;;;287    		repeat_thres = 0;
0003da  4913              LDR      r1,|L1.1064|
0003dc  7008              STRB     r0,[r1,#0]
                  |L1.990|
;;;288    	}
;;;289    }
0003de  4770              BX       lr
                  |L1.992|
                          DCD      0x40027000
                  |L1.996|
                          DCD      ir_jack
                  |L1.1000|
                          DCD      gIr_timeout
                  |L1.1004|
0003ec  6a61636b          DCB      "jack ir code =[%x],LB=%2x, HB=%2x, UB=%2x, MB=%2x \r\n",0
0003f0  20697220
0003f4  636f6465
0003f8  203d5b25
0003fc  785d2c4c
000400  423d2532
000404  782c2048
000408  423d2532
00040c  782c2055
000410  423d2532
000414  782c204d
000418  423d2532
00041c  78200d0a
000420  00      
000421  00                DCB      0
000422  00                DCB      0
000423  00                DCB      0
                  |L1.1060|
                          DCD      ir_commond
                  |L1.1064|
                          DCD      repeat_thres
                  |L1.1068|
                          DCD      repeat_commond
                  |L1.1072|
                          DCD      0x40066000
                  |L1.1076|
                          DCD      0x40025000
                  |L1.1080|
                          DCD      ||ir||
                  |L1.1084|
                          DCD      __FUNCTION__
                  |L1.1088|
000440  64657669          DCB      "device < DEVICE_NUM",0
000444  6365203c
000448  20444556
00044c  4943455f
000450  4e554d00
                  |L1.1108|
000454  28257329          DCB      "(%s) has assert failed at %s.\n",0
000458  20686173
00045c  20617373
000460  65727420
000464  6661696c
000468  65642061
00046c  74202573
000470  2e0a00  
000473  00                DCB      0
                          ENDP

                  IrOutHandler PROC
;;;291    
;;;292    void IrOutHandler(uint8 command)
000474  e92d41f0          PUSH     {r4-r8,lr}
;;;293    {
000478  4605              MOV      r5,r0
;;;294    	uint8 addr_low = CUSTMER_CODE_LB;
00047a  2621              MOVS     r6,#0x21
;;;295    	uint8 addr_high = CUSTMET_CODE_HB;
00047c  27db              MOVS     r7,#0xdb
;;;296    	uint8 index;
;;;297    	
;;;298    	SET_IR_OUT(0);
00047e  bf00              NOP      
000480  2200              MOVS     r2,#0
000482  2108              MOVS     r1,#8
000484  485d              LDR      r0,|L1.1532|
000486  f7fffffe          BL       GPIOPinWrite
00048a  bf00              NOP      
;;;299    	bsp_delay_us(9000);
00048c  f2423028          MOV      r0,#0x2328
000490  f7fffffe          BL       bsp_delay_us
;;;300    	SET_IR_OUT(1);
000494  bf00              NOP      
000496  2208              MOVS     r2,#8
000498  4611              MOV      r1,r2
00049a  4858              LDR      r0,|L1.1532|
00049c  f7fffffe          BL       GPIOPinWrite
0004a0  bf00              NOP      
;;;301    	bsp_delay_us(4500);
0004a2  f2411094          MOV      r0,#0x1194
0004a6  f7fffffe          BL       bsp_delay_us
;;;302    	
;;;303    	for(index = 0; index < 8; index++)
0004aa  2400              MOVS     r4,#0
0004ac  e020              B        |L1.1264|
                  |L1.1198|
;;;304    	{		
;;;305    	   SET_IR_OUT(0); 
0004ae  bf00              NOP      
0004b0  2200              MOVS     r2,#0
0004b2  2108              MOVS     r1,#8
0004b4  4851              LDR      r0,|L1.1532|
0004b6  f7fffffe          BL       GPIOPinWrite
0004ba  bf00              NOP      
;;;306    		 bsp_delay_us(560);
0004bc  f44f700c          MOV      r0,#0x230
0004c0  f7fffffe          BL       bsp_delay_us
;;;307    		 SET_IR_OUT(1);
0004c4  bf00              NOP      
0004c6  2208              MOVS     r2,#8
0004c8  4611              MOV      r1,r2
0004ca  484c              LDR      r0,|L1.1532|
0004cc  f7fffffe          BL       GPIOPinWrite
0004d0  bf00              NOP      
;;;308    		 if(addr_low & (1 << index))
0004d2  2001              MOVS     r0,#1
0004d4  40a0              LSLS     r0,r0,r4
0004d6  4230              TST      r0,r6
0004d8  d004              BEQ      |L1.1252|
;;;309    		 {			  
;;;310    			  bsp_delay_us(1690);
0004da  f240609a          MOV      r0,#0x69a
0004de  f7fffffe          BL       bsp_delay_us
0004e2  e003              B        |L1.1260|
                  |L1.1252|
;;;311    		 }
;;;312    		 else
;;;313    		 {
;;;314    			  bsp_delay_us(560);
0004e4  f44f700c          MOV      r0,#0x230
0004e8  f7fffffe          BL       bsp_delay_us
                  |L1.1260|
0004ec  1c60              ADDS     r0,r4,#1              ;303
0004ee  b2c4              UXTB     r4,r0                 ;303
                  |L1.1264|
0004f0  2c08              CMP      r4,#8                 ;303
0004f2  dbdc              BLT      |L1.1198|
;;;315    		 }
;;;316    		 
;;;317    	}
;;;318    	
;;;319    		for(index = 0; index < 8; index++)
0004f4  2400              MOVS     r4,#0
0004f6  e020              B        |L1.1338|
                  |L1.1272|
;;;320    	{		
;;;321    	   SET_IR_OUT(0); 
0004f8  bf00              NOP      
0004fa  2200              MOVS     r2,#0
0004fc  2108              MOVS     r1,#8
0004fe  483f              LDR      r0,|L1.1532|
000500  f7fffffe          BL       GPIOPinWrite
000504  bf00              NOP      
;;;322    		 bsp_delay_us(560);
000506  f44f700c          MOV      r0,#0x230
00050a  f7fffffe          BL       bsp_delay_us
;;;323    		 SET_IR_OUT(1);
00050e  bf00              NOP      
000510  2208              MOVS     r2,#8
000512  4611              MOV      r1,r2
000514  4839              LDR      r0,|L1.1532|
000516  f7fffffe          BL       GPIOPinWrite
00051a  bf00              NOP      
;;;324    		 if(addr_high & (1 << index))
00051c  2001              MOVS     r0,#1
00051e  40a0              LSLS     r0,r0,r4
000520  4238              TST      r0,r7
000522  d004              BEQ      |L1.1326|
;;;325    		 {			  
;;;326    			  bsp_delay_us(1690);
000524  f240609a          MOV      r0,#0x69a
000528  f7fffffe          BL       bsp_delay_us
00052c  e003              B        |L1.1334|
                  |L1.1326|
;;;327    		 }
;;;328    		 else
;;;329    		 {
;;;330    			  bsp_delay_us(560);
00052e  f44f700c          MOV      r0,#0x230
000532  f7fffffe          BL       bsp_delay_us
                  |L1.1334|
000536  1c60              ADDS     r0,r4,#1              ;319
000538  b2c4              UXTB     r4,r0                 ;319
                  |L1.1338|
00053a  2c08              CMP      r4,#8                 ;319
00053c  dbdc              BLT      |L1.1272|
;;;331    		 }
;;;332    		 
;;;333    	}
;;;334    	
;;;335    		for(index = 0; index < 8; index++)
00053e  2400              MOVS     r4,#0
000540  e020              B        |L1.1412|
                  |L1.1346|
;;;336    	{		
;;;337    	   SET_IR_OUT(0); 
000542  bf00              NOP      
000544  2200              MOVS     r2,#0
000546  2108              MOVS     r1,#8
000548  482c              LDR      r0,|L1.1532|
00054a  f7fffffe          BL       GPIOPinWrite
00054e  bf00              NOP      
;;;338    		 bsp_delay_us(560);
000550  f44f700c          MOV      r0,#0x230
000554  f7fffffe          BL       bsp_delay_us
;;;339    		 SET_IR_OUT(1);
000558  bf00              NOP      
00055a  2208              MOVS     r2,#8
00055c  4611              MOV      r1,r2
00055e  4827              LDR      r0,|L1.1532|
000560  f7fffffe          BL       GPIOPinWrite
000564  bf00              NOP      
;;;340    		 if(command & (1 << index))
000566  2001              MOVS     r0,#1
000568  40a0              LSLS     r0,r0,r4
00056a  4228              TST      r0,r5
00056c  d004              BEQ      |L1.1400|
;;;341    		 {			  
;;;342    			  bsp_delay_us(1690);
00056e  f240609a          MOV      r0,#0x69a
000572  f7fffffe          BL       bsp_delay_us
000576  e003              B        |L1.1408|
                  |L1.1400|
;;;343    		 }
;;;344    		 else
;;;345    		 {
;;;346    			  bsp_delay_us(560);
000578  f44f700c          MOV      r0,#0x230
00057c  f7fffffe          BL       bsp_delay_us
                  |L1.1408|
000580  1c60              ADDS     r0,r4,#1              ;335
000582  b2c4              UXTB     r4,r0                 ;335
                  |L1.1412|
000584  2c08              CMP      r4,#8                 ;335
000586  dbdc              BLT      |L1.1346|
;;;347    		 }
;;;348    		 
;;;349    	}
;;;350    	
;;;351    		for(index = 0; index < 8; index++)
000588  2400              MOVS     r4,#0
00058a  e020              B        |L1.1486|
                  |L1.1420|
;;;352    	{		
;;;353    	   SET_IR_OUT(0); 
00058c  bf00              NOP      
00058e  2200              MOVS     r2,#0
000590  2108              MOVS     r1,#8
000592  481a              LDR      r0,|L1.1532|
000594  f7fffffe          BL       GPIOPinWrite
000598  bf00              NOP      
;;;354    		 bsp_delay_us(560);
00059a  f44f700c          MOV      r0,#0x230
00059e  f7fffffe          BL       bsp_delay_us
;;;355    		 SET_IR_OUT(1);
0005a2  bf00              NOP      
0005a4  2208              MOVS     r2,#8
0005a6  4611              MOV      r1,r2
0005a8  4814              LDR      r0,|L1.1532|
0005aa  f7fffffe          BL       GPIOPinWrite
0005ae  bf00              NOP      
;;;356    		 if((~command) & (1 << index))
0005b0  2001              MOVS     r0,#1
0005b2  40a0              LSLS     r0,r0,r4
0005b4  43a8              BICS     r0,r0,r5
0005b6  d004              BEQ      |L1.1474|
;;;357    		 {			  
;;;358    			  bsp_delay_us(1690);
0005b8  f240609a          MOV      r0,#0x69a
0005bc  f7fffffe          BL       bsp_delay_us
0005c0  e003              B        |L1.1482|
                  |L1.1474|
;;;359    		 }
;;;360    		 else
;;;361    		 {
;;;362    			  bsp_delay_us(560);
0005c2  f44f700c          MOV      r0,#0x230
0005c6  f7fffffe          BL       bsp_delay_us
                  |L1.1482|
0005ca  1c60              ADDS     r0,r4,#1              ;351
0005cc  b2c4              UXTB     r4,r0                 ;351
                  |L1.1486|
0005ce  2c08              CMP      r4,#8                 ;351
0005d0  dbdc              BLT      |L1.1420|
;;;363    		 }
;;;364    		 
;;;365    	}
;;;366    	
;;;367      SET_IR_OUT(0); 
0005d2  bf00              NOP      
0005d4  2200              MOVS     r2,#0
0005d6  2108              MOVS     r1,#8
0005d8  4808              LDR      r0,|L1.1532|
0005da  f7fffffe          BL       GPIOPinWrite
0005de  bf00              NOP      
;;;368    	bsp_delay_us(560);
0005e0  f44f700c          MOV      r0,#0x230
0005e4  f7fffffe          BL       bsp_delay_us
;;;369    	SET_IR_OUT(1);
0005e8  bf00              NOP      
0005ea  2208              MOVS     r2,#8
0005ec  4611              MOV      r1,r2
0005ee  4803              LDR      r0,|L1.1532|
0005f0  f7fffffe          BL       GPIOPinWrite
0005f4  bf00              NOP      
;;;370    	
;;;371    }
0005f6  e8bd81f0          POP      {r4-r8,pc}
;;;372    
                          ENDP

0005fa  0000              DCW      0x0000
                  |L1.1532|
                          DCD      0x40027000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ir_front
                          %        524
                  ir_in
                          %        524
                  ||ir||
                          %        12
                  ir_jack
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  69725f67          DCB      0x69,0x72,0x5f,0x67
000004  65745f63          DCB      0x65,0x74,0x5f,0x63
000008  6f6d6d6f          DCB      0x6f,0x6d,0x6d,0x6f
00000c  6e6400            DCB      0x6e,0x64,0x00

                          AREA ||.data||, DATA, ALIGN=1

                  ir_commond
000000  13170300          DCB      0x13,0x17,0x03,0x00
000004  04050608          DCB      0x04,0x05,0x06,0x08
000008  090a0c0d          DCB      0x09,0x0a,0x0c,0x0d
00000c  10111215          DCB      0x10,0x11,0x12,0x15
000010  0f2526            DCB      0x0f,0x25,0x26
                  repeat_commond
000013  00                DCB      0x00
                  repeat_thres
000014  0000              DCB      0x00,0x00
                  gIr_timeout
000016  0000              DCB      0x00,0x00
