; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\croutine.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\croutine.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\croutine.crf FreeRTOS\croutine.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  prvInitialiseCoRoutineLists PROC
;;;342    
;;;343    static void prvInitialiseCoRoutineLists( void )
000000  b510              PUSH     {r4,lr}
;;;344    {
;;;345    unsigned portBASE_TYPE uxPriority;
;;;346    
;;;347    	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
000002  2400              MOVS     r4,#0
000004  e007              B        |L1.22|
                  |L1.6|
;;;348    	{
;;;349    		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
000006  eb040184          ADD      r1,r4,r4,LSL #2
00000a  4aae              LDR      r2,|L1.708|
00000c  eb020081          ADD      r0,r2,r1,LSL #2
000010  f7fffffe          BL       vListInitialise
000014  1c64              ADDS     r4,r4,#1              ;347
                  |L1.22|
000016  2c02              CMP      r4,#2                 ;347
000018  d3f5              BCC      |L1.6|
;;;350    	}
;;;351    
;;;352    	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
00001a  48ab              LDR      r0,|L1.712|
00001c  f7fffffe          BL       vListInitialise
;;;353    	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
000020  48aa              LDR      r0,|L1.716|
000022  f7fffffe          BL       vListInitialise
;;;354    	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
000026  48aa              LDR      r0,|L1.720|
000028  f7fffffe          BL       vListInitialise
;;;355    
;;;356    	/* Start with pxDelayedCoRoutineList using list1 and the
;;;357    	pxOverflowDelayedCoRoutineList using list2. */
;;;358    	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
00002c  48a6              LDR      r0,|L1.712|
00002e  49a9              LDR      r1,|L1.724|
000030  6008              STR      r0,[r1,#0]  ; pxDelayedCoRoutineList
;;;359    	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
000032  48a6              LDR      r0,|L1.716|
000034  49a8              LDR      r1,|L1.728|
000036  6008              STR      r0,[r1,#0]  ; pxOverflowDelayedCoRoutineList
;;;360    }
000038  bd10              POP      {r4,pc}
;;;361    /*-----------------------------------------------------------*/
                          ENDP

                  xCoRoutineCreate PROC
;;;136    
;;;137    signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
00003a  e92d41f0          PUSH     {r4-r8,lr}
;;;138    {
00003e  4607              MOV      r7,r0
000040  460d              MOV      r5,r1
000042  4690              MOV      r8,r2
;;;139    signed portBASE_TYPE xReturn;
;;;140    corCRCB *pxCoRoutine;
;;;141    
;;;142    	/* Allocate the memory that will store the co-routine control block. */
;;;143    	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
000044  2038              MOVS     r0,#0x38
000046  f7fffffe          BL       pvPortMalloc
00004a  4604              MOV      r4,r0
;;;144    	if( pxCoRoutine )
00004c  2c00              CMP      r4,#0
00004e  d02e              BEQ      |L1.174|
;;;145    	{
;;;146    		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
;;;147    		be created and the co-routine data structures need initialising. */
;;;148    		if( pxCurrentCoRoutine == NULL )
000050  48a2              LDR      r0,|L1.732|
000052  6800              LDR      r0,[r0,#0]  ; pxCurrentCoRoutine
000054  b918              CBNZ     r0,|L1.94|
;;;149    		{
;;;150    			pxCurrentCoRoutine = pxCoRoutine;
000056  48a1              LDR      r0,|L1.732|
000058  6004              STR      r4,[r0,#0]  ; pxCurrentCoRoutine
;;;151    			prvInitialiseCoRoutineLists();
00005a  f7fffffe          BL       prvInitialiseCoRoutineLists
                  |L1.94|
;;;152    		}
;;;153    
;;;154    		/* Check the priority is within limits. */
;;;155    		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
00005e  2d02              CMP      r5,#2
000060  d300              BCC      |L1.100|
;;;156    		{
;;;157    			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
000062  2501              MOVS     r5,#1
                  |L1.100|
;;;158    		}
;;;159    
;;;160    		/* Fill out the co-routine control block from the function parameters. */
;;;161    		pxCoRoutine->uxState = corINITIAL_STATE;
000064  2000              MOVS     r0,#0
000066  86a0              STRH     r0,[r4,#0x34]
;;;162    		pxCoRoutine->uxPriority = uxPriority;
000068  62e5              STR      r5,[r4,#0x2c]
;;;163    		pxCoRoutine->uxIndex = uxIndex;
00006a  f8c48030          STR      r8,[r4,#0x30]
;;;164    		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
00006e  6027              STR      r7,[r4,#0]
;;;165    
;;;166    		/* Initialise all the other co-routine control block parameters. */
;;;167    		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
000070  1d20              ADDS     r0,r4,#4
000072  f7fffffe          BL       vListInitialiseItem
;;;168    		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
000076  f1040018          ADD      r0,r4,#0x18
00007a  f7fffffe          BL       vListInitialiseItem
;;;169    
;;;170    		/* Set the co-routine control block as a link back from the xListItem.
;;;171    		This is so we can get back to the containing CRCB from a generic item
;;;172    		in a list. */
;;;173    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
00007e  6124              STR      r4,[r4,#0x10]
;;;174    		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
000080  6264              STR      r4,[r4,#0x24]
;;;175    
;;;176    		/* Event lists are always in priority order. */
;;;177    		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
000082  f1c5000a          RSB      r0,r5,#0xa
000086  61a0              STR      r0,[r4,#0x18]
;;;178    
;;;179    		/* Now the co-routine has been initialised it can be added to the ready
;;;180    		list at the correct priority. */
;;;181    		prvAddCoRoutineToReadyQueue( pxCoRoutine );
000088  4995              LDR      r1,|L1.736|
00008a  6ae0              LDR      r0,[r4,#0x2c]
00008c  6809              LDR      r1,[r1,#0]  ; uxTopCoRoutineReadyPriority
00008e  4288              CMP      r0,r1
000090  d902              BLS      |L1.152|
000092  4993              LDR      r1,|L1.736|
000094  6ae0              LDR      r0,[r4,#0x2c]
000096  6008              STR      r0,[r1,#0]  ; uxTopCoRoutineReadyPriority
                  |L1.152|
000098  6ae1              LDR      r1,[r4,#0x2c]
00009a  eb010181          ADD      r1,r1,r1,LSL #2
00009e  4a89              LDR      r2,|L1.708|
0000a0  eb020081          ADD      r0,r2,r1,LSL #2
0000a4  1d21              ADDS     r1,r4,#4
0000a6  f7fffffe          BL       vListInsertEnd
;;;182    
;;;183    		xReturn = pdPASS;
0000aa  2601              MOVS     r6,#1
0000ac  e001              B        |L1.178|
                  |L1.174|
;;;184    	}
;;;185    	else
;;;186    	{
;;;187    		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
0000ae  f04f36ff          MOV      r6,#0xffffffff
                  |L1.178|
;;;188    	}
;;;189    
;;;190    	return xReturn;
0000b2  4630              MOV      r0,r6
;;;191    }
0000b4  e8bd81f0          POP      {r4-r8,pc}
;;;192    /*-----------------------------------------------------------*/
                          ENDP

                  vCoRoutineAddToDelayedList PROC
;;;193    
;;;194    void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
0000b8  b570              PUSH     {r4-r6,lr}
;;;195    {
0000ba  4605              MOV      r5,r0
0000bc  460c              MOV      r4,r1
;;;196    portTickType xTimeToWake;
;;;197    
;;;198    	/* Calculate the time to wake - this may overflow but this is
;;;199    	not a problem. */
;;;200    	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
0000be  4889              LDR      r0,|L1.740|
0000c0  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
0000c2  1946              ADDS     r6,r0,r5
;;;201    
;;;202    	/* We must remove ourselves from the ready list before adding
;;;203    	ourselves to the blocked list as the same list item is used for
;;;204    	both lists. */
;;;205    	( void ) uxListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
0000c4  4885              LDR      r0,|L1.732|
0000c6  6800              LDR      r0,[r0,#0]  ; pxCurrentCoRoutine
0000c8  1d00              ADDS     r0,r0,#4
0000ca  f7fffffe          BL       uxListRemove
;;;206    
;;;207    	/* The list item will be inserted in wake time order. */
;;;208    	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
0000ce  4883              LDR      r0,|L1.732|
0000d0  6800              LDR      r0,[r0,#0]  ; pxCurrentCoRoutine
0000d2  6046              STR      r6,[r0,#4]
;;;209    
;;;210    	if( xTimeToWake < xCoRoutineTickCount )
0000d4  4883              LDR      r0,|L1.740|
0000d6  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
0000d8  4286              CMP      r6,r0
0000da  d207              BCS      |L1.236|
;;;211    	{
;;;212    		/* Wake time has overflowed.  Place this item in the
;;;213    		overflow list. */
;;;214    		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
0000dc  487f              LDR      r0,|L1.732|
0000de  6801              LDR      r1,[r0,#0]  ; pxCurrentCoRoutine
0000e0  1d09              ADDS     r1,r1,#4
0000e2  487d              LDR      r0,|L1.728|
0000e4  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedCoRoutineList
0000e6  f7fffffe          BL       vListInsert
0000ea  e006              B        |L1.250|
                  |L1.236|
;;;215    	}
;;;216    	else
;;;217    	{
;;;218    		/* The wake time has not overflowed, so we can use the
;;;219    		current block list. */
;;;220    		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
0000ec  487b              LDR      r0,|L1.732|
0000ee  6801              LDR      r1,[r0,#0]  ; pxCurrentCoRoutine
0000f0  1d09              ADDS     r1,r1,#4
0000f2  4878              LDR      r0,|L1.724|
0000f4  6800              LDR      r0,[r0,#0]  ; pxDelayedCoRoutineList
0000f6  f7fffffe          BL       vListInsert
                  |L1.250|
;;;221    	}
;;;222    
;;;223    	if( pxEventList )
0000fa  b12c              CBZ      r4,|L1.264|
;;;224    	{
;;;225    		/* Also add the co-routine to an event list.  If this is done then the
;;;226    		function must be called with interrupts disabled. */
;;;227    		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
0000fc  4877              LDR      r0,|L1.732|
0000fe  6801              LDR      r1,[r0,#0]  ; pxCurrentCoRoutine
000100  3118              ADDS     r1,r1,#0x18
000102  4620              MOV      r0,r4
000104  f7fffffe          BL       vListInsert
                  |L1.264|
;;;228    	}
;;;229    }
000108  bd70              POP      {r4-r6,pc}
;;;230    /*-----------------------------------------------------------*/
                          ENDP

                  prvCheckPendingReadyList PROC
;;;231    
;;;232    static void prvCheckPendingReadyList( void )
00010a  b510              PUSH     {r4,lr}
;;;233    {
;;;234    	/* Are there any co-routines waiting to get moved to the ready list?  These
;;;235    	are co-routines that have been readied by an ISR.  The ISR cannot access
;;;236    	the	ready lists itself. */
;;;237    	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
00010c  e020              B        |L1.336|
                  |L1.270|
;;;238    	{
;;;239    		corCRCB *pxUnblockedCRCB;
;;;240    
;;;241    		/* The pending ready list can be accessed by an ISR. */
;;;242    		portDISABLE_INTERRUPTS();
00010e  f7fffffe          BL       ulPortSetInterruptMask
;;;243    		{
;;;244    			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );
000112  486f              LDR      r0,|L1.720|
000114  68c0              LDR      r0,[r0,#0xc]
000116  68c4              LDR      r4,[r0,#0xc]
;;;245    			( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
000118  f1040018          ADD      r0,r4,#0x18
00011c  f7fffffe          BL       uxListRemove
;;;246    		}
;;;247    		portENABLE_INTERRUPTS();
000120  2000              MOVS     r0,#0
000122  f7fffffe          BL       vPortClearInterruptMask
;;;248    
;;;249    		( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
000126  1d20              ADDS     r0,r4,#4
000128  f7fffffe          BL       uxListRemove
;;;250    		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
00012c  496c              LDR      r1,|L1.736|
00012e  6ae0              LDR      r0,[r4,#0x2c]
000130  6809              LDR      r1,[r1,#0]  ; uxTopCoRoutineReadyPriority
000132  4288              CMP      r0,r1
000134  d902              BLS      |L1.316|
000136  496a              LDR      r1,|L1.736|
000138  6ae0              LDR      r0,[r4,#0x2c]
00013a  6008              STR      r0,[r1,#0]  ; uxTopCoRoutineReadyPriority
                  |L1.316|
00013c  6ae1              LDR      r1,[r4,#0x2c]
00013e  eb010181          ADD      r1,r1,r1,LSL #2
000142  4a60              LDR      r2,|L1.708|
000144  eb020081          ADD      r0,r2,r1,LSL #2
000148  1d21              ADDS     r1,r4,#4
00014a  f7fffffe          BL       vListInsertEnd
;;;251    	}
00014e  bf00              NOP      
                  |L1.336|
000150  485f              LDR      r0,|L1.720|
000152  6800              LDR      r0,[r0,#0]            ;237  ; xPendingReadyCoRoutineList
000154  b908              CBNZ     r0,|L1.346|
000156  2001              MOVS     r0,#1                 ;237
000158  e000              B        |L1.348|
                  |L1.346|
00015a  2000              MOVS     r0,#0                 ;237
                  |L1.348|
00015c  2800              CMP      r0,#0                 ;237
00015e  d0d6              BEQ      |L1.270|
;;;252    }
000160  bd10              POP      {r4,pc}
;;;253    /*-----------------------------------------------------------*/
                          ENDP

                  prvCheckDelayedList PROC
;;;254    
;;;255    static void prvCheckDelayedList( void )
000162  b510              PUSH     {r4,lr}
;;;256    {
;;;257    corCRCB *pxCRCB;
;;;258    
;;;259    	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
000164  f7fffffe          BL       xTaskGetTickCount
000168  495f              LDR      r1,|L1.744|
00016a  6809              LDR      r1,[r1,#0]  ; xLastTickCount
00016c  1a40              SUBS     r0,r0,r1
00016e  495f              LDR      r1,|L1.748|
000170  6008              STR      r0,[r1,#0]  ; xPassedTicks
;;;260    	while( xPassedTicks )
000172  e049              B        |L1.520|
                  |L1.372|
;;;261    	{
;;;262    		xCoRoutineTickCount++;
000174  485b              LDR      r0,|L1.740|
000176  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
000178  1c40              ADDS     r0,r0,#1
00017a  495a              LDR      r1,|L1.740|
00017c  6008              STR      r0,[r1,#0]  ; xCoRoutineTickCount
;;;263    		xPassedTicks--;
00017e  485b              LDR      r0,|L1.748|
000180  6800              LDR      r0,[r0,#0]  ; xPassedTicks
000182  1e40              SUBS     r0,r0,#1
000184  4959              LDR      r1,|L1.748|
000186  6008              STR      r0,[r1,#0]  ; xPassedTicks
;;;264    
;;;265    		/* If the tick count has overflowed we need to swap the ready lists. */
;;;266    		if( xCoRoutineTickCount == 0 )
000188  4856              LDR      r0,|L1.740|
00018a  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
00018c  b940              CBNZ     r0,|L1.416|
;;;267    		{
;;;268    			xList * pxTemp;
;;;269    
;;;270    			/* Tick count has overflowed so we need to swap the delay lists.  If there are
;;;271    			any items in pxDelayedCoRoutineList here then there is an error! */
;;;272    			pxTemp = pxDelayedCoRoutineList;
00018e  4951              LDR      r1,|L1.724|
000190  6808              LDR      r0,[r1,#0]  ; pxDelayedCoRoutineList
;;;273    			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
000192  4951              LDR      r1,|L1.728|
000194  6809              LDR      r1,[r1,#0]  ; pxOverflowDelayedCoRoutineList
000196  4a4f              LDR      r2,|L1.724|
000198  6011              STR      r1,[r2,#0]  ; pxDelayedCoRoutineList
;;;274    			pxOverflowDelayedCoRoutineList = pxTemp;
00019a  494f              LDR      r1,|L1.728|
00019c  6008              STR      r0,[r1,#0]  ; pxOverflowDelayedCoRoutineList
;;;275    		}
00019e  bf00              NOP      
                  |L1.416|
;;;276    
;;;277    		/* See if this tick has made a timeout expire. */
;;;278    		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
0001a0  e028              B        |L1.500|
                  |L1.418|
;;;279    		{
;;;280    			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
0001a2  484c              LDR      r0,|L1.724|
0001a4  6800              LDR      r0,[r0,#0]  ; pxDelayedCoRoutineList
0001a6  68c0              LDR      r0,[r0,#0xc]
0001a8  68c4              LDR      r4,[r0,#0xc]
;;;281    
;;;282    			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
0001aa  494e              LDR      r1,|L1.740|
0001ac  6860              LDR      r0,[r4,#4]
0001ae  6809              LDR      r1,[r1,#0]  ; xCoRoutineTickCount
0001b0  4288              CMP      r0,r1
0001b2  d900              BLS      |L1.438|
;;;283    			{
;;;284    				/* Timeout not yet expired. */
;;;285    				break;
0001b4  e027              B        |L1.518|
                  |L1.438|
;;;286    			}
;;;287    
;;;288    			portDISABLE_INTERRUPTS();
0001b6  f7fffffe          BL       ulPortSetInterruptMask
;;;289    			{
;;;290    				/* The event could have occurred just before this critical
;;;291    				section.  If this is the case then the generic list item will
;;;292    				have been moved to the pending ready list and the following
;;;293    				line is still valid.  Also the pvContainer parameter will have
;;;294    				been set to NULL so the following lines are also valid. */
;;;295    				uxListRemove( &( pxCRCB->xGenericListItem ) );
0001ba  1d20              ADDS     r0,r4,#4
0001bc  f7fffffe          BL       uxListRemove
;;;296    
;;;297    				/* Is the co-routine waiting on an event also? */
;;;298    				if( pxCRCB->xEventListItem.pvContainer )
0001c0  6aa0              LDR      r0,[r4,#0x28]
0001c2  b118              CBZ      r0,|L1.460|
;;;299    				{
;;;300    					( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
0001c4  f1040018          ADD      r0,r4,#0x18
0001c8  f7fffffe          BL       uxListRemove
                  |L1.460|
;;;301    				}
;;;302    			}
;;;303    			portENABLE_INTERRUPTS();
0001cc  2000              MOVS     r0,#0
0001ce  f7fffffe          BL       vPortClearInterruptMask
;;;304    
;;;305    			prvAddCoRoutineToReadyQueue( pxCRCB );
0001d2  4943              LDR      r1,|L1.736|
0001d4  6ae0              LDR      r0,[r4,#0x2c]
0001d6  6809              LDR      r1,[r1,#0]  ; uxTopCoRoutineReadyPriority
0001d8  4288              CMP      r0,r1
0001da  d902              BLS      |L1.482|
0001dc  4940              LDR      r1,|L1.736|
0001de  6ae0              LDR      r0,[r4,#0x2c]
0001e0  6008              STR      r0,[r1,#0]  ; uxTopCoRoutineReadyPriority
                  |L1.482|
0001e2  6ae1              LDR      r1,[r4,#0x2c]
0001e4  eb010181          ADD      r1,r1,r1,LSL #2
0001e8  4a36              LDR      r2,|L1.708|
0001ea  eb020081          ADD      r0,r2,r1,LSL #2
0001ee  1d21              ADDS     r1,r4,#4
0001f0  f7fffffe          BL       vListInsertEnd
                  |L1.500|
0001f4  4837              LDR      r0,|L1.724|
0001f6  6800              LDR      r0,[r0,#0]            ;278  ; pxDelayedCoRoutineList
0001f8  6800              LDR      r0,[r0,#0]            ;278
0001fa  b908              CBNZ     r0,|L1.512|
0001fc  2001              MOVS     r0,#1                 ;278
0001fe  e000              B        |L1.514|
                  |L1.512|
000200  2000              MOVS     r0,#0                 ;278
                  |L1.514|
000202  2800              CMP      r0,#0                 ;278
000204  d0cd              BEQ      |L1.418|
                  |L1.518|
000206  bf00              NOP                            ;285
                  |L1.520|
000208  4838              LDR      r0,|L1.748|
00020a  6800              LDR      r0,[r0,#0]            ;260  ; xPassedTicks
00020c  2800              CMP      r0,#0                 ;260
00020e  d1b1              BNE      |L1.372|
;;;306    		}
;;;307    	}
;;;308    
;;;309    	xLastTickCount = xCoRoutineTickCount;
000210  4834              LDR      r0,|L1.740|
000212  6800              LDR      r0,[r0,#0]  ; xCoRoutineTickCount
000214  4934              LDR      r1,|L1.744|
000216  6008              STR      r0,[r1,#0]  ; xLastTickCount
;;;310    }
000218  bd10              POP      {r4,pc}
;;;311    /*-----------------------------------------------------------*/
                          ENDP

                  vCoRoutineSchedule PROC
;;;312    
;;;313    void vCoRoutineSchedule( void )
00021a  b510              PUSH     {r4,lr}
;;;314    {
;;;315    	/* See if any co-routines readied by events need moving to the ready lists. */
;;;316    	prvCheckPendingReadyList();
00021c  f7fffffe          BL       prvCheckPendingReadyList
;;;317    
;;;318    	/* See if any delayed co-routines have timed out. */
;;;319    	prvCheckDelayedList();
000220  f7fffffe          BL       prvCheckDelayedList
;;;320    
;;;321    	/* Find the highest priority queue that contains ready co-routines. */
;;;322    	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
000224  e008              B        |L1.568|
                  |L1.550|
;;;323    	{
;;;324    		if( uxTopCoRoutineReadyPriority == 0 )
000226  482e              LDR      r0,|L1.736|
000228  6800              LDR      r0,[r0,#0]  ; uxTopCoRoutineReadyPriority
00022a  b900              CBNZ     r0,|L1.558|
                  |L1.556|
;;;325    		{
;;;326    			/* No more co-routines to check. */
;;;327    			return;
;;;328    		}
;;;329    		--uxTopCoRoutineReadyPriority;
;;;330    	}
;;;331    
;;;332    	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
;;;333    	 of the	same priority get an equal share of the processor time. */
;;;334    	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
;;;335    
;;;336    	/* Call the co-routine. */
;;;337    	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
;;;338    
;;;339    	return;
;;;340    }
00022c  bd10              POP      {r4,pc}
                  |L1.558|
00022e  482c              LDR      r0,|L1.736|
000230  6800              LDR      r0,[r0,#0]            ;329  ; uxTopCoRoutineReadyPriority
000232  1e40              SUBS     r0,r0,#1              ;329
000234  492a              LDR      r1,|L1.736|
000236  6008              STR      r0,[r1,#0]            ;329  ; uxTopCoRoutineReadyPriority
                  |L1.568|
000238  4829              LDR      r0,|L1.736|
00023a  6800              LDR      r0,[r0,#0]            ;322  ; uxTopCoRoutineReadyPriority
00023c  eb000080          ADD      r0,r0,r0,LSL #2       ;322
000240  4920              LDR      r1,|L1.708|
000242  f8510020          LDR      r0,[r1,r0,LSL #2]     ;322
000246  b908              CBNZ     r0,|L1.588|
000248  2001              MOVS     r0,#1                 ;322
00024a  e000              B        |L1.590|
                  |L1.588|
00024c  2000              MOVS     r0,#0                 ;322
                  |L1.590|
00024e  2800              CMP      r0,#0                 ;322
000250  d1e9              BNE      |L1.550|
000252  4923              LDR      r1,|L1.736|
000254  6809              LDR      r1,[r1,#0]            ;334  ; uxTopCoRoutineReadyPriority
000256  eb010181          ADD      r1,r1,r1,LSL #2       ;334
00025a  4a1a              LDR      r2,|L1.708|
00025c  eb020081          ADD      r0,r2,r1,LSL #2       ;334
000260  6841              LDR      r1,[r0,#4]            ;334
000262  6849              LDR      r1,[r1,#4]            ;334
000264  6041              STR      r1,[r0,#4]            ;334
000266  f1000108          ADD      r1,r0,#8              ;334
00026a  6842              LDR      r2,[r0,#4]            ;334
00026c  428a              CMP      r2,r1                 ;334
00026e  d102              BNE      |L1.630|
000270  6841              LDR      r1,[r0,#4]            ;334
000272  6849              LDR      r1,[r1,#4]            ;334
000274  6041              STR      r1,[r0,#4]            ;334
                  |L1.630|
000276  6841              LDR      r1,[r0,#4]            ;334
000278  68c9              LDR      r1,[r1,#0xc]          ;334
00027a  4a18              LDR      r2,|L1.732|
00027c  6011              STR      r1,[r2,#0]            ;334  ; pxCurrentCoRoutine
00027e  4610              MOV      r0,r2                 ;337
000280  6800              LDR      r0,[r0,#0]            ;337  ; pxCurrentCoRoutine
000282  6b01              LDR      r1,[r0,#0x30]         ;337
000284  4610              MOV      r0,r2                 ;337
000286  6800              LDR      r0,[r0,#0]            ;337  ; pxCurrentCoRoutine
000288  6802              LDR      r2,[r0,#0]            ;337
00028a  4814              LDR      r0,|L1.732|
00028c  6800              LDR      r0,[r0,#0]            ;337  ; pxCurrentCoRoutine
00028e  4790              BLX      r2                    ;337
000290  bf00              NOP                            ;339
000292  e7cb              B        |L1.556|
;;;341    /*-----------------------------------------------------------*/
                          ENDP

                  xCoRoutineRemoveFromEventList PROC
;;;362    
;;;363    signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
000294  b570              PUSH     {r4-r6,lr}
;;;364    {
000296  4606              MOV      r6,r0
;;;365    corCRCB *pxUnblockedCRCB;
;;;366    signed portBASE_TYPE xReturn;
;;;367    
;;;368    	/* This function is called from within an interrupt.  It can only access
;;;369    	event lists and the pending ready list.  This function assumes that a
;;;370    	check has already been made to ensure pxEventList is not empty. */
;;;371    	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000298  68f0              LDR      r0,[r6,#0xc]
00029a  68c4              LDR      r4,[r0,#0xc]
;;;372    	( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
00029c  f1040018          ADD      r0,r4,#0x18
0002a0  f7fffffe          BL       uxListRemove
;;;373    	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
0002a4  f1040118          ADD      r1,r4,#0x18
0002a8  4809              LDR      r0,|L1.720|
0002aa  f7fffffe          BL       vListInsertEnd
;;;374    
;;;375    	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
0002ae  490b              LDR      r1,|L1.732|
0002b0  6ae0              LDR      r0,[r4,#0x2c]
0002b2  6809              LDR      r1,[r1,#0]  ; pxCurrentCoRoutine
0002b4  6ac9              LDR      r1,[r1,#0x2c]
0002b6  4288              CMP      r0,r1
0002b8  d301              BCC      |L1.702|
;;;376    	{
;;;377    		xReturn = pdTRUE;
0002ba  2501              MOVS     r5,#1
0002bc  e000              B        |L1.704|
                  |L1.702|
;;;378    	}
;;;379    	else
;;;380    	{
;;;381    		xReturn = pdFALSE;
0002be  2500              MOVS     r5,#0
                  |L1.704|
;;;382    	}
;;;383    
;;;384    	return xReturn;
0002c0  4628              MOV      r0,r5
;;;385    }
0002c2  bd70              POP      {r4-r6,pc}
;;;386    
                          ENDP

                  |L1.708|
                          DCD      pxReadyCoRoutineLists
                  |L1.712|
                          DCD      xDelayedCoRoutineList1
                  |L1.716|
                          DCD      xDelayedCoRoutineList2
                  |L1.720|
                          DCD      xPendingReadyCoRoutineList
                  |L1.724|
                          DCD      pxDelayedCoRoutineList
                  |L1.728|
                          DCD      pxOverflowDelayedCoRoutineList
                  |L1.732|
                          DCD      pxCurrentCoRoutine
                  |L1.736|
                          DCD      uxTopCoRoutineReadyPriority
                  |L1.740|
                          DCD      xCoRoutineTickCount
                  |L1.744|
                          DCD      xLastTickCount
                  |L1.748|
                          DCD      xPassedTicks

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyCoRoutineLists
                          %        40
                  xDelayedCoRoutineList1
                          %        20
                  xDelayedCoRoutineList2
                          %        20
                  xPendingReadyCoRoutineList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentCoRoutine
                          DCD      0x00000000
                  uxTopCoRoutineReadyPriority
                          DCD      0x00000000
                  xCoRoutineTickCount
                          DCD      0x00000000
                  xLastTickCount
                          DCD      0x00000000
                  xPassedTicks
                          DCD      0x00000000
                  pxDelayedCoRoutineList
                          DCD      0x00000000
                  pxOverflowDelayedCoRoutineList
                          DCD      0x00000000
