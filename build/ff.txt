; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\ff.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\ff.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\ff.crf third_party\fatfs\src\ff.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  mem_cpy PROC
;;;538    static
;;;539    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;540    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;541    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;542    
;;;543    #if _WORD_ACCESS == 1
;;;544    	while (cnt >= sizeof (int)) {
;;;545    		*(int*)d = *(int*)s;
;;;546    		d += sizeof (int); s += sizeof (int);
;;;547    		cnt -= sizeof (int);
;;;548    	}
;;;549    #endif
;;;550    	while (cnt--)
000006  e003              B        |L1.16|
                  |L1.8|
;;;551    		*d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L1.16|
000010  0015              MOVS     r5,r2                 ;550
000012  f1a20201          SUB      r2,r2,#1              ;550
000016  d1f7              BNE      |L1.8|
;;;552    }
000018  bd70              POP      {r4-r6,pc}
;;;553    
                          ENDP

                  mem_set PROC
;;;555    static
;;;556    void mem_set (void* dst, int val, UINT cnt) {
00001a  b530              PUSH     {r4,r5,lr}
;;;557    	BYTE *d = (BYTE*)dst;
00001c  4603              MOV      r3,r0
;;;558    
;;;559    	while (cnt--)
00001e  e001              B        |L1.36|
                  |L1.32|
;;;560    		*d++ = (BYTE)val;
000020  f8031b01          STRB     r1,[r3],#1
                  |L1.36|
000024  0014              MOVS     r4,r2                 ;559
000026  f1a20201          SUB      r2,r2,#1              ;559
00002a  d1f9              BNE      |L1.32|
;;;561    }
00002c  bd30              POP      {r4,r5,pc}
;;;562    
                          ENDP

                  mem_cmp PROC
;;;564    static
;;;565    int mem_cmp (const void* dst, const void* src, UINT cnt) {
00002e  b5f0              PUSH     {r4-r7,lr}
000030  4603              MOV      r3,r0
;;;566    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000032  461c              MOV      r4,r3
000034  460d              MOV      r5,r1
;;;567    	int r = 0;
000036  2000              MOVS     r0,#0
;;;568    
;;;569    	while (cnt-- && (r = *d++ - *s++) == 0) ;
000038  bf00              NOP      
                  |L1.58|
00003a  0016              MOVS     r6,r2
00003c  f1a20201          SUB      r2,r2,#1
000040  d007              BEQ      |L1.82|
000042  f8147b01          LDRB     r7,[r4],#1
000046  f815cb01          LDRB     r12,[r5],#1
00004a  eba7060c          SUB      r6,r7,r12
00004e  0030              MOVS     r0,r6
000050  d0f3              BEQ      |L1.58|
                  |L1.82|
;;;570    	return r;
;;;571    }
000052  bdf0              POP      {r4-r7,pc}
;;;572    
                          ENDP

                  chk_chr PROC
;;;574    static
;;;575    int chk_chr (const char* str, int chr) {
000054  4602              MOV      r2,r0
;;;576    	while (*str && *str != chr) str++;
000056  e000              B        |L1.90|
                  |L1.88|
000058  1c52              ADDS     r2,r2,#1
                  |L1.90|
00005a  7810              LDRB     r0,[r2,#0]
00005c  b110              CBZ      r0,|L1.100|
00005e  7810              LDRB     r0,[r2,#0]
000060  4288              CMP      r0,r1
000062  d1f9              BNE      |L1.88|
                  |L1.100|
;;;577    	return *str;
000064  7810              LDRB     r0,[r2,#0]
;;;578    }
000066  4770              BX       lr
;;;579    
                          ENDP

                  sync_window PROC
;;;731    static
;;;732    FRESULT sync_window (
000068  b570              PUSH     {r4-r6,lr}
;;;733    	FATFS *fs		/* File system object */
;;;734    )
;;;735    {
00006a  4604              MOV      r4,r0
;;;736    	DWORD wsect;
;;;737    	UINT nf;
;;;738    
;;;739    	
;;;740    	if (fs->wflag) {	/* Write back the sector if it is dirty */
00006c  7920              LDRB     r0,[r4,#4]
00006e  b310              CBZ      r0,|L1.182|
;;;741    		wsect = fs->winsect;	/* Current sector number */
000070  6b25              LDR      r5,[r4,#0x30]
;;;742    		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
000072  7860              LDRB     r0,[r4,#1]
000074  2301              MOVS     r3,#1
000076  462a              MOV      r2,r5
000078  f1040134          ADD      r1,r4,#0x34
00007c  f7fffffe          BL       disk_write
000080  b108              CBZ      r0,|L1.134|
;;;743    			return FR_DISK_ERR;
000082  2001              MOVS     r0,#1
                  |L1.132|
;;;744    		fs->wflag = 0;
;;;745    		if (wsect >= fs->fatbase && wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area? */
;;;746    			for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
;;;747    				wsect += fs->fsize;
;;;748    				disk_write(fs->drv, fs->win, wsect, 1);
;;;749    			}
;;;750    		}
;;;751    	}
;;;752    	return FR_OK;
;;;753    }
000084  bd70              POP      {r4-r6,pc}
                  |L1.134|
000086  2000              MOVS     r0,#0                 ;744
000088  7120              STRB     r0,[r4,#4]            ;744
00008a  6a60              LDR      r0,[r4,#0x24]         ;745
00008c  42a8              CMP      r0,r5                 ;745
00008e  d812              BHI      |L1.182|
000090  69e1              LDR      r1,[r4,#0x1c]         ;745
000092  6a60              LDR      r0,[r4,#0x24]         ;745
000094  4408              ADD      r0,r0,r1              ;745
000096  42a8              CMP      r0,r5                 ;745
000098  d90d              BLS      |L1.182|
00009a  78e6              LDRB     r6,[r4,#3]            ;746
00009c  e009              B        |L1.178|
                  |L1.158|
00009e  69e0              LDR      r0,[r4,#0x1c]         ;747
0000a0  4405              ADD      r5,r5,r0              ;747
0000a2  7860              LDRB     r0,[r4,#1]            ;748
0000a4  2301              MOVS     r3,#1                 ;748
0000a6  462a              MOV      r2,r5                 ;748
0000a8  f1040134          ADD      r1,r4,#0x34           ;748
0000ac  f7fffffe          BL       disk_write
0000b0  1e76              SUBS     r6,r6,#1              ;746
                  |L1.178|
0000b2  2e02              CMP      r6,#2                 ;746
0000b4  d2f3              BCS      |L1.158|
                  |L1.182|
0000b6  2000              MOVS     r0,#0                 ;752
0000b8  e7e4              B        |L1.132|
;;;754    #endif
                          ENDP

                  move_window PROC
;;;757    static
;;;758    FRESULT move_window (
0000ba  b570              PUSH     {r4-r6,lr}
;;;759    	FATFS *fs,		/* File system object */
;;;760    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;761    )
;;;762    {
0000bc  4604              MOV      r4,r0
0000be  460d              MOV      r5,r1
;;;763    	if (sector != fs->winsect) {	/* Changed current window */
0000c0  6b20              LDR      r0,[r4,#0x30]
0000c2  42a8              CMP      r0,r5
0000c4  d010              BEQ      |L1.232|
;;;764    #if !_FS_READONLY
;;;765    		if (sync_window(fs) != FR_OK)
0000c6  4620              MOV      r0,r4
0000c8  f7fffffe          BL       sync_window
0000cc  b108              CBZ      r0,|L1.210|
;;;766    			return FR_DISK_ERR;
0000ce  2001              MOVS     r0,#1
                  |L1.208|
;;;767    #endif
;;;768    		if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
;;;769    			return FR_DISK_ERR;
;;;770    		fs->winsect = sector;
;;;771    	}
;;;772    
;;;773    	return FR_OK;
;;;774    }
0000d0  bd70              POP      {r4-r6,pc}
                  |L1.210|
0000d2  7860              LDRB     r0,[r4,#1]            ;768
0000d4  2301              MOVS     r3,#1                 ;768
0000d6  462a              MOV      r2,r5                 ;768
0000d8  f1040134          ADD      r1,r4,#0x34           ;768
0000dc  f7fffffe          BL       disk_read
0000e0  b108              CBZ      r0,|L1.230|
0000e2  2001              MOVS     r0,#1                 ;769
0000e4  e7f4              B        |L1.208|
                  |L1.230|
0000e6  6325              STR      r5,[r4,#0x30]         ;770
                  |L1.232|
0000e8  2000              MOVS     r0,#0                 ;773
0000ea  e7f1              B        |L1.208|
;;;775    
                          ENDP

                  sync_fs PROC
;;;783    static
;;;784    FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
0000ec  b570              PUSH     {r4-r6,lr}
;;;785    	FATFS *fs		/* File system object */
;;;786    )
;;;787    {
0000ee  4604              MOV      r4,r0
;;;788    	FRESULT res;
;;;789    
;;;790    
;;;791    	res = sync_window(fs);
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       sync_window
0000f6  4605              MOV      r5,r0
;;;792    	if (res == FR_OK) {
0000f8  2d00              CMP      r5,#0
0000fa  d159              BNE      |L1.432|
;;;793    		/* Update FSInfo sector if needed */
;;;794    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
0000fc  7820              LDRB     r0,[r4,#0]
0000fe  2803              CMP      r0,#3
000100  d14f              BNE      |L1.418|
000102  7960              LDRB     r0,[r4,#5]
000104  2800              CMP      r0,#0
000106  d04c              BEQ      |L1.418|
;;;795    			fs->winsect = 0;
000108  2000              MOVS     r0,#0
00010a  6320              STR      r0,[r4,#0x30]
;;;796    			/* Create FSInfo structure */
;;;797    			mem_set(fs->win, 0, 512);
00010c  f44f7200          MOV      r2,#0x200
000110  2100              MOVS     r1,#0
000112  f1040034          ADD      r0,r4,#0x34
000116  f7fffffe          BL       mem_set
;;;798    			ST_WORD(fs->win+BS_55AA, 0xAA55);
00011a  2155              MOVS     r1,#0x55
00011c  f8841232          STRB     r1,[r4,#0x232]
000120  21aa              MOVS     r1,#0xaa
000122  f8841233          STRB     r1,[r4,#0x233]
;;;799    			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
000126  2052              MOVS     r0,#0x52
000128  f8840034          STRB     r0,[r4,#0x34]
00012c  2152              MOVS     r1,#0x52
00012e  2035              MOVS     r0,#0x35
000130  5501              STRB     r1,[r0,r4]
000132  2161              MOVS     r1,#0x61
000134  2036              MOVS     r0,#0x36
000136  5501              STRB     r1,[r0,r4]
000138  2141              MOVS     r1,#0x41
00013a  2037              MOVS     r0,#0x37
00013c  5501              STRB     r1,[r0,r4]
;;;800    			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
00013e  2172              MOVS     r1,#0x72
000140  f8841218          STRB     r1,[r4,#0x218]
000144  f8841219          STRB     r1,[r4,#0x219]
000148  2141              MOVS     r1,#0x41
00014a  f884121a          STRB     r1,[r4,#0x21a]
00014e  2161              MOVS     r1,#0x61
000150  f884121b          STRB     r1,[r4,#0x21b]
;;;801    			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
000154  7c21              LDRB     r1,[r4,#0x10]
000156  f884121c          STRB     r1,[r4,#0x21c]
00015a  8a20              LDRH     r0,[r4,#0x10]
00015c  0a01              LSRS     r1,r0,#8
00015e  f884121d          STRB     r1,[r4,#0x21d]
000162  6920              LDR      r0,[r4,#0x10]
000164  0c01              LSRS     r1,r0,#16
000166  f884121e          STRB     r1,[r4,#0x21e]
00016a  6920              LDR      r0,[r4,#0x10]
00016c  0e01              LSRS     r1,r0,#24
00016e  f884121f          STRB     r1,[r4,#0x21f]
;;;802    			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
000172  7b21              LDRB     r1,[r4,#0xc]
000174  f8841220          STRB     r1,[r4,#0x220]
000178  89a0              LDRH     r0,[r4,#0xc]
00017a  0a01              LSRS     r1,r0,#8
00017c  f8841221          STRB     r1,[r4,#0x221]
000180  68e0              LDR      r0,[r4,#0xc]
000182  0c01              LSRS     r1,r0,#16
000184  f8841222          STRB     r1,[r4,#0x222]
000188  68e0              LDR      r0,[r4,#0xc]
00018a  0e01              LSRS     r1,r0,#24
00018c  f8841223          STRB     r1,[r4,#0x223]
;;;803    			/* Write it into the FSInfo sector */
;;;804    			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
000190  7860              LDRB     r0,[r4,#1]
000192  2301              MOVS     r3,#1
000194  f1040134          ADD      r1,r4,#0x34
000198  6962              LDR      r2,[r4,#0x14]
00019a  f7fffffe          BL       disk_write
;;;805    			fs->fsi_flag = 0;
00019e  2000              MOVS     r0,#0
0001a0  7160              STRB     r0,[r4,#5]
                  |L1.418|
;;;806    		}
;;;807    		/* Make sure that no pending write process in the physical drive */
;;;808    		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
0001a2  7860              LDRB     r0,[r4,#1]
0001a4  2200              MOVS     r2,#0
0001a6  4611              MOV      r1,r2
0001a8  f7fffffe          BL       disk_ioctl
0001ac  b100              CBZ      r0,|L1.432|
;;;809    			res = FR_DISK_ERR;
0001ae  2501              MOVS     r5,#1
                  |L1.432|
;;;810    	}
;;;811    
;;;812    	return res;
0001b0  4628              MOV      r0,r5
;;;813    }
0001b2  bd70              POP      {r4-r6,pc}
;;;814    #endif
                          ENDP

                  clust2sect PROC
;;;823    
;;;824    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
0001b4  4602              MOV      r2,r0
;;;825    	FATFS *fs,		/* File system object */
;;;826    	DWORD clst		/* Cluster# to be converted */
;;;827    )
;;;828    {
;;;829    	clst -= 2;
0001b6  1e89              SUBS     r1,r1,#2
;;;830    	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
0001b8  6990              LDR      r0,[r2,#0x18]
0001ba  1e80              SUBS     r0,r0,#2
0001bc  4288              CMP      r0,r1
0001be  d801              BHI      |L1.452|
0001c0  2000              MOVS     r0,#0
                  |L1.450|
;;;831    	return clst * fs->csize + fs->database;
;;;832    }
0001c2  4770              BX       lr
                  |L1.452|
0001c4  7893              LDRB     r3,[r2,#2]            ;831
0001c6  6ad0              LDR      r0,[r2,#0x2c]         ;831
0001c8  fb010003          MLA      r0,r1,r3,r0           ;831
0001cc  e7f9              B        |L1.450|
;;;833    
                          ENDP

                  get_fat PROC
;;;841    
;;;842    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
0001ce  e92d41f0          PUSH     {r4-r8,lr}
;;;843    	FATFS *fs,	/* File system object */
;;;844    	DWORD clst	/* Cluster# to get the link information */
;;;845    )
;;;846    {
0001d2  4605              MOV      r5,r0
0001d4  460c              MOV      r4,r1
;;;847    	UINT wc, bc;
;;;848    	BYTE *p;
;;;849    
;;;850    
;;;851    	if (clst < 2 || clst >= fs->n_fatent)	/* Check range */
0001d6  2c02              CMP      r4,#2
0001d8  d302              BCC      |L1.480|
0001da  69a8              LDR      r0,[r5,#0x18]
0001dc  42a0              CMP      r0,r4
0001de  d802              BHI      |L1.486|
                  |L1.480|
;;;852    		return 1;
0001e0  2001              MOVS     r0,#1
                  |L1.482|
;;;853    
;;;854    	switch (fs->fs_type) {
;;;855    	case FS_FAT12 :
;;;856    		bc = (UINT)clst; bc += bc / 2;
;;;857    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;858    		wc = fs->win[bc % SS(fs)]; bc++;
;;;859    		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
;;;860    		wc |= fs->win[bc % SS(fs)] << 8;
;;;861    		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
;;;862    
;;;863    	case FS_FAT16 :
;;;864    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
;;;865    		p = &fs->win[clst * 2 % SS(fs)];
;;;866    		return LD_WORD(p);
;;;867    
;;;868    	case FS_FAT32 :
;;;869    		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
;;;870    		p = &fs->win[clst * 4 % SS(fs)];
;;;871    		return LD_DWORD(p) & 0x0FFFFFFF;
;;;872    	}
;;;873    
;;;874    	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
;;;875    }
0001e2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.486|
0001e6  7828              LDRB     r0,[r5,#0]            ;854
0001e8  2801              CMP      r0,#1                 ;854
0001ea  d004              BEQ      |L1.502|
0001ec  2802              CMP      r0,#2                 ;854
0001ee  d02c              BEQ      |L1.586|
0001f0  2803              CMP      r0,#3                 ;854
0001f2  d15a              BNE      |L1.682|
0001f4  e03d              B        |L1.626|
                  |L1.502|
0001f6  4627              MOV      r7,r4                 ;856
0001f8  eb070757          ADD      r7,r7,r7,LSR #1       ;856
0001fc  6a68              LDR      r0,[r5,#0x24]         ;857
0001fe  eb002157          ADD      r1,r0,r7,LSR #9       ;857
000202  4628              MOV      r0,r5                 ;857
000204  f7fffffe          BL       move_window
000208  b100              CBZ      r0,|L1.524|
00020a  e04e              B        |L1.682|
                  |L1.524|
00020c  f3c70108          UBFX     r1,r7,#0,#9           ;858
000210  f1050034          ADD      r0,r5,#0x34           ;858
000214  f8108001          LDRB     r8,[r0,r1]            ;858
000218  1c7f              ADDS     r7,r7,#1              ;858
00021a  6a68              LDR      r0,[r5,#0x24]         ;859
00021c  eb002157          ADD      r1,r0,r7,LSR #9       ;859
000220  4628              MOV      r0,r5                 ;859
000222  f7fffffe          BL       move_window
000226  b100              CBZ      r0,|L1.554|
000228  e03f              B        |L1.682|
                  |L1.554|
00022a  f3c70108          UBFX     r1,r7,#0,#9           ;860
00022e  f1050034          ADD      r0,r5,#0x34           ;860
000232  5c40              LDRB     r0,[r0,r1]            ;860
000234  ea482800          ORR      r8,r8,r0,LSL #8       ;860
000238  f0140f01          TST      r4,#1                 ;861
00023c  d002              BEQ      |L1.580|
00023e  ea4f1018          LSR      r0,r8,#4              ;861
000242  e7ce              B        |L1.482|
                  |L1.580|
000244  f3c8000b          UBFX     r0,r8,#0,#12          ;861
000248  e7cb              B        |L1.482|
                  |L1.586|
00024a  6a68              LDR      r0,[r5,#0x24]         ;864
00024c  eb002114          ADD      r1,r0,r4,LSR #8       ;864
000250  4628              MOV      r0,r5                 ;864
000252  f7fffffe          BL       move_window
000256  b100              CBZ      r0,|L1.602|
000258  e027              B        |L1.682|
                  |L1.602|
00025a  f24010ff          MOV      r0,#0x1ff             ;865
00025e  ea000144          AND      r1,r0,r4,LSL #1       ;865
000262  f1050034          ADD      r0,r5,#0x34           ;865
000266  180e              ADDS     r6,r1,r0              ;865
000268  7830              LDRB     r0,[r6,#0]            ;866
00026a  7871              LDRB     r1,[r6,#1]            ;866
00026c  ea402001          ORR      r0,r0,r1,LSL #8       ;866
000270  e7b7              B        |L1.482|
                  |L1.626|
000272  6a68              LDR      r0,[r5,#0x24]         ;869
000274  eb0011d4          ADD      r1,r0,r4,LSR #7       ;869
000278  4628              MOV      r0,r5                 ;869
00027a  f7fffffe          BL       move_window
00027e  b100              CBZ      r0,|L1.642|
000280  e013              B        |L1.682|
                  |L1.642|
000282  f24010ff          MOV      r0,#0x1ff             ;870
000286  ea000184          AND      r1,r0,r4,LSL #2       ;870
00028a  f1050034          ADD      r0,r5,#0x34           ;870
00028e  180e              ADDS     r6,r1,r0              ;870
000290  78f0              LDRB     r0,[r6,#3]            ;871
000292  0600              LSLS     r0,r0,#24             ;871
000294  78b1              LDRB     r1,[r6,#2]            ;871
000296  ea404001          ORR      r0,r0,r1,LSL #16      ;871
00029a  7871              LDRB     r1,[r6,#1]            ;871
00029c  ea402001          ORR      r0,r0,r1,LSL #8       ;871
0002a0  7831              LDRB     r1,[r6,#0]            ;871
0002a2  4308              ORRS     r0,r0,r1              ;871
0002a4  f0204070          BIC      r0,r0,#0xf0000000     ;871
0002a8  e79b              B        |L1.482|
                  |L1.682|
0002aa  bf00              NOP                            ;857
0002ac  f04f30ff          MOV      r0,#0xffffffff        ;874
0002b0  e797              B        |L1.482|
;;;876    
                          ENDP

                  put_fat PROC
;;;884    
;;;885    FRESULT put_fat (
0002b2  e92d47f0          PUSH     {r4-r10,lr}
;;;886    	FATFS *fs,	/* File system object */
;;;887    	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
;;;888    	DWORD val	/* New value to mark the cluster */
;;;889    )
;;;890    {
0002b6  4605              MOV      r5,r0
0002b8  460e              MOV      r6,r1
0002ba  4617              MOV      r7,r2
;;;891    	UINT bc;
;;;892    	BYTE *p;
;;;893    	FRESULT res;
;;;894    
;;;895    
;;;896    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
0002bc  2e02              CMP      r6,#2
0002be  d302              BCC      |L1.710|
0002c0  69a8              LDR      r0,[r5,#0x18]
0002c2  42b0              CMP      r0,r6
0002c4  d802              BHI      |L1.716|
                  |L1.710|
;;;897    		res = FR_INT_ERR;
0002c6  f04f0802          MOV      r8,#2
0002ca  e08c              B        |L1.998|
                  |L1.716|
;;;898    
;;;899    	} else {
;;;900    		switch (fs->fs_type) {
0002cc  7828              LDRB     r0,[r5,#0]
0002ce  2801              CMP      r0,#1
0002d0  d004              BEQ      |L1.732|
0002d2  2802              CMP      r0,#2
0002d4  d043              BEQ      |L1.862|
0002d6  2803              CMP      r0,#3
0002d8  d17f              BNE      |L1.986|
0002da  e056              B        |L1.906|
                  |L1.732|
;;;901    		case FS_FAT12 :
;;;902    			bc = (UINT)clst; bc += bc / 2;
0002dc  46b1              MOV      r9,r6
0002de  eb090959          ADD      r9,r9,r9,LSR #1
;;;903    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
0002e2  6a68              LDR      r0,[r5,#0x24]
0002e4  eb002159          ADD      r1,r0,r9,LSR #9
0002e8  4628              MOV      r0,r5
0002ea  f7fffffe          BL       move_window
0002ee  4680              MOV      r8,r0
;;;904    			if (res != FR_OK) break;
0002f0  f1b80f00          CMP      r8,#0
0002f4  d000              BEQ      |L1.760|
0002f6  e073              B        |L1.992|
                  |L1.760|
;;;905    			p = &fs->win[bc % SS(fs)];
0002f8  f3c90108          UBFX     r1,r9,#0,#9
0002fc  f1050034          ADD      r0,r5,#0x34
000300  180c              ADDS     r4,r1,r0
;;;906    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
000302  f0160f01          TST      r6,#1
000306  d004              BEQ      |L1.786|
000308  b2f9              UXTB     r1,r7
00030a  7820              LDRB     r0,[r4,#0]
00030c  f361101f          BFI      r0,r1,#4,#28
000310  e000              B        |L1.788|
                  |L1.786|
000312  4638              MOV      r0,r7
                  |L1.788|
000314  7020              STRB     r0,[r4,#0]
;;;907    			bc++;
000316  f1090901          ADD      r9,r9,#1
;;;908    			fs->wflag = 1;
00031a  2001              MOVS     r0,#1
00031c  7128              STRB     r0,[r5,#4]
;;;909    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00031e  6a68              LDR      r0,[r5,#0x24]
000320  eb002159          ADD      r1,r0,r9,LSR #9
000324  4628              MOV      r0,r5
000326  f7fffffe          BL       move_window
00032a  4680              MOV      r8,r0
;;;910    			if (res != FR_OK) break;
00032c  f1b80f00          CMP      r8,#0
000330  d000              BEQ      |L1.820|
000332  e055              B        |L1.992|
                  |L1.820|
;;;911    			p = &fs->win[bc % SS(fs)];
000334  f3c90108          UBFX     r1,r9,#0,#9
000338  f1050034          ADD      r0,r5,#0x34
00033c  180c              ADDS     r4,r1,r0
;;;912    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00033e  f0160f01          TST      r6,#1
000342  d002              BEQ      |L1.842|
000344  f3c71007          UBFX     r0,r7,#4,#8
000348  e007              B        |L1.858|
                  |L1.842|
00034a  7820              LDRB     r0,[r4,#0]
00034c  f00000f0          AND      r0,r0,#0xf0
000350  f3c72107          UBFX     r1,r7,#8,#8
000354  f001010f          AND      r1,r1,#0xf
000358  4308              ORRS     r0,r0,r1
                  |L1.858|
00035a  7020              STRB     r0,[r4,#0]
;;;913    			break;
00035c  e040              B        |L1.992|
                  |L1.862|
;;;914    
;;;915    		case FS_FAT16 :
;;;916    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
00035e  6a68              LDR      r0,[r5,#0x24]
000360  eb002116          ADD      r1,r0,r6,LSR #8
000364  4628              MOV      r0,r5
000366  f7fffffe          BL       move_window
00036a  4680              MOV      r8,r0
;;;917    			if (res != FR_OK) break;
00036c  f1b80f00          CMP      r8,#0
000370  d000              BEQ      |L1.884|
000372  e035              B        |L1.992|
                  |L1.884|
;;;918    			p = &fs->win[clst * 2 % SS(fs)];
000374  f24010ff          MOV      r0,#0x1ff
000378  ea000146          AND      r1,r0,r6,LSL #1
00037c  f1050034          ADD      r0,r5,#0x34
000380  180c              ADDS     r4,r1,r0
;;;919    			ST_WORD(p, (WORD)val);
000382  7027              STRB     r7,[r4,#0]
000384  0a38              LSRS     r0,r7,#8
000386  7060              STRB     r0,[r4,#1]
;;;920    			break;
000388  e02a              B        |L1.992|
                  |L1.906|
;;;921    
;;;922    		case FS_FAT32 :
;;;923    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
00038a  6a68              LDR      r0,[r5,#0x24]
00038c  eb0011d6          ADD      r1,r0,r6,LSR #7
000390  4628              MOV      r0,r5
000392  f7fffffe          BL       move_window
000396  4680              MOV      r8,r0
;;;924    			if (res != FR_OK) break;
000398  f1b80f00          CMP      r8,#0
00039c  d000              BEQ      |L1.928|
00039e  e01f              B        |L1.992|
                  |L1.928|
;;;925    			p = &fs->win[clst * 4 % SS(fs)];
0003a0  f24010ff          MOV      r0,#0x1ff
0003a4  ea000186          AND      r1,r0,r6,LSL #2
0003a8  f1050034          ADD      r0,r5,#0x34
0003ac  180c              ADDS     r4,r1,r0
;;;926    			val |= LD_DWORD(p) & 0xF0000000;
0003ae  78e0              LDRB     r0,[r4,#3]
0003b0  0600              LSLS     r0,r0,#24
0003b2  78a1              LDRB     r1,[r4,#2]
0003b4  ea404001          ORR      r0,r0,r1,LSL #16
0003b8  7861              LDRB     r1,[r4,#1]
0003ba  ea402001          ORR      r0,r0,r1,LSL #8
0003be  7821              LDRB     r1,[r4,#0]
0003c0  4308              ORRS     r0,r0,r1
0003c2  f0004070          AND      r0,r0,#0xf0000000
0003c6  4307              ORRS     r7,r7,r0
;;;927    			ST_DWORD(p, val);
0003c8  7027              STRB     r7,[r4,#0]
0003ca  0a38              LSRS     r0,r7,#8
0003cc  7060              STRB     r0,[r4,#1]
0003ce  0c38              LSRS     r0,r7,#16
0003d0  70a0              STRB     r0,[r4,#2]
0003d2  0e38              LSRS     r0,r7,#24
0003d4  70e0              STRB     r0,[r4,#3]
;;;928    			break;
0003d6  e003              B        |L1.992|
0003d8  e7ff              B        |L1.986|
                  |L1.986|
;;;929    
;;;930    		default :
;;;931    			res = FR_INT_ERR;
0003da  f04f0802          MOV      r8,#2
0003de  bf00              NOP                            ;900
                  |L1.992|
0003e0  bf00              NOP                            ;904
;;;932    		}
;;;933    		fs->wflag = 1;
0003e2  2001              MOVS     r0,#1
0003e4  7128              STRB     r0,[r5,#4]
                  |L1.998|
;;;934    	}
;;;935    
;;;936    	return res;
0003e6  4640              MOV      r0,r8
;;;937    }
0003e8  e8bd87f0          POP      {r4-r10,pc}
;;;938    #endif /* !_FS_READONLY */
                          ENDP

                  remove_chain PROC
;;;947    static
;;;948    FRESULT remove_chain (
0003ec  e92d41f0          PUSH     {r4-r8,lr}
;;;949    	FATFS *fs,			/* File system object */
;;;950    	DWORD clst			/* Cluster# to remove a chain from */
;;;951    )
;;;952    {
0003f0  4604              MOV      r4,r0
0003f2  460e              MOV      r6,r1
;;;953    	FRESULT res;
;;;954    	DWORD nxt;
;;;955    #if _USE_ERASE
;;;956    	DWORD scl = clst, ecl = clst, rt[2];
;;;957    #endif
;;;958    
;;;959    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
0003f4  2e02              CMP      r6,#2
0003f6  d302              BCC      |L1.1022|
0003f8  69a0              LDR      r0,[r4,#0x18]
0003fa  42b0              CMP      r0,r6
0003fc  d801              BHI      |L1.1026|
                  |L1.1022|
;;;960    		res = FR_INT_ERR;
0003fe  2702              MOVS     r7,#2
000400  e025              B        |L1.1102|
                  |L1.1026|
;;;961    
;;;962    	} else {
;;;963    		res = FR_OK;
000402  2700              MOVS     r7,#0
;;;964    		while (clst < fs->n_fatent) {			/* Not a last link? */
000404  e01f              B        |L1.1094|
                  |L1.1030|
;;;965    			nxt = get_fat(fs, clst);			/* Get cluster status */
000406  4631              MOV      r1,r6
000408  4620              MOV      r0,r4
00040a  f7fffffe          BL       get_fat
00040e  4605              MOV      r5,r0
;;;966    			if (nxt == 0) break;				/* Empty cluster? */
000410  b905              CBNZ     r5,|L1.1044|
000412  e01b              B        |L1.1100|
                  |L1.1044|
;;;967    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000414  2d01              CMP      r5,#1
000416  d101              BNE      |L1.1052|
000418  2702              MOVS     r7,#2
00041a  e017              B        |L1.1100|
                  |L1.1052|
;;;968    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
00041c  1c68              ADDS     r0,r5,#1
00041e  d101              BNE      |L1.1060|
000420  2701              MOVS     r7,#1
000422  e013              B        |L1.1100|
                  |L1.1060|
;;;969    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000424  2200              MOVS     r2,#0
000426  4631              MOV      r1,r6
000428  4620              MOV      r0,r4
00042a  f7fffffe          BL       put_fat
00042e  4607              MOV      r7,r0
;;;970    			if (res != FR_OK) break;
000430  b107              CBZ      r7,|L1.1076|
000432  e00b              B        |L1.1100|
                  |L1.1076|
;;;971    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
000434  6920              LDR      r0,[r4,#0x10]
000436  1c40              ADDS     r0,r0,#1
000438  d004              BEQ      |L1.1092|
;;;972    				fs->free_clust++;
00043a  6920              LDR      r0,[r4,#0x10]
00043c  1c40              ADDS     r0,r0,#1
00043e  6120              STR      r0,[r4,#0x10]
;;;973    				fs->fsi_flag = 1;
000440  2001              MOVS     r0,#1
000442  7160              STRB     r0,[r4,#5]
                  |L1.1092|
;;;974    			}
;;;975    #if _USE_ERASE
;;;976    			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
;;;977    				ecl = nxt;
;;;978    			} else {				/* End of contiguous clusters */ 
;;;979    				rt[0] = clust2sect(fs, scl);					/* Start sector */
;;;980    				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
;;;981    				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, rt);		/* Erase the block */
;;;982    				scl = ecl = nxt;
;;;983    			}
;;;984    #endif
;;;985    			clst = nxt;	/* Next cluster */
000444  462e              MOV      r6,r5
                  |L1.1094|
000446  69a0              LDR      r0,[r4,#0x18]         ;964
000448  42b0              CMP      r0,r6                 ;964
00044a  d8dc              BHI      |L1.1030|
                  |L1.1100|
00044c  bf00              NOP                            ;966
                  |L1.1102|
;;;986    		}
;;;987    	}
;;;988    
;;;989    	return res;
00044e  4638              MOV      r0,r7
;;;990    }
000450  e8bd81f0          POP      {r4-r8,pc}
;;;991    #endif
                          ENDP

                  create_chain PROC
;;;1000   static
;;;1001   DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000454  e92d47f0          PUSH     {r4-r10,lr}
;;;1002   	FATFS *fs,			/* File system object */
;;;1003   	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;1004   )
;;;1005   {
000458  4604              MOV      r4,r0
00045a  4689              MOV      r9,r1
;;;1006   	DWORD cs, ncl, scl;
;;;1007   	FRESULT res;
;;;1008   
;;;1009   
;;;1010   	if (clst == 0) {		/* Create a new chain */
00045c  f1b90f00          CMP      r9,#0
000460  d106              BNE      |L1.1136|
;;;1011   		scl = fs->last_clust;			/* Get suggested start point */
000462  68e7              LDR      r7,[r4,#0xc]
;;;1012   		if (!scl || scl >= fs->n_fatent) scl = 1;
000464  b117              CBZ      r7,|L1.1132|
000466  69a0              LDR      r0,[r4,#0x18]
000468  42b8              CMP      r0,r7
00046a  d811              BHI      |L1.1168|
                  |L1.1132|
00046c  2701              MOVS     r7,#1
00046e  e00f              B        |L1.1168|
                  |L1.1136|
;;;1013   	}
;;;1014   	else {					/* Stretch the current chain */
;;;1015   		cs = get_fat(fs, clst);			/* Check the cluster status */
000470  4649              MOV      r1,r9
000472  4620              MOV      r0,r4
000474  f7fffffe          BL       get_fat
000478  4606              MOV      r6,r0
;;;1016   		if (cs < 2) return 1;			/* It is an invalid cluster */
00047a  2e02              CMP      r6,#2
00047c  d202              BCS      |L1.1156|
00047e  2001              MOVS     r0,#1
                  |L1.1152|
;;;1017   		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;1018   		scl = clst;
;;;1019   	}
;;;1020   
;;;1021   	ncl = scl;				/* Start cluster */
;;;1022   	for (;;) {
;;;1023   		ncl++;							/* Next cluster */
;;;1024   		if (ncl >= fs->n_fatent) {		/* Wrap around */
;;;1025   			ncl = 2;
;;;1026   			if (ncl > scl) return 0;	/* No free cluster */
;;;1027   		}
;;;1028   		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;1029   		if (cs == 0) break;				/* Found a free cluster */
;;;1030   		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;1031   			return cs;
;;;1032   		if (ncl == scl) return 0;		/* No free cluster */
;;;1033   	}
;;;1034   
;;;1035   	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;1036   	if (res == FR_OK && clst != 0) {
;;;1037   		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;1038   	}
;;;1039   	if (res == FR_OK) {
;;;1040   		fs->last_clust = ncl;			/* Update FSINFO */
;;;1041   		if (fs->free_clust != 0xFFFFFFFF) {
;;;1042   			fs->free_clust--;
;;;1043   			fs->fsi_flag = 1;
;;;1044   		}
;;;1045   	} else {
;;;1046   		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;1047   	}
;;;1048   
;;;1049   	return ncl;		/* Return new cluster number or error code */
;;;1050   }
000480  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1156|
000484  69a0              LDR      r0,[r4,#0x18]         ;1017
000486  42b0              CMP      r0,r6                 ;1017
000488  d901              BLS      |L1.1166|
00048a  4630              MOV      r0,r6                 ;1017
00048c  e7f8              B        |L1.1152|
                  |L1.1166|
00048e  464f              MOV      r7,r9                 ;1018
                  |L1.1168|
000490  463d              MOV      r5,r7                 ;1021
000492  bf00              NOP                            ;1022
                  |L1.1172|
000494  1c6d              ADDS     r5,r5,#1              ;1023
000496  69a0              LDR      r0,[r4,#0x18]         ;1024
000498  42a8              CMP      r0,r5                 ;1024
00049a  d804              BHI      |L1.1190|
00049c  2502              MOVS     r5,#2                 ;1025
00049e  42bd              CMP      r5,r7                 ;1026
0004a0  d901              BLS      |L1.1190|
0004a2  2000              MOVS     r0,#0                 ;1026
0004a4  e7ec              B        |L1.1152|
                  |L1.1190|
0004a6  4629              MOV      r1,r5                 ;1028
0004a8  4620              MOV      r0,r4                 ;1028
0004aa  f7fffffe          BL       get_fat
0004ae  4606              MOV      r6,r0                 ;1028
0004b0  b906              CBNZ     r6,|L1.1204|
0004b2  e009              B        |L1.1224|
                  |L1.1204|
0004b4  1c70              ADDS     r0,r6,#1              ;1030
0004b6  d001              BEQ      |L1.1212|
0004b8  2e01              CMP      r6,#1                 ;1030
0004ba  d101              BNE      |L1.1216|
                  |L1.1212|
0004bc  4630              MOV      r0,r6                 ;1031
0004be  e7df              B        |L1.1152|
                  |L1.1216|
0004c0  42bd              CMP      r5,r7                 ;1032
0004c2  d1e7              BNE      |L1.1172|
0004c4  2000              MOVS     r0,#0                 ;1032
0004c6  e7db              B        |L1.1152|
                  |L1.1224|
0004c8  bf00              NOP                            ;1029
0004ca  f06f4270          MVN      r2,#0xf0000000        ;1035
0004ce  4629              MOV      r1,r5                 ;1035
0004d0  4620              MOV      r0,r4                 ;1035
0004d2  f7fffffe          BL       put_fat
0004d6  4680              MOV      r8,r0                 ;1035
0004d8  f1b80f00          CMP      r8,#0                 ;1036
0004dc  d108              BNE      |L1.1264|
0004de  f1b90f00          CMP      r9,#0                 ;1036
0004e2  d005              BEQ      |L1.1264|
0004e4  462a              MOV      r2,r5                 ;1037
0004e6  4649              MOV      r1,r9                 ;1037
0004e8  4620              MOV      r0,r4                 ;1037
0004ea  f7fffffe          BL       put_fat
0004ee  4680              MOV      r8,r0                 ;1037
                  |L1.1264|
0004f0  f1b80f00          CMP      r8,#0                 ;1039
0004f4  d109              BNE      |L1.1290|
0004f6  60e5              STR      r5,[r4,#0xc]          ;1040
0004f8  6920              LDR      r0,[r4,#0x10]         ;1041
0004fa  1c40              ADDS     r0,r0,#1              ;1041
0004fc  d00d              BEQ      |L1.1306|
0004fe  6920              LDR      r0,[r4,#0x10]         ;1042
000500  1e40              SUBS     r0,r0,#1              ;1042
000502  6120              STR      r0,[r4,#0x10]         ;1042
000504  2001              MOVS     r0,#1                 ;1043
000506  7160              STRB     r0,[r4,#5]            ;1043
000508  e007              B        |L1.1306|
                  |L1.1290|
00050a  f1b80f01          CMP      r8,#1                 ;1046
00050e  d102              BNE      |L1.1302|
000510  f04f30ff          MOV      r0,#0xffffffff        ;1046
000514  e000              B        |L1.1304|
                  |L1.1302|
000516  2001              MOVS     r0,#1                 ;1046
                  |L1.1304|
000518  4605              MOV      r5,r0                 ;1046
                  |L1.1306|
00051a  4628              MOV      r0,r5                 ;1049
00051c  e7b0              B        |L1.1152|
;;;1051   #endif /* !_FS_READONLY */
                          ENDP

                  dir_sdi PROC
;;;1087   static
;;;1088   FRESULT dir_sdi (
00051e  e92d41f0          PUSH     {r4-r8,lr}
;;;1089   	DIR *dj,		/* Pointer to directory object */
;;;1090   	WORD idx		/* Index of directory table */
;;;1091   )
;;;1092   {
000522  4604              MOV      r4,r0
000524  460e              MOV      r6,r1
;;;1093   	DWORD clst;
;;;1094   	WORD ic;
;;;1095   
;;;1096   
;;;1097   	dj->index = idx;
000526  80e6              STRH     r6,[r4,#6]
;;;1098   	clst = dj->sclust;
000528  68a5              LDR      r5,[r4,#8]
;;;1099   	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
00052a  2d01              CMP      r5,#1
00052c  d003              BEQ      |L1.1334|
00052e  6820              LDR      r0,[r4,#0]
000530  6980              LDR      r0,[r0,#0x18]
000532  42a8              CMP      r0,r5
000534  d802              BHI      |L1.1340|
                  |L1.1334|
;;;1100   		return FR_INT_ERR;
000536  2002              MOVS     r0,#2
                  |L1.1336|
;;;1101   	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1102   		clst = dj->fs->dirbase;
;;;1103   
;;;1104   	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
;;;1105   		dj->clust = clst;
;;;1106   		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
;;;1107   			return FR_INT_ERR;
;;;1108   		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
;;;1109   	}
;;;1110   	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
;;;1111   		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
;;;1112   		while (idx >= ic) {	/* Follow cluster chain */
;;;1113   			clst = get_fat(dj->fs, clst);				/* Get next cluster */
;;;1114   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1115   			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
;;;1116   				return FR_INT_ERR;
;;;1117   			idx -= ic;
;;;1118   		}
;;;1119   		dj->clust = clst;
;;;1120   		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
;;;1121   	}
;;;1122   
;;;1123   	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
;;;1124   
;;;1125   	return FR_OK;	/* Seek succeeded */
;;;1126   }
000538  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1340|
00053c  b92d              CBNZ     r5,|L1.1354|
00053e  6820              LDR      r0,[r4,#0]            ;1101
000540  7800              LDRB     r0,[r0,#0]            ;1101
000542  2803              CMP      r0,#3                 ;1101
000544  d101              BNE      |L1.1354|
000546  6820              LDR      r0,[r4,#0]            ;1102
000548  6a85              LDR      r5,[r0,#0x28]         ;1102
                  |L1.1354|
00054a  b965              CBNZ     r5,|L1.1382|
00054c  60e5              STR      r5,[r4,#0xc]          ;1105
00054e  6820              LDR      r0,[r4,#0]            ;1106
000550  8900              LDRH     r0,[r0,#8]            ;1106
000552  42b0              CMP      r0,r6                 ;1106
000554  dc01              BGT      |L1.1370|
000556  2002              MOVS     r0,#2                 ;1107
000558  e7ee              B        |L1.1336|
                  |L1.1370|
00055a  6820              LDR      r0,[r4,#0]            ;1108
00055c  6a80              LDR      r0,[r0,#0x28]         ;1108
00055e  eb001016          ADD      r0,r0,r6,LSR #4       ;1108
000562  6120              STR      r0,[r4,#0x10]         ;1108
000564  e020              B        |L1.1448|
                  |L1.1382|
000566  6820              LDR      r0,[r4,#0]            ;1111
000568  7880              LDRB     r0,[r0,#2]            ;1111
00056a  0107              LSLS     r7,r0,#4              ;1111
00056c  e012              B        |L1.1428|
                  |L1.1390|
00056e  4629              MOV      r1,r5                 ;1113
000570  6820              LDR      r0,[r4,#0]            ;1113
000572  f7fffffe          BL       get_fat
000576  4605              MOV      r5,r0                 ;1113
000578  1c68              ADDS     r0,r5,#1              ;1114
00057a  d101              BNE      |L1.1408|
00057c  2001              MOVS     r0,#1                 ;1114
00057e  e7db              B        |L1.1336|
                  |L1.1408|
000580  2d02              CMP      r5,#2                 ;1115
000582  d303              BCC      |L1.1420|
000584  6820              LDR      r0,[r4,#0]            ;1115
000586  6980              LDR      r0,[r0,#0x18]         ;1115
000588  42a8              CMP      r0,r5                 ;1115
00058a  d801              BHI      |L1.1424|
                  |L1.1420|
00058c  2002              MOVS     r0,#2                 ;1116
00058e  e7d3              B        |L1.1336|
                  |L1.1424|
000590  1bf0              SUBS     r0,r6,r7              ;1117
000592  b286              UXTH     r6,r0                 ;1117
                  |L1.1428|
000594  42be              CMP      r6,r7                 ;1112
000596  daea              BGE      |L1.1390|
000598  60e5              STR      r5,[r4,#0xc]          ;1119
00059a  4629              MOV      r1,r5                 ;1120
00059c  6820              LDR      r0,[r4,#0]            ;1120
00059e  f7fffffe          BL       clust2sect
0005a2  eb001016          ADD      r0,r0,r6,LSR #4       ;1120
0005a6  6120              STR      r0,[r4,#0x10]         ;1120
                  |L1.1448|
0005a8  6820              LDR      r0,[r4,#0]            ;1123
0005aa  3034              ADDS     r0,r0,#0x34           ;1123
0005ac  f006010f          AND      r1,r6,#0xf            ;1123
0005b0  eb001041          ADD      r0,r0,r1,LSL #5       ;1123
0005b4  6160              STR      r0,[r4,#0x14]         ;1123
0005b6  2000              MOVS     r0,#0                 ;1125
0005b8  e7be              B        |L1.1336|
;;;1127   
                          ENDP

                  dir_next PROC
;;;1135   static
;;;1136   FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
0005ba  e92d41f0          PUSH     {r4-r8,lr}
;;;1137   	DIR *dj,		/* Pointer to the directory object */
;;;1138   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1139   )
;;;1140   {
0005be  4604              MOV      r4,r0
0005c0  4688              MOV      r8,r1
;;;1141   	DWORD clst;
;;;1142   	WORD i;
;;;1143   
;;;1144   
;;;1145   	stretch = stretch;		/* To suppress warning on read-only cfg. */
0005c2  bf00              NOP      
;;;1146   	i = dj->index + 1;
0005c4  88e0              LDRH     r0,[r4,#6]
0005c6  1c40              ADDS     r0,r0,#1
0005c8  b286              UXTH     r6,r0
;;;1147   	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
0005ca  b10e              CBZ      r6,|L1.1488|
0005cc  6920              LDR      r0,[r4,#0x10]
0005ce  b910              CBNZ     r0,|L1.1494|
                  |L1.1488|
;;;1148   		return FR_NO_FILE;
0005d0  2004              MOVS     r0,#4
                  |L1.1490|
;;;1149   
;;;1150   	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
;;;1151   		dj->sect++;					/* Next sector */
;;;1152   
;;;1153   		if (dj->clust == 0) {	/* Static table */
;;;1154   			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
;;;1155   				return FR_NO_FILE;
;;;1156   		}
;;;1157   		else {					/* Dynamic table */
;;;1158   			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1159   				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
;;;1160   				if (clst <= 1) return FR_INT_ERR;
;;;1161   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1162   				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
;;;1163   #if !_FS_READONLY
;;;1164   					BYTE c;
;;;1165   					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
;;;1166   					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
;;;1167   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1168   					if (clst == 1) return FR_INT_ERR;
;;;1169   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1170   					/* Clean-up stretched table */
;;;1171   					if (sync_window(dj->fs)) return FR_DISK_ERR;	/* Flush active window */
;;;1172   					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
;;;1173   					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
;;;1174   					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1175   						dj->fs->wflag = 1;
;;;1176   						if (sync_window(dj->fs)) return FR_DISK_ERR;
;;;1177   						dj->fs->winsect++;
;;;1178   					}
;;;1179   					dj->fs->winsect -= c;						/* Rewind window address */
;;;1180   #else
;;;1181   					return FR_NO_FILE;			/* Report EOT */
;;;1182   #endif
;;;1183   				}
;;;1184   				dj->clust = clst;				/* Initialize data for new cluster */
;;;1185   				dj->sect = clust2sect(dj->fs, clst);
;;;1186   			}
;;;1187   		}
;;;1188   	}
;;;1189   
;;;1190   	dj->index = i;
;;;1191   	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
;;;1192   
;;;1193   	return FR_OK;
;;;1194   }
0005d2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1494|
0005d6  f0160f0f          TST      r6,#0xf               ;1150
0005da  d16c              BNE      |L1.1718|
0005dc  6920              LDR      r0,[r4,#0x10]         ;1151
0005de  1c40              ADDS     r0,r0,#1              ;1151
0005e0  6120              STR      r0,[r4,#0x10]         ;1151
0005e2  68e0              LDR      r0,[r4,#0xc]          ;1153
0005e4  b928              CBNZ     r0,|L1.1522|
0005e6  6820              LDR      r0,[r4,#0]            ;1154
0005e8  8900              LDRH     r0,[r0,#8]            ;1154
0005ea  42b0              CMP      r0,r6                 ;1154
0005ec  dc63              BGT      |L1.1718|
0005ee  2004              MOVS     r0,#4                 ;1155
0005f0  e7ef              B        |L1.1490|
                  |L1.1522|
0005f2  6820              LDR      r0,[r4,#0]            ;1158
0005f4  7880              LDRB     r0,[r0,#2]            ;1158
0005f6  1e40              SUBS     r0,r0,#1              ;1158
0005f8  ea101f16          TST      r0,r6,LSR #4          ;1158
0005fc  d15b              BNE      |L1.1718|
0005fe  68e1              LDR      r1,[r4,#0xc]          ;1159
000600  6820              LDR      r0,[r4,#0]            ;1159
000602  f7fffffe          BL       get_fat
000606  4605              MOV      r5,r0                 ;1159
000608  2d01              CMP      r5,#1                 ;1160
00060a  d801              BHI      |L1.1552|
00060c  2002              MOVS     r0,#2                 ;1160
00060e  e7e0              B        |L1.1490|
                  |L1.1552|
000610  1c68              ADDS     r0,r5,#1              ;1161
000612  d101              BNE      |L1.1560|
000614  2001              MOVS     r0,#1                 ;1161
000616  e7dc              B        |L1.1490|
                  |L1.1560|
000618  6820              LDR      r0,[r4,#0]            ;1162
00061a  6980              LDR      r0,[r0,#0x18]         ;1162
00061c  42a8              CMP      r0,r5                 ;1162
00061e  d844              BHI      |L1.1706|
000620  f1b80f00          CMP      r8,#0                 ;1165
000624  d101              BNE      |L1.1578|
000626  2004              MOVS     r0,#4                 ;1165
000628  e7d3              B        |L1.1490|
                  |L1.1578|
00062a  68e1              LDR      r1,[r4,#0xc]          ;1166
00062c  6820              LDR      r0,[r4,#0]            ;1166
00062e  f7fffffe          BL       create_chain
000632  4605              MOV      r5,r0                 ;1166
000634  b90d              CBNZ     r5,|L1.1594|
000636  2007              MOVS     r0,#7                 ;1167
000638  e7cb              B        |L1.1490|
                  |L1.1594|
00063a  2d01              CMP      r5,#1                 ;1168
00063c  d101              BNE      |L1.1602|
00063e  2002              MOVS     r0,#2                 ;1168
000640  e7c7              B        |L1.1490|
                  |L1.1602|
000642  1c68              ADDS     r0,r5,#1              ;1169
000644  d101              BNE      |L1.1610|
000646  2001              MOVS     r0,#1                 ;1169
000648  e7c3              B        |L1.1490|
                  |L1.1610|
00064a  6820              LDR      r0,[r4,#0]            ;1171
00064c  f7fffffe          BL       sync_window
000650  b108              CBZ      r0,|L1.1622|
000652  2001              MOVS     r0,#1                 ;1171
000654  e7bd              B        |L1.1490|
                  |L1.1622|
000656  6821              LDR      r1,[r4,#0]            ;1172
000658  f1010034          ADD      r0,r1,#0x34           ;1172
00065c  f44f7200          MOV      r2,#0x200             ;1172
000660  2100              MOVS     r1,#0                 ;1172
000662  f7fffffe          BL       mem_set
000666  4629              MOV      r1,r5                 ;1173
000668  6820              LDR      r0,[r4,#0]            ;1173
00066a  f7fffffe          BL       clust2sect
00066e  6821              LDR      r1,[r4,#0]            ;1173
000670  6308              STR      r0,[r1,#0x30]         ;1173
000672  2700              MOVS     r7,#0                 ;1174
000674  e00f              B        |L1.1686|
                  |L1.1654|
000676  2001              MOVS     r0,#1                 ;1175
000678  6821              LDR      r1,[r4,#0]            ;1175
00067a  7108              STRB     r0,[r1,#4]            ;1175
00067c  6820              LDR      r0,[r4,#0]            ;1176
00067e  f7fffffe          BL       sync_window
000682  b108              CBZ      r0,|L1.1672|
000684  2001              MOVS     r0,#1                 ;1176
000686  e7a4              B        |L1.1490|
                  |L1.1672|
000688  6820              LDR      r0,[r4,#0]            ;1177
00068a  6b00              LDR      r0,[r0,#0x30]         ;1177
00068c  1c40              ADDS     r0,r0,#1              ;1177
00068e  6821              LDR      r1,[r4,#0]            ;1177
000690  6308              STR      r0,[r1,#0x30]         ;1177
000692  1c78              ADDS     r0,r7,#1              ;1174
000694  b2c7              UXTB     r7,r0                 ;1174
                  |L1.1686|
000696  6820              LDR      r0,[r4,#0]            ;1174
000698  7880              LDRB     r0,[r0,#2]            ;1174
00069a  42b8              CMP      r0,r7                 ;1174
00069c  dceb              BGT      |L1.1654|
00069e  6820              LDR      r0,[r4,#0]            ;1179
0006a0  6b00              LDR      r0,[r0,#0x30]         ;1179
0006a2  1bc0              SUBS     r0,r0,r7              ;1179
0006a4  6821              LDR      r1,[r4,#0]            ;1179
0006a6  6308              STR      r0,[r1,#0x30]         ;1179
0006a8  bf00              NOP                            ;1183
                  |L1.1706|
0006aa  60e5              STR      r5,[r4,#0xc]          ;1184
0006ac  4629              MOV      r1,r5                 ;1185
0006ae  6820              LDR      r0,[r4,#0]            ;1185
0006b0  f7fffffe          BL       clust2sect
0006b4  6120              STR      r0,[r4,#0x10]         ;1185
                  |L1.1718|
0006b6  80e6              STRH     r6,[r4,#6]            ;1190
0006b8  6820              LDR      r0,[r4,#0]            ;1191
0006ba  3034              ADDS     r0,r0,#0x34           ;1191
0006bc  f006010f          AND      r1,r6,#0xf            ;1191
0006c0  eb001041          ADD      r0,r0,r1,LSL #5       ;1191
0006c4  6160              STR      r0,[r4,#0x14]         ;1191
0006c6  2000              MOVS     r0,#0                 ;1193
0006c8  e783              B        |L1.1490|
;;;1195   
                          ENDP

                  dir_alloc PROC
;;;1204   static
;;;1205   FRESULT dir_alloc (
0006ca  e92d41f0          PUSH     {r4-r8,lr}
;;;1206   	DIR* dj,	/* Pointer to the directory object */
;;;1207   	UINT nent	/* Number of contiguous entries to allocate (1-21) */
;;;1208   )
;;;1209   {
0006ce  4604              MOV      r4,r0
0006d0  460e              MOV      r6,r1
;;;1210   	FRESULT res;
;;;1211   	UINT n;
;;;1212   
;;;1213   
;;;1214   	res = dir_sdi(dj, 0);
0006d2  2100              MOVS     r1,#0
0006d4  4620              MOV      r0,r4
0006d6  f7fffffe          BL       dir_sdi
0006da  4605              MOV      r5,r0
;;;1215   	if (res == FR_OK) {
0006dc  b9ed              CBNZ     r5,|L1.1818|
;;;1216   		n = 0;
0006de  2700              MOVS     r7,#0
;;;1217   		do {
0006e0  bf00              NOP      
                  |L1.1762|
;;;1218   			res = move_window(dj->fs, dj->sect);
0006e2  6921              LDR      r1,[r4,#0x10]
0006e4  6820              LDR      r0,[r4,#0]
0006e6  f7fffffe          BL       move_window
0006ea  4605              MOV      r5,r0
;;;1219   			if (res != FR_OK) break;
0006ec  b105              CBZ      r5,|L1.1776|
0006ee  e013              B        |L1.1816|
                  |L1.1776|
;;;1220   			if (dj->dir[0] == DDE || dj->dir[0] == 0) {	/* Is it a blank entry? */
0006f0  6960              LDR      r0,[r4,#0x14]
0006f2  7800              LDRB     r0,[r0,#0]
0006f4  28e5              CMP      r0,#0xe5
0006f6  d002              BEQ      |L1.1790|
0006f8  6960              LDR      r0,[r4,#0x14]
0006fa  7800              LDRB     r0,[r0,#0]
0006fc  b920              CBNZ     r0,|L1.1800|
                  |L1.1790|
;;;1221   				if (++n == nent) break;	/* A block of contiguous entry is found */
0006fe  1c78              ADDS     r0,r7,#1
000700  4607              MOV      r7,r0
000702  42b0              CMP      r0,r6
000704  d101              BNE      |L1.1802|
000706  e007              B        |L1.1816|
                  |L1.1800|
;;;1222   			} else {
;;;1223   				n = 0;					/* Not a blank entry. Restart to search */
000708  2700              MOVS     r7,#0
                  |L1.1802|
;;;1224   			}
;;;1225   			res = dir_next(dj, 1);		/* Next entry with table stretch enabled */
00070a  2101              MOVS     r1,#1
00070c  4620              MOV      r0,r4
00070e  f7fffffe          BL       dir_next
000712  4605              MOV      r5,r0
;;;1226   		} while (res == FR_OK);
000714  2d00              CMP      r5,#0
000716  d0e4              BEQ      |L1.1762|
                  |L1.1816|
000718  bf00              NOP                            ;1219
                  |L1.1818|
;;;1227   	}
;;;1228   	return res;
00071a  4628              MOV      r0,r5
;;;1229   }
00071c  e8bd81f0          POP      {r4-r8,pc}
;;;1230   #endif
                          ENDP

                  ld_clust PROC
;;;1238   static
;;;1239   DWORD ld_clust (
000720  b510              PUSH     {r4,lr}
;;;1240   	FATFS *fs,	/* Pointer to the fs object */
;;;1241   	BYTE *dir	/* Pointer to the directory entry */
;;;1242   )
;;;1243   {
000722  4602              MOV      r2,r0
;;;1244   	DWORD cl;
;;;1245   
;;;1246   	cl = LD_WORD(dir+DIR_FstClusLO);
000724  7e8c              LDRB     r4,[r1,#0x1a]
000726  7ecb              LDRB     r3,[r1,#0x1b]
000728  ea442003          ORR      r0,r4,r3,LSL #8
;;;1247   	if (fs->fs_type == FS_FAT32)
00072c  7813              LDRB     r3,[r2,#0]
00072e  2b03              CMP      r3,#3
000730  d105              BNE      |L1.1854|
;;;1248   		cl |= (DWORD)LD_WORD(dir+DIR_FstClusHI) << 16;
000732  7d0c              LDRB     r4,[r1,#0x14]
000734  7d4b              LDRB     r3,[r1,#0x15]
000736  ea442303          ORR      r3,r4,r3,LSL #8
00073a  ea404003          ORR      r0,r0,r3,LSL #16
                  |L1.1854|
;;;1249   
;;;1250   	return cl;
;;;1251   }
00073e  bd10              POP      {r4,pc}
;;;1252   
                          ENDP

                  st_clust PROC
;;;1255   static
;;;1256   void st_clust (
000740  7681              STRB     r1,[r0,#0x1a]
;;;1257   	BYTE *dir,	/* Pointer to the directory entry */
;;;1258   	DWORD cl	/* Value to be set */
;;;1259   )
;;;1260   {
;;;1261   	ST_WORD(dir+DIR_FstClusLO, cl);
000742  0a0b              LSRS     r3,r1,#8
000744  76c3              STRB     r3,[r0,#0x1b]
;;;1262   	ST_WORD(dir+DIR_FstClusHI, cl >> 16);
000746  0c0a              LSRS     r2,r1,#16
000748  7502              STRB     r2,[r0,#0x14]
00074a  0e0b              LSRS     r3,r1,#24
00074c  7543              STRB     r3,[r0,#0x15]
;;;1263   }
00074e  4770              BX       lr
;;;1264   #endif
                          ENDP

                  dir_find PROC
;;;1444   static
;;;1445   FRESULT dir_find (
000750  e92d41f0          PUSH     {r4-r8,lr}
;;;1446   	DIR *dj			/* Pointer to the directory object linked to the file name */
;;;1447   )
;;;1448   {
000754  4604              MOV      r4,r0
;;;1449   	FRESULT res;
;;;1450   	BYTE c, *dir;
;;;1451   #if _USE_LFN
;;;1452   	BYTE a, ord, sum;
;;;1453   #endif
;;;1454   
;;;1455   	res = dir_sdi(dj, 0);			/* Rewind directory object */
000756  2100              MOVS     r1,#0
000758  4620              MOV      r0,r4
00075a  f7fffffe          BL       dir_sdi
00075e  4605              MOV      r5,r0
;;;1456   	if (res != FR_OK) return res;
000760  b115              CBZ      r5,|L1.1896|
000762  4628              MOV      r0,r5
                  |L1.1892|
;;;1457   
;;;1458   #if _USE_LFN
;;;1459   	ord = sum = 0xFF;
;;;1460   #endif
;;;1461   	do {
;;;1462   		res = move_window(dj->fs, dj->sect);
;;;1463   		if (res != FR_OK) break;
;;;1464   		dir = dj->dir;					/* Ptr to the directory entry of current index */
;;;1465   		c = dir[DIR_Name];
;;;1466   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1467   #if _USE_LFN	/* LFN configuration */
;;;1468   		a = dir[DIR_Attr] & AM_MASK;
;;;1469   		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1470   			ord = 0xFF;
;;;1471   		} else {
;;;1472   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1473   				if (dj->lfn) {
;;;1474   					if (c & LLE) {		/* Is it start of LFN sequence? */
;;;1475   						sum = dir[LDIR_Chksum];
;;;1476   						c &= ~LLE; ord = c;	/* LFN start order */
;;;1477   						dj->lfn_idx = dj->index;
;;;1478   					}
;;;1479   					/* Check validity of the LFN entry and compare it with given name */
;;;1480   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1481   				}
;;;1482   			} else {					/* An SFN entry is found */
;;;1483   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1484   				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1485   				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
;;;1486   			}
;;;1487   		}
;;;1488   #else		/* Non LFN configuration */
;;;1489   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
;;;1490   			break;
;;;1491   #endif
;;;1492   		res = dir_next(dj, 0);		/* Next entry */
;;;1493   	} while (res == FR_OK);
;;;1494   
;;;1495   	return res;
;;;1496   }
000764  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1896|
000768  bf00              NOP                            ;1461
                  |L1.1898|
00076a  6921              LDR      r1,[r4,#0x10]         ;1462
00076c  6820              LDR      r0,[r4,#0]            ;1462
00076e  f7fffffe          BL       move_window
000772  4605              MOV      r5,r0                 ;1462
000774  b105              CBZ      r5,|L1.1912|
000776  e016              B        |L1.1958|
                  |L1.1912|
000778  6966              LDR      r6,[r4,#0x14]         ;1464
00077a  7837              LDRB     r7,[r6,#0]            ;1465
00077c  b90f              CBNZ     r7,|L1.1922|
00077e  2504              MOVS     r5,#4                 ;1466
000780  e011              B        |L1.1958|
                  |L1.1922|
000782  7af0              LDRB     r0,[r6,#0xb]          ;1489
000784  f0100f08          TST      r0,#8                 ;1489
000788  d106              BNE      |L1.1944|
00078a  220b              MOVS     r2,#0xb               ;1489
00078c  4630              MOV      r0,r6                 ;1489
00078e  69a1              LDR      r1,[r4,#0x18]         ;1489
000790  f7fffffe          BL       mem_cmp
000794  b900              CBNZ     r0,|L1.1944|
000796  e006              B        |L1.1958|
                  |L1.1944|
000798  2100              MOVS     r1,#0                 ;1492
00079a  4620              MOV      r0,r4                 ;1492
00079c  f7fffffe          BL       dir_next
0007a0  4605              MOV      r5,r0                 ;1492
0007a2  2d00              CMP      r5,#0                 ;1493
0007a4  d0e1              BEQ      |L1.1898|
                  |L1.1958|
0007a6  bf00              NOP                            ;1463
0007a8  4628              MOV      r0,r5                 ;1495
0007aa  e7db              B        |L1.1892|
;;;1497   
                          ENDP

                  dir_read PROC
;;;1505   static
;;;1506   FRESULT dir_read (
0007ac  e92d47f0          PUSH     {r4-r10,lr}
;;;1507   	DIR *dj,		/* Pointer to the directory object */
;;;1508   	int vol			/* Filtered by 0:file/dir or 1:volume label */
;;;1509   )
;;;1510   {
0007b0  4604              MOV      r4,r0
0007b2  4689              MOV      r9,r1
;;;1511   	FRESULT res;
;;;1512   	BYTE a, c, *dir;
;;;1513   #if _USE_LFN
;;;1514   	BYTE ord = 0xFF, sum = 0xFF;
;;;1515   #endif
;;;1516   
;;;1517   	res = FR_NO_FILE;
0007b4  2504              MOVS     r5,#4
;;;1518   	while (dj->sect) {
0007b6  e026              B        |L1.2054|
                  |L1.1976|
;;;1519   		res = move_window(dj->fs, dj->sect);
0007b8  6921              LDR      r1,[r4,#0x10]
0007ba  6820              LDR      r0,[r4,#0]
0007bc  f7fffffe          BL       move_window
0007c0  4605              MOV      r5,r0
;;;1520   		if (res != FR_OK) break;
0007c2  b105              CBZ      r5,|L1.1990|
0007c4  e022              B        |L1.2060|
                  |L1.1990|
;;;1521   		dir = dj->dir;					/* Ptr to the directory entry of current index */
0007c6  f8d48014          LDR      r8,[r4,#0x14]
;;;1522   		c = dir[DIR_Name];
0007ca  f8986000          LDRB     r6,[r8,#0]
;;;1523   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
0007ce  b90e              CBNZ     r6,|L1.2004|
0007d0  2504              MOVS     r5,#4
0007d2  e01b              B        |L1.2060|
                  |L1.2004|
;;;1524   		a = dir[DIR_Attr] & AM_MASK;
0007d4  f898000b          LDRB     r0,[r8,#0xb]
0007d8  f000073f          AND      r7,r0,#0x3f
;;;1525   #if _USE_LFN	/* LFN configuration */
;;;1526   		if (c == DDE || (!_FS_RPATH && c == '.') || (a == AM_VOL) != vol) {	/* An entry without valid data */
;;;1527   			ord = 0xFF;
;;;1528   		} else {
;;;1529   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1530   				if (c & LLE) {			/* Is it start of LFN sequence? */
;;;1531   					sum = dir[LDIR_Chksum];
;;;1532   					c &= ~LLE; ord = c;
;;;1533   					dj->lfn_idx = dj->index;
;;;1534   				}
;;;1535   				/* Check LFN validity and capture it */
;;;1536   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
;;;1537   			} else {					/* An SFN entry is found */
;;;1538   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
;;;1539   					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
;;;1540   				break;
;;;1541   			}
;;;1542   		}
;;;1543   #else		/* Non LFN configuration */
;;;1544   		if (c != DDE && (_FS_RPATH || c != '.') && a != AM_LFN && (a == AM_VOL) == vol)	/* Is it a valid entry? */
0007dc  2ee5              CMP      r6,#0xe5
0007de  d00b              BEQ      |L1.2040|
0007e0  2e2e              CMP      r6,#0x2e
0007e2  d009              BEQ      |L1.2040|
0007e4  2f0f              CMP      r7,#0xf
0007e6  d007              BEQ      |L1.2040|
0007e8  2f08              CMP      r7,#8
0007ea  d101              BNE      |L1.2032|
0007ec  2001              MOVS     r0,#1
0007ee  e000              B        |L1.2034|
                  |L1.2032|
0007f0  2000              MOVS     r0,#0
                  |L1.2034|
0007f2  4548              CMP      r0,r9
0007f4  d100              BNE      |L1.2040|
;;;1545   			break;
0007f6  e009              B        |L1.2060|
                  |L1.2040|
;;;1546   #endif
;;;1547   		res = dir_next(dj, 0);				/* Next entry */
0007f8  2100              MOVS     r1,#0
0007fa  4620              MOV      r0,r4
0007fc  f7fffffe          BL       dir_next
000800  4605              MOV      r5,r0
;;;1548   		if (res != FR_OK) break;
000802  b105              CBZ      r5,|L1.2054|
000804  e002              B        |L1.2060|
                  |L1.2054|
000806  6920              LDR      r0,[r4,#0x10]         ;1518
000808  2800              CMP      r0,#0                 ;1518
00080a  d1d5              BNE      |L1.1976|
                  |L1.2060|
00080c  bf00              NOP                            ;1520
;;;1549   	}
;;;1550   
;;;1551   	if (res != FR_OK) dj->sect = 0;
00080e  b10d              CBZ      r5,|L1.2068|
000810  2000              MOVS     r0,#0
000812  6120              STR      r0,[r4,#0x10]
                  |L1.2068|
;;;1552   
;;;1553   	return res;
000814  4628              MOV      r0,r5
;;;1554   }
000816  e8bd87f0          POP      {r4-r10,pc}
;;;1555   #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
                          ENDP

                  dir_register PROC
;;;1563   static
;;;1564   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
00081a  b570              PUSH     {r4-r6,lr}
;;;1565   	DIR *dj				/* Target directory with object name to be created */
;;;1566   )
;;;1567   {
00081c  4604              MOV      r4,r0
;;;1568   	FRESULT res;
;;;1569   #if _USE_LFN	/* LFN configuration */
;;;1570   	WORD n, ne;
;;;1571   	BYTE sn[12], *fn, sum;
;;;1572   	WCHAR *lfn;
;;;1573   
;;;1574   
;;;1575   	fn = dj->fn; lfn = dj->lfn;
;;;1576   	mem_cpy(sn, fn, 12);
;;;1577   
;;;1578   	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
;;;1579   		return FR_INVALID_NAME;
;;;1580   
;;;1581   	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
;;;1582   		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
;;;1583   		for (n = 1; n < 100; n++) {
;;;1584   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
;;;1585   			res = dir_find(dj);				/* Check if the name collides with existing SFN */
;;;1586   			if (res != FR_OK) break;
;;;1587   		}
;;;1588   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
;;;1589   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1590   		fn[NS] = sn[NS]; dj->lfn = lfn;
;;;1591   	}
;;;1592   
;;;1593   	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
;;;1594   		for (n = 0; lfn[n]; n++) ;
;;;1595   		ne = (n + 25) / 13;
;;;1596   	} else {						/* Otherwise allocate an entry for an SFN  */
;;;1597   		ne = 1;
;;;1598   	}
;;;1599   	res = dir_alloc(dj, ne);		/* Allocate entries */
;;;1600   
;;;1601   	if (res == FR_OK && --ne) {		/* Set LFN entry if needed */
;;;1602   		res = dir_sdi(dj, (WORD)(dj->index - ne));
;;;1603   		if (res == FR_OK) {
;;;1604   			sum = sum_sfn(dj->fn);	/* Sum value of the SFN tied to the LFN */
;;;1605   			do {					/* Store LFN entries in bottom first */
;;;1606   				res = move_window(dj->fs, dj->sect);
;;;1607   				if (res != FR_OK) break;
;;;1608   				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
;;;1609   				dj->fs->wflag = 1;
;;;1610   				res = dir_next(dj, 0);	/* Next entry */
;;;1611   			} while (res == FR_OK && --ne);
;;;1612   		}
;;;1613   	}
;;;1614   #else	/* Non LFN configuration */
;;;1615   	res = dir_alloc(dj, 1);		/* Allocate an entry for SFN */
00081e  2101              MOVS     r1,#1
000820  4620              MOV      r0,r4
000822  f7fffffe          BL       dir_alloc
000826  4605              MOV      r5,r0
;;;1616   #endif
;;;1617   
;;;1618   	if (res == FR_OK) {				/* Set SFN entry */
000828  b995              CBNZ     r5,|L1.2128|
;;;1619   		res = move_window(dj->fs, dj->sect);
00082a  6921              LDR      r1,[r4,#0x10]
00082c  6820              LDR      r0,[r4,#0]
00082e  f7fffffe          BL       move_window
000832  4605              MOV      r5,r0
;;;1620   		if (res == FR_OK) {
000834  b965              CBNZ     r5,|L1.2128|
;;;1621   			mem_set(dj->dir, 0, SZ_DIR);	/* Clean the entry */
000836  2220              MOVS     r2,#0x20
000838  2100              MOVS     r1,#0
00083a  6960              LDR      r0,[r4,#0x14]
00083c  f7fffffe          BL       mem_set
;;;1622   			mem_cpy(dj->dir, dj->fn, 11);	/* Put SFN */
000840  220b              MOVS     r2,#0xb
000842  e9d40105          LDRD     r0,r1,[r4,#0x14]
000846  f7fffffe          BL       mem_cpy
;;;1623   #if _USE_LFN
;;;1624   			dj->dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1625   #endif
;;;1626   			dj->fs->wflag = 1;
00084a  2001              MOVS     r0,#1
00084c  6821              LDR      r1,[r4,#0]
00084e  7108              STRB     r0,[r1,#4]
                  |L1.2128|
;;;1627   		}
;;;1628   	}
;;;1629   
;;;1630   	return res;
000850  4628              MOV      r0,r5
;;;1631   }
000852  bd70              POP      {r4-r6,pc}
;;;1632   #endif /* !_FS_READONLY */
                          ENDP

                  dir_remove PROC
;;;1641   static
;;;1642   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000854  b570              PUSH     {r4-r6,lr}
;;;1643   	DIR *dj				/* Directory object pointing the entry to be removed */
;;;1644   )
;;;1645   {
000856  4604              MOV      r4,r0
;;;1646   	FRESULT res;
;;;1647   #if _USE_LFN	/* LFN configuration */
;;;1648   	WORD i;
;;;1649   
;;;1650   	i = dj->index;	/* SFN index */
;;;1651   	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of the LFN entries */
;;;1652   	if (res == FR_OK) {
;;;1653   		do {
;;;1654   			res = move_window(dj->fs, dj->sect);
;;;1655   			if (res != FR_OK) break;
;;;1656   			*dj->dir = DDE;			/* Mark the entry "deleted" */
;;;1657   			dj->fs->wflag = 1;
;;;1658   			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
;;;1659   			res = dir_next(dj, 0);		/* Next entry */
;;;1660   		} while (res == FR_OK);
;;;1661   		if (res == FR_NO_FILE) res = FR_INT_ERR;
;;;1662   	}
;;;1663   
;;;1664   #else			/* Non LFN configuration */
;;;1665   	res = dir_sdi(dj, dj->index);
000858  88e1              LDRH     r1,[r4,#6]
00085a  4620              MOV      r0,r4
00085c  f7fffffe          BL       dir_sdi
000860  4605              MOV      r5,r0
;;;1666   	if (res == FR_OK) {
000862  b95d              CBNZ     r5,|L1.2172|
;;;1667   		res = move_window(dj->fs, dj->sect);
000864  6921              LDR      r1,[r4,#0x10]
000866  6820              LDR      r0,[r4,#0]
000868  f7fffffe          BL       move_window
00086c  4605              MOV      r5,r0
;;;1668   		if (res == FR_OK) {
00086e  b92d              CBNZ     r5,|L1.2172|
;;;1669   			*dj->dir = DDE;			/* Mark the entry "deleted" */
000870  20e5              MOVS     r0,#0xe5
000872  6961              LDR      r1,[r4,#0x14]
000874  7008              STRB     r0,[r1,#0]
;;;1670   			dj->fs->wflag = 1;
000876  2001              MOVS     r0,#1
000878  6821              LDR      r1,[r4,#0]
00087a  7108              STRB     r0,[r1,#4]
                  |L1.2172|
;;;1671   		}
;;;1672   	}
;;;1673   #endif
;;;1674   
;;;1675   	return res;
00087c  4628              MOV      r0,r5
;;;1676   }
00087e  bd70              POP      {r4-r6,pc}
;;;1677   #endif /* !_FS_READONLY */
                          ENDP

                  create_name PROC
;;;1686   static
;;;1687   FRESULT create_name (
000880  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
;;;1688   	DIR *dj,			/* Pointer to the directory object */
;;;1689   	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
;;;1690   )
;;;1691   {
;;;1692   #if _USE_LFN	/* LFN configuration */
;;;1693   	BYTE b, cf;
;;;1694   	WCHAR w, *lfn;
;;;1695   	UINT i, ni, si, di;
;;;1696   	const TCHAR *p;
;;;1697   
;;;1698   	/* Create LFN in Unicode */
;;;1699   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
;;;1700   	lfn = dj->lfn;
;;;1701   	si = di = 0;
;;;1702   	for (;;) {
;;;1703   		w = p[si++];					/* Get a character */
;;;1704   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
;;;1705   		if (di >= _MAX_LFN)				/* Reject too long name */
;;;1706   			return FR_INVALID_NAME;
;;;1707   #if !_LFN_UNICODE
;;;1708   		w &= 0xFF;
;;;1709   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1710   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1711   			if (!IsDBCS2(b))
;;;1712   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1713   			w = (w << 8) + b;			/* Create a DBC */
;;;1714   		}
;;;1715   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1716   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1717   #endif
;;;1718   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
;;;1719   			return FR_INVALID_NAME;
;;;1720   		lfn[di++] = w;					/* Store the Unicode char */
;;;1721   	}
;;;1722   	*path = &p[si];						/* Return pointer to the next segment */
;;;1723   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1724   #if _FS_RPATH
;;;1725   	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
;;;1726   		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
;;;1727   		lfn[di] = 0;
;;;1728   		for (i = 0; i < 11; i++)
;;;1729   			dj->fn[i] = (i < di) ? '.' : ' ';
;;;1730   		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1731   		return FR_OK;
;;;1732   	}
;;;1733   #endif
;;;1734   	while (di) {						/* Strip trailing spaces and dots */
;;;1735   		w = lfn[di-1];
;;;1736   		if (w != ' ' && w != '.') break;
;;;1737   		di--;
;;;1738   	}
;;;1739   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1740   
;;;1741   	lfn[di] = 0;						/* LFN is created */
;;;1742   
;;;1743   	/* Create SFN in directory form */
;;;1744   	mem_set(dj->fn, ' ', 11);
;;;1745   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1746   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1747   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1748   
;;;1749   	b = i = 0; ni = 8;
;;;1750   	for (;;) {
;;;1751   		w = lfn[si++];					/* Get an LFN char */
;;;1752   		if (!w) break;					/* Break on end of the LFN */
;;;1753   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1754   			cf |= NS_LOSS | NS_LFN; continue;
;;;1755   		}
;;;1756   
;;;1757   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1758   			if (ni == 11) {				/* Long extension */
;;;1759   				cf |= NS_LOSS | NS_LFN; break;
;;;1760   			}
;;;1761   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1762   			if (si > di) break;			/* No extension */
;;;1763   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1764   			b <<= 2; continue;
;;;1765   		}
;;;1766   
;;;1767   		if (w >= 0x80) {				/* Non ASCII char */
;;;1768   #ifdef _EXCVT
;;;1769   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1770   			if (w) w = ExCvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
;;;1771   #else
;;;1772   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1773   #endif
;;;1774   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1775   		}
;;;1776   
;;;1777   		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
;;;1778   			if (i >= ni - 1) {
;;;1779   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1780   			}
;;;1781   			dj->fn[i++] = (BYTE)(w >> 8);
;;;1782   		} else {						/* Single byte char */
;;;1783   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
;;;1784   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1785   			} else {
;;;1786   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1787   					b |= 2;
;;;1788   				} else {
;;;1789   					if (IsLower(w)) {	/* ASCII small capital */
;;;1790   						b |= 1; w -= 0x20;
;;;1791   					}
;;;1792   				}
;;;1793   			}
;;;1794   		}
;;;1795   		dj->fn[i++] = (BYTE)w;
;;;1796   	}
;;;1797   
;;;1798   	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
;;;1799   
;;;1800   	if (ni == 8) b <<= 2;
;;;1801   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1802   		cf |= NS_LFN;
;;;1803   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
;;;1804   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1805   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1806   	}
;;;1807   
;;;1808   	dj->fn[NS] = cf;	/* SFN is created */
;;;1809   
;;;1810   	return FR_OK;
;;;1811   
;;;1812   
;;;1813   #else	/* Non-LFN configuration */
;;;1814   	BYTE b, c, d, *sfn;
;;;1815   	UINT ni, si, i;
;;;1816   	const char *p;
;;;1817   
;;;1818   	/* Create file name in directory form */
;;;1819   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
000884  9801              LDR      r0,[sp,#4]
000886  f8d09000          LDR      r9,[r0,#0]
00088a  e001              B        |L1.2192|
                  |L1.2188|
00088c  f1090901          ADD      r9,r9,#1
                  |L1.2192|
000890  f8990000          LDRB     r0,[r9,#0]
000894  282f              CMP      r0,#0x2f
000896  d0f9              BEQ      |L1.2188|
000898  f8990000          LDRB     r0,[r9,#0]
00089c  285c              CMP      r0,#0x5c
00089e  d0f5              BEQ      |L1.2188|
;;;1820   	sfn = dj->fn;
0008a0  9800              LDR      r0,[sp,#0]
0008a2  6986              LDR      r6,[r0,#0x18]
;;;1821   	mem_set(sfn, ' ', 11);
0008a4  220b              MOVS     r2,#0xb
0008a6  2120              MOVS     r1,#0x20
0008a8  4630              MOV      r0,r6
0008aa  f7fffffe          BL       mem_set
;;;1822   	si = i = b = 0; ni = 8;
0008ae  2500              MOVS     r5,#0
0008b0  462f              MOV      r7,r5
0008b2  46ab              MOV      r11,r5
0008b4  f04f0a08          MOV      r10,#8
;;;1823   #if _FS_RPATH
;;;1824   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1825   		for (;;) {
;;;1826   			c = (BYTE)p[si++];
;;;1827   			if (c != '.' || si >= 3) break;
;;;1828   			sfn[i++] = c;
;;;1829   		}
;;;1830   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1831   		*path = &p[si];									/* Return pointer to the next segment */
;;;1832   		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1833   		return FR_OK;
;;;1834   	}
;;;1835   #endif
;;;1836   	for (;;) {
0008b8  bf00              NOP      
                  |L1.2234|
;;;1837   		c = (BYTE)p[si++];
0008ba  4658              MOV      r0,r11
0008bc  f10b0b01          ADD      r11,r11,#1
0008c0  f8194000          LDRB     r4,[r9,r0]
;;;1838   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
0008c4  2c20              CMP      r4,#0x20
0008c6  dd03              BLE      |L1.2256|
0008c8  2c2f              CMP      r4,#0x2f
0008ca  d001              BEQ      |L1.2256|
0008cc  2c5c              CMP      r4,#0x5c
0008ce  d100              BNE      |L1.2258|
                  |L1.2256|
0008d0  e057              B        |L1.2434|
                  |L1.2258|
;;;1839   		if (c == '.' || i >= ni) {
0008d2  2c2e              CMP      r4,#0x2e
0008d4  d001              BEQ      |L1.2266|
0008d6  4557              CMP      r7,r10
0008d8  d30d              BCC      |L1.2294|
                  |L1.2266|
;;;1840   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
0008da  f1ba0f08          CMP      r10,#8
0008de  d101              BNE      |L1.2276|
0008e0  2c2e              CMP      r4,#0x2e
0008e2  d002              BEQ      |L1.2282|
                  |L1.2276|
0008e4  2006              MOVS     r0,#6
                  |L1.2278|
;;;1841   			i = 8; ni = 11;
;;;1842   			b <<= 2; continue;
;;;1843   		}
;;;1844   		if (c >= 0x80) {				/* Extended char? */
;;;1845   			b |= 3;						/* Eliminate NT flag */
;;;1846   #ifdef _EXCVT
;;;1847   			c = ExCvt[c - 0x80];		/* To upper extended chars (SBCS cfg) */
;;;1848   #else
;;;1849   #if !_DF1S
;;;1850   			return FR_INVALID_NAME;		/* Reject extended chars (ASCII cfg) */
;;;1851   #endif
;;;1852   #endif
;;;1853   		}
;;;1854   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1855   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;1856   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1857   				return FR_INVALID_NAME;
;;;1858   			sfn[i++] = c;
;;;1859   			sfn[i++] = d;
;;;1860   		} else {						/* Single byte code */
;;;1861   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1862   				return FR_INVALID_NAME;
;;;1863   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1864   				b |= 2;
;;;1865   			} else {
;;;1866   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1867   					b |= 1; c -= 0x20;
;;;1868   				}
;;;1869   			}
;;;1870   			sfn[i++] = c;
;;;1871   		}
;;;1872   	}
;;;1873   	*path = &p[si];						/* Return pointer to the next segment */
;;;1874   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1875   
;;;1876   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;1877   	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
;;;1878   
;;;1879   	if (ni == 8) b <<= 2;
;;;1880   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;1881   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;1882   
;;;1883   	sfn[NS] = c;		/* Store NT flag, File name is created */
;;;1884   
;;;1885   	return FR_OK;
;;;1886   #endif
;;;1887   }
0008e6  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.2282|
0008ea  2708              MOVS     r7,#8                 ;1841
0008ec  f04f0a0b          MOV      r10,#0xb              ;1841
0008f0  06a8              LSLS     r0,r5,#26             ;1842
0008f2  0e05              LSRS     r5,r0,#24             ;1842
0008f4  e7e1              B        |L1.2234|
                  |L1.2294|
0008f6  2c80              CMP      r4,#0x80              ;1844
0008f8  db01              BLT      |L1.2302|
0008fa  f0450503          ORR      r5,r5,#3              ;1845
                  |L1.2302|
0008fe  2c81              CMP      r4,#0x81              ;1854
000900  db01              BLT      |L1.2310|
000902  2c9f              CMP      r4,#0x9f              ;1854
000904  dd03              BLE      |L1.2318|
                  |L1.2310|
000906  2ce0              CMP      r4,#0xe0              ;1854
000908  db20              BLT      |L1.2380|
00090a  2cfc              CMP      r4,#0xfc              ;1854
00090c  dc1e              BGT      |L1.2380|
                  |L1.2318|
00090e  4658              MOV      r0,r11                ;1855
000910  f10b0b01          ADD      r11,r11,#1            ;1855
000914  f8198000          LDRB     r8,[r9,r0]            ;1855
000918  f1b80f40          CMP      r8,#0x40              ;1856
00091c  db02              BLT      |L1.2340|
00091e  f1b80f7e          CMP      r8,#0x7e              ;1856
000922  dd05              BLE      |L1.2352|
                  |L1.2340|
000924  f1b80f80          CMP      r8,#0x80              ;1856
000928  db06              BLT      |L1.2360|
00092a  f1b80ffc          CMP      r8,#0xfc              ;1856
00092e  dc03              BGT      |L1.2360|
                  |L1.2352|
000930  f1aa0001          SUB      r0,r10,#1             ;1856
000934  42b8              CMP      r0,r7                 ;1856
000936  d801              BHI      |L1.2364|
                  |L1.2360|
000938  2006              MOVS     r0,#6                 ;1857
00093a  e7d4              B        |L1.2278|
                  |L1.2364|
00093c  4638              MOV      r0,r7                 ;1858
00093e  1c7f              ADDS     r7,r7,#1              ;1858
000940  5434              STRB     r4,[r6,r0]            ;1858
000942  4638              MOV      r0,r7                 ;1859
000944  1c7f              ADDS     r7,r7,#1              ;1859
000946  f8068000          STRB     r8,[r6,r0]            ;1859
00094a  e019              B        |L1.2432|
                  |L1.2380|
00094c  4621              MOV      r1,r4                 ;1861
00094e  a0fe              ADR      r0,|L1.3400|
000950  f7fffffe          BL       chk_chr
000954  b108              CBZ      r0,|L1.2394|
000956  2006              MOVS     r0,#6                 ;1862
000958  e7c5              B        |L1.2278|
                  |L1.2394|
00095a  2c41              CMP      r4,#0x41              ;1863
00095c  db04              BLT      |L1.2408|
00095e  2c5a              CMP      r4,#0x5a              ;1863
000960  dc02              BGT      |L1.2408|
000962  f0450502          ORR      r5,r5,#2              ;1864
000966  e008              B        |L1.2426|
                  |L1.2408|
000968  2c61              CMP      r4,#0x61              ;1866
00096a  db06              BLT      |L1.2426|
00096c  2c7a              CMP      r4,#0x7a              ;1866
00096e  dc04              BGT      |L1.2426|
000970  f0450501          ORR      r5,r5,#1              ;1867
000974  f1a40020          SUB      r0,r4,#0x20           ;1867
000978  b2c4              UXTB     r4,r0                 ;1867
                  |L1.2426|
00097a  4638              MOV      r0,r7                 ;1870
00097c  1c7f              ADDS     r7,r7,#1              ;1870
00097e  5434              STRB     r4,[r6,r0]            ;1870
                  |L1.2432|
000980  e79b              B        |L1.2234|
                  |L1.2434|
000982  bf00              NOP                            ;1838
000984  eb09010b          ADD      r1,r9,r11             ;1873
000988  9801              LDR      r0,[sp,#4]            ;1873
00098a  6001              STR      r1,[r0,#0]            ;1873
00098c  2c20              CMP      r4,#0x20              ;1874
00098e  dc01              BGT      |L1.2452|
000990  2004              MOVS     r0,#4                 ;1874
000992  e000              B        |L1.2454|
                  |L1.2452|
000994  2000              MOVS     r0,#0                 ;1874
                  |L1.2454|
000996  4604              MOV      r4,r0                 ;1874
000998  b90f              CBNZ     r7,|L1.2462|
00099a  2006              MOVS     r0,#6                 ;1876
00099c  e7a3              B        |L1.2278|
                  |L1.2462|
00099e  7830              LDRB     r0,[r6,#0]            ;1877
0009a0  28e5              CMP      r0,#0xe5              ;1877
0009a2  d101              BNE      |L1.2472|
0009a4  2005              MOVS     r0,#5                 ;1877
0009a6  7030              STRB     r0,[r6,#0]            ;1877
                  |L1.2472|
0009a8  f1ba0f08          CMP      r10,#8                ;1879
0009ac  d101              BNE      |L1.2482|
0009ae  06a8              LSLS     r0,r5,#26             ;1879
0009b0  0e05              LSRS     r5,r0,#24             ;1879
                  |L1.2482|
0009b2  f0050003          AND      r0,r5,#3              ;1880
0009b6  2801              CMP      r0,#1                 ;1880
0009b8  d101              BNE      |L1.2494|
0009ba  f0440410          ORR      r4,r4,#0x10           ;1880
                  |L1.2494|
0009be  f005000c          AND      r0,r5,#0xc            ;1881
0009c2  2804              CMP      r0,#4                 ;1881
0009c4  d101              BNE      |L1.2506|
0009c6  f0440408          ORR      r4,r4,#8              ;1881
                  |L1.2506|
0009ca  72f4              STRB     r4,[r6,#0xb]          ;1883
0009cc  2000              MOVS     r0,#0                 ;1885
0009ce  e78a              B        |L1.2278|
;;;1888   
                          ENDP

                  get_fileinfo PROC
;;;1896   static
;;;1897   void get_fileinfo (		/* No return code */
0009d0  b5f0              PUSH     {r4-r7,lr}
;;;1898   	DIR *dj,			/* Pointer to the directory object */
;;;1899   	FILINFO *fno	 	/* Pointer to the file information to be filled */
;;;1900   )
;;;1901   {
0009d2  4605              MOV      r5,r0
0009d4  460b              MOV      r3,r1
;;;1902   	UINT i;
;;;1903   	BYTE nt, *dir;
;;;1904   	TCHAR *p, c;
;;;1905   
;;;1906   
;;;1907   	p = fno->fname;
0009d6  f1030209          ADD      r2,r3,#9
;;;1908   	if (dj->sect) {
0009da  692f              LDR      r7,[r5,#0x10]
0009dc  2f00              CMP      r7,#0
0009de  d040              BEQ      |L1.2658|
;;;1909   		dir = dj->dir;
0009e0  6968              LDR      r0,[r5,#0x14]
;;;1910   		nt = dir[DIR_NTres];		/* NT flag */
0009e2  7b06              LDRB     r6,[r0,#0xc]
;;;1911   		for (i = 0; i < 8; i++) {	/* Copy name body */
0009e4  2100              MOVS     r1,#0
0009e6  e00a              B        |L1.2558|
                  |L1.2536|
;;;1912   			c = dir[i];
0009e8  5c44              LDRB     r4,[r0,r1]
;;;1913   			if (c == ' ') break;
0009ea  2c20              CMP      r4,#0x20
0009ec  d100              BNE      |L1.2544|
0009ee  e008              B        |L1.2562|
                  |L1.2544|
;;;1914   			if (c == NDDE) c = (TCHAR)DDE;
0009f0  2c05              CMP      r4,#5
0009f2  d100              BNE      |L1.2550|
0009f4  24e5              MOVS     r4,#0xe5
                  |L1.2550|
;;;1915   			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
0009f6  bf00              NOP      
;;;1916   #if _LFN_UNICODE
;;;1917   			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
;;;1918   				c = (c << 8) | dir[++i];
;;;1919   			c = ff_convert(c, 1);
;;;1920   			if (!c) c = '?';
;;;1921   #endif
;;;1922   			*p++ = c;
0009f8  f8024b01          STRB     r4,[r2],#1
0009fc  1c49              ADDS     r1,r1,#1              ;1911
                  |L1.2558|
0009fe  2908              CMP      r1,#8                 ;1911
000a00  d3f2              BCC      |L1.2536|
                  |L1.2562|
000a02  bf00              NOP                            ;1913
;;;1923   		}
;;;1924   		if (dir[8] != ' ') {		/* Copy name extension */
000a04  7a07              LDRB     r7,[r0,#8]
000a06  2f20              CMP      r7,#0x20
000a08  d00f              BEQ      |L1.2602|
;;;1925   			*p++ = '.';
000a0a  272e              MOVS     r7,#0x2e
000a0c  f8027b01          STRB     r7,[r2],#1
;;;1926   			for (i = 8; i < 11; i++) {
000a10  2108              MOVS     r1,#8
000a12  e007              B        |L1.2596|
                  |L1.2580|
;;;1927   				c = dir[i];
000a14  5c44              LDRB     r4,[r0,r1]
;;;1928   				if (c == ' ') break;
000a16  2c20              CMP      r4,#0x20
000a18  d100              BNE      |L1.2588|
000a1a  e005              B        |L1.2600|
                  |L1.2588|
;;;1929   				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
000a1c  bf00              NOP      
;;;1930   #if _LFN_UNICODE
;;;1931   				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
;;;1932   					c = (c << 8) | dir[++i];
;;;1933   				c = ff_convert(c, 1);
;;;1934   				if (!c) c = '?';
;;;1935   #endif
;;;1936   				*p++ = c;
000a1e  f8024b01          STRB     r4,[r2],#1
000a22  1c49              ADDS     r1,r1,#1              ;1926
                  |L1.2596|
000a24  290b              CMP      r1,#0xb               ;1926
000a26  d3f5              BCC      |L1.2580|
                  |L1.2600|
000a28  bf00              NOP                            ;1928
                  |L1.2602|
;;;1937   			}
;;;1938   		}
;;;1939   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
000a2a  7ac7              LDRB     r7,[r0,#0xb]
000a2c  721f              STRB     r7,[r3,#8]
;;;1940   		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
000a2e  7fc7              LDRB     r7,[r0,#0x1f]
000a30  ea4f6c07          LSL      r12,r7,#24
000a34  7f87              LDRB     r7,[r0,#0x1e]
000a36  ea4c4c07          ORR      r12,r12,r7,LSL #16
000a3a  7f47              LDRB     r7,[r0,#0x1d]
000a3c  ea4c2707          ORR      r7,r12,r7,LSL #8
000a40  f890c01c          LDRB     r12,[r0,#0x1c]
000a44  ea47070c          ORR      r7,r7,r12
000a48  601f              STR      r7,[r3,#0]
;;;1941   		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
000a4a  f890c018          LDRB     r12,[r0,#0x18]
000a4e  7e47              LDRB     r7,[r0,#0x19]
000a50  ea4c2707          ORR      r7,r12,r7,LSL #8
000a54  809f              STRH     r7,[r3,#4]
;;;1942   		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
000a56  f890c016          LDRB     r12,[r0,#0x16]
000a5a  7dc7              LDRB     r7,[r0,#0x17]
000a5c  ea4c2707          ORR      r7,r12,r7,LSL #8
000a60  80df              STRH     r7,[r3,#6]
                  |L1.2658|
;;;1943   	}
;;;1944   	*p = 0;		/* Terminate SFN str by a \0 */
000a62  2700              MOVS     r7,#0
000a64  7017              STRB     r7,[r2,#0]
;;;1945   
;;;1946   #if _USE_LFN
;;;1947   	if (fno->lfname && fno->lfsize) {
;;;1948   		TCHAR *tp = fno->lfname;
;;;1949   		WCHAR w, *lfn;
;;;1950   
;;;1951   		i = 0;
;;;1952   		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
;;;1953   			lfn = dj->lfn;
;;;1954   			while ((w = *lfn++) != 0) {			/* Get an LFN char */
;;;1955   #if !_LFN_UNICODE
;;;1956   				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
;;;1957   				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
;;;1958   				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
;;;1959   					tp[i++] = (TCHAR)(w >> 8);
;;;1960   #endif
;;;1961   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
;;;1962   				tp[i++] = (TCHAR)w;
;;;1963   			}
;;;1964   		}
;;;1965   		tp[i] = 0;	/* Terminate the LFN str by a \0 */
;;;1966   	}
;;;1967   #endif
;;;1968   }
000a66  bdf0              POP      {r4-r7,pc}
;;;1969   #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2*/
                          ENDP

                  follow_path PROC
;;;1978   static
;;;1979   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000a68  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;1980   	DIR *dj,			/* Directory object to return last directory and found object */
;;;1981   	const TCHAR *path	/* Full-path string to find a file or directory */
;;;1982   )
;;;1983   {
000a6c  4604              MOV      r4,r0
;;;1984   	FRESULT res;
;;;1985   	BYTE *dir, ns;
;;;1986   
;;;1987   
;;;1988   #if _FS_RPATH
;;;1989   	if (*path == '/' || *path == '\\') { /* There is a heading separator */
;;;1990   		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
;;;1991   	} else {							/* No heading separator */
;;;1992   		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
;;;1993   	}
;;;1994   #else
;;;1995   	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
000a6e  9801              LDR      r0,[sp,#4]
000a70  7800              LDRB     r0,[r0,#0]
000a72  282f              CMP      r0,#0x2f
000a74  d003              BEQ      |L1.2686|
000a76  9801              LDR      r0,[sp,#4]
000a78  7800              LDRB     r0,[r0,#0]
000a7a  285c              CMP      r0,#0x5c
000a7c  d102              BNE      |L1.2692|
                  |L1.2686|
;;;1996   		path++;
000a7e  9801              LDR      r0,[sp,#4]
000a80  1c40              ADDS     r0,r0,#1
000a82  9001              STR      r0,[sp,#4]
                  |L1.2692|
;;;1997   	dj->sclust = 0;						/* Start from the root dir */
000a84  2000              MOVS     r0,#0
000a86  60a0              STR      r0,[r4,#8]
;;;1998   #endif
;;;1999   
;;;2000   	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
000a88  9801              LDR      r0,[sp,#4]
000a8a  7800              LDRB     r0,[r0,#0]
000a8c  2820              CMP      r0,#0x20
000a8e  d207              BCS      |L1.2720|
;;;2001   		res = dir_sdi(dj, 0);
000a90  2100              MOVS     r1,#0
000a92  4620              MOV      r0,r4
000a94  f7fffffe          BL       dir_sdi
000a98  4605              MOV      r5,r0
;;;2002   		dj->dir = 0;
000a9a  2000              MOVS     r0,#0
000a9c  6160              STR      r0,[r4,#0x14]
000a9e  e029              B        |L1.2804|
                  |L1.2720|
;;;2003   	} else {							/* Follow path */
;;;2004   		for (;;) {
000aa0  bf00              NOP      
                  |L1.2722|
;;;2005   			res = create_name(dj, &path);	/* Get a segment */
000aa2  a901              ADD      r1,sp,#4
000aa4  4620              MOV      r0,r4
000aa6  f7fffffe          BL       create_name
000aaa  4605              MOV      r5,r0
;;;2006   			if (res != FR_OK) break;
000aac  b105              CBZ      r5,|L1.2736|
000aae  e020              B        |L1.2802|
                  |L1.2736|
;;;2007   			res = dir_find(dj);				/* Find it */
000ab0  4620              MOV      r0,r4
000ab2  f7fffffe          BL       dir_find
000ab6  4605              MOV      r5,r0
;;;2008   			ns = *(dj->fn+NS);
000ab8  69a0              LDR      r0,[r4,#0x18]
000aba  7ac6              LDRB     r6,[r0,#0xb]
;;;2009   			if (res != FR_OK) {				/* Failed to find the object */
000abc  b145              CBZ      r5,|L1.2768|
;;;2010   				if (res != FR_NO_FILE) break;	/* Abort if any hard error occurred */
000abe  2d04              CMP      r5,#4
000ac0  d000              BEQ      |L1.2756|
000ac2  e016              B        |L1.2802|
                  |L1.2756|
;;;2011   				/* Object not found */
;;;2012   				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
000ac4  bf00              NOP      
;;;2013   					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
;;;2014   					res = FR_OK;
;;;2015   					if (!(ns & NS_LAST)) continue;
;;;2016   				} else {							/* Could not find the object */
;;;2017   					if (!(ns & NS_LAST)) res = FR_NO_PATH;
000ac6  f0160f04          TST      r6,#4
000aca  d100              BNE      |L1.2766|
000acc  2505              MOVS     r5,#5
                  |L1.2766|
;;;2018   				}
;;;2019   				break;
000ace  e010              B        |L1.2802|
                  |L1.2768|
;;;2020   			}
;;;2021   			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
000ad0  f0160f04          TST      r6,#4
000ad4  d000              BEQ      |L1.2776|
000ad6  e00c              B        |L1.2802|
                  |L1.2776|
;;;2022   			dir = dj->dir;						/* There is next segment. Follow the sub directory */
000ad8  6967              LDR      r7,[r4,#0x14]
;;;2023   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
000ada  7af8              LDRB     r0,[r7,#0xb]
000adc  f0100f10          TST      r0,#0x10
000ae0  d101              BNE      |L1.2790|
;;;2024   				res = FR_NO_PATH; break;
000ae2  2505              MOVS     r5,#5
000ae4  e005              B        |L1.2802|
                  |L1.2790|
;;;2025   			}
;;;2026   			dj->sclust = ld_clust(dj->fs, dir);
000ae6  4639              MOV      r1,r7
000ae8  6820              LDR      r0,[r4,#0]
000aea  f7fffffe          BL       ld_clust
000aee  60a0              STR      r0,[r4,#8]
000af0  e7d7              B        |L1.2722|
                  |L1.2802|
000af2  bf00              NOP                            ;2006
                  |L1.2804|
;;;2027   		}
;;;2028   	}
;;;2029   
;;;2030   	return res;
000af4  4628              MOV      r0,r5
;;;2031   }
000af6  e8bd81fc          POP      {r2-r8,pc}
;;;2032   
                          ENDP

                  check_fs PROC
;;;2040   static
;;;2041   BYTE check_fs (	/* 0:FAT-VBR, 1:Any BR but not FAT, 2:Not a BR, 3:Disk error */
000afa  b570              PUSH     {r4-r6,lr}
;;;2042   	FATFS *fs,	/* File system object */
;;;2043   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;2044   )
;;;2045   {
000afc  4604              MOV      r4,r0
000afe  460d              MOV      r5,r1
;;;2046   	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
000b00  7860              LDRB     r0,[r4,#1]
000b02  2301              MOVS     r3,#1
000b04  462a              MOV      r2,r5
000b06  f1040134          ADD      r1,r4,#0x34
000b0a  f7fffffe          BL       disk_read
000b0e  b108              CBZ      r0,|L1.2836|
;;;2047   		return 3;
000b10  2003              MOVS     r0,#3
                  |L1.2834|
;;;2048   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
;;;2049   		return 2;
;;;2050   
;;;2051   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;2052   		return 0;
;;;2053   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
;;;2054   		return 0;
;;;2055   
;;;2056   	return 1;
;;;2057   }
000b12  bd70              POP      {r4-r6,pc}
                  |L1.2836|
000b14  f8941232          LDRB     r1,[r4,#0x232]        ;2048
000b18  f8940233          LDRB     r0,[r4,#0x233]        ;2048
000b1c  ea412000          ORR      r0,r1,r0,LSL #8       ;2048
000b20  f5a0412a          SUB      r1,r0,#0xaa00         ;2048
000b24  3955              SUBS     r1,r1,#0x55           ;2048
000b26  d001              BEQ      |L1.2860|
000b28  2002              MOVS     r0,#2                 ;2049
000b2a  e7f2              B        |L1.2834|
                  |L1.2860|
000b2c  f894006d          LDRB     r0,[r4,#0x6d]         ;2051
000b30  0601              LSLS     r1,r0,#24             ;2051
000b32  f894006c          LDRB     r0,[r4,#0x6c]         ;2051
000b36  ea414100          ORR      r1,r1,r0,LSL #16      ;2051
000b3a  f894006b          LDRB     r0,[r4,#0x6b]         ;2051
000b3e  ea412000          ORR      r0,r1,r0,LSL #8       ;2051
000b42  f894106a          LDRB     r1,[r4,#0x6a]         ;2051
000b46  4308              ORRS     r0,r0,r1              ;2051
000b48  f020407f          BIC      r0,r0,#0xff000000     ;2051
000b4c  4982              LDR      r1,|L1.3416|
000b4e  4288              CMP      r0,r1                 ;2051
000b50  d101              BNE      |L1.2902|
000b52  2000              MOVS     r0,#0                 ;2052
000b54  e7dd              B        |L1.2834|
                  |L1.2902|
000b56  f8940089          LDRB     r0,[r4,#0x89]         ;2053
000b5a  0601              LSLS     r1,r0,#24             ;2053
000b5c  f8940088          LDRB     r0,[r4,#0x88]         ;2053
000b60  ea414100          ORR      r1,r1,r0,LSL #16      ;2053
000b64  f8940087          LDRB     r0,[r4,#0x87]         ;2053
000b68  ea412000          ORR      r0,r1,r0,LSL #8       ;2053
000b6c  f8941086          LDRB     r1,[r4,#0x86]         ;2053
000b70  4308              ORRS     r0,r0,r1              ;2053
000b72  f020407f          BIC      r0,r0,#0xff000000     ;2053
000b76  4978              LDR      r1,|L1.3416|
000b78  4288              CMP      r0,r1                 ;2053
000b7a  d101              BNE      |L1.2944|
000b7c  2000              MOVS     r0,#0                 ;2054
000b7e  e7c8              B        |L1.2834|
                  |L1.2944|
000b80  2001              MOVS     r0,#1                 ;2056
000b82  e7c6              B        |L1.2834|
;;;2058   
                          ENDP

                  chk_mounted PROC
;;;2066   static
;;;2067   FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
000b84  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2068   	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
;;;2069   	FATFS **rfs,		/* Pointer to pointer to the found file system object */
;;;2070   	BYTE wmode			/* !=0: Check write protection for write access */
;;;2071   )
;;;2072   {
000b88  b088              SUB      sp,sp,#0x20
;;;2073   	BYTE fmt, b, pi, *tbl;
;;;2074   	UINT vol;
;;;2075   	DSTATUS stat;
;;;2076   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
;;;2077   	WORD nrsv;
;;;2078   	const TCHAR *p = *path;
000b8a  9808              LDR      r0,[sp,#0x20]
000b8c  6800              LDR      r0,[r0,#0]
000b8e  9001              STR      r0,[sp,#4]
;;;2079   	FATFS *fs;
;;;2080   
;;;2081   
;;;2082   	/* Get logical drive number from the path name */
;;;2083   	vol = p[0] - '0';					/* Is there a drive number? */
000b90  9801              LDR      r0,[sp,#4]
000b92  7800              LDRB     r0,[r0,#0]
000b94  3830              SUBS     r0,r0,#0x30
000b96  9007              STR      r0,[sp,#0x1c]
;;;2084   	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
000b98  9807              LDR      r0,[sp,#0x1c]
000b9a  2809              CMP      r0,#9
000b9c  d80a              BHI      |L1.2996|
000b9e  9801              LDR      r0,[sp,#4]
000ba0  7840              LDRB     r0,[r0,#1]
000ba2  283a              CMP      r0,#0x3a
000ba4  d106              BNE      |L1.2996|
;;;2085   		p += 2; *path = p;				/* Return pointer to the path name */
000ba6  9801              LDR      r0,[sp,#4]
000ba8  1c80              ADDS     r0,r0,#2
000baa  9001              STR      r0,[sp,#4]
000bac  9908              LDR      r1,[sp,#0x20]
000bae  9801              LDR      r0,[sp,#4]
000bb0  6008              STR      r0,[r1,#0]
000bb2  e001              B        |L1.3000|
                  |L1.2996|
;;;2086   	} else {							/* No drive number, use default drive */
;;;2087   #if _FS_RPATH
;;;2088   		vol = CurrVol;					/* Use current drive */
;;;2089   #else
;;;2090   		vol = 0;						/* Use drive 0 */
000bb4  2000              MOVS     r0,#0
000bb6  9007              STR      r0,[sp,#0x1c]
                  |L1.3000|
;;;2091   #endif
;;;2092   	}
;;;2093   
;;;2094   	/* Check if the file system object is valid or not */
;;;2095   	*rfs = 0;
000bb8  2100              MOVS     r1,#0
000bba  9809              LDR      r0,[sp,#0x24]
000bbc  6001              STR      r1,[r0,#0]
;;;2096   	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
000bbe  9807              LDR      r0,[sp,#0x1c]
000bc0  b118              CBZ      r0,|L1.3018|
;;;2097   		return FR_INVALID_DRIVE;
000bc2  200b              MOVS     r0,#0xb
                  |L1.3012|
;;;2098   	fs = FatFs[vol];					/* Get corresponding file system object */
;;;2099   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2100   
;;;2101   	ENTER_FF(fs);						/* Lock volume */
;;;2102   
;;;2103   	*rfs = fs;							/* Return pointer to the corresponding file system object */
;;;2104   	if (fs->fs_type) {					/* If the volume has been mounted */
;;;2105   		stat = disk_status(fs->drv);
;;;2106   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
;;;2107   			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2108   				return FR_WRITE_PROTECTED;
;;;2109   			return FR_OK;				/* The file system object is valid */
;;;2110   		}
;;;2111   	}
;;;2112   
;;;2113   	/* The file system object is not valid. */
;;;2114   	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2115   
;;;2116   	fs->fs_type = 0;					/* Clear the file system object */
;;;2117   	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
;;;2118   	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
;;;2119   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2120   		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
;;;2121   	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2122   		return FR_WRITE_PROTECTED;
;;;2123   #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
;;;2124   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
;;;2125   		return FR_DISK_ERR;
;;;2126   #endif
;;;2127   	/* Search FAT partition on the drive. Supports only generic partitions, FDISK and SFD. */
;;;2128   	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
;;;2129   	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
;;;2130   	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
;;;2131   		/* Check the partition listed in the partition table */
;;;2132   		pi = LD2PT(vol);
;;;2133   		if (pi) pi--;
;;;2134   		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
;;;2135   		if (tbl[4]) {						/* Is the partition existing? */
;;;2136   			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
;;;2137   			fmt = check_fs(fs, bsect);		/* Check the partition */
;;;2138   		}
;;;2139   	}
;;;2140   	if (fmt == 3) return FR_DISK_ERR;
;;;2141   	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
;;;2142   
;;;2143   	/* An FAT volume is found. Following code initializes the file system object */
;;;2144   
;;;2145   	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2146   		return FR_NO_FILESYSTEM;
;;;2147   
;;;2148   	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
;;;2149   	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
;;;2150   	fs->fsize = fasize;
;;;2151   
;;;2152   	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
;;;2153   	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
;;;2154   	fasize *= b;										/* Number of sectors for FAT area */
;;;2155   
;;;2156   	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
;;;2157   	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
;;;2158   
;;;2159   	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
;;;2160   	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
;;;2161   
;;;2162   	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
;;;2163   	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
;;;2164   
;;;2165   	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
;;;2166   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
;;;2167   
;;;2168   	/* Determine the FAT sub type */
;;;2169   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
;;;2170   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2171   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2172   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2173   	fmt = FS_FAT12;
;;;2174   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2175   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2176   
;;;2177   	/* Boundaries and Limits */
;;;2178   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2179   	fs->volbase = bsect;								/* Volume start sector */
;;;2180   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2181   	fs->database = bsect + sysect;						/* Data start sector */
;;;2182   	if (fmt == FS_FAT32) {
;;;2183   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2184   		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
;;;2185   		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
;;;2186   	} else {
;;;2187   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2188   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2189   		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
;;;2190   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2191   	}
;;;2192   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
;;;2193   		return FR_NO_FILESYSTEM;
;;;2194   
;;;2195   #if !_FS_READONLY
;;;2196   	/* Initialize cluster allocation information */
;;;2197   	fs->free_clust = 0xFFFFFFFF;
;;;2198   	fs->last_clust = 0;
;;;2199   
;;;2200   	/* Get fsinfo if available */
;;;2201   	if (fmt == FS_FAT32) {
;;;2202   	 	fs->fsi_flag = 0;
;;;2203   		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
;;;2204   		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
;;;2205   			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
;;;2206   			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
;;;2207   			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
;;;2208   				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
;;;2209   				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
;;;2210   		}
;;;2211   	}
;;;2212   #endif
;;;2213   	fs->fs_type = fmt;		/* FAT sub-type */
;;;2214   	fs->id = ++Fsid;		/* File system mount ID */
;;;2215   	fs->winsect = 0;		/* Invalidate sector cache */
;;;2216   	fs->wflag = 0;
;;;2217   #if _FS_RPATH
;;;2218   	fs->cdir = 0;			/* Current directory (root dir) */
;;;2219   #endif
;;;2220   #if _FS_LOCK				/* Clear file lock semaphores */
;;;2221   	clear_lock(fs);
;;;2222   #endif
;;;2223   
;;;2224   	return FR_OK;
;;;2225   }
000bc4  b00b              ADD      sp,sp,#0x2c
000bc6  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.3018|
000bca  4964              LDR      r1,|L1.3420|
000bcc  9807              LDR      r0,[sp,#0x1c]         ;2098
000bce  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2098
000bd2  b90c              CBNZ     r4,|L1.3032|
000bd4  200c              MOVS     r0,#0xc               ;2099
000bd6  e7f5              B        |L1.3012|
                  |L1.3032|
000bd8  9809              LDR      r0,[sp,#0x24]         ;2103
000bda  6004              STR      r4,[r0,#0]            ;2103
000bdc  7820              LDRB     r0,[r4,#0]            ;2104
000bde  b178              CBZ      r0,|L1.3072|
000be0  7860              LDRB     r0,[r4,#1]            ;2105
000be2  f7fffffe          BL       disk_status
000be6  4680              MOV      r8,r0                 ;2105
000be8  f0180f01          TST      r8,#1                 ;2106
000bec  d108              BNE      |L1.3072|
000bee  980a              LDR      r0,[sp,#0x28]         ;2107
000bf0  b120              CBZ      r0,|L1.3068|
000bf2  f0180f04          TST      r8,#4                 ;2107
000bf6  d001              BEQ      |L1.3068|
000bf8  200a              MOVS     r0,#0xa               ;2108
000bfa  e7e3              B        |L1.3012|
                  |L1.3068|
000bfc  2000              MOVS     r0,#0                 ;2109
000bfe  e7e1              B        |L1.3012|
                  |L1.3072|
000c00  2000              MOVS     r0,#0                 ;2116
000c02  7020              STRB     r0,[r4,#0]            ;2116
000c04  9807              LDR      r0,[sp,#0x1c]         ;2117
000c06  7060              STRB     r0,[r4,#1]            ;2117
000c08  7860              LDRB     r0,[r4,#1]            ;2118
000c0a  f7fffffe          BL       disk_initialize
000c0e  4680              MOV      r8,r0                 ;2118
000c10  f0180f01          TST      r8,#1                 ;2119
000c14  d001              BEQ      |L1.3098|
000c16  2003              MOVS     r0,#3                 ;2120
000c18  e7d4              B        |L1.3012|
                  |L1.3098|
000c1a  980a              LDR      r0,[sp,#0x28]         ;2121
000c1c  b120              CBZ      r0,|L1.3112|
000c1e  f0180f04          TST      r8,#4                 ;2121
000c22  d001              BEQ      |L1.3112|
000c24  200a              MOVS     r0,#0xa               ;2122
000c26  e7cd              B        |L1.3012|
                  |L1.3112|
000c28  f04f0900          MOV      r9,#0                 ;2128
000c2c  4649              MOV      r1,r9                 ;2128
000c2e  4620              MOV      r0,r4                 ;2128
000c30  f7fffffe          BL       check_fs
000c34  4605              MOV      r5,r0                 ;2128
000c36  bf00              NOP                            ;2129
000c38  2d01              CMP      r5,#1                 ;2130
000c3a  d121              BNE      |L1.3200|
000c3c  f04f0b00          MOV      r11,#0                ;2132
000c40  f1bb0f00          CMP      r11,#0                ;2133
000c44  d003              BEQ      |L1.3150|
000c46  f1ab0001          SUB      r0,r11,#1             ;2133
000c4a  f0000bff          AND      r11,r0,#0xff          ;2133
                  |L1.3150|
000c4e  f44f70df          MOV      r0,#0x1be             ;2134
000c52  eb00110b          ADD      r1,r0,r11,LSL #4      ;2134
000c56  f1040034          ADD      r0,r4,#0x34           ;2134
000c5a  180f              ADDS     r7,r1,r0              ;2134
000c5c  7938              LDRB     r0,[r7,#4]            ;2135
000c5e  b178              CBZ      r0,|L1.3200|
000c60  7af8              LDRB     r0,[r7,#0xb]          ;2136
000c62  0601              LSLS     r1,r0,#24             ;2136
000c64  7ab8              LDRB     r0,[r7,#0xa]          ;2136
000c66  ea414100          ORR      r1,r1,r0,LSL #16      ;2136
000c6a  7a78              LDRB     r0,[r7,#9]            ;2136
000c6c  ea412000          ORR      r0,r1,r0,LSL #8       ;2136
000c70  7a39              LDRB     r1,[r7,#8]            ;2136
000c72  ea400901          ORR      r9,r0,r1              ;2136
000c76  4649              MOV      r1,r9                 ;2137
000c78  4620              MOV      r0,r4                 ;2137
000c7a  f7fffffe          BL       check_fs
000c7e  4605              MOV      r5,r0                 ;2137
                  |L1.3200|
000c80  2d03              CMP      r5,#3                 ;2140
000c82  d101              BNE      |L1.3208|
000c84  2001              MOVS     r0,#1                 ;2140
000c86  e79d              B        |L1.3012|
                  |L1.3208|
000c88  b10d              CBZ      r5,|L1.3214|
000c8a  200d              MOVS     r0,#0xd               ;2141
000c8c  e79a              B        |L1.3012|
                  |L1.3214|
000c8e  203f              MOVS     r0,#0x3f              ;2145
000c90  5d01              LDRB     r1,[r0,r4]            ;2145
000c92  f8940040          LDRB     r0,[r4,#0x40]         ;2145
000c96  ea412000          ORR      r0,r1,r0,LSL #8       ;2145
000c9a  f5b07f00          CMP      r0,#0x200             ;2145
000c9e  d001              BEQ      |L1.3236|
000ca0  200d              MOVS     r0,#0xd               ;2146
000ca2  e78f              B        |L1.3012|
                  |L1.3236|
000ca4  204a              MOVS     r0,#0x4a              ;2148
000ca6  5d01              LDRB     r1,[r0,r4]            ;2148
000ca8  f894004b          LDRB     r0,[r4,#0x4b]         ;2148
000cac  ea412a00          ORR      r10,r1,r0,LSL #8      ;2148
000cb0  f1ba0f00          CMP      r10,#0                ;2149
000cb4  d10e              BNE      |L1.3284|
000cb6  f894005b          LDRB     r0,[r4,#0x5b]         ;2149
000cba  0601              LSLS     r1,r0,#24             ;2149
000cbc  f894005a          LDRB     r0,[r4,#0x5a]         ;2149
000cc0  ea414100          ORR      r1,r1,r0,LSL #16      ;2149
000cc4  f8940059          LDRB     r0,[r4,#0x59]         ;2149
000cc8  ea412000          ORR      r0,r1,r0,LSL #8       ;2149
000ccc  f8941058          LDRB     r1,[r4,#0x58]         ;2149
000cd0  ea400a01          ORR      r10,r0,r1             ;2149
                  |L1.3284|
000cd4  f8c4a01c          STR      r10,[r4,#0x1c]        ;2150
000cd8  2044              MOVS     r0,#0x44              ;2152
000cda  5d06              LDRB     r6,[r0,r4]            ;2152
000cdc  70e6              STRB     r6,[r4,#3]            ;2152
000cde  2e01              CMP      r6,#1                 ;2153
000ce0  d003              BEQ      |L1.3306|
000ce2  2e02              CMP      r6,#2                 ;2153
000ce4  d001              BEQ      |L1.3306|
000ce6  200d              MOVS     r0,#0xd               ;2153
000ce8  e76c              B        |L1.3012|
                  |L1.3306|
000cea  fb0afa06          MUL      r10,r10,r6            ;2154
000cee  2041              MOVS     r0,#0x41              ;2156
000cf0  5d00              LDRB     r0,[r0,r4]            ;2156
000cf2  4606              MOV      r6,r0                 ;2156
000cf4  70a0              STRB     r0,[r4,#2]            ;2156
000cf6  b116              CBZ      r6,|L1.3326|
000cf8  1e70              SUBS     r0,r6,#1              ;2157
000cfa  4230              TST      r0,r6                 ;2157
000cfc  d001              BEQ      |L1.3330|
                  |L1.3326|
000cfe  200d              MOVS     r0,#0xd               ;2157
000d00  e760              B        |L1.3012|
                  |L1.3330|
000d02  2045              MOVS     r0,#0x45              ;2159
000d04  5d01              LDRB     r1,[r0,r4]            ;2159
000d06  f8940046          LDRB     r0,[r4,#0x46]         ;2159
000d0a  ea412000          ORR      r0,r1,r0,LSL #8       ;2159
000d0e  8120              STRH     r0,[r4,#8]            ;2159
000d10  7a20              LDRB     r0,[r4,#8]            ;2160
000d12  f0100f0f          TST      r0,#0xf               ;2160
000d16  d001              BEQ      |L1.3356|
000d18  200d              MOVS     r0,#0xd               ;2160
000d1a  e753              B        |L1.3012|
                  |L1.3356|
000d1c  2047              MOVS     r0,#0x47              ;2162
000d1e  5d01              LDRB     r1,[r0,r4]            ;2162
000d20  f8940048          LDRB     r0,[r4,#0x48]         ;2162
000d24  ea412000          ORR      r0,r1,r0,LSL #8       ;2162
000d28  9006              STR      r0,[sp,#0x18]         ;2162
000d2a  9806              LDR      r0,[sp,#0x18]         ;2163
000d2c  b9e0              CBNZ     r0,|L1.3432|
000d2e  f8940057          LDRB     r0,[r4,#0x57]         ;2163
000d32  0601              LSLS     r1,r0,#24             ;2163
000d34  f8940056          LDRB     r0,[r4,#0x56]         ;2163
000d38  ea414100          ORR      r1,r1,r0,LSL #16      ;2163
000d3c  f8940055          LDRB     r0,[r4,#0x55]         ;2163
000d40  ea412000          ORR      r0,r1,r0,LSL #8       ;2163
000d44  e00c              B        |L1.3424|
000d46  0000              DCW      0x0000
                  |L1.3400|
000d48  222a2b2c          DCB      """*+,:;<=>?[]|",127,0
000d4c  3a3b3c3d
000d50  3e3f5b5d
000d54  7c7f00  
000d57  00                DCB      0
                  |L1.3416|
                          DCD      0x00544146
                  |L1.3420|
                          DCD      FatFs
                  |L1.3424|
000d60  f8941054          LDRB     r1,[r4,#0x54]         ;2163
000d64  4308              ORRS     r0,r0,r1              ;2163
000d66  9006              STR      r0,[sp,#0x18]         ;2163
                  |L1.3432|
000d68  2042              MOVS     r0,#0x42              ;2165
000d6a  5d01              LDRB     r1,[r0,r4]            ;2165
000d6c  f8940043          LDRB     r0,[r4,#0x43]         ;2165
000d70  ea412000          ORR      r0,r1,r0,LSL #8       ;2165
000d74  9002              STR      r0,[sp,#8]            ;2165
000d76  9802              LDR      r0,[sp,#8]            ;2166
000d78  b908              CBNZ     r0,|L1.3454|
000d7a  200d              MOVS     r0,#0xd               ;2166
000d7c  e722              B        |L1.3012|
                  |L1.3454|
000d7e  9802              LDR      r0,[sp,#8]            ;2169
000d80  4450              ADD      r0,r0,r10             ;2169
000d82  8921              LDRH     r1,[r4,#8]            ;2169
000d84  eb001011          ADD      r0,r0,r1,LSR #4       ;2169
000d88  9005              STR      r0,[sp,#0x14]         ;2169
000d8a  e9dd0105          LDRD     r0,r1,[sp,#0x14]      ;2170
000d8e  4281              CMP      r1,r0                 ;2170
000d90  d201              BCS      |L1.3478|
000d92  200d              MOVS     r0,#0xd               ;2170
000d94  e716              B        |L1.3012|
                  |L1.3478|
000d96  e9dd1005          LDRD     r1,r0,[sp,#0x14]      ;2171
000d9a  1a40              SUBS     r0,r0,r1              ;2171
000d9c  78a1              LDRB     r1,[r4,#2]            ;2171
000d9e  fbb0f0f1          UDIV     r0,r0,r1              ;2171
000da2  9004              STR      r0,[sp,#0x10]         ;2171
000da4  9804              LDR      r0,[sp,#0x10]         ;2172
000da6  b908              CBNZ     r0,|L1.3500|
000da8  200d              MOVS     r0,#0xd               ;2172
000daa  e70b              B        |L1.3012|
                  |L1.3500|
000dac  2501              MOVS     r5,#1                 ;2173
000dae  f64071f6          MOV      r1,#0xff6             ;2174
000db2  9804              LDR      r0,[sp,#0x10]         ;2174
000db4  4288              CMP      r0,r1                 ;2174
000db6  d300              BCC      |L1.3514|
000db8  2502              MOVS     r5,#2                 ;2174
                  |L1.3514|
000dba  f64f71f6          MOV      r1,#0xfff6            ;2175
000dbe  9804              LDR      r0,[sp,#0x10]         ;2175
000dc0  4288              CMP      r0,r1                 ;2175
000dc2  d300              BCC      |L1.3526|
000dc4  2503              MOVS     r5,#3                 ;2175
                  |L1.3526|
000dc6  9804              LDR      r0,[sp,#0x10]         ;2178
000dc8  1c80              ADDS     r0,r0,#2              ;2178
000dca  61a0              STR      r0,[r4,#0x18]         ;2178
000dcc  f8c49020          STR      r9,[r4,#0x20]         ;2179
000dd0  9802              LDR      r0,[sp,#8]            ;2180
000dd2  4448              ADD      r0,r0,r9              ;2180
000dd4  6260              STR      r0,[r4,#0x24]         ;2180
000dd6  9805              LDR      r0,[sp,#0x14]         ;2181
000dd8  4448              ADD      r0,r0,r9              ;2181
000dda  62e0              STR      r0,[r4,#0x2c]         ;2181
000ddc  2d03              CMP      r5,#3                 ;2182
000dde  d116              BNE      |L1.3598|
000de0  8920              LDRH     r0,[r4,#8]            ;2183
000de2  b108              CBZ      r0,|L1.3560|
000de4  200d              MOVS     r0,#0xd               ;2183
000de6  e6ed              B        |L1.3012|
                  |L1.3560|
000de8  f8940063          LDRB     r0,[r4,#0x63]         ;2184
000dec  0601              LSLS     r1,r0,#24             ;2184
000dee  f8940062          LDRB     r0,[r4,#0x62]         ;2184
000df2  ea414100          ORR      r1,r1,r0,LSL #16      ;2184
000df6  f8940061          LDRB     r0,[r4,#0x61]         ;2184
000dfa  ea412000          ORR      r0,r1,r0,LSL #8       ;2184
000dfe  f8941060          LDRB     r1,[r4,#0x60]         ;2184
000e02  4308              ORRS     r0,r0,r1              ;2184
000e04  62a0              STR      r0,[r4,#0x28]         ;2184
000e06  69a0              LDR      r0,[r4,#0x18]         ;2185
000e08  0080              LSLS     r0,r0,#2              ;2185
000e0a  9003              STR      r0,[sp,#0xc]          ;2185
000e0c  e014              B        |L1.3640|
                  |L1.3598|
000e0e  8920              LDRH     r0,[r4,#8]            ;2187
000e10  b908              CBNZ     r0,|L1.3606|
000e12  200d              MOVS     r0,#0xd               ;2187
000e14  e6d6              B        |L1.3012|
                  |L1.3606|
000e16  6a60              LDR      r0,[r4,#0x24]         ;2188
000e18  4450              ADD      r0,r0,r10             ;2188
000e1a  62a0              STR      r0,[r4,#0x28]         ;2188
000e1c  2d02              CMP      r5,#2                 ;2189
000e1e  d102              BNE      |L1.3622|
000e20  69a0              LDR      r0,[r4,#0x18]         ;2190
000e22  0040              LSLS     r0,r0,#1              ;2190
000e24  e007              B        |L1.3638|
                  |L1.3622|
000e26  7e20              LDRB     r0,[r4,#0x18]         ;2190
000e28  f0000001          AND      r0,r0,#1              ;2190
000e2c  69a1              LDR      r1,[r4,#0x18]         ;2190
000e2e  eb010141          ADD      r1,r1,r1,LSL #1       ;2190
000e32  eb000051          ADD      r0,r0,r1,LSR #1       ;2190
                  |L1.3638|
000e36  9003              STR      r0,[sp,#0xc]          ;2190
                  |L1.3640|
000e38  69e1              LDR      r1,[r4,#0x1c]         ;2192
000e3a  9803              LDR      r0,[sp,#0xc]          ;2192
000e3c  f20010ff          ADD      r0,r0,#0x1ff          ;2192
000e40  ebb12f50          CMP      r1,r0,LSR #9          ;2192
000e44  d201              BCS      |L1.3658|
000e46  200d              MOVS     r0,#0xd               ;2193
000e48  e6bc              B        |L1.3012|
                  |L1.3658|
000e4a  f04f30ff          MOV      r0,#0xffffffff        ;2197
000e4e  6120              STR      r0,[r4,#0x10]         ;2197
000e50  2000              MOVS     r0,#0                 ;2198
000e52  60e0              STR      r0,[r4,#0xc]          ;2198
000e54  2d03              CMP      r5,#3                 ;2201
000e56  d15c              BNE      |L1.3858|
000e58  7160              STRB     r0,[r4,#5]            ;2202
000e5a  f8941064          LDRB     r1,[r4,#0x64]         ;2203
000e5e  f8940065          LDRB     r0,[r4,#0x65]         ;2203
000e62  ea412000          ORR      r0,r1,r0,LSL #8       ;2203
000e66  4448              ADD      r0,r0,r9              ;2203
000e68  6160              STR      r0,[r4,#0x14]         ;2203
000e6a  7860              LDRB     r0,[r4,#1]            ;2204
000e6c  2301              MOVS     r3,#1                 ;2204
000e6e  f1040134          ADD      r1,r4,#0x34           ;2204
000e72  6962              LDR      r2,[r4,#0x14]         ;2204
000e74  f7fffffe          BL       disk_read
000e78  bbf0              CBNZ     r0,|L1.3832|
000e7a  f8941232          LDRB     r1,[r4,#0x232]        ;2205
000e7e  f8940233          LDRB     r0,[r4,#0x233]        ;2205
000e82  ea412000          ORR      r0,r1,r0,LSL #8       ;2205
000e86  f5a0412a          SUB      r1,r0,#0xaa00         ;2205
000e8a  3955              SUBS     r1,r1,#0x55           ;2205
000e8c  d141              BNE      |L1.3858|
000e8e  2037              MOVS     r0,#0x37              ;2206
000e90  5d00              LDRB     r0,[r0,r4]            ;2206
000e92  0601              LSLS     r1,r0,#24             ;2206
000e94  2036              MOVS     r0,#0x36              ;2206
000e96  5d00              LDRB     r0,[r0,r4]            ;2206
000e98  ea414100          ORR      r1,r1,r0,LSL #16      ;2206
000e9c  2035              MOVS     r0,#0x35              ;2206
000e9e  5d00              LDRB     r0,[r0,r4]            ;2206
000ea0  ea412000          ORR      r0,r1,r0,LSL #8       ;2206
000ea4  f8941034          LDRB     r1,[r4,#0x34]         ;2206
000ea8  4308              ORRS     r0,r0,r1              ;2206
000eaa  49fe              LDR      r1,|L1.4772|
000eac  4288              CMP      r0,r1                 ;2206
000eae  d130              BNE      |L1.3858|
000eb0  f894021b          LDRB     r0,[r4,#0x21b]        ;2207
000eb4  0601              LSLS     r1,r0,#24             ;2207
000eb6  f894021a          LDRB     r0,[r4,#0x21a]        ;2207
000eba  ea414100          ORR      r1,r1,r0,LSL #16      ;2207
000ebe  f8940219          LDRB     r0,[r4,#0x219]        ;2207
000ec2  ea412000          ORR      r0,r1,r0,LSL #8       ;2207
000ec6  f8941218          LDRB     r1,[r4,#0x218]        ;2207
000eca  4308              ORRS     r0,r0,r1              ;2207
000ecc  49f6              LDR      r1,|L1.4776|
000ece  4288              CMP      r0,r1                 ;2207
000ed0  d11f              BNE      |L1.3858|
000ed2  f8940223          LDRB     r0,[r4,#0x223]        ;2208
000ed6  0601              LSLS     r1,r0,#24             ;2208
000ed8  f8940222          LDRB     r0,[r4,#0x222]        ;2208
000edc  ea414100          ORR      r1,r1,r0,LSL #16      ;2208
000ee0  f8940221          LDRB     r0,[r4,#0x221]        ;2208
000ee4  ea412000          ORR      r0,r1,r0,LSL #8       ;2208
000ee8  f8941220          LDRB     r1,[r4,#0x220]        ;2208
000eec  4308              ORRS     r0,r0,r1              ;2208
000eee  60e0              STR      r0,[r4,#0xc]          ;2208
000ef0  f894021f          LDRB     r0,[r4,#0x21f]        ;2209
000ef4  0601              LSLS     r1,r0,#24             ;2209
000ef6  e000              B        |L1.3834|
                  |L1.3832|
000ef8  e00b              B        |L1.3858|
                  |L1.3834|
000efa  f894021e          LDRB     r0,[r4,#0x21e]        ;2209
000efe  ea414100          ORR      r1,r1,r0,LSL #16      ;2209
000f02  f894021d          LDRB     r0,[r4,#0x21d]        ;2209
000f06  ea412000          ORR      r0,r1,r0,LSL #8       ;2209
000f0a  f894121c          LDRB     r1,[r4,#0x21c]        ;2209
000f0e  4308              ORRS     r0,r0,r1              ;2209
000f10  6120              STR      r0,[r4,#0x10]         ;2209
                  |L1.3858|
000f12  7025              STRB     r5,[r4,#0]            ;2213
000f14  48e5              LDR      r0,|L1.4780|
000f16  8800              LDRH     r0,[r0,#0]            ;2214  ; Fsid
000f18  1c40              ADDS     r0,r0,#1              ;2214
000f1a  b280              UXTH     r0,r0                 ;2214
000f1c  49e3              LDR      r1,|L1.4780|
000f1e  8008              STRH     r0,[r1,#0]            ;2214
000f20  80e0              STRH     r0,[r4,#6]            ;2214
000f22  2000              MOVS     r0,#0                 ;2215
000f24  6320              STR      r0,[r4,#0x30]         ;2215
000f26  7120              STRB     r0,[r4,#4]            ;2216
000f28  bf00              NOP                            ;2224
000f2a  e64b              B        |L1.3012|
;;;2226   
                          ENDP

                  validate PROC
;;;2234   static
;;;2235   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000f2c  b570              PUSH     {r4-r6,lr}
;;;2236   	void* obj		/* Pointer to the object FIL/DIR to check validity */
;;;2237   )
;;;2238   {
000f2e  4605              MOV      r5,r0
;;;2239   	FIL *fil = (FIL*)obj;	/* Assuming offset of fs and id in the FIL/DIR is identical */
000f30  462c              MOV      r4,r5
;;;2240   
;;;2241   
;;;2242   	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
000f32  b14c              CBZ      r4,|L1.3912|
000f34  6820              LDR      r0,[r4,#0]
000f36  b138              CBZ      r0,|L1.3912|
000f38  6820              LDR      r0,[r4,#0]
000f3a  7800              LDRB     r0,[r0,#0]
000f3c  b120              CBZ      r0,|L1.3912|
000f3e  6820              LDR      r0,[r4,#0]
000f40  88c0              LDRH     r0,[r0,#6]
000f42  88a1              LDRH     r1,[r4,#4]
000f44  4288              CMP      r0,r1
000f46  d001              BEQ      |L1.3916|
                  |L1.3912|
;;;2243   		return FR_INVALID_OBJECT;
000f48  2009              MOVS     r0,#9
                  |L1.3914|
;;;2244   
;;;2245   	ENTER_FF(fil->fs);		/* Lock file system */
;;;2246   
;;;2247   	if (disk_status(fil->fs->drv) & STA_NOINIT)
;;;2248   		return FR_NOT_READY;
;;;2249   
;;;2250   	return FR_OK;
;;;2251   }
000f4a  bd70              POP      {r4-r6,pc}
                  |L1.3916|
000f4c  6821              LDR      r1,[r4,#0]            ;2247
000f4e  7848              LDRB     r0,[r1,#1]            ;2247
000f50  f7fffffe          BL       disk_status
000f54  f0100f01          TST      r0,#1                 ;2247
000f58  d001              BEQ      |L1.3934|
000f5a  2003              MOVS     r0,#3                 ;2248
000f5c  e7f5              B        |L1.3914|
                  |L1.3934|
000f5e  2000              MOVS     r0,#0                 ;2250
000f60  e7f3              B        |L1.3914|
;;;2252   
                          ENDP

                  f_mount PROC
;;;2267   
;;;2268   FRESULT f_mount (
000f62  4602              MOV      r2,r0
;;;2269   	BYTE vol,		/* Logical drive number to be mounted/unmounted */
;;;2270   	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
;;;2271   )
;;;2272   {
;;;2273   	FATFS *rfs;
;;;2274   
;;;2275   
;;;2276   	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
000f64  2a01              CMP      r2,#1
000f66  db01              BLT      |L1.3948|
;;;2277   		return FR_INVALID_DRIVE;
000f68  200b              MOVS     r0,#0xb
                  |L1.3946|
;;;2278   	rfs = FatFs[vol];			/* Get current fs object */
;;;2279   
;;;2280   	if (rfs) {
;;;2281   #if _FS_LOCK
;;;2282   		clear_lock(rfs);
;;;2283   #endif
;;;2284   #if _FS_REENTRANT				/* Discard sync object of the current volume */
;;;2285   		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
;;;2286   #endif
;;;2287   		rfs->fs_type = 0;		/* Clear old fs object */
;;;2288   	}
;;;2289   
;;;2290   	if (fs) {
;;;2291   		fs->fs_type = 0;		/* Clear new fs object */
;;;2292   #if _FS_REENTRANT				/* Create sync object for the new volume */
;;;2293   		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
;;;2294   #endif
;;;2295   	}
;;;2296   	FatFs[vol] = fs;			/* Register new fs object */
;;;2297   
;;;2298   	return FR_OK;
;;;2299   }
000f6a  4770              BX       lr
                  |L1.3948|
000f6c  48d0              LDR      r0,|L1.4784|
000f6e  f8503022          LDR      r3,[r0,r2,LSL #2]     ;2278
000f72  b10b              CBZ      r3,|L1.3960|
000f74  2000              MOVS     r0,#0                 ;2287
000f76  7018              STRB     r0,[r3,#0]            ;2287
                  |L1.3960|
000f78  b109              CBZ      r1,|L1.3966|
000f7a  2000              MOVS     r0,#0                 ;2291
000f7c  7008              STRB     r0,[r1,#0]            ;2291
                  |L1.3966|
000f7e  48cc              LDR      r0,|L1.4784|
000f80  f8401022          STR      r1,[r0,r2,LSL #2]     ;2296
000f84  2000              MOVS     r0,#0                 ;2298
000f86  e7f0              B        |L1.3946|
;;;2300   
                          ENDP

                  f_open PROC
;;;2307   
;;;2308   FRESULT f_open (
000f88  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2309   	FIL *fp,			/* Pointer to the blank file object */
;;;2310   	const TCHAR *path,	/* Pointer to the file name */
;;;2311   	BYTE mode			/* Access mode and file open mode flags */
;;;2312   )
;;;2313   {
000f8c  b08a              SUB      sp,sp,#0x28
000f8e  4605              MOV      r5,r0
000f90  4616              MOV      r6,r2
;;;2314   	FRESULT res;
;;;2315   	DIR dj;
;;;2316   	BYTE *dir;
;;;2317   	DEF_NAMEBUF;
;;;2318   
;;;2319   
;;;2320   	if (!fp) return FR_INVALID_OBJECT;
000f92  b91d              CBNZ     r5,|L1.3996|
000f94  2009              MOVS     r0,#9
                  |L1.3990|
;;;2321   	fp->fs = 0;			/* Clear file object */
;;;2322   
;;;2323   #if !_FS_READONLY
;;;2324   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
;;;2325   	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
;;;2326   #else
;;;2327   	mode &= FA_READ;
;;;2328   	res = chk_mounted(&path, &dj.fs, 0);
;;;2329   #endif
;;;2330   	if (res == FR_OK) {
;;;2331   		INIT_BUF(dj);
;;;2332   		res = follow_path(&dj, path);	/* Follow the file path */
;;;2333   		dir = dj.dir;
;;;2334   #if !_FS_READONLY	/* R/W configuration */
;;;2335   		if (res == FR_OK) {
;;;2336   			if (!dir)	/* Current dir itself */
;;;2337   				res = FR_INVALID_NAME;
;;;2338   #if _FS_LOCK
;;;2339   			else
;;;2340   				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2341   #endif
;;;2342   		}
;;;2343   		/* Create or Open a file */
;;;2344   		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;2345   			DWORD dw, cl;
;;;2346   
;;;2347   			if (res != FR_OK) {					/* No file, create new */
;;;2348   				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
;;;2349   #if _FS_LOCK
;;;2350   					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2351   #else
;;;2352   					res = dir_register(&dj);
;;;2353   #endif
;;;2354   				mode |= FA_CREATE_ALWAYS;		/* File is created */
;;;2355   				dir = dj.dir;					/* New entry */
;;;2356   			}
;;;2357   			else {								/* Any object is already existing */
;;;2358   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
;;;2359   					res = FR_DENIED;
;;;2360   				} else {
;;;2361   					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
;;;2362   						res = FR_EXIST;
;;;2363   				}
;;;2364   			}
;;;2365   			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
;;;2366   				dw = get_fattime();					/* Created time */
;;;2367   				ST_DWORD(dir+DIR_CrtTime, dw);
;;;2368   				dir[DIR_Attr] = 0;					/* Reset attribute */
;;;2369   				ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
;;;2370   				cl = ld_clust(dj.fs, dir);			/* Get start cluster */
;;;2371   				st_clust(dir, 0);					/* cluster = 0 */
;;;2372   				dj.fs->wflag = 1;
;;;2373   				if (cl) {							/* Remove the cluster chain if exist */
;;;2374   					dw = dj.fs->winsect;
;;;2375   					res = remove_chain(dj.fs, cl);
;;;2376   					if (res == FR_OK) {
;;;2377   						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;2378   						res = move_window(dj.fs, dw);
;;;2379   					}
;;;2380   				}
;;;2381   			}
;;;2382   		}
;;;2383   		else {	/* Open an existing file */
;;;2384   			if (res == FR_OK) {						/* Follow succeeded */
;;;2385   				if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
;;;2386   					res = FR_NO_FILE;
;;;2387   				} else {
;;;2388   					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;2389   						res = FR_DENIED;
;;;2390   				}
;;;2391   			}
;;;2392   		}
;;;2393   		if (res == FR_OK) {
;;;2394   			if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
;;;2395   				mode |= FA__WRITTEN;
;;;2396   			fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
;;;2397   			fp->dir_ptr = dir;
;;;2398   #if _FS_LOCK
;;;2399   			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2400   			if (!fp->lockid) res = FR_INT_ERR;
;;;2401   #endif
;;;2402   		}
;;;2403   
;;;2404   #else				/* R/O configuration */
;;;2405   		if (res == FR_OK) {					/* Follow succeeded */
;;;2406   			dir = dj.dir;
;;;2407   			if (!dir) {						/* Current dir itself */
;;;2408   				res = FR_INVALID_NAME;
;;;2409   			} else {
;;;2410   				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;2411   					res = FR_NO_FILE;
;;;2412   			}
;;;2413   		}
;;;2414   #endif
;;;2415   		FREE_BUF();
;;;2416   
;;;2417   		if (res == FR_OK) {
;;;2418   			fp->flag = mode;					/* File access mode */
;;;2419   			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
;;;2420   			fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
;;;2421   			fp->fptr = 0;						/* File pointer */
;;;2422   			fp->dsect = 0;
;;;2423   #if _USE_FASTSEEK
;;;2424   			fp->cltbl = 0;						/* Normal seek mode */
;;;2425   #endif
;;;2426   			fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
;;;2427   		}
;;;2428   	}
;;;2429   
;;;2430   	LEAVE_FF(dj.fs, res);
;;;2431   }
000f96  b00d              ADD      sp,sp,#0x34
000f98  e8bd83f0          POP      {r4-r9,pc}
                  |L1.3996|
000f9c  2000              MOVS     r0,#0                 ;2321
000f9e  6028              STR      r0,[r5,#0]            ;2321
000fa0  f006061f          AND      r6,r6,#0x1f           ;2324
000fa4  f0260201          BIC      r2,r6,#1              ;2325
000fa8  a903              ADD      r1,sp,#0xc            ;2325
000faa  a80b              ADD      r0,sp,#0x2c           ;2325
000fac  f7fffffe          BL       chk_mounted
000fb0  4607              MOV      r7,r0                 ;2325
000fb2  2f00              CMP      r7,#0                 ;2330
000fb4  d17e              BNE      |L1.4276|
000fb6  f8cdd024          STR      sp,[sp,#0x24]         ;2331
000fba  a803              ADD      r0,sp,#0xc            ;2332
000fbc  990b              LDR      r1,[sp,#0x2c]         ;2332
000fbe  f7fffffe          BL       follow_path
000fc2  4607              MOV      r7,r0                 ;2332
000fc4  9c08              LDR      r4,[sp,#0x20]         ;2333
000fc6  b90f              CBNZ     r7,|L1.4044|
000fc8  b904              CBNZ     r4,|L1.4044|
000fca  2706              MOVS     r7,#6                 ;2337
                  |L1.4044|
000fcc  f0160f1c          TST      r6,#0x1c              ;2344
000fd0  d050              BEQ      |L1.4212|
000fd2  b14f              CBZ      r7,|L1.4072|
000fd4  2f04              CMP      r7,#4                 ;2348
000fd6  d103              BNE      |L1.4064|
000fd8  a803              ADD      r0,sp,#0xc            ;2352
000fda  f7fffffe          BL       dir_register
000fde  4607              MOV      r7,r0                 ;2352
                  |L1.4064|
000fe0  f0460608          ORR      r6,r6,#8              ;2354
000fe4  9c08              LDR      r4,[sp,#0x20]         ;2355
000fe6  e009              B        |L1.4092|
                  |L1.4072|
000fe8  7ae0              LDRB     r0,[r4,#0xb]          ;2358
000fea  f0100f11          TST      r0,#0x11              ;2358
000fee  d001              BEQ      |L1.4084|
000ff0  2707              MOVS     r7,#7                 ;2359
000ff2  e003              B        |L1.4092|
                  |L1.4084|
000ff4  f0160f04          TST      r6,#4                 ;2361
000ff8  d000              BEQ      |L1.4092|
000ffa  2708              MOVS     r7,#8                 ;2362
                  |L1.4092|
000ffc  2f00              CMP      r7,#0                 ;2365
000ffe  d138              BNE      |L1.4210|
001000  f0160f08          TST      r6,#8                 ;2365
001004  d035              BEQ      |L1.4210|
001006  f7fffffe          BL       get_fattime
00100a  4680              MOV      r8,r0                 ;2366
00100c  f884800e          STRB     r8,[r4,#0xe]          ;2367
001010  ea4f2118          LSR      r1,r8,#8              ;2367
001014  73e1              STRB     r1,[r4,#0xf]          ;2367
001016  ea4f4118          LSR      r1,r8,#16             ;2367
00101a  7421              STRB     r1,[r4,#0x10]         ;2367
00101c  ea4f6118          LSR      r1,r8,#24             ;2367
001020  7461              STRB     r1,[r4,#0x11]         ;2367
001022  2000              MOVS     r0,#0                 ;2368
001024  72e0              STRB     r0,[r4,#0xb]          ;2368
001026  7720              STRB     r0,[r4,#0x1c]         ;2369
001028  2100              MOVS     r1,#0                 ;2369
00102a  7761              STRB     r1,[r4,#0x1d]         ;2369
00102c  77a1              STRB     r1,[r4,#0x1e]         ;2369
00102e  77e1              STRB     r1,[r4,#0x1f]         ;2369
001030  4621              MOV      r1,r4                 ;2370
001032  9803              LDR      r0,[sp,#0xc]          ;2370
001034  f7fffffe          BL       ld_clust
001038  4681              MOV      r9,r0                 ;2370
00103a  2100              MOVS     r1,#0                 ;2371
00103c  4620              MOV      r0,r4                 ;2371
00103e  f7fffffe          BL       st_clust
001042  2001              MOVS     r0,#1                 ;2372
001044  9903              LDR      r1,[sp,#0xc]          ;2372
001046  7108              STRB     r0,[r1,#4]            ;2372
001048  f1b90f00          CMP      r9,#0                 ;2373
00104c  d011              BEQ      |L1.4210|
00104e  9803              LDR      r0,[sp,#0xc]          ;2374
001050  f8d08030          LDR      r8,[r0,#0x30]         ;2374
001054  4649              MOV      r1,r9                 ;2375
001056  9803              LDR      r0,[sp,#0xc]          ;2375
001058  f7fffffe          BL       remove_chain
00105c  4607              MOV      r7,r0                 ;2375
00105e  b947              CBNZ     r7,|L1.4210|
001060  f1a90001          SUB      r0,r9,#1              ;2377
001064  9903              LDR      r1,[sp,#0xc]          ;2377
001066  60c8              STR      r0,[r1,#0xc]          ;2377
001068  4641              MOV      r1,r8                 ;2378
00106a  9803              LDR      r0,[sp,#0xc]          ;2378
00106c  f7fffffe          BL       move_window
001070  4607              MOV      r7,r0                 ;2378
                  |L1.4210|
001072  e00e              B        |L1.4242|
                  |L1.4212|
001074  b96f              CBNZ     r7,|L1.4242|
001076  7ae0              LDRB     r0,[r4,#0xb]          ;2385
001078  f0100f10          TST      r0,#0x10              ;2385
00107c  d001              BEQ      |L1.4226|
00107e  2704              MOVS     r7,#4                 ;2386
001080  e007              B        |L1.4242|
                  |L1.4226|
001082  f0160f02          TST      r6,#2                 ;2388
001086  d004              BEQ      |L1.4242|
001088  7ae0              LDRB     r0,[r4,#0xb]          ;2388
00108a  f0100f01          TST      r0,#1                 ;2388
00108e  d000              BEQ      |L1.4242|
001090  2707              MOVS     r7,#7                 ;2389
                  |L1.4242|
001092  b947              CBNZ     r7,|L1.4262|
001094  f0160f08          TST      r6,#8                 ;2394
001098  d001              BEQ      |L1.4254|
00109a  f0460620          ORR      r6,r6,#0x20           ;2395
                  |L1.4254|
00109e  9803              LDR      r0,[sp,#0xc]          ;2396
0010a0  6b00              LDR      r0,[r0,#0x30]         ;2396
0010a2  61e8              STR      r0,[r5,#0x1c]         ;2396
0010a4  622c              STR      r4,[r5,#0x20]         ;2397
                  |L1.4262|
0010a6  b92f              CBNZ     r7,|L1.4276|
0010a8  71ae              STRB     r6,[r5,#6]            ;2418
0010aa  4621              MOV      r1,r4                 ;2419
0010ac  9803              LDR      r0,[sp,#0xc]          ;2419
0010ae  f7fffffe          BL       ld_clust
0010b2  e000              B        |L1.4278|
                  |L1.4276|
0010b4  e013              B        |L1.4318|
                  |L1.4278|
0010b6  6128              STR      r0,[r5,#0x10]         ;2419
0010b8  7fe0              LDRB     r0,[r4,#0x1f]         ;2420
0010ba  0601              LSLS     r1,r0,#24             ;2420
0010bc  7fa0              LDRB     r0,[r4,#0x1e]         ;2420
0010be  ea414100          ORR      r1,r1,r0,LSL #16      ;2420
0010c2  7f60              LDRB     r0,[r4,#0x1d]         ;2420
0010c4  ea412000          ORR      r0,r1,r0,LSL #8       ;2420
0010c8  7f21              LDRB     r1,[r4,#0x1c]         ;2420
0010ca  4308              ORRS     r0,r0,r1              ;2420
0010cc  60e8              STR      r0,[r5,#0xc]          ;2420
0010ce  2000              MOVS     r0,#0                 ;2421
0010d0  60a8              STR      r0,[r5,#8]            ;2421
0010d2  61a8              STR      r0,[r5,#0x18]         ;2422
0010d4  9803              LDR      r0,[sp,#0xc]          ;2426
0010d6  6028              STR      r0,[r5,#0]            ;2426
0010d8  9803              LDR      r0,[sp,#0xc]          ;2426
0010da  88c0              LDRH     r0,[r0,#6]            ;2426
0010dc  80a8              STRH     r0,[r5,#4]            ;2426
                  |L1.4318|
0010de  4638              MOV      r0,r7                 ;2430
0010e0  e759              B        |L1.3990|
;;;2432   
                          ENDP

                  f_read PROC
;;;2439   
;;;2440   FRESULT f_read (
0010e2  e92d4fff          PUSH     {r0-r11,lr}
;;;2441   	FIL *fp, 		/* Pointer to the file object */
;;;2442   	void *buff,		/* Pointer to data buffer */
;;;2443   	UINT btr,		/* Number of bytes to read */
;;;2444   	UINT *br		/* Pointer to number of bytes read */
;;;2445   )
;;;2446   {
0010e6  b083              SUB      sp,sp,#0xc
0010e8  4604              MOV      r4,r0
0010ea  4615              MOV      r5,r2
0010ec  469a              MOV      r10,r3
;;;2447   	FRESULT res;
;;;2448   	DWORD clst, sect, remain;
;;;2449   	UINT rcnt, cc;
;;;2450   	BYTE csect, *rbuff = (BYTE*)buff;
0010ee  f8ddb010          LDR      r11,[sp,#0x10]
;;;2451   
;;;2452   
;;;2453   	*br = 0;	/* Clear read byte counter */
0010f2  2000              MOVS     r0,#0
0010f4  f8ca0000          STR      r0,[r10,#0]
;;;2454   
;;;2455   	res = validate(fp);							/* Check validity */
0010f8  4620              MOV      r0,r4
0010fa  f7fffffe          BL       validate
0010fe  9002              STR      r0,[sp,#8]
;;;2456   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
001100  9802              LDR      r0,[sp,#8]
001102  b118              CBZ      r0,|L1.4364|
001104  9802              LDR      r0,[sp,#8]
                  |L1.4358|
;;;2457   	if (fp->flag & FA__ERROR)					/* Aborted file? */
;;;2458   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2459   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2460   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2461   	remain = fp->fsize - fp->fptr;
;;;2462   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2463   
;;;2464   	for ( ;  btr;								/* Repeat until all data read */
;;;2465   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2466   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2467   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2468   			if (!csect) {						/* On the cluster boundary? */
;;;2469   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2470   					clst = fp->sclust;			/* Follow from the origin */
;;;2471   				} else {						/* Middle or end of the file */
;;;2472   #if _USE_FASTSEEK
;;;2473   					if (fp->cltbl)
;;;2474   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2475   					else
;;;2476   #endif
;;;2477   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2478   				}
;;;2479   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2480   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2481   				fp->clust = clst;				/* Update current cluster */
;;;2482   			}
;;;2483   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2484   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2485   			sect += csect;
;;;2486   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2487   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2488   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2489   					cc = fp->fs->csize - csect;
;;;2490   				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
;;;2491   					ABORT(fp->fs, FR_DISK_ERR);
;;;2492   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2493   #if _FS_TINY
;;;2494   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2495   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2496   #else
;;;2497   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2498   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2499   #endif
;;;2500   #endif
;;;2501   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2502   				continue;
;;;2503   			}
;;;2504   #if !_FS_TINY
;;;2505   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2506   #if !_FS_READONLY
;;;2507   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2508   					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2509   						ABORT(fp->fs, FR_DISK_ERR);
;;;2510   					fp->flag &= ~FA__DIRTY;
;;;2511   				}
;;;2512   #endif
;;;2513   				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
;;;2514   					ABORT(fp->fs, FR_DISK_ERR);
;;;2515   			}
;;;2516   #endif
;;;2517   			fp->dsect = sect;
;;;2518   		}
;;;2519   		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2520   		if (rcnt > btr) rcnt = btr;
;;;2521   #if _FS_TINY
;;;2522   		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
;;;2523   			ABORT(fp->fs, FR_DISK_ERR);
;;;2524   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2525   #else
;;;2526   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2527   #endif
;;;2528   	}
;;;2529   
;;;2530   	LEAVE_FF(fp->fs, FR_OK);
;;;2531   }
001106  b007              ADD      sp,sp,#0x1c
001108  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4364|
00110c  79a0              LDRB     r0,[r4,#6]            ;2457
00110e  f0100f80          TST      r0,#0x80              ;2457
001112  d001              BEQ      |L1.4376|
001114  2002              MOVS     r0,#2                 ;2458
001116  e7f6              B        |L1.4358|
                  |L1.4376|
001118  79a0              LDRB     r0,[r4,#6]            ;2459
00111a  f0100f01          TST      r0,#1                 ;2459
00111e  d101              BNE      |L1.4388|
001120  2007              MOVS     r0,#7                 ;2460
001122  e7f0              B        |L1.4358|
                  |L1.4388|
001124  e9d41002          LDRD     r1,r0,[r4,#8]         ;2461
001128  1a40              SUBS     r0,r0,r1              ;2461
00112a  9000              STR      r0,[sp,#0]            ;2461
00112c  9800              LDR      r0,[sp,#0]            ;2462
00112e  4285              CMP      r5,r0                 ;2462
001130  d900              BLS      |L1.4404|
001132  9d00              LDR      r5,[sp,#0]            ;2462
                  |L1.4404|
001134  e0b4              B        |L1.4768|
                  |L1.4406|
001136  8920              LDRH     r0,[r4,#8]            ;2466
001138  05c0              LSLS     r0,r0,#23             ;2466
00113a  0dc0              LSRS     r0,r0,#23             ;2466
00113c  d17e              BNE      |L1.4668|
00113e  6820              LDR      r0,[r4,#0]            ;2467
001140  7880              LDRB     r0,[r0,#2]            ;2467
001142  1e40              SUBS     r0,r0,#1              ;2467
001144  68a1              LDR      r1,[r4,#8]            ;2467
001146  ea002051          AND      r0,r0,r1,LSR #9       ;2467
00114a  f00009ff          AND      r9,r0,#0xff           ;2467
00114e  f1b90f00          CMP      r9,#0                 ;2468
001152  d11d              BNE      |L1.4496|
001154  68a0              LDR      r0,[r4,#8]            ;2469
001156  b910              CBNZ     r0,|L1.4446|
001158  6920              LDR      r0,[r4,#0x10]         ;2470
00115a  9001              STR      r0,[sp,#4]            ;2470
00115c  e004              B        |L1.4456|
                  |L1.4446|
00115e  6961              LDR      r1,[r4,#0x14]         ;2477
001160  6820              LDR      r0,[r4,#0]            ;2477
001162  f7fffffe          BL       get_fat
001166  9001              STR      r0,[sp,#4]            ;2477
                  |L1.4456|
001168  9801              LDR      r0,[sp,#4]            ;2479
00116a  2802              CMP      r0,#2                 ;2479
00116c  d205              BCS      |L1.4474|
00116e  79a0              LDRB     r0,[r4,#6]            ;2479
001170  f0400080          ORR      r0,r0,#0x80           ;2479
001174  71a0              STRB     r0,[r4,#6]            ;2479
001176  2002              MOVS     r0,#2                 ;2479
001178  e7c5              B        |L1.4358|
                  |L1.4474|
00117a  9801              LDR      r0,[sp,#4]            ;2480
00117c  1c40              ADDS     r0,r0,#1              ;2480
00117e  d105              BNE      |L1.4492|
001180  79a0              LDRB     r0,[r4,#6]            ;2480
001182  f0400080          ORR      r0,r0,#0x80           ;2480
001186  71a0              STRB     r0,[r4,#6]            ;2480
001188  2001              MOVS     r0,#1                 ;2480
00118a  e7bc              B        |L1.4358|
                  |L1.4492|
00118c  9801              LDR      r0,[sp,#4]            ;2481
00118e  6160              STR      r0,[r4,#0x14]         ;2481
                  |L1.4496|
001190  6961              LDR      r1,[r4,#0x14]         ;2483
001192  6820              LDR      r0,[r4,#0]            ;2483
001194  f7fffffe          BL       clust2sect
001198  4606              MOV      r6,r0                 ;2483
00119a  b92e              CBNZ     r6,|L1.4520|
00119c  79a0              LDRB     r0,[r4,#6]            ;2484
00119e  f0400080          ORR      r0,r0,#0x80           ;2484
0011a2  71a0              STRB     r0,[r4,#6]            ;2484
0011a4  2002              MOVS     r0,#2                 ;2484
0011a6  e7ae              B        |L1.4358|
                  |L1.4520|
0011a8  444e              ADD      r6,r6,r9              ;2485
0011aa  ea4f2855          LSR      r8,r5,#9              ;2486
0011ae  f1b80f00          CMP      r8,#0                 ;2487
0011b2  d02d              BEQ      |L1.4624|
0011b4  eb090008          ADD      r0,r9,r8              ;2488
0011b8  6821              LDR      r1,[r4,#0]            ;2488
0011ba  7889              LDRB     r1,[r1,#2]            ;2488
0011bc  4288              CMP      r0,r1                 ;2488
0011be  d903              BLS      |L1.4552|
0011c0  6820              LDR      r0,[r4,#0]            ;2489
0011c2  7880              LDRB     r0,[r0,#2]            ;2489
0011c4  eba00809          SUB      r8,r0,r9              ;2489
                  |L1.4552|
0011c8  f00803ff          AND      r3,r8,#0xff           ;2490
0011cc  6821              LDR      r1,[r4,#0]            ;2490
0011ce  7848              LDRB     r0,[r1,#1]            ;2490
0011d0  4632              MOV      r2,r6                 ;2490
0011d2  4659              MOV      r1,r11                ;2490
0011d4  f7fffffe          BL       disk_read
0011d8  b128              CBZ      r0,|L1.4582|
0011da  79a0              LDRB     r0,[r4,#6]            ;2491
0011dc  f0400080          ORR      r0,r0,#0x80           ;2491
0011e0  71a0              STRB     r0,[r4,#6]            ;2491
0011e2  2001              MOVS     r0,#1                 ;2491
0011e4  e78f              B        |L1.4358|
                  |L1.4582|
0011e6  79a0              LDRB     r0,[r4,#6]            ;2497
0011e8  f0100f40          TST      r0,#0x40              ;2497
0011ec  d00d              BEQ      |L1.4618|
0011ee  69a0              LDR      r0,[r4,#0x18]         ;2497
0011f0  1b80              SUBS     r0,r0,r6              ;2497
0011f2  4540              CMP      r0,r8                 ;2497
0011f4  d209              BCS      |L1.4618|
0011f6  69a1              LDR      r1,[r4,#0x18]         ;2498
0011f8  1b89              SUBS     r1,r1,r6              ;2498
0011fa  eb0b2041          ADD      r0,r11,r1,LSL #9      ;2498
0011fe  f44f7200          MOV      r2,#0x200             ;2498
001202  f1040124          ADD      r1,r4,#0x24           ;2498
001206  f7fffffe          BL       mem_cpy
                  |L1.4618|
00120a  ea4f2748          LSL      r7,r8,#9              ;2501
00120e  e03d              B        |L1.4748|
                  |L1.4624|
001210  69a0              LDR      r0,[r4,#0x18]         ;2505
001212  42b0              CMP      r0,r6                 ;2505
001214  d026              BEQ      |L1.4708|
001216  79a0              LDRB     r0,[r4,#6]            ;2507
001218  f0100f40          TST      r0,#0x40              ;2507
00121c  d013              BEQ      |L1.4678|
00121e  6821              LDR      r1,[r4,#0]            ;2508
001220  7848              LDRB     r0,[r1,#1]            ;2508
001222  2301              MOVS     r3,#1                 ;2508
001224  f1040124          ADD      r1,r4,#0x24           ;2508
001228  69a2              LDR      r2,[r4,#0x18]         ;2508
00122a  f7fffffe          BL       disk_write
00122e  b130              CBZ      r0,|L1.4670|
001230  79a0              LDRB     r0,[r4,#6]            ;2509
001232  f0400080          ORR      r0,r0,#0x80           ;2509
001236  71a0              STRB     r0,[r4,#6]            ;2509
001238  2001              MOVS     r0,#1                 ;2509
00123a  e764              B        |L1.4358|
                  |L1.4668|
00123c  e013              B        |L1.4710|
                  |L1.4670|
00123e  79a0              LDRB     r0,[r4,#6]            ;2510
001240  f0200040          BIC      r0,r0,#0x40           ;2510
001244  71a0              STRB     r0,[r4,#6]            ;2510
                  |L1.4678|
001246  6821              LDR      r1,[r4,#0]            ;2513
001248  7848              LDRB     r0,[r1,#1]            ;2513
00124a  2301              MOVS     r3,#1                 ;2513
00124c  4632              MOV      r2,r6                 ;2513
00124e  f1040124          ADD      r1,r4,#0x24           ;2513
001252  f7fffffe          BL       disk_read
001256  b128              CBZ      r0,|L1.4708|
001258  79a0              LDRB     r0,[r4,#6]            ;2514
00125a  f0400080          ORR      r0,r0,#0x80           ;2514
00125e  71a0              STRB     r0,[r4,#6]            ;2514
001260  2001              MOVS     r0,#1                 ;2514
001262  e750              B        |L1.4358|
                  |L1.4708|
001264  61a6              STR      r6,[r4,#0x18]         ;2517
                  |L1.4710|
001266  8920              LDRH     r0,[r4,#8]            ;2519
001268  f3c00008          UBFX     r0,r0,#0,#9           ;2519
00126c  f5c07700          RSB      r7,r0,#0x200          ;2519
001270  42af              CMP      r7,r5                 ;2520
001272  d900              BLS      |L1.4726|
001274  462f              MOV      r7,r5                 ;2520
                  |L1.4726|
001276  8920              LDRH     r0,[r4,#8]            ;2526
001278  f3c00208          UBFX     r2,r0,#0,#9           ;2526
00127c  f1040024          ADD      r0,r4,#0x24           ;2526
001280  1811              ADDS     r1,r2,r0              ;2526
001282  463a              MOV      r2,r7                 ;2526
001284  4658              MOV      r0,r11                ;2526
001286  f7fffffe          BL       mem_cpy
00128a  bf00              NOP                            ;2502
                  |L1.4748|
00128c  44bb              ADD      r11,r11,r7            ;2465
00128e  68a0              LDR      r0,[r4,#8]            ;2465
001290  4438              ADD      r0,r0,r7              ;2465
001292  60a0              STR      r0,[r4,#8]            ;2465
001294  f8da0000          LDR      r0,[r10,#0]           ;2465
001298  4438              ADD      r0,r0,r7              ;2465
00129a  f8ca0000          STR      r0,[r10,#0]           ;2465
00129e  1bed              SUBS     r5,r5,r7              ;2465
                  |L1.4768|
0012a0  2d00              CMP      r5,#0                 ;2464
0012a2  e007              B        |L1.4788|
                  |L1.4772|
                          DCD      0x41615252
                  |L1.4776|
                          DCD      0x61417272
                  |L1.4780|
                          DCD      Fsid
                  |L1.4784|
                          DCD      FatFs
                  |L1.4788|
0012b4  f47faf3f          BNE      |L1.4406|
0012b8  2000              MOVS     r0,#0                 ;2530
0012ba  e724              B        |L1.4358|
;;;2532   
                          ENDP

                  f_write PROC
;;;2540   
;;;2541   FRESULT f_write (
0012bc  e92d4fff          PUSH     {r0-r11,lr}
;;;2542   	FIL *fp,			/* Pointer to the file object */
;;;2543   	const void *buff,	/* Pointer to the data to be written */
;;;2544   	UINT btw,			/* Number of bytes to write */
;;;2545   	UINT *bw			/* Pointer to number of bytes written */
;;;2546   )
;;;2547   {
0012c0  b083              SUB      sp,sp,#0xc
0012c2  4604              MOV      r4,r0
0012c4  4615              MOV      r5,r2
0012c6  469b              MOV      r11,r3
;;;2548   	FRESULT res;
;;;2549   	DWORD clst, sect;
;;;2550   	UINT wcnt, cc;
;;;2551   	const BYTE *wbuff = (const BYTE*)buff;
0012c8  9804              LDR      r0,[sp,#0x10]
0012ca  9001              STR      r0,[sp,#4]
;;;2552   	BYTE csect;
;;;2553   
;;;2554   
;;;2555   	*bw = 0;	/* Clear write byte counter */
0012cc  2000              MOVS     r0,#0
0012ce  f8cb0000          STR      r0,[r11,#0]
;;;2556   
;;;2557   	res = validate(fp);						/* Check validity */
0012d2  4620              MOV      r0,r4
0012d4  f7fffffe          BL       validate
0012d8  9002              STR      r0,[sp,#8]
;;;2558   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
0012da  9802              LDR      r0,[sp,#8]
0012dc  b118              CBZ      r0,|L1.4838|
0012de  9802              LDR      r0,[sp,#8]
                  |L1.4832|
;;;2559   	if (fp->flag & FA__ERROR)				/* Aborted file? */
;;;2560   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2561   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2562   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2563   	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
;;;2564   
;;;2565   	for ( ;  btw;							/* Repeat until all data written */
;;;2566   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2567   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2568   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2569   			if (!csect) {					/* On the cluster boundary? */
;;;2570   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2571   					clst = fp->sclust;		/* Follow from the origin */
;;;2572   					if (clst == 0)			/* When no cluster is allocated, */
;;;2573   						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2574   				} else {					/* Middle or end of the file */
;;;2575   #if _USE_FASTSEEK
;;;2576   					if (fp->cltbl)
;;;2577   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2578   					else
;;;2579   #endif
;;;2580   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2581   				}
;;;2582   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2583   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2584   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2585   				fp->clust = clst;			/* Update current cluster */
;;;2586   			}
;;;2587   #if _FS_TINY
;;;2588   			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
;;;2589   				ABORT(fp->fs, FR_DISK_ERR);
;;;2590   #else
;;;2591   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2592   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2593   					ABORT(fp->fs, FR_DISK_ERR);
;;;2594   				fp->flag &= ~FA__DIRTY;
;;;2595   			}
;;;2596   #endif
;;;2597   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2598   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2599   			sect += csect;
;;;2600   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2601   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2602   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2603   					cc = fp->fs->csize - csect;
;;;2604   				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
;;;2605   					ABORT(fp->fs, FR_DISK_ERR);
;;;2606   #if _FS_TINY
;;;2607   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2608   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2609   					fp->fs->wflag = 0;
;;;2610   				}
;;;2611   #else
;;;2612   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2613   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2614   					fp->flag &= ~FA__DIRTY;
;;;2615   				}
;;;2616   #endif
;;;2617   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2618   				continue;
;;;2619   			}
;;;2620   #if _FS_TINY
;;;2621   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2622   				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
;;;2623   				fp->fs->winsect = sect;
;;;2624   			}
;;;2625   #else
;;;2626   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2627   				if (fp->fptr < fp->fsize &&
;;;2628   					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2629   						ABORT(fp->fs, FR_DISK_ERR);
;;;2630   			}
;;;2631   #endif
;;;2632   			fp->dsect = sect;
;;;2633   		}
;;;2634   		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2635   		if (wcnt > btw) wcnt = btw;
;;;2636   #if _FS_TINY
;;;2637   		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
;;;2638   			ABORT(fp->fs, FR_DISK_ERR);
;;;2639   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2640   		fp->fs->wflag = 1;
;;;2641   #else
;;;2642   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2643   		fp->flag |= FA__DIRTY;
;;;2644   #endif
;;;2645   	}
;;;2646   
;;;2647   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2648   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2649   
;;;2650   	LEAVE_FF(fp->fs, FR_OK);
;;;2651   }
0012e0  b007              ADD      sp,sp,#0x1c
0012e2  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.4838|
0012e6  79a0              LDRB     r0,[r4,#6]            ;2559
0012e8  f0100f80          TST      r0,#0x80              ;2559
0012ec  d001              BEQ      |L1.4850|
0012ee  2002              MOVS     r0,#2                 ;2560
0012f0  e7f6              B        |L1.4832|
                  |L1.4850|
0012f2  79a0              LDRB     r0,[r4,#6]            ;2561
0012f4  f0100f02          TST      r0,#2                 ;2561
0012f8  d101              BNE      |L1.4862|
0012fa  2007              MOVS     r0,#7                 ;2562
0012fc  e7f0              B        |L1.4832|
                  |L1.4862|
0012fe  68e0              LDR      r0,[r4,#0xc]          ;2563
001300  4428              ADD      r0,r0,r5              ;2563
001302  68e1              LDR      r1,[r4,#0xc]          ;2563
001304  4288              CMP      r0,r1                 ;2563
001306  d200              BCS      |L1.4874|
001308  2500              MOVS     r5,#0                 ;2563
                  |L1.4874|
00130a  e0cc              B        |L1.5286|
                  |L1.4876|
00130c  8920              LDRH     r0,[r4,#8]            ;2567
00130e  05c0              LSLS     r0,r0,#23             ;2567
001310  0dc0              LSRS     r0,r0,#23             ;2567
001312  d177              BNE      |L1.5124|
001314  6820              LDR      r0,[r4,#0]            ;2568
001316  7880              LDRB     r0,[r0,#2]            ;2568
001318  1e40              SUBS     r0,r0,#1              ;2568
00131a  68a1              LDR      r1,[r4,#8]            ;2568
00131c  ea002051          AND      r0,r0,r1,LSR #9       ;2568
001320  f0000aff          AND      r10,r0,#0xff          ;2568
001324  f1ba0f00          CMP      r10,#0                ;2569
001328  d12a              BNE      |L1.4992|
00132a  68a0              LDR      r0,[r4,#8]            ;2570
00132c  b958              CBNZ     r0,|L1.4934|
00132e  f8d48010          LDR      r8,[r4,#0x10]         ;2571
001332  f1b80f00          CMP      r8,#0                 ;2572
001336  d10b              BNE      |L1.4944|
001338  2100              MOVS     r1,#0                 ;2573
00133a  6820              LDR      r0,[r4,#0]            ;2573
00133c  f7fffffe          BL       create_chain
001340  4680              MOV      r8,r0                 ;2573
001342  6120              STR      r0,[r4,#0x10]         ;2573
001344  e004              B        |L1.4944|
                  |L1.4934|
001346  6961              LDR      r1,[r4,#0x14]         ;2580
001348  6820              LDR      r0,[r4,#0]            ;2580
00134a  f7fffffe          BL       create_chain
00134e  4680              MOV      r8,r0                 ;2580
                  |L1.4944|
001350  f1b80f00          CMP      r8,#0                 ;2582
001354  d100              BNE      |L1.4952|
001356  e0a9              B        |L1.5292|
                  |L1.4952|
001358  f1b80f01          CMP      r8,#1                 ;2583
00135c  d105              BNE      |L1.4970|
00135e  79a0              LDRB     r0,[r4,#6]            ;2583
001360  f0400080          ORR      r0,r0,#0x80           ;2583
001364  71a0              STRB     r0,[r4,#6]            ;2583
001366  2002              MOVS     r0,#2                 ;2583
001368  e7ba              B        |L1.4832|
                  |L1.4970|
00136a  f1180001          ADDS     r0,r8,#1              ;2584
00136e  d105              BNE      |L1.4988|
001370  79a0              LDRB     r0,[r4,#6]            ;2584
001372  f0400080          ORR      r0,r0,#0x80           ;2584
001376  71a0              STRB     r0,[r4,#6]            ;2584
001378  2001              MOVS     r0,#1                 ;2584
00137a  e7b1              B        |L1.4832|
                  |L1.4988|
00137c  f8c48014          STR      r8,[r4,#0x14]         ;2585
                  |L1.4992|
001380  79a0              LDRB     r0,[r4,#6]            ;2591
001382  f0100f40          TST      r0,#0x40              ;2591
001386  d012              BEQ      |L1.5038|
001388  6821              LDR      r1,[r4,#0]            ;2592
00138a  7848              LDRB     r0,[r1,#1]            ;2592
00138c  2301              MOVS     r3,#1                 ;2592
00138e  f1040124          ADD      r1,r4,#0x24           ;2592
001392  69a2              LDR      r2,[r4,#0x18]         ;2592
001394  f7fffffe          BL       disk_write
001398  b128              CBZ      r0,|L1.5030|
00139a  79a0              LDRB     r0,[r4,#6]            ;2593
00139c  f0400080          ORR      r0,r0,#0x80           ;2593
0013a0  71a0              STRB     r0,[r4,#6]            ;2593
0013a2  2001              MOVS     r0,#1                 ;2593
0013a4  e79c              B        |L1.4832|
                  |L1.5030|
0013a6  79a0              LDRB     r0,[r4,#6]            ;2594
0013a8  f0200040          BIC      r0,r0,#0x40           ;2594
0013ac  71a0              STRB     r0,[r4,#6]            ;2594
                  |L1.5038|
0013ae  6961              LDR      r1,[r4,#0x14]         ;2597
0013b0  6820              LDR      r0,[r4,#0]            ;2597
0013b2  f7fffffe          BL       clust2sect
0013b6  4606              MOV      r6,r0                 ;2597
0013b8  b92e              CBNZ     r6,|L1.5062|
0013ba  79a0              LDRB     r0,[r4,#6]            ;2598
0013bc  f0400080          ORR      r0,r0,#0x80           ;2598
0013c0  71a0              STRB     r0,[r4,#6]            ;2598
0013c2  2002              MOVS     r0,#2                 ;2598
0013c4  e78c              B        |L1.4832|
                  |L1.5062|
0013c6  4456              ADD      r6,r6,r10             ;2599
0013c8  ea4f2955          LSR      r9,r5,#9              ;2600
0013cc  f1b90f00          CMP      r9,#0                 ;2601
0013d0  d02f              BEQ      |L1.5170|
0013d2  eb0a0009          ADD      r0,r10,r9             ;2602
0013d6  6821              LDR      r1,[r4,#0]            ;2602
0013d8  7889              LDRB     r1,[r1,#2]            ;2602
0013da  4288              CMP      r0,r1                 ;2602
0013dc  d903              BLS      |L1.5094|
0013de  6820              LDR      r0,[r4,#0]            ;2603
0013e0  7880              LDRB     r0,[r0,#2]            ;2603
0013e2  eba0090a          SUB      r9,r0,r10             ;2603
                  |L1.5094|
0013e6  f00903ff          AND      r3,r9,#0xff           ;2604
0013ea  6821              LDR      r1,[r4,#0]            ;2604
0013ec  7848              LDRB     r0,[r1,#1]            ;2604
0013ee  4632              MOV      r2,r6                 ;2604
0013f0  9901              LDR      r1,[sp,#4]            ;2604
0013f2  f7fffffe          BL       disk_write
0013f6  b130              CBZ      r0,|L1.5126|
0013f8  79a0              LDRB     r0,[r4,#6]            ;2605
0013fa  f0400080          ORR      r0,r0,#0x80           ;2605
0013fe  71a0              STRB     r0,[r4,#6]            ;2605
001400  2001              MOVS     r0,#1                 ;2605
001402  e76d              B        |L1.4832|
                  |L1.5124|
001404  e02c              B        |L1.5216|
                  |L1.5126|
001406  69a0              LDR      r0,[r4,#0x18]         ;2612
001408  1b80              SUBS     r0,r0,r6              ;2612
00140a  4548              CMP      r0,r9                 ;2612
00140c  d20e              BCS      |L1.5164|
00140e  69a0              LDR      r0,[r4,#0x18]         ;2613
001410  1b80              SUBS     r0,r0,r6              ;2613
001412  9a01              LDR      r2,[sp,#4]            ;2613
001414  eb022140          ADD      r1,r2,r0,LSL #9       ;2613
001418  f44f7200          MOV      r2,#0x200             ;2613
00141c  f1040024          ADD      r0,r4,#0x24           ;2613
001420  f7fffffe          BL       mem_cpy
001424  79a0              LDRB     r0,[r4,#6]            ;2614
001426  f0200040          BIC      r0,r0,#0x40           ;2614
00142a  71a0              STRB     r0,[r4,#6]            ;2614
                  |L1.5164|
00142c  ea4f2749          LSL      r7,r9,#9              ;2617
001430  e02d              B        |L1.5262|
                  |L1.5170|
001432  69a0              LDR      r0,[r4,#0x18]         ;2626
001434  42b0              CMP      r0,r6                 ;2626
001436  d012              BEQ      |L1.5214|
001438  e9d40102          LDRD     r0,r1,[r4,#8]         ;2627
00143c  4288              CMP      r0,r1                 ;2627
00143e  d20e              BCS      |L1.5214|
001440  6821              LDR      r1,[r4,#0]            ;2628
001442  7848              LDRB     r0,[r1,#1]            ;2628
001444  2301              MOVS     r3,#1                 ;2628
001446  4632              MOV      r2,r6                 ;2628
001448  f1040124          ADD      r1,r4,#0x24           ;2628
00144c  f7fffffe          BL       disk_read
001450  b128              CBZ      r0,|L1.5214|
001452  79a0              LDRB     r0,[r4,#6]            ;2629
001454  f0400080          ORR      r0,r0,#0x80           ;2629
001458  71a0              STRB     r0,[r4,#6]            ;2629
00145a  2001              MOVS     r0,#1                 ;2629
00145c  e740              B        |L1.4832|
                  |L1.5214|
00145e  61a6              STR      r6,[r4,#0x18]         ;2632
                  |L1.5216|
001460  8920              LDRH     r0,[r4,#8]            ;2634
001462  f3c00008          UBFX     r0,r0,#0,#9           ;2634
001466  f5c07700          RSB      r7,r0,#0x200          ;2634
00146a  42af              CMP      r7,r5                 ;2635
00146c  d900              BLS      |L1.5232|
00146e  462f              MOV      r7,r5                 ;2635
                  |L1.5232|
001470  8921              LDRH     r1,[r4,#8]            ;2642
001472  f3c10208          UBFX     r2,r1,#0,#9           ;2642
001476  f1040124          ADD      r1,r4,#0x24           ;2642
00147a  1850              ADDS     r0,r2,r1              ;2642
00147c  463a              MOV      r2,r7                 ;2642
00147e  9901              LDR      r1,[sp,#4]            ;2642
001480  f7fffffe          BL       mem_cpy
001484  79a0              LDRB     r0,[r4,#6]            ;2643
001486  f0400040          ORR      r0,r0,#0x40           ;2643
00148a  71a0              STRB     r0,[r4,#6]            ;2643
00148c  bf00              NOP                            ;2618
                  |L1.5262|
00148e  9801              LDR      r0,[sp,#4]            ;2566
001490  4438              ADD      r0,r0,r7              ;2566
001492  9001              STR      r0,[sp,#4]            ;2566
001494  68a0              LDR      r0,[r4,#8]            ;2566
001496  4438              ADD      r0,r0,r7              ;2566
001498  60a0              STR      r0,[r4,#8]            ;2566
00149a  f8db0000          LDR      r0,[r11,#0]           ;2566
00149e  4438              ADD      r0,r0,r7              ;2566
0014a0  f8cb0000          STR      r0,[r11,#0]           ;2566
0014a4  1bed              SUBS     r5,r5,r7              ;2566
                  |L1.5286|
0014a6  2d00              CMP      r5,#0                 ;2565
0014a8  f47faf30          BNE      |L1.4876|
                  |L1.5292|
0014ac  bf00              NOP                            ;2582
0014ae  e9d40102          LDRD     r0,r1,[r4,#8]         ;2647
0014b2  4288              CMP      r0,r1                 ;2647
0014b4  d901              BLS      |L1.5306|
0014b6  68a0              LDR      r0,[r4,#8]            ;2647
0014b8  60e0              STR      r0,[r4,#0xc]          ;2647
                  |L1.5306|
0014ba  79a0              LDRB     r0,[r4,#6]            ;2648
0014bc  f0400020          ORR      r0,r0,#0x20           ;2648
0014c0  71a0              STRB     r0,[r4,#6]            ;2648
0014c2  2000              MOVS     r0,#0                 ;2650
0014c4  e70c              B        |L1.4832|
;;;2652   
                          ENDP

                  f_sync PROC
;;;2659   
;;;2660   FRESULT f_sync (
0014c6  e92d41f0          PUSH     {r4-r8,lr}
;;;2661   	FIL *fp		/* Pointer to the file object */
;;;2662   )
;;;2663   {
0014ca  4604              MOV      r4,r0
;;;2664   	FRESULT res;
;;;2665   	DWORD tm;
;;;2666   	BYTE *dir;
;;;2667   
;;;2668   
;;;2669   	res = validate(fp);					/* Check validity of the object */
0014cc  4620              MOV      r0,r4
0014ce  f7fffffe          BL       validate
0014d2  4607              MOV      r7,r0
;;;2670   	if (res == FR_OK) {
0014d4  2f00              CMP      r7,#0
0014d6  d14b              BNE      |L1.5488|
;;;2671   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
0014d8  79a0              LDRB     r0,[r4,#6]
0014da  f0100f20          TST      r0,#0x20
0014de  d047              BEQ      |L1.5488|
;;;2672   #if !_FS_TINY	/* Write-back dirty buffer */
;;;2673   			if (fp->flag & FA__DIRTY) {
0014e0  79a0              LDRB     r0,[r4,#6]
0014e2  f0100f40          TST      r0,#0x40
0014e6  d00f              BEQ      |L1.5384|
;;;2674   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
0014e8  6821              LDR      r1,[r4,#0]
0014ea  7848              LDRB     r0,[r1,#1]
0014ec  2301              MOVS     r3,#1
0014ee  f1040124          ADD      r1,r4,#0x24
0014f2  69a2              LDR      r2,[r4,#0x18]
0014f4  f7fffffe          BL       disk_write
0014f8  b110              CBZ      r0,|L1.5376|
;;;2675   					LEAVE_FF(fp->fs, FR_DISK_ERR);
0014fa  2001              MOVS     r0,#1
                  |L1.5372|
;;;2676   				fp->flag &= ~FA__DIRTY;
;;;2677   			}
;;;2678   #endif
;;;2679   			/* Update the directory entry */
;;;2680   			res = move_window(fp->fs, fp->dir_sect);
;;;2681   			if (res == FR_OK) {
;;;2682   				dir = fp->dir_ptr;
;;;2683   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2684   				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
;;;2685   				st_clust(dir, fp->sclust);					/* Update start cluster */
;;;2686   				tm = get_fattime();							/* Update updated time */
;;;2687   				ST_DWORD(dir+DIR_WrtTime, tm);
;;;2688   				ST_WORD(dir+DIR_LstAccDate, 0);
;;;2689   				fp->flag &= ~FA__WRITTEN;
;;;2690   				fp->fs->wflag = 1;
;;;2691   				res = sync_fs(fp->fs);
;;;2692   			}
;;;2693   		}
;;;2694   	}
;;;2695   
;;;2696   	LEAVE_FF(fp->fs, res);
;;;2697   }
0014fc  e8bd81f0          POP      {r4-r8,pc}
                  |L1.5376|
001500  79a0              LDRB     r0,[r4,#6]            ;2676
001502  f0200040          BIC      r0,r0,#0x40           ;2676
001506  71a0              STRB     r0,[r4,#6]            ;2676
                  |L1.5384|
001508  69e1              LDR      r1,[r4,#0x1c]         ;2680
00150a  6820              LDR      r0,[r4,#0]            ;2680
00150c  f7fffffe          BL       move_window
001510  4607              MOV      r7,r0                 ;2680
001512  2f00              CMP      r7,#0                 ;2681
001514  d12c              BNE      |L1.5488|
001516  6a25              LDR      r5,[r4,#0x20]         ;2682
001518  7ae8              LDRB     r0,[r5,#0xb]          ;2683
00151a  f0400020          ORR      r0,r0,#0x20           ;2683
00151e  72e8              STRB     r0,[r5,#0xb]          ;2683
001520  7b20              LDRB     r0,[r4,#0xc]          ;2684
001522  7728              STRB     r0,[r5,#0x1c]         ;2684
001524  89a0              LDRH     r0,[r4,#0xc]          ;2684
001526  0a01              LSRS     r1,r0,#8              ;2684
001528  7769              STRB     r1,[r5,#0x1d]         ;2684
00152a  68e0              LDR      r0,[r4,#0xc]          ;2684
00152c  0c01              LSRS     r1,r0,#16             ;2684
00152e  77a9              STRB     r1,[r5,#0x1e]         ;2684
001530  68e0              LDR      r0,[r4,#0xc]          ;2684
001532  0e01              LSRS     r1,r0,#24             ;2684
001534  77e9              STRB     r1,[r5,#0x1f]         ;2684
001536  4628              MOV      r0,r5                 ;2685
001538  6921              LDR      r1,[r4,#0x10]         ;2685
00153a  f7fffffe          BL       st_clust
00153e  f7fffffe          BL       get_fattime
001542  4606              MOV      r6,r0                 ;2686
001544  75ae              STRB     r6,[r5,#0x16]         ;2687
001546  0a31              LSRS     r1,r6,#8              ;2687
001548  75e9              STRB     r1,[r5,#0x17]         ;2687
00154a  0c31              LSRS     r1,r6,#16             ;2687
00154c  7629              STRB     r1,[r5,#0x18]         ;2687
00154e  0e31              LSRS     r1,r6,#24             ;2687
001550  7669              STRB     r1,[r5,#0x19]         ;2687
001552  2000              MOVS     r0,#0                 ;2688
001554  74a8              STRB     r0,[r5,#0x12]         ;2688
001556  2100              MOVS     r1,#0                 ;2688
001558  74e9              STRB     r1,[r5,#0x13]         ;2688
00155a  79a0              LDRB     r0,[r4,#6]            ;2689
00155c  f0200020          BIC      r0,r0,#0x20           ;2689
001560  71a0              STRB     r0,[r4,#6]            ;2689
001562  2001              MOVS     r0,#1                 ;2690
001564  6821              LDR      r1,[r4,#0]            ;2690
001566  7108              STRB     r0,[r1,#4]            ;2690
001568  6820              LDR      r0,[r4,#0]            ;2691
00156a  f7fffffe          BL       sync_fs
00156e  4607              MOV      r7,r0                 ;2691
                  |L1.5488|
001570  4638              MOV      r0,r7                 ;2696
001572  e7c3              B        |L1.5372|
;;;2698   
                          ENDP

                  f_close PROC
;;;2707   
;;;2708   FRESULT f_close (
001574  b570              PUSH     {r4-r6,lr}
;;;2709   	FIL *fp		/* Pointer to the file object to be closed */
;;;2710   )
;;;2711   {
001576  4604              MOV      r4,r0
;;;2712   	FRESULT res;
;;;2713   
;;;2714   
;;;2715   #if _FS_READONLY
;;;2716   	res = validate(fp);
;;;2717   	{
;;;2718   #if _FS_REENTRANT
;;;2719   		FATFS *fs = fp->fs;
;;;2720   #endif
;;;2721   		if (res == FR_OK) fp->fs = 0;	/* Discard file object */
;;;2722   		LEAVE_FF(fs, res);
;;;2723   	}
;;;2724   #else
;;;2725   	res = f_sync(fp);		/* Flush cached data */
001578  4620              MOV      r0,r4
00157a  f7fffffe          BL       f_sync
00157e  4605              MOV      r5,r0
;;;2726   #if _FS_LOCK
;;;2727   	if (res == FR_OK) {		/* Decrement open counter */
;;;2728   #if _FS_REENTRANT
;;;2729   		FATFS *fs = fp->fs;;
;;;2730   		res = validate(fp);
;;;2731   		if (res == FR_OK) {
;;;2732   			res = dec_lock(fp->lockid);	
;;;2733   			unlock_fs(fs, FR_OK);
;;;2734   		}
;;;2735   #else
;;;2736   		res = dec_lock(fp->lockid);
;;;2737   #endif
;;;2738   	}
;;;2739   #endif
;;;2740   	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
001580  b90d              CBNZ     r5,|L1.5510|
001582  2000              MOVS     r0,#0
001584  6020              STR      r0,[r4,#0]
                  |L1.5510|
;;;2741   	return res;
001586  4628              MOV      r0,r5
;;;2742   #endif
;;;2743   }
001588  bd70              POP      {r4-r6,pc}
;;;2744   
                          ENDP

                  f_lseek PROC
;;;2876   
;;;2877   FRESULT f_lseek (
00158a  e92d47f0          PUSH     {r4-r10,lr}
;;;2878   	FIL *fp,		/* Pointer to the file object */
;;;2879   	DWORD ofs		/* File pointer from top of file */
;;;2880   )
;;;2881   {
00158e  4604              MOV      r4,r0
001590  460e              MOV      r6,r1
;;;2882   	FRESULT res;
;;;2883   
;;;2884   
;;;2885   	res = validate(fp);					/* Check validity of the object */
001592  4620              MOV      r0,r4
001594  f7fffffe          BL       validate
001598  4682              MOV      r10,r0
;;;2886   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00159a  f1ba0f00          CMP      r10,#0
00159e  d002              BEQ      |L1.5542|
0015a0  4650              MOV      r0,r10
                  |L1.5538|
;;;2887   	if (fp->flag & FA__ERROR)			/* Check abort flag */
;;;2888   		LEAVE_FF(fp->fs, FR_INT_ERR);
;;;2889   
;;;2890   #if _USE_FASTSEEK
;;;2891   	if (fp->cltbl) {	/* Fast seek */
;;;2892   		DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;2893   
;;;2894   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;2895   			tbl = fp->cltbl;
;;;2896   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;2897   			cl = fp->sclust;			/* Top of the chain */
;;;2898   			if (cl) {
;;;2899   				do {
;;;2900   					/* Get a fragment */
;;;2901   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;2902   					do {
;;;2903   						pcl = cl; ncl++;
;;;2904   						cl = get_fat(fp->fs, cl);
;;;2905   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;2906   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2907   					} while (cl == pcl + 1);
;;;2908   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;2909   						*tbl++ = ncl; *tbl++ = tcl;
;;;2910   					}
;;;2911   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;2912   			}
;;;2913   			*fp->cltbl = ulen;	/* Number of items used */
;;;2914   			if (ulen <= tlen)
;;;2915   				*tbl = 0;		/* Terminate table */
;;;2916   			else
;;;2917   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;2918   
;;;2919   		} else {						/* Fast seek */
;;;2920   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;2921   				ofs = fp->fsize;
;;;2922   			fp->fptr = ofs;				/* Set file pointer */
;;;2923   			if (ofs) {
;;;2924   				fp->clust = clmt_clust(fp, ofs - 1);
;;;2925   				dsc = clust2sect(fp->fs, fp->clust);
;;;2926   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;2927   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;2928   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;2929   #if !_FS_TINY
;;;2930   #if !_FS_READONLY
;;;2931   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2932   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2933   							ABORT(fp->fs, FR_DISK_ERR);
;;;2934   						fp->flag &= ~FA__DIRTY;
;;;2935   					}
;;;2936   #endif
;;;2937   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
;;;2938   						ABORT(fp->fs, FR_DISK_ERR);
;;;2939   #endif
;;;2940   					fp->dsect = dsc;
;;;2941   				}
;;;2942   			}
;;;2943   		}
;;;2944   	} else
;;;2945   #endif
;;;2946   
;;;2947   	/* Normal Seek */
;;;2948   	{
;;;2949   		DWORD clst, bcs, nsect, ifptr;
;;;2950   
;;;2951   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;2952   #if !_FS_READONLY
;;;2953   			 && !(fp->flag & FA_WRITE)
;;;2954   #endif
;;;2955   			) ofs = fp->fsize;
;;;2956   
;;;2957   		ifptr = fp->fptr;
;;;2958   		fp->fptr = nsect = 0;
;;;2959   		if (ofs) {
;;;2960   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;2961   			if (ifptr > 0 &&
;;;2962   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;2963   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;2964   				ofs -= fp->fptr;
;;;2965   				clst = fp->clust;
;;;2966   			} else {									/* When seek to back cluster, */
;;;2967   				clst = fp->sclust;						/* start from the first cluster */
;;;2968   #if !_FS_READONLY
;;;2969   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;2970   					clst = create_chain(fp->fs, 0);
;;;2971   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2972   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2973   					fp->sclust = clst;
;;;2974   				}
;;;2975   #endif
;;;2976   				fp->clust = clst;
;;;2977   			}
;;;2978   			if (clst != 0) {
;;;2979   				while (ofs > bcs) {						/* Cluster following loop */
;;;2980   #if !_FS_READONLY
;;;2981   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;2982   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;2983   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;2984   							ofs = bcs; break;
;;;2985   						}
;;;2986   					} else
;;;2987   #endif
;;;2988   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;2989   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2990   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;2991   					fp->clust = clst;
;;;2992   					fp->fptr += bcs;
;;;2993   					ofs -= bcs;
;;;2994   				}
;;;2995   				fp->fptr += ofs;
;;;2996   				if (ofs % SS(fp->fs)) {
;;;2997   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;2998   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;2999   					nsect += ofs / SS(fp->fs);
;;;3000   				}
;;;3001   			}
;;;3002   		}
;;;3003   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;3004   #if !_FS_TINY
;;;3005   #if !_FS_READONLY
;;;3006   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;3007   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;3008   					ABORT(fp->fs, FR_DISK_ERR);
;;;3009   				fp->flag &= ~FA__DIRTY;
;;;3010   			}
;;;3011   #endif
;;;3012   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
;;;3013   				ABORT(fp->fs, FR_DISK_ERR);
;;;3014   #endif
;;;3015   			fp->dsect = nsect;
;;;3016   		}
;;;3017   #if !_FS_READONLY
;;;3018   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;3019   			fp->fsize = fp->fptr;
;;;3020   			fp->flag |= FA__WRITTEN;
;;;3021   		}
;;;3022   #endif
;;;3023   	}
;;;3024   
;;;3025   	LEAVE_FF(fp->fs, res);
;;;3026   }
0015a2  e8bd87f0          POP      {r4-r10,pc}
                  |L1.5542|
0015a6  79a0              LDRB     r0,[r4,#6]            ;2887
0015a8  f0100f80          TST      r0,#0x80              ;2887
0015ac  d001              BEQ      |L1.5554|
0015ae  2002              MOVS     r0,#2                 ;2888
0015b0  e7f7              B        |L1.5538|
                  |L1.5554|
0015b2  68e0              LDR      r0,[r4,#0xc]          ;2951
0015b4  42b0              CMP      r0,r6                 ;2951
0015b6  d204              BCS      |L1.5570|
0015b8  79a0              LDRB     r0,[r4,#6]            ;2953
0015ba  f0100f02          TST      r0,#2                 ;2953
0015be  d100              BNE      |L1.5570|
0015c0  68e6              LDR      r6,[r4,#0xc]          ;2955
                  |L1.5570|
0015c2  f8d49008          LDR      r9,[r4,#8]            ;2957
0015c6  f04f0800          MOV      r8,#0                 ;2958
0015ca  f8c48008          STR      r8,[r4,#8]            ;2958
0015ce  2e00              CMP      r6,#0                 ;2959
0015d0  d077              BEQ      |L1.5826|
0015d2  6820              LDR      r0,[r4,#0]            ;2960
0015d4  7880              LDRB     r0,[r0,#2]            ;2960
0015d6  0247              LSLS     r7,r0,#9              ;2960
0015d8  f1b90f00          CMP      r9,#0                 ;2961
0015dc  d011              BEQ      |L1.5634|
0015de  1e70              SUBS     r0,r6,#1              ;2962
0015e0  fbb0f1f7          UDIV     r1,r0,r7              ;2962
0015e4  f1a90001          SUB      r0,r9,#1              ;2962
0015e8  fbb0f0f7          UDIV     r0,r0,r7              ;2962
0015ec  4281              CMP      r1,r0                 ;2962
0015ee  d308              BCC      |L1.5634|
0015f0  f1a90001          SUB      r0,r9,#1              ;2963
0015f4  1e79              SUBS     r1,r7,#1              ;2963
0015f6  4388              BICS     r0,r0,r1              ;2963
0015f8  60a0              STR      r0,[r4,#8]            ;2963
0015fa  68a0              LDR      r0,[r4,#8]            ;2964
0015fc  1a36              SUBS     r6,r6,r0              ;2964
0015fe  6965              LDR      r5,[r4,#0x14]         ;2965
001600  e018              B        |L1.5684|
                  |L1.5634|
001602  6925              LDR      r5,[r4,#0x10]         ;2967
001604  b9ad              CBNZ     r5,|L1.5682|
001606  2100              MOVS     r1,#0                 ;2970
001608  6820              LDR      r0,[r4,#0]            ;2970
00160a  f7fffffe          BL       create_chain
00160e  4605              MOV      r5,r0                 ;2970
001610  2d01              CMP      r5,#1                 ;2971
001612  d105              BNE      |L1.5664|
001614  79a0              LDRB     r0,[r4,#6]            ;2971
001616  f0400080          ORR      r0,r0,#0x80           ;2971
00161a  71a0              STRB     r0,[r4,#6]            ;2971
00161c  2002              MOVS     r0,#2                 ;2971
00161e  e7c0              B        |L1.5538|
                  |L1.5664|
001620  1c68              ADDS     r0,r5,#1              ;2972
001622  d105              BNE      |L1.5680|
001624  79a0              LDRB     r0,[r4,#6]            ;2972
001626  f0400080          ORR      r0,r0,#0x80           ;2972
00162a  71a0              STRB     r0,[r4,#6]            ;2972
00162c  2001              MOVS     r0,#1                 ;2972
00162e  e7b8              B        |L1.5538|
                  |L1.5680|
001630  6125              STR      r5,[r4,#0x10]         ;2973
                  |L1.5682|
001632  6165              STR      r5,[r4,#0x14]         ;2976
                  |L1.5684|
001634  2d00              CMP      r5,#0                 ;2978
001636  d044              BEQ      |L1.5826|
001638  e029              B        |L1.5774|
                  |L1.5690|
00163a  79a0              LDRB     r0,[r4,#6]            ;2981
00163c  f0100f02          TST      r0,#2                 ;2981
001640  d007              BEQ      |L1.5714|
001642  4629              MOV      r1,r5                 ;2982
001644  6820              LDR      r0,[r4,#0]            ;2982
001646  f7fffffe          BL       create_chain
00164a  4605              MOV      r5,r0                 ;2982
00164c  b935              CBNZ     r5,|L1.5724|
00164e  463e              MOV      r6,r7                 ;2984
001650  e01f              B        |L1.5778|
                  |L1.5714|
001652  4629              MOV      r1,r5                 ;2988
001654  6820              LDR      r0,[r4,#0]            ;2988
001656  f7fffffe          BL       get_fat
00165a  4605              MOV      r5,r0                 ;2988
                  |L1.5724|
00165c  1c68              ADDS     r0,r5,#1              ;2989
00165e  d105              BNE      |L1.5740|
001660  79a0              LDRB     r0,[r4,#6]            ;2989
001662  f0400080          ORR      r0,r0,#0x80           ;2989
001666  71a0              STRB     r0,[r4,#6]            ;2989
001668  2001              MOVS     r0,#1                 ;2989
00166a  e79a              B        |L1.5538|
                  |L1.5740|
00166c  2d01              CMP      r5,#1                 ;2990
00166e  d903              BLS      |L1.5752|
001670  6820              LDR      r0,[r4,#0]            ;2990
001672  6980              LDR      r0,[r0,#0x18]         ;2990
001674  42a8              CMP      r0,r5                 ;2990
001676  d805              BHI      |L1.5764|
                  |L1.5752|
001678  79a0              LDRB     r0,[r4,#6]            ;2990
00167a  f0400080          ORR      r0,r0,#0x80           ;2990
00167e  71a0              STRB     r0,[r4,#6]            ;2990
001680  2002              MOVS     r0,#2                 ;2990
001682  e78e              B        |L1.5538|
                  |L1.5764|
001684  6165              STR      r5,[r4,#0x14]         ;2991
001686  68a0              LDR      r0,[r4,#8]            ;2992
001688  4438              ADD      r0,r0,r7              ;2992
00168a  60a0              STR      r0,[r4,#8]            ;2992
00168c  1bf6              SUBS     r6,r6,r7              ;2993
                  |L1.5774|
00168e  42be              CMP      r6,r7                 ;2979
001690  d8d3              BHI      |L1.5690|
                  |L1.5778|
001692  bf00              NOP                            ;2984
001694  68a0              LDR      r0,[r4,#8]            ;2995
001696  4430              ADD      r0,r0,r6              ;2995
001698  60a0              STR      r0,[r4,#8]            ;2995
00169a  05f0              LSLS     r0,r6,#23             ;2996
00169c  0dc0              LSRS     r0,r0,#23             ;2996
00169e  d010              BEQ      |L1.5826|
0016a0  4629              MOV      r1,r5                 ;2997
0016a2  6820              LDR      r0,[r4,#0]            ;2997
0016a4  f7fffffe          BL       clust2sect
0016a8  4680              MOV      r8,r0                 ;2997
0016aa  f1b80f00          CMP      r8,#0                 ;2998
0016ae  d106              BNE      |L1.5822|
0016b0  79a0              LDRB     r0,[r4,#6]            ;2998
0016b2  f0400080          ORR      r0,r0,#0x80           ;2998
0016b6  71a0              STRB     r0,[r4,#6]            ;2998
0016b8  2002              MOVS     r0,#2                 ;2998
0016ba  e772              B        |L1.5538|
0016bc  e001              B        |L1.5826|
                  |L1.5822|
0016be  eb082856          ADD      r8,r8,r6,LSR #9       ;2999
                  |L1.5826|
0016c2  8920              LDRH     r0,[r4,#8]            ;3003
0016c4  05c0              LSLS     r0,r0,#23             ;3003
0016c6  0dc0              LSRS     r0,r0,#23             ;3003
0016c8  d02a              BEQ      |L1.5920|
0016ca  69a0              LDR      r0,[r4,#0x18]         ;3003
0016cc  4540              CMP      r0,r8                 ;3003
0016ce  d027              BEQ      |L1.5920|
0016d0  79a0              LDRB     r0,[r4,#6]            ;3006
0016d2  f0100f40          TST      r0,#0x40              ;3006
0016d6  d012              BEQ      |L1.5886|
0016d8  6821              LDR      r1,[r4,#0]            ;3007
0016da  7848              LDRB     r0,[r1,#1]            ;3007
0016dc  2301              MOVS     r3,#1                 ;3007
0016de  f1040124          ADD      r1,r4,#0x24           ;3007
0016e2  69a2              LDR      r2,[r4,#0x18]         ;3007
0016e4  f7fffffe          BL       disk_write
0016e8  b128              CBZ      r0,|L1.5878|
0016ea  79a0              LDRB     r0,[r4,#6]            ;3008
0016ec  f0400080          ORR      r0,r0,#0x80           ;3008
0016f0  71a0              STRB     r0,[r4,#6]            ;3008
0016f2  2001              MOVS     r0,#1                 ;3008
0016f4  e755              B        |L1.5538|
                  |L1.5878|
0016f6  79a0              LDRB     r0,[r4,#6]            ;3009
0016f8  f0200040          BIC      r0,r0,#0x40           ;3009
0016fc  71a0              STRB     r0,[r4,#6]            ;3009
                  |L1.5886|
0016fe  6821              LDR      r1,[r4,#0]            ;3012
001700  7848              LDRB     r0,[r1,#1]            ;3012
001702  2301              MOVS     r3,#1                 ;3012
001704  4642              MOV      r2,r8                 ;3012
001706  f1040124          ADD      r1,r4,#0x24           ;3012
00170a  f7fffffe          BL       disk_read
00170e  b128              CBZ      r0,|L1.5916|
001710  79a0              LDRB     r0,[r4,#6]            ;3013
001712  f0400080          ORR      r0,r0,#0x80           ;3013
001716  71a0              STRB     r0,[r4,#6]            ;3013
001718  2001              MOVS     r0,#1                 ;3013
00171a  e742              B        |L1.5538|
                  |L1.5916|
00171c  f8c48018          STR      r8,[r4,#0x18]         ;3015
                  |L1.5920|
001720  e9d40102          LDRD     r0,r1,[r4,#8]         ;3018
001724  4288              CMP      r0,r1                 ;3018
001726  d905              BLS      |L1.5940|
001728  68a0              LDR      r0,[r4,#8]            ;3019
00172a  60e0              STR      r0,[r4,#0xc]          ;3019
00172c  79a0              LDRB     r0,[r4,#6]            ;3020
00172e  f0400020          ORR      r0,r0,#0x20           ;3020
001732  71a0              STRB     r0,[r4,#6]            ;3020
                  |L1.5940|
001734  4650              MOV      r0,r10                ;3025
001736  e734              B        |L1.5538|
;;;3027   
                          ENDP

                  f_opendir PROC
;;;3034   
;;;3035   FRESULT f_opendir (
001738  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3036   	DIR *dj,			/* Pointer to directory object to create */
;;;3037   	const TCHAR *path	/* Pointer to the directory path */
;;;3038   )
;;;3039   {
00173a  b084              SUB      sp,sp,#0x10
00173c  4604              MOV      r4,r0
;;;3040   	FRESULT res;
;;;3041   	FATFS *fs;
;;;3042   	DEF_NAMEBUF;
;;;3043   
;;;3044   
;;;3045   	if (!dj) return FR_INVALID_OBJECT;
00173e  b914              CBNZ     r4,|L1.5958|
001740  2009              MOVS     r0,#9
                  |L1.5954|
;;;3046   
;;;3047   	res = chk_mounted(&path, &dj->fs, 0);
;;;3048   	fs = dj->fs;
;;;3049   	if (res == FR_OK) {
;;;3050   		INIT_BUF(*dj);
;;;3051   		res = follow_path(dj, path);			/* Follow the path to the directory */
;;;3052   		FREE_BUF();
;;;3053   		if (res == FR_OK) {						/* Follow completed */
;;;3054   			if (dj->dir) {						/* It is not the root dir */
;;;3055   				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
;;;3056   					dj->sclust = ld_clust(fs, dj->dir);
;;;3057   				} else {						/* The object is not a directory */
;;;3058   					res = FR_NO_PATH;
;;;3059   				}
;;;3060   			}
;;;3061   			if (res == FR_OK) {
;;;3062   				dj->id = fs->id;
;;;3063   				res = dir_sdi(dj, 0);			/* Rewind dir */
;;;3064   			}
;;;3065   		}
;;;3066   		if (res == FR_NO_FILE) res = FR_NO_PATH;
;;;3067   		if (res != FR_OK) dj->fs = 0;			/* Invalidate the dir object if function faild */
;;;3068   	} else {
;;;3069   		dj->fs = 0;
;;;3070   	}
;;;3071   
;;;3072   	LEAVE_FF(fs, res);
;;;3073   }
001742  b006              ADD      sp,sp,#0x18
001744  bd70              POP      {r4-r6,pc}
                  |L1.5958|
001746  2200              MOVS     r2,#0                 ;3047
001748  4621              MOV      r1,r4                 ;3047
00174a  a805              ADD      r0,sp,#0x14           ;3047
00174c  f7fffffe          BL       chk_mounted
001750  4605              MOV      r5,r0                 ;3047
001752  6826              LDR      r6,[r4,#0]            ;3048
001754  bb25              CBNZ     r5,|L1.6048|
001756  a801              ADD      r0,sp,#4              ;3050
001758  61a0              STR      r0,[r4,#0x18]         ;3050
00175a  4620              MOV      r0,r4                 ;3051
00175c  9905              LDR      r1,[sp,#0x14]         ;3051
00175e  f7fffffe          BL       follow_path
001762  4605              MOV      r5,r0                 ;3051
001764  b9ad              CBNZ     r5,|L1.6034|
001766  6960              LDR      r0,[r4,#0x14]         ;3054
001768  b158              CBZ      r0,|L1.6018|
00176a  6960              LDR      r0,[r4,#0x14]         ;3055
00176c  7ac0              LDRB     r0,[r0,#0xb]          ;3055
00176e  f0100f10          TST      r0,#0x10              ;3055
001772  d005              BEQ      |L1.6016|
001774  4630              MOV      r0,r6                 ;3056
001776  6961              LDR      r1,[r4,#0x14]         ;3056
001778  f7fffffe          BL       ld_clust
00177c  60a0              STR      r0,[r4,#8]            ;3056
00177e  e000              B        |L1.6018|
                  |L1.6016|
001780  2505              MOVS     r5,#5                 ;3058
                  |L1.6018|
001782  b935              CBNZ     r5,|L1.6034|
001784  88f0              LDRH     r0,[r6,#6]            ;3062
001786  80a0              STRH     r0,[r4,#4]            ;3062
001788  2100              MOVS     r1,#0                 ;3063
00178a  4620              MOV      r0,r4                 ;3063
00178c  f7fffffe          BL       dir_sdi
001790  4605              MOV      r5,r0                 ;3063
                  |L1.6034|
001792  2d04              CMP      r5,#4                 ;3066
001794  d100              BNE      |L1.6040|
001796  2505              MOVS     r5,#5                 ;3066
                  |L1.6040|
001798  b125              CBZ      r5,|L1.6052|
00179a  2000              MOVS     r0,#0                 ;3067
00179c  6020              STR      r0,[r4,#0]            ;3067
00179e  e001              B        |L1.6052|
                  |L1.6048|
0017a0  2000              MOVS     r0,#0                 ;3069
0017a2  6020              STR      r0,[r4,#0]            ;3069
                  |L1.6052|
0017a4  4628              MOV      r0,r5                 ;3072
0017a6  e7cc              B        |L1.5954|
;;;3074   
                          ENDP

                  f_readdir PROC
;;;3081   
;;;3082   FRESULT f_readdir (
0017a8  b5fe              PUSH     {r1-r7,lr}
;;;3083   	DIR *dj,			/* Pointer to the open directory object */
;;;3084   	FILINFO *fno		/* Pointer to file information to return */
;;;3085   )
;;;3086   {
0017aa  4605              MOV      r5,r0
0017ac  460e              MOV      r6,r1
;;;3087   	FRESULT res;
;;;3088   	DEF_NAMEBUF;
;;;3089   
;;;3090   
;;;3091   	res = validate(dj);						/* Check validity of the object */
0017ae  4628              MOV      r0,r5
0017b0  f7fffffe          BL       validate
0017b4  4604              MOV      r4,r0
;;;3092   	if (res == FR_OK) {
0017b6  bb0c              CBNZ     r4,|L1.6140|
;;;3093   		if (!fno) {
0017b8  b92e              CBNZ     r6,|L1.6086|
;;;3094   			res = dir_sdi(dj, 0);			/* Rewind the directory object */
0017ba  2100              MOVS     r1,#0
0017bc  4628              MOV      r0,r5
0017be  f7fffffe          BL       dir_sdi
0017c2  4604              MOV      r4,r0
0017c4  e01a              B        |L1.6140|
                  |L1.6086|
;;;3095   		} else {
;;;3096   			INIT_BUF(*dj);
0017c6  f8c5d018          STR      sp,[r5,#0x18]
;;;3097   			res = dir_read(dj, 0);			/* Read an item */
0017ca  2100              MOVS     r1,#0
0017cc  4628              MOV      r0,r5
0017ce  f7fffffe          BL       dir_read
0017d2  4604              MOV      r4,r0
;;;3098   			if (res == FR_NO_FILE) {		/* Reached end of dir */
0017d4  2c04              CMP      r4,#4
0017d6  d102              BNE      |L1.6110|
;;;3099   				dj->sect = 0;
0017d8  2000              MOVS     r0,#0
0017da  6128              STR      r0,[r5,#0x10]
;;;3100   				res = FR_OK;
0017dc  2400              MOVS     r4,#0
                  |L1.6110|
;;;3101   			}
;;;3102   			if (res == FR_OK) {				/* A valid entry is found */
0017de  b96c              CBNZ     r4,|L1.6140|
;;;3103   				get_fileinfo(dj, fno);		/* Get the object information */
0017e0  4631              MOV      r1,r6
0017e2  4628              MOV      r0,r5
0017e4  f7fffffe          BL       get_fileinfo
;;;3104   				res = dir_next(dj, 0);		/* Increment index for next */
0017e8  2100              MOVS     r1,#0
0017ea  4628              MOV      r0,r5
0017ec  f7fffffe          BL       dir_next
0017f0  4604              MOV      r4,r0
;;;3105   				if (res == FR_NO_FILE) {
0017f2  2c04              CMP      r4,#4
0017f4  d102              BNE      |L1.6140|
;;;3106   					dj->sect = 0;
0017f6  2000              MOVS     r0,#0
0017f8  6128              STR      r0,[r5,#0x10]
;;;3107   					res = FR_OK;
0017fa  2400              MOVS     r4,#0
                  |L1.6140|
;;;3108   				}
;;;3109   			}
;;;3110   			FREE_BUF();
;;;3111   		}
;;;3112   	}
;;;3113   
;;;3114   	LEAVE_FF(dj->fs, res);
0017fc  4620              MOV      r0,r4
;;;3115   }
0017fe  bdfe              POP      {r1-r7,pc}
;;;3116   
                          ENDP

                  f_stat PROC
;;;3123   
;;;3124   FRESULT f_stat (
001800  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3125   	const TCHAR *path,	/* Pointer to the file path */
;;;3126   	FILINFO *fno		/* Pointer to file information to return */
;;;3127   )
;;;3128   {
001802  b08b              SUB      sp,sp,#0x2c
001804  460d              MOV      r5,r1
;;;3129   	FRESULT res;
;;;3130   	DIR dj;
;;;3131   	DEF_NAMEBUF;
;;;3132   
;;;3133   
;;;3134   	res = chk_mounted(&path, &dj.fs, 0);
001806  2200              MOVS     r2,#0
001808  a904              ADD      r1,sp,#0x10
00180a  a80b              ADD      r0,sp,#0x2c
00180c  f7fffffe          BL       chk_mounted
001810  4604              MOV      r4,r0
;;;3135   	if (res == FR_OK) {
001812  b97c              CBNZ     r4,|L1.6196|
;;;3136   		INIT_BUF(dj);
001814  a801              ADD      r0,sp,#4
001816  900a              STR      r0,[sp,#0x28]
;;;3137   		res = follow_path(&dj, path);	/* Follow the file path */
001818  a804              ADD      r0,sp,#0x10
00181a  990b              LDR      r1,[sp,#0x2c]
00181c  f7fffffe          BL       follow_path
001820  4604              MOV      r4,r0
;;;3138   		if (res == FR_OK) {				/* Follow completed */
001822  b93c              CBNZ     r4,|L1.6196|
;;;3139   			if (dj.dir)		/* Found an object */
001824  9809              LDR      r0,[sp,#0x24]
001826  b120              CBZ      r0,|L1.6194|
;;;3140   				get_fileinfo(&dj, fno);
001828  4629              MOV      r1,r5
00182a  a804              ADD      r0,sp,#0x10
00182c  f7fffffe          BL       get_fileinfo
001830  e000              B        |L1.6196|
                  |L1.6194|
;;;3141   			else			/* It is root dir */
;;;3142   				res = FR_INVALID_NAME;
001832  2406              MOVS     r4,#6
                  |L1.6196|
;;;3143   		}
;;;3144   		FREE_BUF();
;;;3145   	}
;;;3146   
;;;3147   	LEAVE_FF(dj.fs, res);
001834  4620              MOV      r0,r4
;;;3148   }
001836  b00d              ADD      sp,sp,#0x34
001838  bd30              POP      {r4,r5,pc}
;;;3149   
                          ENDP

                  f_getfree PROC
;;;3156   
;;;3157   FRESULT f_getfree (
00183a  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3158   	const TCHAR *path,	/* Path name of the logical drive number */
;;;3159   	DWORD *nclst,		/* Pointer to a variable to return number of free clusters */
;;;3160   	FATFS **fatfs		/* Pointer to return pointer to corresponding file system object */
;;;3161   )
;;;3162   {
00183e  b082              SUB      sp,sp,#8
001840  468b              MOV      r11,r1
;;;3163   	FRESULT res;
;;;3164   	FATFS *fs;
;;;3165   	DWORD n, clst, sect, stat;
;;;3166   	UINT i;
;;;3167   	BYTE fat, *p;
;;;3168   
;;;3169   
;;;3170   	/* Get drive number */
;;;3171   	res = chk_mounted(&path, fatfs, 0);
001842  2200              MOVS     r2,#0
001844  a802              ADD      r0,sp,#8
001846  9904              LDR      r1,[sp,#0x10]
001848  f7fffffe          BL       chk_mounted
00184c  9001              STR      r0,[sp,#4]
;;;3172   	fs = *fatfs;
00184e  9804              LDR      r0,[sp,#0x10]
001850  6804              LDR      r4,[r0,#0]
;;;3173   	if (res == FR_OK) {
001852  9801              LDR      r0,[sp,#4]
001854  2800              CMP      r0,#0
001856  d16e              BNE      |L1.6454|
;;;3174   		/* If free_clust is valid, return it without full cluster scan */
;;;3175   		if (fs->free_clust <= fs->n_fatent - 2) {
001858  69a0              LDR      r0,[r4,#0x18]
00185a  1e80              SUBS     r0,r0,#2
00185c  6921              LDR      r1,[r4,#0x10]
00185e  4281              CMP      r1,r0
001860  d803              BHI      |L1.6250|
;;;3176   			*nclst = fs->free_clust;
001862  6920              LDR      r0,[r4,#0x10]
001864  f8cb0000          STR      r0,[r11,#0]
001868  e065              B        |L1.6454|
                  |L1.6250|
;;;3177   		} else {
;;;3178   			/* Get number of free clusters */
;;;3179   			fat = fs->fs_type;
00186a  f894a000          LDRB     r10,[r4,#0]
;;;3180   			n = 0;
00186e  2600              MOVS     r6,#0
;;;3181   			if (fat == FS_FAT12) {
001870  f1ba0f01          CMP      r10,#1
001874  d11c              BNE      |L1.6320|
;;;3182   				clst = 2;
001876  2702              MOVS     r7,#2
;;;3183   				do {
001878  bf00              NOP      
                  |L1.6266|
;;;3184   					stat = get_fat(fs, clst);
00187a  4639              MOV      r1,r7
00187c  4620              MOV      r0,r4
00187e  f7fffffe          BL       get_fat
001882  4680              MOV      r8,r0
;;;3185   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
001884  f1180001          ADDS     r0,r8,#1
001888  d102              BNE      |L1.6288|
00188a  2001              MOVS     r0,#1
00188c  9001              STR      r0,[sp,#4]
00188e  e00e              B        |L1.6318|
                  |L1.6288|
;;;3186   					if (stat == 1) { res = FR_INT_ERR; break; }
001890  f1b80f01          CMP      r8,#1
001894  d102              BNE      |L1.6300|
001896  2002              MOVS     r0,#2
001898  9001              STR      r0,[sp,#4]
00189a  e008              B        |L1.6318|
                  |L1.6300|
;;;3187   					if (stat == 0) n++;
00189c  f1b80f00          CMP      r8,#0
0018a0  d100              BNE      |L1.6308|
0018a2  1c76              ADDS     r6,r6,#1
                  |L1.6308|
;;;3188   				} while (++clst < fs->n_fatent);
0018a4  1c78              ADDS     r0,r7,#1
0018a6  4607              MOV      r7,r0
0018a8  69a1              LDR      r1,[r4,#0x18]
0018aa  4288              CMP      r0,r1
0018ac  d3e5              BCC      |L1.6266|
                  |L1.6318|
0018ae  e03a              B        |L1.6438|
                  |L1.6320|
;;;3189   			} else {
;;;3190   				clst = fs->n_fatent;
0018b0  69a7              LDR      r7,[r4,#0x18]
;;;3191   				sect = fs->fatbase;
0018b2  6a60              LDR      r0,[r4,#0x24]
0018b4  9000              STR      r0,[sp,#0]
;;;3192   				i = 0; p = 0;
0018b6  f04f0900          MOV      r9,#0
0018ba  2500              MOVS     r5,#0
;;;3193   				do {
0018bc  bf00              NOP      
                  |L1.6334|
;;;3194   					if (!i) {
0018be  f1b90f00          CMP      r9,#0
0018c2  d10e              BNE      |L1.6370|
;;;3195   						res = move_window(fs, sect++);
0018c4  9800              LDR      r0,[sp,#0]
0018c6  1c42              ADDS     r2,r0,#1
0018c8  4601              MOV      r1,r0
0018ca  4620              MOV      r0,r4
0018cc  9200              STR      r2,[sp,#0]
0018ce  f7fffffe          BL       move_window
0018d2  9001              STR      r0,[sp,#4]
;;;3196   						if (res != FR_OK) break;
0018d4  9801              LDR      r0,[sp,#4]
0018d6  b100              CBZ      r0,|L1.6362|
0018d8  e024              B        |L1.6436|
                  |L1.6362|
;;;3197   						p = fs->win;
0018da  f1040534          ADD      r5,r4,#0x34
;;;3198   						i = SS(fs);
0018de  f44f7900          MOV      r9,#0x200
                  |L1.6370|
;;;3199   					}
;;;3200   					if (fat == FS_FAT16) {
0018e2  f1ba0f02          CMP      r10,#2
0018e6  d109              BNE      |L1.6396|
;;;3201   						if (LD_WORD(p) == 0) n++;
0018e8  7828              LDRB     r0,[r5,#0]
0018ea  7869              LDRB     r1,[r5,#1]
0018ec  ea502001          ORRS     r0,r0,r1,LSL #8
0018f0  d100              BNE      |L1.6388|
0018f2  1c76              ADDS     r6,r6,#1
                  |L1.6388|
;;;3202   						p += 2; i -= 2;
0018f4  1cad              ADDS     r5,r5,#2
0018f6  f1a90902          SUB      r9,r9,#2
0018fa  e010              B        |L1.6430|
                  |L1.6396|
;;;3203   					} else {
;;;3204   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
0018fc  78e8              LDRB     r0,[r5,#3]
0018fe  0600              LSLS     r0,r0,#24
001900  78a9              LDRB     r1,[r5,#2]
001902  ea404001          ORR      r0,r0,r1,LSL #16
001906  7869              LDRB     r1,[r5,#1]
001908  ea402001          ORR      r0,r0,r1,LSL #8
00190c  7829              LDRB     r1,[r5,#0]
00190e  4308              ORRS     r0,r0,r1
001910  f0304070          BICS     r0,r0,#0xf0000000
001914  d100              BNE      |L1.6424|
001916  1c76              ADDS     r6,r6,#1
                  |L1.6424|
;;;3205   						p += 4; i -= 4;
001918  1d2d              ADDS     r5,r5,#4
00191a  f1a90904          SUB      r9,r9,#4
                  |L1.6430|
;;;3206   					}
;;;3207   				} while (--clst);
00191e  1e78              SUBS     r0,r7,#1
001920  0007              MOVS     r7,r0
001922  d1cc              BNE      |L1.6334|
                  |L1.6436|
001924  bf00              NOP                            ;3196
                  |L1.6438|
;;;3208   			}
;;;3209   			fs->free_clust = n;
001926  6126              STR      r6,[r4,#0x10]
;;;3210   			if (fat == FS_FAT32) fs->fsi_flag = 1;
001928  f1ba0f03          CMP      r10,#3
00192c  d101              BNE      |L1.6450|
00192e  2001              MOVS     r0,#1
001930  7160              STRB     r0,[r4,#5]
                  |L1.6450|
;;;3211   			*nclst = n;
001932  f8cb6000          STR      r6,[r11,#0]
                  |L1.6454|
;;;3212   		}
;;;3213   	}
;;;3214   	LEAVE_FF(fs, res);
001936  9801              LDR      r0,[sp,#4]
;;;3215   }
001938  b005              ADD      sp,sp,#0x14
00193a  e8bd8ff0          POP      {r4-r11,pc}
;;;3216   
                          ENDP

                  f_truncate PROC
;;;3223   
;;;3224   FRESULT f_truncate (
00193e  b570              PUSH     {r4-r6,lr}
;;;3225   	FIL *fp		/* Pointer to the file object */
;;;3226   )
;;;3227   {
001940  4604              MOV      r4,r0
;;;3228   	FRESULT res;
;;;3229   	DWORD ncl;
;;;3230   
;;;3231   
;;;3232   	res = validate(fp);						/* Check validity of the object */
001942  4620              MOV      r0,r4
001944  f7fffffe          BL       validate
001948  4605              MOV      r5,r0
;;;3233   	if (res == FR_OK) {
00194a  b955              CBNZ     r5,|L1.6498|
;;;3234   		if (fp->flag & FA__ERROR) {			/* Check abort flag */
00194c  79a0              LDRB     r0,[r4,#6]
00194e  f0100f80          TST      r0,#0x80
001952  d001              BEQ      |L1.6488|
;;;3235   			res = FR_INT_ERR;
001954  2502              MOVS     r5,#2
001956  e004              B        |L1.6498|
                  |L1.6488|
;;;3236   		} else {
;;;3237   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
001958  79a0              LDRB     r0,[r4,#6]
00195a  f0100f02          TST      r0,#2
00195e  d100              BNE      |L1.6498|
;;;3238   				res = FR_DENIED;
001960  2507              MOVS     r5,#7
                  |L1.6498|
;;;3239   		}
;;;3240   	}
;;;3241   	if (res == FR_OK) {
001962  2d00              CMP      r5,#0
001964  d136              BNE      |L1.6612|
;;;3242   		if (fp->fsize > fp->fptr) {
001966  e9d41002          LDRD     r1,r0,[r4,#8]
00196a  4288              CMP      r0,r1
00196c  d92d              BLS      |L1.6602|
;;;3243   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
00196e  68a0              LDR      r0,[r4,#8]
001970  60e0              STR      r0,[r4,#0xc]
;;;3244   			fp->flag |= FA__WRITTEN;
001972  79a0              LDRB     r0,[r4,#6]
001974  f0400020          ORR      r0,r0,#0x20
001978  71a0              STRB     r0,[r4,#6]
;;;3245   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
00197a  68a0              LDR      r0,[r4,#8]
00197c  b938              CBNZ     r0,|L1.6542|
;;;3246   				res = remove_chain(fp->fs, fp->sclust);
00197e  6921              LDR      r1,[r4,#0x10]
001980  6820              LDR      r0,[r4,#0]
001982  f7fffffe          BL       remove_chain
001986  4605              MOV      r5,r0
;;;3247   				fp->sclust = 0;
001988  2000              MOVS     r0,#0
00198a  6120              STR      r0,[r4,#0x10]
00198c  e01d              B        |L1.6602|
                  |L1.6542|
;;;3248   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3249   				ncl = get_fat(fp->fs, fp->clust);
00198e  6961              LDR      r1,[r4,#0x14]
001990  6820              LDR      r0,[r4,#0]
001992  f7fffffe          BL       get_fat
001996  4606              MOV      r6,r0
;;;3250   				res = FR_OK;
001998  2500              MOVS     r5,#0
;;;3251   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
00199a  1c70              ADDS     r0,r6,#1
00199c  d100              BNE      |L1.6560|
00199e  2501              MOVS     r5,#1
                  |L1.6560|
;;;3252   				if (ncl == 1) res = FR_INT_ERR;
0019a0  2e01              CMP      r6,#1
0019a2  d100              BNE      |L1.6566|
0019a4  2502              MOVS     r5,#2
                  |L1.6566|
;;;3253   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
0019a6  b985              CBNZ     r5,|L1.6602|
0019a8  6820              LDR      r0,[r4,#0]
0019aa  6980              LDR      r0,[r0,#0x18]
0019ac  42b0              CMP      r0,r6
0019ae  d90c              BLS      |L1.6602|
;;;3254   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
0019b0  f06f4270          MVN      r2,#0xf0000000
0019b4  6961              LDR      r1,[r4,#0x14]
0019b6  6820              LDR      r0,[r4,#0]
0019b8  f7fffffe          BL       put_fat
0019bc  4605              MOV      r5,r0
;;;3255   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
0019be  b925              CBNZ     r5,|L1.6602|
0019c0  4631              MOV      r1,r6
0019c2  6820              LDR      r0,[r4,#0]
0019c4  f7fffffe          BL       remove_chain
0019c8  4605              MOV      r5,r0
                  |L1.6602|
;;;3256   				}
;;;3257   			}
;;;3258   		}
;;;3259   		if (res != FR_OK) fp->flag |= FA__ERROR;
0019ca  b11d              CBZ      r5,|L1.6612|
0019cc  79a0              LDRB     r0,[r4,#6]
0019ce  f0400080          ORR      r0,r0,#0x80
0019d2  71a0              STRB     r0,[r4,#6]
                  |L1.6612|
;;;3260   	}
;;;3261   
;;;3262   	LEAVE_FF(fp->fs, res);
0019d4  4628              MOV      r0,r5
;;;3263   }
0019d6  bd70              POP      {r4-r6,pc}
;;;3264   
                          ENDP

                  f_unlink PROC
;;;3271   
;;;3272   FRESULT f_unlink (
0019d8  b571              PUSH     {r0,r4-r6,lr}
;;;3273   	const TCHAR *path		/* Pointer to the file or directory path */
;;;3274   )
;;;3275   {
0019da  b091              SUB      sp,sp,#0x44
;;;3276   	FRESULT res;
;;;3277   	DIR dj, sdj;
;;;3278   	BYTE *dir;
;;;3279   	DWORD dclst;
;;;3280   	DEF_NAMEBUF;
;;;3281   
;;;3282   
;;;3283   	res = chk_mounted(&path, &dj.fs, 1);
0019dc  2201              MOVS     r2,#1
0019de  a90a              ADD      r1,sp,#0x28
0019e0  a811              ADD      r0,sp,#0x44
0019e2  f7fffffe          BL       chk_mounted
0019e6  4604              MOV      r4,r0
;;;3284   	if (res == FR_OK) {
0019e8  2c00              CMP      r4,#0
0019ea  d147              BNE      |L1.6780|
;;;3285   		INIT_BUF(dj);
0019ec  f8cdd040          STR      sp,[sp,#0x40]
;;;3286   		res = follow_path(&dj, path);		/* Follow the file path */
0019f0  a80a              ADD      r0,sp,#0x28
0019f2  9911              LDR      r1,[sp,#0x44]
0019f4  f7fffffe          BL       follow_path
0019f8  4604              MOV      r4,r0
;;;3287   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
0019fa  bf00              NOP      
;;;3288   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
;;;3289   #if _FS_LOCK
;;;3290   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
;;;3291   #endif
;;;3292   		if (res == FR_OK) {					/* The object is accessible */
0019fc  2c00              CMP      r4,#0
0019fe  d13d              BNE      |L1.6780|
;;;3293   			dir = dj.dir;
001a00  9e0f              LDR      r6,[sp,#0x3c]
;;;3294   			if (!dir) {
001a02  b90e              CBNZ     r6,|L1.6664|
;;;3295   				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
001a04  2406              MOVS     r4,#6
001a06  e004              B        |L1.6674|
                  |L1.6664|
;;;3296   			} else {
;;;3297   				if (dir[DIR_Attr] & AM_RDO)
001a08  7af0              LDRB     r0,[r6,#0xb]
001a0a  f0100f01          TST      r0,#1
001a0e  d000              BEQ      |L1.6674|
;;;3298   					res = FR_DENIED;		/* Cannot remove R/O object */
001a10  2407              MOVS     r4,#7
                  |L1.6674|
;;;3299   			}
;;;3300   			dclst = ld_clust(dj.fs, dir);
001a12  4631              MOV      r1,r6
001a14  980a              LDR      r0,[sp,#0x28]
001a16  f7fffffe          BL       ld_clust
001a1a  4605              MOV      r5,r0
;;;3301   			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
001a1c  b9ec              CBNZ     r4,|L1.6746|
001a1e  7af0              LDRB     r0,[r6,#0xb]
001a20  f0100f10          TST      r0,#0x10
001a24  d019              BEQ      |L1.6746|
;;;3302   				if (dclst < 2) {
001a26  2d02              CMP      r5,#2
001a28  d201              BCS      |L1.6702|
;;;3303   					res = FR_INT_ERR;
001a2a  2402              MOVS     r4,#2
001a2c  e015              B        |L1.6746|
                  |L1.6702|
;;;3304   				} else {
;;;3305   					mem_cpy(&sdj, &dj, sizeof (DIR));	/* Check if the sub-dir is empty or not */
001a2e  221c              MOVS     r2,#0x1c
001a30  a90a              ADD      r1,sp,#0x28
001a32  a803              ADD      r0,sp,#0xc
001a34  f7fffffe          BL       mem_cpy
;;;3306   					sdj.sclust = dclst;
001a38  9505              STR      r5,[sp,#0x14]
;;;3307   					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
001a3a  2102              MOVS     r1,#2
001a3c  a803              ADD      r0,sp,#0xc
001a3e  f7fffffe          BL       dir_sdi
001a42  4604              MOV      r4,r0
;;;3308   					if (res == FR_OK) {
001a44  b94c              CBNZ     r4,|L1.6746|
;;;3309   						res = dir_read(&sdj, 0);	/* Read an item */
001a46  2100              MOVS     r1,#0
001a48  a803              ADD      r0,sp,#0xc
001a4a  f7fffffe          BL       dir_read
001a4e  4604              MOV      r4,r0
;;;3310   						if (res == FR_OK		/* Not empty dir */
001a50  b904              CBNZ     r4,|L1.6740|
;;;3311   #if _FS_RPATH
;;;3312   						|| dclst == dj.fs->cdir	/* Current dir */
;;;3313   #endif
;;;3314   						) res = FR_DENIED;
001a52  2407              MOVS     r4,#7
                  |L1.6740|
;;;3315   						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
001a54  2c04              CMP      r4,#4
001a56  d100              BNE      |L1.6746|
001a58  2400              MOVS     r4,#0
                  |L1.6746|
;;;3316   					}
;;;3317   				}
;;;3318   			}
;;;3319   			if (res == FR_OK) {
001a5a  b97c              CBNZ     r4,|L1.6780|
;;;3320   				res = dir_remove(&dj);		/* Remove the directory entry */
001a5c  a80a              ADD      r0,sp,#0x28
001a5e  f7fffffe          BL       dir_remove
001a62  4604              MOV      r4,r0
;;;3321   				if (res == FR_OK) {
001a64  b954              CBNZ     r4,|L1.6780|
;;;3322   					if (dclst)				/* Remove the cluster chain if exist */
001a66  b125              CBZ      r5,|L1.6770|
;;;3323   						res = remove_chain(dj.fs, dclst);
001a68  4629              MOV      r1,r5
001a6a  980a              LDR      r0,[sp,#0x28]
001a6c  f7fffffe          BL       remove_chain
001a70  4604              MOV      r4,r0
                  |L1.6770|
;;;3324   					if (res == FR_OK) res = sync_fs(dj.fs);
001a72  b91c              CBNZ     r4,|L1.6780|
001a74  980a              LDR      r0,[sp,#0x28]
001a76  f7fffffe          BL       sync_fs
001a7a  4604              MOV      r4,r0
                  |L1.6780|
;;;3325   				}
;;;3326   			}
;;;3327   		}
;;;3328   		FREE_BUF();
;;;3329   	}
;;;3330   
;;;3331   	LEAVE_FF(dj.fs, res);
001a7c  4620              MOV      r0,r4
;;;3332   }
001a7e  b012              ADD      sp,sp,#0x48
001a80  bd70              POP      {r4-r6,pc}
;;;3333   
                          ENDP

                  f_mkdir PROC
;;;3340   
;;;3341   FRESULT f_mkdir (
001a82  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3342   	const TCHAR *path		/* Pointer to the directory path */
;;;3343   )
;;;3344   {
001a86  b08b              SUB      sp,sp,#0x2c
;;;3345   	FRESULT res;
;;;3346   	DIR dj;
;;;3347   	BYTE *dir, n;
;;;3348   	DWORD dsc, dcl, pcl, tm = get_fattime();
001a88  f7fffffe          BL       get_fattime
001a8c  4606              MOV      r6,r0
;;;3349   	DEF_NAMEBUF;
;;;3350   
;;;3351   
;;;3352   	res = chk_mounted(&path, &dj.fs, 1);
001a8e  2201              MOVS     r2,#1
001a90  a904              ADD      r1,sp,#0x10
001a92  a80b              ADD      r0,sp,#0x2c
001a94  f7fffffe          BL       chk_mounted
001a98  4605              MOV      r5,r0
;;;3353   	if (res == FR_OK) {
001a9a  2d00              CMP      r5,#0
                  |L1.6812|
001a9c  d17e              BNE      |L1.7068|
;;;3354   		INIT_BUF(dj);
001a9e  a801              ADD      r0,sp,#4
001aa0  900a              STR      r0,[sp,#0x28]
;;;3355   		res = follow_path(&dj, path);			/* Follow the file path */
001aa2  a804              ADD      r0,sp,#0x10
001aa4  990b              LDR      r1,[sp,#0x2c]
001aa6  f7fffffe          BL       follow_path
001aaa  4605              MOV      r5,r0
;;;3356   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
001aac  b905              CBNZ     r5,|L1.6832|
001aae  2508              MOVS     r5,#8
                  |L1.6832|
;;;3357   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
001ab0  bf00              NOP      
;;;3358   			res = FR_INVALID_NAME;
;;;3359   		if (res == FR_NO_FILE) {				/* Can create a new directory */
001ab2  2d04              CMP      r5,#4
001ab4  d1f2              BNE      |L1.6812|
;;;3360   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
001ab6  2100              MOVS     r1,#0
001ab8  9804              LDR      r0,[sp,#0x10]
001aba  f7fffffe          BL       create_chain
001abe  4607              MOV      r7,r0
;;;3361   			res = FR_OK;
001ac0  2500              MOVS     r5,#0
;;;3362   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
001ac2  b907              CBNZ     r7,|L1.6854|
001ac4  2507              MOVS     r5,#7
                  |L1.6854|
;;;3363   			if (dcl == 1) res = FR_INT_ERR;
001ac6  2f01              CMP      r7,#1
001ac8  d100              BNE      |L1.6860|
001aca  2502              MOVS     r5,#2
                  |L1.6860|
;;;3364   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
001acc  1c78              ADDS     r0,r7,#1
001ace  d100              BNE      |L1.6866|
001ad0  2501              MOVS     r5,#1
                  |L1.6866|
;;;3365   			if (res == FR_OK)					/* Flush FAT */
001ad2  b91d              CBNZ     r5,|L1.6876|
;;;3366   				res = sync_window(dj.fs);
001ad4  9804              LDR      r0,[sp,#0x10]
001ad6  f7fffffe          BL       sync_window
001ada  4605              MOV      r5,r0
                  |L1.6876|
;;;3367   			if (res == FR_OK) {					/* Initialize the new directory table */
001adc  2d00              CMP      r5,#0
001ade  d15a              BNE      |L1.7062|
;;;3368   				dsc = clust2sect(dj.fs, dcl);
001ae0  4639              MOV      r1,r7
001ae2  9804              LDR      r0,[sp,#0x10]
001ae4  f7fffffe          BL       clust2sect
001ae8  4681              MOV      r9,r0
;;;3369   				dir = dj.fs->win;
001aea  9804              LDR      r0,[sp,#0x10]
001aec  f1000434          ADD      r4,r0,#0x34
;;;3370   				mem_set(dir, 0, SS(dj.fs));
001af0  f44f7200          MOV      r2,#0x200
001af4  2100              MOVS     r1,#0
001af6  4620              MOV      r0,r4
001af8  f7fffffe          BL       mem_set
;;;3371   				mem_set(dir+DIR_Name, ' ', 11);	/* Create "." entry */
001afc  220b              MOVS     r2,#0xb
001afe  2120              MOVS     r1,#0x20
001b00  4620              MOV      r0,r4
001b02  f7fffffe          BL       mem_set
;;;3372   				dir[DIR_Name] = '.';
001b06  202e              MOVS     r0,#0x2e
001b08  7020              STRB     r0,[r4,#0]
;;;3373   				dir[DIR_Attr] = AM_DIR;
001b0a  2010              MOVS     r0,#0x10
001b0c  72e0              STRB     r0,[r4,#0xb]
;;;3374   				ST_DWORD(dir+DIR_WrtTime, tm);
001b0e  75a6              STRB     r6,[r4,#0x16]
001b10  0a31              LSRS     r1,r6,#8
001b12  75e1              STRB     r1,[r4,#0x17]
001b14  0c31              LSRS     r1,r6,#16
001b16  7621              STRB     r1,[r4,#0x18]
001b18  0e31              LSRS     r1,r6,#24
001b1a  7661              STRB     r1,[r4,#0x19]
;;;3375   				st_clust(dir, dcl);
001b1c  4639              MOV      r1,r7
001b1e  4620              MOV      r0,r4
001b20  f7fffffe          BL       st_clust
;;;3376   				mem_cpy(dir+SZ_DIR, dir, SZ_DIR); 	/* Create ".." entry */
001b24  2220              MOVS     r2,#0x20
001b26  4621              MOV      r1,r4
001b28  f1040020          ADD      r0,r4,#0x20
001b2c  f7fffffe          BL       mem_cpy
;;;3377   				dir[33] = '.'; pcl = dj.sclust;
001b30  202e              MOVS     r0,#0x2e
001b32  f8840021          STRB     r0,[r4,#0x21]
001b36  f8dda018          LDR      r10,[sp,#0x18]
;;;3378   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
001b3a  9804              LDR      r0,[sp,#0x10]
001b3c  7800              LDRB     r0,[r0,#0]
001b3e  2803              CMP      r0,#3
001b40  d104              BNE      |L1.6988|
001b42  9804              LDR      r0,[sp,#0x10]
001b44  6a80              LDR      r0,[r0,#0x28]
001b46  4550              CMP      r0,r10
001b48  d100              BNE      |L1.6988|
;;;3379   					pcl = 0;
001b4a  46aa              MOV      r10,r5
                  |L1.6988|
;;;3380   				st_clust(dir+SZ_DIR, pcl);
001b4c  4651              MOV      r1,r10
001b4e  f1040020          ADD      r0,r4,#0x20
001b52  f7fffffe          BL       st_clust
;;;3381   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
001b56  9804              LDR      r0,[sp,#0x10]
001b58  f8908002          LDRB     r8,[r0,#2]
001b5c  e017              B        |L1.7054|
                  |L1.7006|
;;;3382   					dj.fs->winsect = dsc++;
001b5e  9804              LDR      r0,[sp,#0x10]
001b60  f8c09030          STR      r9,[r0,#0x30]
001b64  f1090901          ADD      r9,r9,#1
;;;3383   					dj.fs->wflag = 1;
001b68  2001              MOVS     r0,#1
001b6a  9904              LDR      r1,[sp,#0x10]
001b6c  7108              STRB     r0,[r1,#4]
;;;3384   					res = sync_window(dj.fs);
001b6e  9804              LDR      r0,[sp,#0x10]
001b70  f7fffffe          BL       sync_window
001b74  4605              MOV      r5,r0
;;;3385   					if (res != FR_OK) break;
001b76  b105              CBZ      r5,|L1.7034|
001b78  e00c              B        |L1.7060|
                  |L1.7034|
;;;3386   					mem_set(dir, 0, SS(dj.fs));
001b7a  f44f7200          MOV      r2,#0x200
001b7e  2100              MOVS     r1,#0
001b80  4620              MOV      r0,r4
001b82  f7fffffe          BL       mem_set
001b86  f1a80001          SUB      r0,r8,#1              ;3381
001b8a  f00008ff          AND      r8,r0,#0xff           ;3381
                  |L1.7054|
001b8e  f1b80f00          CMP      r8,#0                 ;3381
001b92  d1e4              BNE      |L1.7006|
                  |L1.7060|
001b94  bf00              NOP                            ;3385
                  |L1.7062|
;;;3387   				}
;;;3388   			}
;;;3389   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
001b96  b92d              CBNZ     r5,|L1.7076|
001b98  a804              ADD      r0,sp,#0x10
001b9a  e000              B        |L1.7070|
                  |L1.7068|
001b9c  e01d              B        |L1.7130|
                  |L1.7070|
001b9e  f7fffffe          BL       dir_register
001ba2  4605              MOV      r5,r0
                  |L1.7076|
;;;3390   			if (res != FR_OK) {
001ba4  b125              CBZ      r5,|L1.7088|
;;;3391   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
001ba6  4639              MOV      r1,r7
001ba8  9804              LDR      r0,[sp,#0x10]
001baa  f7fffffe          BL       remove_chain
001bae  e014              B        |L1.7130|
                  |L1.7088|
;;;3392   			} else {
;;;3393   				dir = dj.dir;
001bb0  9c09              LDR      r4,[sp,#0x24]
;;;3394   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
001bb2  2010              MOVS     r0,#0x10
001bb4  72e0              STRB     r0,[r4,#0xb]
;;;3395   				ST_DWORD(dir+DIR_WrtTime, tm);		/* Created time */
001bb6  75a6              STRB     r6,[r4,#0x16]
001bb8  0a31              LSRS     r1,r6,#8
001bba  75e1              STRB     r1,[r4,#0x17]
001bbc  0c31              LSRS     r1,r6,#16
001bbe  7621              STRB     r1,[r4,#0x18]
001bc0  0e31              LSRS     r1,r6,#24
001bc2  7661              STRB     r1,[r4,#0x19]
;;;3396   				st_clust(dir, dcl);					/* Table start cluster */
001bc4  4639              MOV      r1,r7
001bc6  4620              MOV      r0,r4
001bc8  f7fffffe          BL       st_clust
;;;3397   				dj.fs->wflag = 1;
001bcc  2001              MOVS     r0,#1
001bce  9904              LDR      r1,[sp,#0x10]
001bd0  7108              STRB     r0,[r1,#4]
;;;3398   				res = sync_fs(dj.fs);
001bd2  9804              LDR      r0,[sp,#0x10]
001bd4  f7fffffe          BL       sync_fs
001bd8  4605              MOV      r5,r0
                  |L1.7130|
;;;3399   			}
;;;3400   		}
;;;3401   		FREE_BUF();
;;;3402   	}
;;;3403   
;;;3404   	LEAVE_FF(dj.fs, res);
001bda  4628              MOV      r0,r5
;;;3405   }
001bdc  b00c              ADD      sp,sp,#0x30
001bde  e8bd87f0          POP      {r4-r10,pc}
;;;3406   
                          ENDP

                  f_chmod PROC
;;;3413   
;;;3414   FRESULT f_chmod (
001be2  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3415   	const TCHAR *path,	/* Pointer to the file path */
;;;3416   	BYTE value,			/* Attribute bits */
;;;3417   	BYTE mask			/* Attribute mask to change */
;;;3418   )
;;;3419   {
001be4  b08a              SUB      sp,sp,#0x28
001be6  460f              MOV      r7,r1
001be8  4614              MOV      r4,r2
;;;3420   	FRESULT res;
;;;3421   	DIR dj;
;;;3422   	BYTE *dir;
;;;3423   	DEF_NAMEBUF;
;;;3424   
;;;3425   
;;;3426   	res = chk_mounted(&path, &dj.fs, 1);
001bea  2201              MOVS     r2,#1
001bec  a903              ADD      r1,sp,#0xc
001bee  a80a              ADD      r0,sp,#0x28
001bf0  f7fffffe          BL       chk_mounted
001bf4  4606              MOV      r6,r0
;;;3427   	if (res == FR_OK) {
001bf6  b9de              CBNZ     r6,|L1.7216|
;;;3428   		INIT_BUF(dj);
001bf8  f8cdd024          STR      sp,[sp,#0x24]
;;;3429   		res = follow_path(&dj, path);		/* Follow the file path */
001bfc  a803              ADD      r0,sp,#0xc
001bfe  990a              LDR      r1,[sp,#0x28]
001c00  f7fffffe          BL       follow_path
001c04  4606              MOV      r6,r0
;;;3430   		FREE_BUF();
;;;3431   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
001c06  bf00              NOP      
;;;3432   			res = FR_INVALID_NAME;
;;;3433   		if (res == FR_OK) {
001c08  b996              CBNZ     r6,|L1.7216|
;;;3434   			dir = dj.dir;
001c0a  9d08              LDR      r5,[sp,#0x20]
;;;3435   			if (!dir) {						/* Is it a root directory? */
001c0c  b90d              CBNZ     r5,|L1.7186|
;;;3436   				res = FR_INVALID_NAME;
001c0e  2606              MOVS     r6,#6
001c10  e00e              B        |L1.7216|
                  |L1.7186|
;;;3437   			} else {						/* File or sub directory */
;;;3438   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
001c12  f0040427          AND      r4,r4,#0x27
;;;3439   				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
001c16  ea070004          AND      r0,r7,r4
001c1a  7ae9              LDRB     r1,[r5,#0xb]
001c1c  43a1              BICS     r1,r1,r4
001c1e  4308              ORRS     r0,r0,r1
001c20  72e8              STRB     r0,[r5,#0xb]
;;;3440   				dj.fs->wflag = 1;
001c22  2001              MOVS     r0,#1
001c24  9903              LDR      r1,[sp,#0xc]
001c26  7108              STRB     r0,[r1,#4]
;;;3441   				res = sync_fs(dj.fs);
001c28  9803              LDR      r0,[sp,#0xc]
001c2a  f7fffffe          BL       sync_fs
001c2e  4606              MOV      r6,r0
                  |L1.7216|
;;;3442   			}
;;;3443   		}
;;;3444   	}
;;;3445   
;;;3446   	LEAVE_FF(dj.fs, res);
001c30  4630              MOV      r0,r6
;;;3447   }
001c32  b00d              ADD      sp,sp,#0x34
001c34  bdf0              POP      {r4-r7,pc}
;;;3448   
                          ENDP

                  f_utime PROC
;;;3455   
;;;3456   FRESULT f_utime (
001c36  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3457   	const TCHAR *path,	/* Pointer to the file/directory name */
;;;3458   	const FILINFO *fno	/* Pointer to the time stamp to be set */
;;;3459   )
;;;3460   {
001c38  b08a              SUB      sp,sp,#0x28
001c3a  460d              MOV      r5,r1
;;;3461   	FRESULT res;
;;;3462   	DIR dj;
;;;3463   	BYTE *dir;
;;;3464   	DEF_NAMEBUF;
;;;3465   
;;;3466   
;;;3467   	res = chk_mounted(&path, &dj.fs, 1);
001c3c  2201              MOVS     r2,#1
001c3e  a903              ADD      r1,sp,#0xc
001c40  a80a              ADD      r0,sp,#0x28
001c42  f7fffffe          BL       chk_mounted
001c46  4606              MOV      r6,r0
;;;3468   	if (res == FR_OK) {
001c48  b9ee              CBNZ     r6,|L1.7302|
;;;3469   		INIT_BUF(dj);
001c4a  f8cdd024          STR      sp,[sp,#0x24]
;;;3470   		res = follow_path(&dj, path);	/* Follow the file path */
001c4e  a803              ADD      r0,sp,#0xc
001c50  990a              LDR      r1,[sp,#0x28]
001c52  f7fffffe          BL       follow_path
001c56  4606              MOV      r6,r0
;;;3471   		FREE_BUF();
;;;3472   		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
001c58  bf00              NOP      
;;;3473   			res = FR_INVALID_NAME;
;;;3474   		if (res == FR_OK) {
001c5a  b9a6              CBNZ     r6,|L1.7302|
;;;3475   			dir = dj.dir;
001c5c  9c08              LDR      r4,[sp,#0x20]
;;;3476   			if (!dir) {					/* Root directory */
001c5e  b90c              CBNZ     r4,|L1.7268|
;;;3477   				res = FR_INVALID_NAME;
001c60  2606              MOVS     r6,#6
001c62  e010              B        |L1.7302|
                  |L1.7268|
;;;3478   			} else {					/* File or sub-directory */
;;;3479   				ST_WORD(dir+DIR_WrtTime, fno->ftime);
001c64  79a8              LDRB     r0,[r5,#6]
001c66  75a0              STRB     r0,[r4,#0x16]
001c68  88e8              LDRH     r0,[r5,#6]
001c6a  1201              ASRS     r1,r0,#8
001c6c  75e1              STRB     r1,[r4,#0x17]
;;;3480   				ST_WORD(dir+DIR_WrtDate, fno->fdate);
001c6e  7928              LDRB     r0,[r5,#4]
001c70  7620              STRB     r0,[r4,#0x18]
001c72  88a8              LDRH     r0,[r5,#4]
001c74  1201              ASRS     r1,r0,#8
001c76  7661              STRB     r1,[r4,#0x19]
;;;3481   				dj.fs->wflag = 1;
001c78  2001              MOVS     r0,#1
001c7a  9903              LDR      r1,[sp,#0xc]
001c7c  7108              STRB     r0,[r1,#4]
;;;3482   				res = sync_fs(dj.fs);
001c7e  9803              LDR      r0,[sp,#0xc]
001c80  f7fffffe          BL       sync_fs
001c84  4606              MOV      r6,r0
                  |L1.7302|
;;;3483   			}
;;;3484   		}
;;;3485   	}
;;;3486   
;;;3487   	LEAVE_FF(dj.fs, res);
001c86  4630              MOV      r0,r6
;;;3488   }
001c88  b00c              ADD      sp,sp,#0x30
001c8a  bd70              POP      {r4-r6,pc}
;;;3489   
                          ENDP

                  f_rename PROC
;;;3496   
;;;3497   FRESULT f_rename (
001c8c  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;3498   	const TCHAR *path_old,	/* Pointer to the old name */
;;;3499   	const TCHAR *path_new	/* Pointer to the new name */
;;;3500   )
;;;3501   {
001c90  b098              SUB      sp,sp,#0x60
001c92  460f              MOV      r7,r1
;;;3502   	FRESULT res;
;;;3503   	DIR djo, djn;
;;;3504   	BYTE buf[21], *dir;
;;;3505   	DWORD dw;
;;;3506   	DEF_NAMEBUF;
;;;3507   
;;;3508   
;;;3509   	res = chk_mounted(&path_old, &djo.fs, 1);
001c94  2201              MOVS     r2,#1
001c96  a911              ADD      r1,sp,#0x44
001c98  a818              ADD      r0,sp,#0x60
001c9a  f7fffffe          BL       chk_mounted
001c9e  4604              MOV      r4,r0
;;;3510   	if (res == FR_OK) {
001ca0  2c00              CMP      r4,#0
001ca2  d179              BNE      |L1.7576|
;;;3511   		djn.fs = djo.fs;
001ca4  9811              LDR      r0,[sp,#0x44]
001ca6  900a              STR      r0,[sp,#0x28]
;;;3512   		INIT_BUF(djo);
001ca8  a801              ADD      r0,sp,#4
001caa  9017              STR      r0,[sp,#0x5c]
;;;3513   		res = follow_path(&djo, path_old);		/* Check old object */
001cac  a811              ADD      r0,sp,#0x44
001cae  9918              LDR      r1,[sp,#0x60]
001cb0  f7fffffe          BL       follow_path
001cb4  4604              MOV      r4,r0
;;;3514   		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
001cb6  bf00              NOP      
;;;3515   			res = FR_INVALID_NAME;
;;;3516   #if _FS_LOCK
;;;3517   		if (res == FR_OK) res = chk_lock(&djo, 2);
;;;3518   #endif
;;;3519   		if (res == FR_OK) {						/* Old object is found */
001cb8  2c00              CMP      r4,#0
001cba  d16d              BNE      |L1.7576|
;;;3520   			if (!djo.dir) {						/* Is root dir? */
001cbc  9816              LDR      r0,[sp,#0x58]
001cbe  b908              CBNZ     r0,|L1.7364|
;;;3521   				res = FR_NO_FILE;
001cc0  2404              MOVS     r4,#4
001cc2  e069              B        |L1.7576|
                  |L1.7364|
;;;3522   			} else {
;;;3523   				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
001cc4  9816              LDR      r0,[sp,#0x58]
001cc6  f100010b          ADD      r1,r0,#0xb
001cca  2215              MOVS     r2,#0x15
001ccc  a804              ADD      r0,sp,#0x10
001cce  f7fffffe          BL       mem_cpy
;;;3524   				mem_cpy(&djn, &djo, sizeof (DIR));		/* Check new object */
001cd2  221c              MOVS     r2,#0x1c
001cd4  a911              ADD      r1,sp,#0x44
001cd6  a80a              ADD      r0,sp,#0x28
001cd8  f7fffffe          BL       mem_cpy
;;;3525   				res = follow_path(&djn, path_new);
001cdc  4639              MOV      r1,r7
001cde  a80a              ADD      r0,sp,#0x28
001ce0  f7fffffe          BL       follow_path
001ce4  4604              MOV      r4,r0
;;;3526   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
001ce6  b904              CBNZ     r4,|L1.7402|
001ce8  2408              MOVS     r4,#8
                  |L1.7402|
;;;3527   				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
001cea  2c04              CMP      r4,#4
001cec  d154              BNE      |L1.7576|
;;;3528   /* Start critical section that any interruption can cause a cross-link */
;;;3529   					res = dir_register(&djn);			/* Register the new entry */
001cee  a80a              ADD      r0,sp,#0x28
001cf0  f7fffffe          BL       dir_register
001cf4  4604              MOV      r4,r0
;;;3530   					if (res == FR_OK) {
001cf6  2c00              CMP      r4,#0
001cf8  d14e              BNE      |L1.7576|
;;;3531   						dir = djn.dir;					/* Copy object information except for name */
001cfa  9d0f              LDR      r5,[sp,#0x3c]
;;;3532   						mem_cpy(dir+13, buf+2, 19);
001cfc  2213              MOVS     r2,#0x13
001cfe  f10d0112          ADD      r1,sp,#0x12
001d02  f105000d          ADD      r0,r5,#0xd
001d06  f7fffffe          BL       mem_cpy
;;;3533   						dir[DIR_Attr] = buf[0] | AM_ARC;
001d0a  f89d0010          LDRB     r0,[sp,#0x10]
001d0e  f0400020          ORR      r0,r0,#0x20
001d12  72e8              STRB     r0,[r5,#0xb]
;;;3534   						djo.fs->wflag = 1;
001d14  2001              MOVS     r0,#1
001d16  9911              LDR      r1,[sp,#0x44]
001d18  7108              STRB     r0,[r1,#4]
;;;3535   						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
001d1a  990c              LDR      r1,[sp,#0x30]
001d1c  9813              LDR      r0,[sp,#0x4c]
001d1e  4288              CMP      r0,r1
001d20  d030              BEQ      |L1.7556|
001d22  7ae8              LDRB     r0,[r5,#0xb]
001d24  f0100f10          TST      r0,#0x10
001d28  d02c              BEQ      |L1.7556|
;;;3536   							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
001d2a  4629              MOV      r1,r5
001d2c  9811              LDR      r0,[sp,#0x44]
001d2e  f7fffffe          BL       ld_clust
001d32  4680              MOV      r8,r0
001d34  4641              MOV      r1,r8
001d36  9811              LDR      r0,[sp,#0x44]
001d38  f7fffffe          BL       clust2sect
001d3c  4606              MOV      r6,r0
;;;3537   							if (!dw) {
001d3e  b90e              CBNZ     r6,|L1.7492|
;;;3538   								res = FR_INT_ERR;
001d40  2402              MOVS     r4,#2
001d42  e01f              B        |L1.7556|
                  |L1.7492|
;;;3539   							} else {
;;;3540   								res = move_window(djo.fs, dw);
001d44  4631              MOV      r1,r6
001d46  9811              LDR      r0,[sp,#0x44]
001d48  f7fffffe          BL       move_window
001d4c  4604              MOV      r4,r0
;;;3541   								dir = djo.fs->win+SZ_DIR;	/* .. entry */
001d4e  9811              LDR      r0,[sp,#0x44]
001d50  f1000554          ADD      r5,r0,#0x54
;;;3542   								if (res == FR_OK && dir[1] == '.') {
001d54  b9b4              CBNZ     r4,|L1.7556|
001d56  7868              LDRB     r0,[r5,#1]
001d58  282e              CMP      r0,#0x2e
001d5a  d113              BNE      |L1.7556|
;;;3543   									dw = (djo.fs->fs_type == FS_FAT32 && djn.sclust == djo.fs->dirbase) ? 0 : djn.sclust;
001d5c  9811              LDR      r0,[sp,#0x44]
001d5e  7800              LDRB     r0,[r0,#0]
001d60  2803              CMP      r0,#3
001d62  d106              BNE      |L1.7538|
001d64  9911              LDR      r1,[sp,#0x44]
001d66  980c              LDR      r0,[sp,#0x30]
001d68  6a89              LDR      r1,[r1,#0x28]
001d6a  4288              CMP      r0,r1
001d6c  d101              BNE      |L1.7538|
001d6e  2000              MOVS     r0,#0
001d70  e000              B        |L1.7540|
                  |L1.7538|
001d72  980c              LDR      r0,[sp,#0x30]
                  |L1.7540|
001d74  4606              MOV      r6,r0
;;;3544   									st_clust(dir, dw);
001d76  4631              MOV      r1,r6
001d78  4628              MOV      r0,r5
001d7a  f7fffffe          BL       st_clust
;;;3545   									djo.fs->wflag = 1;
001d7e  2001              MOVS     r0,#1
001d80  9911              LDR      r1,[sp,#0x44]
001d82  7108              STRB     r0,[r1,#4]
                  |L1.7556|
;;;3546   								}
;;;3547   							}
;;;3548   						}
;;;3549   						if (res == FR_OK) {
001d84  b944              CBNZ     r4,|L1.7576|
;;;3550   							res = dir_remove(&djo);		/* Remove old entry */
001d86  a811              ADD      r0,sp,#0x44
001d88  f7fffffe          BL       dir_remove
001d8c  4604              MOV      r4,r0
;;;3551   							if (res == FR_OK)
001d8e  b91c              CBNZ     r4,|L1.7576|
;;;3552   								res = sync_fs(djo.fs);
001d90  9811              LDR      r0,[sp,#0x44]
001d92  f7fffffe          BL       sync_fs
001d96  4604              MOV      r4,r0
                  |L1.7576|
;;;3553   						}
;;;3554   					}
;;;3555   /* End critical section */
;;;3556   				}
;;;3557   			}
;;;3558   		}
;;;3559   		FREE_BUF();
;;;3560   	}
;;;3561   
;;;3562   	LEAVE_FF(djo.fs, res);
001d98  4620              MOV      r0,r4
;;;3563   }
001d9a  b01a              ADD      sp,sp,#0x68
001d9c  e8bd81f0          POP      {r4-r8,pc}
;;;3564   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  FatFs
                          DCD      0x00000000
                  Fsid
000004  0000              DCB      0x00,0x00
