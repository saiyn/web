; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\eprom_driver.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\eprom_driver.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\eprom_driver.crf Driver\EPRom_driver.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  epprom_sda PROC
;;;8      
;;;9      void epprom_sda(int level)
000000  b510              PUSH     {r4,lr}
;;;10     {
000002  4604              MOV      r4,r0
;;;11     	 if(level){
000004  b154              CBZ      r4,|L1.28|
;;;12     		GPIOPinTypeGPIOInput(EPROM_SDA_PORT, EPROM_SDA_PIN);
000006  2108              MOVS     r1,#8
000008  485e              LDR      r0,|L1.388|
00000a  f7fffffe          BL       GPIOPinTypeGPIOInput
;;;13     		GPIO_PIN_SET(EPROM_SDA_PORT, EPROM_SDA_PIN, 1);
00000e  bf00              NOP      
000010  2208              MOVS     r2,#8
000012  4611              MOV      r1,r2
000014  485b              LDR      r0,|L1.388|
000016  f7fffffe          BL       GPIOPinWrite
00001a  e00a              B        |L1.50|
                  |L1.28|
;;;14     	}else{
;;;15     		GPIOPinTypeGPIOOutput(EPROM_SDA_PORT, EPROM_SDA_PIN);
00001c  2108              MOVS     r1,#8
00001e  4859              LDR      r0,|L1.388|
000020  f7fffffe          BL       GPIOPinTypeGPIOOutput
;;;16     		GPIO_PIN_SET(EPROM_SDA_PORT, EPROM_SDA_PIN, 0);
000024  bf00              NOP      
000026  2200              MOVS     r2,#0
000028  2108              MOVS     r1,#8
00002a  4856              LDR      r0,|L1.388|
00002c  f7fffffe          BL       GPIOPinWrite
000030  bf00              NOP      
                  |L1.50|
;;;17     	}
;;;18     }
000032  bd10              POP      {r4,pc}
;;;19     
                          ENDP

                  epprom_scl PROC
;;;20     
;;;21     void epprom_scl(int level)
000034  b510              PUSH     {r4,lr}
;;;22     {
000036  4604              MOV      r4,r0
;;;23     	if(level){
000038  b154              CBZ      r4,|L1.80|
;;;24     		GPIOPinTypeGPIOInput(EPROM_SCL_PORT, EPROM_SCL_PIN);
00003a  2104              MOVS     r1,#4
00003c  4851              LDR      r0,|L1.388|
00003e  f7fffffe          BL       GPIOPinTypeGPIOInput
;;;25     		GPIO_PIN_SET(EPROM_SCL_PORT, EPROM_SCL_PIN, 1);
000042  bf00              NOP      
000044  2204              MOVS     r2,#4
000046  4611              MOV      r1,r2
000048  484e              LDR      r0,|L1.388|
00004a  f7fffffe          BL       GPIOPinWrite
00004e  e00a              B        |L1.102|
                  |L1.80|
;;;26     	}else{
;;;27     		GPIOPinTypeGPIOOutput(EPROM_SCL_PORT, EPROM_SCL_PIN);
000050  2104              MOVS     r1,#4
000052  484c              LDR      r0,|L1.388|
000054  f7fffffe          BL       GPIOPinTypeGPIOOutput
;;;28     		GPIO_PIN_SET(EPROM_SCL_PORT, EPROM_SCL_PIN, 0);
000058  bf00              NOP      
00005a  2200              MOVS     r2,#0
00005c  2104              MOVS     r1,#4
00005e  4849              LDR      r0,|L1.388|
000060  f7fffffe          BL       GPIOPinWrite
000064  bf00              NOP      
                  |L1.102|
;;;29     	}  
;;;30     }
000066  bd10              POP      {r4,pc}
;;;31     
                          ENDP

                  epprom_sda_in PROC
;;;32     
;;;33     uint8 epprom_sda_in(void)
000068  b510              PUSH     {r4,lr}
;;;34     {
;;;35     	 return (GPIO_ReadSinglePin(EPROM_SDA_PORT, EPROM_SDA_PIN));
00006a  2108              MOVS     r1,#8
00006c  4845              LDR      r0,|L1.388|
00006e  f7fffffe          BL       GPIO_ReadSinglePin
;;;36     }
000072  bd10              POP      {r4,pc}
;;;37     
                          ENDP

                  eeprom_write PROC
;;;38     int eeprom_write(uint32 addr, uint8 *buf, size_t size)
000074  e92d41f0          PUSH     {r4-r8,lr}
;;;39     {
000078  4607              MOV      r7,r0
00007a  460d              MOV      r5,r1
00007c  4614              MOV      r4,r2
;;;40     	uint8 write_size;
;;;41     	size_t index = 0;
00007e  f04f0800          MOV      r8,#0
;;;42     	
;;;43     	OSAL_ASSERT(buf != NULL);
000082  b935              CBNZ     r5,|L1.146|
000084  4a40              LDR      r2,|L1.392|
000086  a141              ADR      r1,|L1.396|
000088  a043              ADR      r0,|L1.408|
00008a  f7fffffe          BL       s_printf
00008e  bf00              NOP      
                  |L1.144|
000090  e7fe              B        |L1.144|
                  |L1.146|
;;;44     	
;;;45     	do{
000092  bf00              NOP      
                  |L1.148|
;;;46     		if(size > EPROM_PAGE_SIZE){
000094  2c10              CMP      r4,#0x10
000096  d901              BLS      |L1.156|
;;;47     			write_size = EPROM_PAGE_SIZE;
000098  2610              MOVS     r6,#0x10
00009a  e000              B        |L1.158|
                  |L1.156|
;;;48     		}else{
;;;49     			write_size = size;
00009c  b2e6              UXTB     r6,r4
                  |L1.158|
;;;50     		}
;;;51     		if(osal_iic_write_buf(EPROM, addr, buf, write_size) < 0){
00009e  4633              MOV      r3,r6
0000a0  462a              MOV      r2,r5
0000a2  4639              MOV      r1,r7
0000a4  2000              MOVS     r0,#0
0000a6  f7fffffe          BL       osal_iic_write_buf
0000aa  2800              CMP      r0,#0
0000ac  da03              BGE      |L1.182|
;;;52     			return -1;
0000ae  f04f30ff          MOV      r0,#0xffffffff
                  |L1.178|
;;;53     		}
;;;54     		buf += write_size;
;;;55     		index += write_size;
;;;56     		addr += write_size;
;;;57     		bsp_delay_ms(15);
;;;58     		
;;;59     	}while(index < size);
;;;60     	
;;;61     	
;;;62     	return size;
;;;63     }
0000b2  e8bd81f0          POP      {r4-r8,pc}
                  |L1.182|
0000b6  4435              ADD      r5,r5,r6              ;54
0000b8  44b0              ADD      r8,r8,r6              ;55
0000ba  4437              ADD      r7,r7,r6              ;56
0000bc  200f              MOVS     r0,#0xf               ;57
0000be  f7fffffe          BL       bsp_delay_ms
0000c2  45a0              CMP      r8,r4                 ;59
0000c4  d3e6              BCC      |L1.148|
0000c6  4620              MOV      r0,r4                 ;62
0000c8  e7f3              B        |L1.178|
;;;64     
                          ENDP

                  eeprom_read PROC
;;;65     int eeprom_read(uint32 addr, uint8 *buf, size_t size)
0000ca  b570              PUSH     {r4-r6,lr}
;;;66     {
0000cc  4606              MOV      r6,r0
0000ce  460c              MOV      r4,r1
0000d0  4615              MOV      r5,r2
;;;67     	OSAL_ASSERT(buf != NULL);
0000d2  b934              CBNZ     r4,|L1.226|
0000d4  4a38              LDR      r2,|L1.440|
0000d6  a12d              ADR      r1,|L1.396|
0000d8  a02f              ADR      r0,|L1.408|
0000da  f7fffffe          BL       s_printf
0000de  bf00              NOP      
                  |L1.224|
0000e0  e7fe              B        |L1.224|
                  |L1.226|
;;;68     	
;;;69     	if(osal_iic_read_buf(EPROM, addr, buf, size) < 0){
0000e2  462b              MOV      r3,r5
0000e4  4622              MOV      r2,r4
0000e6  4631              MOV      r1,r6
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       osal_iic_read_buf
0000ee  2800              CMP      r0,#0
0000f0  da02              BGE      |L1.248|
;;;70     		return -1;
0000f2  f04f30ff          MOV      r0,#0xffffffff
                  |L1.246|
;;;71     	}
;;;72     	
;;;73     	return size;
;;;74     }
0000f6  bd70              POP      {r4-r6,pc}
                  |L1.248|
0000f8  4628              MOV      r0,r5                 ;73
0000fa  e7fc              B        |L1.246|
;;;75     
                          ENDP

                  eep_write PROC
;;;76     /*******************************For Test*********************************************/
;;;77     int eep_write(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0000fc  e92d47f0          PUSH     {r4-r10,lr}
;;;78     {
000100  4680              MOV      r8,r0
000102  4689              MOV      r9,r1
000104  4614              MOV      r4,r2
;;;79       int retval;
;;;80     	
;;;81     	retval = eeprom_write(atoi(argv[1]), (uint8 *)argv[2], strlen(argv[2]));
000106  68a0              LDR      r0,[r4,#8]
000108  f7fffffe          BL       strlen
00010c  4606              MOV      r6,r0
00010e  6860              LDR      r0,[r4,#4]
000110  f7fffffe          BL       atoi
000114  4607              MOV      r7,r0
000116  4632              MOV      r2,r6
000118  68a1              LDR      r1,[r4,#8]
00011a  f7fffffe          BL       eeprom_write
00011e  4605              MOV      r5,r0
;;;82     	
;;;83     	if(retval < 0){
000120  2d00              CMP      r5,#0
000122  da03              BGE      |L1.300|
;;;84     		SYS_TRACE("eeprom write fail\r\n");
000124  a025              ADR      r0,|L1.444|
000126  f7fffffe          BL       s_printf
00012a  e003              B        |L1.308|
                  |L1.300|
;;;85     	}else{
;;;86     		SYS_TRACE("eeprom write %d bytes success\r\n", retval);
00012c  4629              MOV      r1,r5
00012e  a028              ADR      r0,|L1.464|
000130  f7fffffe          BL       s_printf
                  |L1.308|
;;;87     	}
;;;88     	
;;;89     	return 0;
000134  2000              MOVS     r0,#0
;;;90     }
000136  e8bd87f0          POP      {r4-r10,pc}
;;;91     
                          ENDP

                  eep_read PROC
;;;94     
;;;95     int eep_read(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
00013a  e92d43f0          PUSH     {r4-r9,lr}
;;;96     {
00013e  b091              SUB      sp,sp,#0x44
000140  4680              MOV      r8,r0
000142  4689              MOV      r9,r1
000144  4614              MOV      r4,r2
;;;97       int retval;
;;;98     	uint8 buf[64] = {0};
000146  2140              MOVS     r1,#0x40
000148  a801              ADD      r0,sp,#4
00014a  f7fffffe          BL       __aeabi_memclr4
;;;99     	
;;;100    	retval = eeprom_read(atoi(argv[1]), buf, atoi(argv[2]));
00014e  68a0              LDR      r0,[r4,#8]
000150  f7fffffe          BL       atoi
000154  4606              MOV      r6,r0
000156  6860              LDR      r0,[r4,#4]
000158  f7fffffe          BL       atoi
00015c  4607              MOV      r7,r0
00015e  4632              MOV      r2,r6
000160  a901              ADD      r1,sp,#4
000162  f7fffffe          BL       eeprom_read
000166  4605              MOV      r5,r0
;;;101    	
;;;102    	if(retval < 0){
000168  2d00              CMP      r5,#0
00016a  da03              BGE      |L1.372|
;;;103    		SYS_TRACE("eeprom read fail\r\n");
00016c  a020              ADR      r0,|L1.496|
00016e  f7fffffe          BL       s_printf
000172  e003              B        |L1.380|
                  |L1.372|
;;;104    	}else{
;;;105    		SYS_TRACE("eeprom read=[%s]\r\n", buf);
000174  a901              ADD      r1,sp,#4
000176  a023              ADR      r0,|L1.516|
000178  f7fffffe          BL       s_printf
                  |L1.380|
;;;106    	}
;;;107    	
;;;108    	return 0;
00017c  2000              MOVS     r0,#0
;;;109    }
00017e  b011              ADD      sp,sp,#0x44
000180  e8bd83f0          POP      {r4-r9,pc}
;;;110    
                          ENDP

                  |L1.388|
                          DCD      0x40005000
                  |L1.392|
                          DCD      __FUNCTION__
                  |L1.396|
00018c  62756620          DCB      "buf != NULL",0
000190  213d204e
000194  554c4c00
                  |L1.408|
000198  28257329          DCB      "(%s) has assert failed at %s.\n",0
00019c  20686173
0001a0  20617373
0001a4  65727420
0001a8  6661696c
0001ac  65642061
0001b0  74202573
0001b4  2e0a00  
0001b7  00                DCB      0
                  |L1.440|
                          DCD      |symbol_number.10|
                  |L1.444|
0001bc  65657072          DCB      "eeprom write fail\r\n",0
0001c0  6f6d2077
0001c4  72697465
0001c8  20666169
0001cc  6c0d0a00
                  |L1.464|
0001d0  65657072          DCB      "eeprom write %d bytes success\r\n",0
0001d4  6f6d2077
0001d8  72697465
0001dc  20256420
0001e0  62797465
0001e4  73207375
0001e8  63636573
0001ec  730d0a00
                  |L1.496|
0001f0  65657072          DCB      "eeprom read fail\r\n",0
0001f4  6f6d2072
0001f8  65616420
0001fc  6661696c
000200  0d0a00  
000203  00                DCB      0
                  |L1.516|
000204  65657072          DCB      "eeprom read=[%s]\r\n",0
000208  6f6d2072
00020c  6561643d
000210  5b25735d
000214  0d0a00  
000217  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  65657072          DCB      0x65,0x65,0x70,0x72
000004  6f6d5f77          DCB      0x6f,0x6d,0x5f,0x77
000008  72697465          DCB      0x72,0x69,0x74,0x65
00000c  00                DCB      0x00
                  |symbol_number.10|
00000d  656570            DCB      0x65,0x65,0x70
000010  726f6d5f          DCB      0x72,0x6f,0x6d,0x5f
000014  72656164          DCB      0x72,0x65,0x61,0x64
000018  00                DCB      0x00

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=0

000000  65707077          DCB      0x65,0x70,0x70,0x77
000004  00656570          DCB      0x00,0x65,0x65,0x70
000008  726f6d20          DCB      0x72,0x6f,0x6d,0x20
00000c  77726974          DCB      0x77,0x72,0x69,0x74
000010  65207465          DCB      0x65,0x20,0x74,0x65
000014  73740065          DCB      0x73,0x74,0x00,0x65
000018  70707200          DCB      0x70,0x70,0x72,0x00
00001c  65657072          DCB      0x65,0x65,0x70,0x72
000020  6f6d2072          DCB      0x6f,0x6d,0x20,0x72
000024  65616420          DCB      0x65,0x61,0x64,0x20
000028  74657374          DCB      0x74,0x65,0x73,0x74
00002c  00                DCB      0x00

                          AREA INIT_CMD, DATA, READONLY, ALIGN=2

                  __init_cmd_eppw
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
                          DCD      0x00000003
                          DCD      eep_write
                          DCD      ||.conststrlit||+0x5
                  __init_cmd_eppr
                  |symbol_number.22|
                          DCD      ||.conststrlit||+0x17
                          DCD      0x00000003
                          DCD      eep_read
                          DCD      ||.conststrlit||+0x1c
