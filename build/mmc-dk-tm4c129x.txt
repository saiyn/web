; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\mmc-dk-tm4c129x.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\mmc-dk-tm4c129x.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\mmc-dk-tm4c129x.crf third_party\fatfs\port\mmc-dk-tm4c129x.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SELECT PROC
;;;64     static
;;;65     void SELECT (void)
000000  b510              PUSH     {r4,lr}
;;;66     {
;;;67         ROM_GPIOPinWrite(SDC_SSI_FSS_GPIO_PORT_BASE, SDC_SSI_FSS, 0);
000002  f04f7080          MOV      r0,#0x1000000
000006  6a00              LDR      r0,[r0,#0x20]
000008  2200              MOVS     r2,#0
00000a  2110              MOVS     r1,#0x10
00000c  6803              LDR      r3,[r0,#0]
00000e  48fe              LDR      r0,|L1.1032|
000010  4798              BLX      r3
;;;68     }
000012  bd10              POP      {r4,pc}
;;;69     
                          ENDP

                  DESELECT PROC
;;;71     static
;;;72     void DESELECT (void)
000014  b510              PUSH     {r4,lr}
;;;73     {
;;;74         ROM_GPIOPinWrite(SDC_SSI_FSS_GPIO_PORT_BASE, SDC_SSI_FSS, SDC_SSI_FSS);
000016  f04f7080          MOV      r0,#0x1000000
00001a  6a00              LDR      r0,[r0,#0x20]
00001c  2210              MOVS     r2,#0x10
00001e  4611              MOV      r1,r2
000020  6803              LDR      r3,[r0,#0]
000022  48f9              LDR      r0,|L1.1032|
000024  4798              BLX      r3
;;;75     }
000026  bd10              POP      {r4,pc}
;;;76     
                          ENDP

                  xmit_spi PROC
;;;99     static
;;;100    void xmit_spi(BYTE dat)
000028  b538              PUSH     {r3-r5,lr}
;;;101    {
00002a  4604              MOV      r4,r0
;;;102        uint32_t ui32RcvDat;
;;;103    
;;;104        ROM_SSIDataPut(SDC_SSI_BASE, dat); /* Write the data to the tx fifo */
00002c  f04f7080          MOV      r0,#0x1000000
000030  6980              LDR      r0,[r0,#0x18]
000032  4621              MOV      r1,r4
000034  6802              LDR      r2,[r0,#0]
000036  48f5              LDR      r0,|L1.1036|
000038  4790              BLX      r2
;;;105    
;;;106        ROM_SSIDataGet(SDC_SSI_BASE, &ui32RcvDat); /* flush data read during the write */
00003a  f04f7080          MOV      r0,#0x1000000
00003e  6980              LDR      r0,[r0,#0x18]
000040  4669              MOV      r1,sp
000042  6a42              LDR      r2,[r0,#0x24]
000044  48f1              LDR      r0,|L1.1036|
000046  4790              BLX      r2
;;;107    }
000048  bd38              POP      {r3-r5,pc}
;;;108    
                          ENDP

                  rcvr_spi PROC
;;;114    static
;;;115    BYTE rcvr_spi (void)
00004a  b508              PUSH     {r3,lr}
;;;116    {
;;;117        uint32_t ui32RcvDat;
;;;118    
;;;119        ROM_SSIDataPut(SDC_SSI_BASE, 0xFF); /* write dummy data */
00004c  f04f7080          MOV      r0,#0x1000000
000050  6980              LDR      r0,[r0,#0x18]
000052  21ff              MOVS     r1,#0xff
000054  6802              LDR      r2,[r0,#0]
000056  48ed              LDR      r0,|L1.1036|
000058  4790              BLX      r2
;;;120    
;;;121        ROM_SSIDataGet(SDC_SSI_BASE, &ui32RcvDat); /* read data frm rx fifo */
00005a  f04f7080          MOV      r0,#0x1000000
00005e  6980              LDR      r0,[r0,#0x18]
000060  4669              MOV      r1,sp
000062  6a42              LDR      r2,[r0,#0x24]
000064  48e9              LDR      r0,|L1.1036|
000066  4790              BLX      r2
;;;122    
;;;123        return (BYTE)ui32RcvDat;
000068  9800              LDR      r0,[sp,#0]
00006a  b2c0              UXTB     r0,r0
;;;124    }
00006c  bd08              POP      {r3,pc}
;;;125    
                          ENDP

                  rcvr_spi_m PROC
;;;127    static
;;;128    void rcvr_spi_m (BYTE *dst)
00006e  b510              PUSH     {r4,lr}
;;;129    {
000070  4604              MOV      r4,r0
;;;130        *dst = rcvr_spi();
000072  f7fffffe          BL       rcvr_spi
000076  7020              STRB     r0,[r4,#0]
;;;131    }
000078  bd10              POP      {r4,pc}
;;;132    
                          ENDP

                  wait_ready PROC
;;;137    static
;;;138    BYTE wait_ready (void)
00007a  b510              PUSH     {r4,lr}
;;;139    {
;;;140        BYTE res;
;;;141    
;;;142    
;;;143        Timer2 = 50;    /* Wait for ready in timeout of 500ms */
00007c  2032              MOVS     r0,#0x32
00007e  49e4              LDR      r1,|L1.1040|
000080  7008              STRB     r0,[r1,#0]
;;;144        rcvr_spi();
000082  f7fffffe          BL       rcvr_spi
;;;145        do
000086  bf00              NOP      
                  |L1.136|
;;;146            res = rcvr_spi();
000088  f7fffffe          BL       rcvr_spi
00008c  4604              MOV      r4,r0
;;;147        while ((res != 0xFF) && Timer2);
00008e  2cff              CMP      r4,#0xff
000090  d003              BEQ      |L1.154|
000092  48df              LDR      r0,|L1.1040|
000094  7800              LDRB     r0,[r0,#0]  ; Timer2
000096  2800              CMP      r0,#0
000098  d1f6              BNE      |L1.136|
                  |L1.154|
;;;148    
;;;149        return res;
00009a  4620              MOV      r0,r4
;;;150    }
00009c  bd10              POP      {r4,pc}
;;;151    
                          ENDP

                  send_initial_clock_train PROC
;;;156    static
;;;157    void send_initial_clock_train(void)
00009e  b538              PUSH     {r3-r5,lr}
;;;158    {
;;;159        unsigned int i;
;;;160        uint32_t ui32Dat;
;;;161    
;;;162        /* Ensure CS is held high. */
;;;163        DESELECT();
0000a0  f7fffffe          BL       DESELECT
;;;164    
;;;165        /* Switch the SSI TX line to a GPIO and drive it high too. */
;;;166        ROM_GPIOPinTypeGPIOOutput(SDC_SSI_TX_GPIO_PORT_BASE, SDC_SSI_TX);
0000a4  f04f7080          MOV      r0,#0x1000000
0000a8  6a00              LDR      r0,[r0,#0x20]
0000aa  2101              MOVS     r1,#1
0000ac  6bc2              LDR      r2,[r0,#0x3c]
0000ae  48d9              LDR      r0,|L1.1044|
0000b0  4790              BLX      r2
;;;167        ROM_GPIOPinWrite(SDC_SSI_TX_GPIO_PORT_BASE, SDC_SSI_TX, SDC_SSI_TX);
0000b2  f04f7080          MOV      r0,#0x1000000
0000b6  6a00              LDR      r0,[r0,#0x20]
0000b8  2201              MOVS     r2,#1
0000ba  4611              MOV      r1,r2
0000bc  6803              LDR      r3,[r0,#0]
0000be  48d5              LDR      r0,|L1.1044|
0000c0  4798              BLX      r3
;;;168    
;;;169        /* Send 10 bytes over the SSI. This causes the clock to wiggle the */
;;;170        /* required number of times. */
;;;171        for(i = 0 ; i < 10 ; i++)
0000c2  2400              MOVS     r4,#0
0000c4  e00e              B        |L1.228|
                  |L1.198|
;;;172        {
;;;173            /* Write DUMMY data. SSIDataPut() waits until there is room in the */
;;;174            /* FIFO. */
;;;175            ROM_SSIDataPut(SDC_SSI_BASE, 0xFF);
0000c6  f04f7080          MOV      r0,#0x1000000
0000ca  6980              LDR      r0,[r0,#0x18]
0000cc  21ff              MOVS     r1,#0xff
0000ce  6802              LDR      r2,[r0,#0]
0000d0  48ce              LDR      r0,|L1.1036|
0000d2  4790              BLX      r2
;;;176    
;;;177            /* Flush data read during data write. */
;;;178            ROM_SSIDataGet(SDC_SSI_BASE, &ui32Dat);
0000d4  f04f7080          MOV      r0,#0x1000000
0000d8  6980              LDR      r0,[r0,#0x18]
0000da  4669              MOV      r1,sp
0000dc  6a42              LDR      r2,[r0,#0x24]
0000de  48cb              LDR      r0,|L1.1036|
0000e0  4790              BLX      r2
0000e2  1c64              ADDS     r4,r4,#1              ;171
                  |L1.228|
0000e4  2c0a              CMP      r4,#0xa               ;171
0000e6  d3ee              BCC      |L1.198|
;;;179        }
;;;180    
;;;181        /* Revert to hardware control of the SSI TX line. */
;;;182        ROM_GPIOPinTypeSSI(SDC_SSI_TX_GPIO_PORT_BASE, SDC_SSI_TX);
0000e8  f04f7080          MOV      r0,#0x1000000
0000ec  6a00              LDR      r0,[r0,#0x20]
0000ee  2101              MOVS     r1,#1
0000f0  6cc2              LDR      r2,[r0,#0x4c]
0000f2  48c8              LDR      r0,|L1.1044|
0000f4  4790              BLX      r2
;;;183    }
0000f6  bd38              POP      {r3-r5,pc}
;;;184    
                          ENDP

                  power_on PROC
;;;191    static
;;;192    void power_on (void)
0000f8  b51c              PUSH     {r2-r4,lr}
;;;193    {
;;;194        /*
;;;195         * This doesn't really turn the power on, but initializes the
;;;196         * SSI port and pins needed to talk to the card.
;;;197         */
;;;198    
;;;199        /* Enable the peripherals used to drive the SDC on SSI */
;;;200        ROM_SysCtlPeripheralEnable(SDC_SSI_SYSCTL_PERIPH);
0000fa  f04f7080          MOV      r0,#0x1000000
0000fe  6c40              LDR      r0,[r0,#0x44]
000100  6981              LDR      r1,[r0,#0x18]
000102  48c5              LDR      r0,|L1.1048|
000104  4788              BLX      r1
;;;201        ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOQ);
000106  f04f7080          MOV      r0,#0x1000000
00010a  6c40              LDR      r0,[r0,#0x44]
00010c  6981              LDR      r1,[r0,#0x18]
00010e  48c3              LDR      r0,|L1.1052|
000110  4788              BLX      r1
;;;202        ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
000112  f04f7080          MOV      r0,#0x1000000
000116  6c40              LDR      r0,[r0,#0x44]
000118  6981              LDR      r1,[r0,#0x18]
00011a  48c0              LDR      r0,|L1.1052|
00011c  3809              SUBS     r0,r0,#9
00011e  4788              BLX      r1
;;;203        ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOH);
000120  f04f7080          MOV      r0,#0x1000000
000124  6c40              LDR      r0,[r0,#0x44]
000126  6981              LDR      r1,[r0,#0x18]
000128  48bc              LDR      r0,|L1.1052|
00012a  1fc0              SUBS     r0,r0,#7
00012c  4788              BLX      r1
;;;204    
;;;205        /*
;;;206         * Configure the appropriate pins to be SSI instead of GPIO. The FSS (CS)
;;;207         * signal is directly driven to ensure that we can hold it low through a
;;;208         * complete transaction with the SD card.
;;;209         */
;;;210        ROM_GPIOPinTypeSSI(SDC_SSI_TX_GPIO_PORT_BASE, SDC_SSI_TX);
00012e  f04f7080          MOV      r0,#0x1000000
000132  6a00              LDR      r0,[r0,#0x20]
000134  2101              MOVS     r1,#1
000136  6cc2              LDR      r2,[r0,#0x4c]
000138  48b6              LDR      r0,|L1.1044|
00013a  4790              BLX      r2
;;;211        ROM_GPIOPinTypeSSI(SDC_SSI_RX_GPIO_PORT_BASE, SDC_SSI_RX);
00013c  f04f7080          MOV      r0,#0x1000000
000140  6a00              LDR      r0,[r0,#0x20]
000142  2104              MOVS     r1,#4
000144  6cc2              LDR      r2,[r0,#0x4c]
000146  48b6              LDR      r0,|L1.1056|
000148  4790              BLX      r2
;;;212        ROM_GPIOPinTypeSSI(SDC_SSI_CLK_GPIO_PORT_BASE, SDC_SSI_CLK);
00014a  f04f7080          MOV      r0,#0x1000000
00014e  6a00              LDR      r0,[r0,#0x20]
000150  2101              MOVS     r1,#1
000152  6cc2              LDR      r2,[r0,#0x4c]
000154  48b2              LDR      r0,|L1.1056|
000156  4790              BLX      r2
;;;213        ROM_GPIOPinTypeGPIOOutput(SDC_SSI_FSS_GPIO_PORT_BASE, SDC_SSI_FSS);
000158  f04f7080          MOV      r0,#0x1000000
00015c  6a00              LDR      r0,[r0,#0x20]
00015e  2110              MOVS     r1,#0x10
000160  6bc2              LDR      r2,[r0,#0x3c]
000162  48a9              LDR      r0,|L1.1032|
000164  4790              BLX      r2
;;;214    
;;;215        /*
;;;216         * Set the SSI output pins to 4MA drive strength and engage the
;;;217         * pull-up on the receive line.
;;;218         */
;;;219        ROM_GPIOPadConfigSet(SDC_SSI_RX_GPIO_PORT_BASE, SDC_SSI_RX,
000166  f04f7080          MOV      r0,#0x1000000
00016a  6a00              LDR      r0,[r0,#0x20]
00016c  230a              MOVS     r3,#0xa
00016e  2202              MOVS     r2,#2
000170  2104              MOVS     r1,#4
000172  6944              LDR      r4,[r0,#0x14]
000174  48aa              LDR      r0,|L1.1056|
000176  47a0              BLX      r4
;;;220                             GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD_WPU);
;;;221        ROM_GPIOPadConfigSet(SDC_SSI_CLK_GPIO_PORT_BASE, SDC_SSI_CLK,
000178  f04f7080          MOV      r0,#0x1000000
00017c  6a00              LDR      r0,[r0,#0x20]
00017e  2308              MOVS     r3,#8
000180  2202              MOVS     r2,#2
000182  2101              MOVS     r1,#1
000184  6944              LDR      r4,[r0,#0x14]
000186  48a6              LDR      r0,|L1.1056|
000188  47a0              BLX      r4
;;;222                             GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD);
;;;223        ROM_GPIOPadConfigSet(SDC_SSI_TX_GPIO_PORT_BASE, SDC_SSI_TX,
00018a  f04f7080          MOV      r0,#0x1000000
00018e  6a00              LDR      r0,[r0,#0x20]
000190  2308              MOVS     r3,#8
000192  2202              MOVS     r2,#2
000194  2101              MOVS     r1,#1
000196  6944              LDR      r4,[r0,#0x14]
000198  489e              LDR      r0,|L1.1044|
00019a  47a0              BLX      r4
;;;224                             GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD);
;;;225        ROM_GPIOPadConfigSet(SDC_SSI_FSS_GPIO_PORT_BASE, SDC_SSI_FSS,
00019c  f04f7080          MOV      r0,#0x1000000
0001a0  6a00              LDR      r0,[r0,#0x20]
0001a2  2308              MOVS     r3,#8
0001a4  2202              MOVS     r2,#2
0001a6  2110              MOVS     r1,#0x10
0001a8  6944              LDR      r4,[r0,#0x14]
0001aa  4897              LDR      r0,|L1.1032|
0001ac  47a0              BLX      r4
;;;226                             GPIO_STRENGTH_4MA, GPIO_PIN_TYPE_STD);
;;;227    
;;;228        /* Configure the SSI3 port */
;;;229        ROM_SSIConfigSetExpClk(SDC_SSI_BASE, gSysClock,
0001ae  2008              MOVS     r0,#8
0001b0  499c              LDR      r1,|L1.1060|
0001b2  e9cd1000          STRD     r1,r0,[sp,#0]
0001b6  0540              LSLS     r0,r0,#21
0001b8  6980              LDR      r0,[r0,#0x18]
0001ba  2300              MOVS     r3,#0
0001bc  461a              MOV      r2,r3
0001be  6844              LDR      r4,[r0,#4]
0001c0  4899              LDR      r0,|L1.1064|
0001c2  6801              LDR      r1,[r0,#0]  ; gSysClock
0001c4  4891              LDR      r0,|L1.1036|
0001c6  47a0              BLX      r4
;;;230                               SSI_FRF_MOTO_MODE_0, SSI_MODE_MASTER, 400000, 8);
;;;231        ROM_SSIEnable(SDC_SSI_BASE);
0001c8  f04f7080          MOV      r0,#0x1000000
0001cc  6980              LDR      r0,[r0,#0x18]
0001ce  6881              LDR      r1,[r0,#8]
0001d0  488e              LDR      r0,|L1.1036|
0001d2  4788              BLX      r1
;;;232    
;;;233        /* Set DI and CS high and apply more than 74 pulses to SCLK for the card */
;;;234        /* to be able to accept a native command. */
;;;235        send_initial_clock_train();
0001d4  f7fffffe          BL       send_initial_clock_train
;;;236    
;;;237        PowerFlag = 1;
0001d8  2001              MOVS     r0,#1
0001da  4994              LDR      r1,|L1.1068|
0001dc  7008              STRB     r0,[r1,#0]
;;;238    }
0001de  bd1c              POP      {r2-r4,pc}
;;;239    
                          ENDP

                  set_max_speed PROC
;;;241    static
;;;242    void set_max_speed(void)
0001e0  b57c              PUSH     {r2-r6,lr}
;;;243    {
;;;244        unsigned long i;
;;;245    
;;;246        /* Disable the SSI */
;;;247        ROM_SSIDisable(SDC_SSI_BASE);
0001e2  f04f7080          MOV      r0,#0x1000000
0001e6  6980              LDR      r0,[r0,#0x18]
0001e8  68c1              LDR      r1,[r0,#0xc]
0001ea  4888              LDR      r0,|L1.1036|
0001ec  4788              BLX      r1
;;;248    
;;;249        /* Set the maximum speed as half the system clock, with a max of 12.5 MHz. */
;;;250        i = gSysClock / 2;
0001ee  488e              LDR      r0,|L1.1064|
0001f0  6800              LDR      r0,[r0,#0]  ; gSysClock
0001f2  0844              LSRS     r4,r0,#1
;;;251        if(i > 12500000)
0001f4  488e              LDR      r0,|L1.1072|
0001f6  4284              CMP      r4,r0
0001f8  d900              BLS      |L1.508|
;;;252        {
;;;253            i = 12500000;
0001fa  4604              MOV      r4,r0
                  |L1.508|
;;;254        }
;;;255    
;;;256        /* Configure the SSI0 port to run at 12.5MHz */
;;;257        ROM_SSIConfigSetExpClk(SDC_SSI_BASE, gSysClock,
0001fc  2008              MOVS     r0,#8
0001fe  e9cd4000          STRD     r4,r0,[sp,#0]
000202  0540              LSLS     r0,r0,#21
000204  6980              LDR      r0,[r0,#0x18]
000206  2300              MOVS     r3,#0
000208  461a              MOV      r2,r3
00020a  6845              LDR      r5,[r0,#4]
00020c  4886              LDR      r0,|L1.1064|
00020e  6801              LDR      r1,[r0,#0]  ; gSysClock
000210  487e              LDR      r0,|L1.1036|
000212  47a8              BLX      r5
;;;258                               SSI_FRF_MOTO_MODE_0, SSI_MODE_MASTER, i, 8);
;;;259    
;;;260        /* Enable the SSI */
;;;261        ROM_SSIEnable(SDC_SSI_BASE);
000214  f04f7080          MOV      r0,#0x1000000
000218  6980              LDR      r0,[r0,#0x18]
00021a  6881              LDR      r1,[r0,#8]
00021c  487b              LDR      r0,|L1.1036|
00021e  4788              BLX      r1
;;;262    }
000220  bd7c              POP      {r2-r6,pc}
;;;263    
                          ENDP

                  power_off PROC
;;;264    static
;;;265    void power_off (void)
000222  2000              MOVS     r0,#0
;;;266    {
;;;267        PowerFlag = 0;
000224  4981              LDR      r1,|L1.1068|
000226  7008              STRB     r0,[r1,#0]
;;;268    }
000228  4770              BX       lr
;;;269    
                          ENDP

                  chk_power PROC
;;;270    static
;;;271    int chk_power(void)        /* Socket power state: 0=off, 1=on */
00022a  4880              LDR      r0,|L1.1068|
;;;272    {
;;;273        return PowerFlag;
00022c  7800              LDRB     r0,[r0,#0]  ; PowerFlag
;;;274    }
00022e  4770              BX       lr
;;;275    
                          ENDP

                  rcvr_datablock PROC
;;;282    static
;;;283    BOOL rcvr_datablock (
000230  b570              PUSH     {r4-r6,lr}
;;;284        BYTE *buff,            /* Data buffer to store received data */
;;;285        UINT btr            /* Byte count (must be even number) */
;;;286    )
;;;287    {
000232  4605              MOV      r5,r0
000234  460e              MOV      r6,r1
;;;288        BYTE token;
;;;289    
;;;290    
;;;291        Timer1 = 100;
000236  2064              MOVS     r0,#0x64
000238  497e              LDR      r1,|L1.1076|
00023a  7008              STRB     r0,[r1,#0]
;;;292        do {                            /* Wait for data packet in timeout of 100ms */
00023c  bf00              NOP      
                  |L1.574|
;;;293            token = rcvr_spi();
00023e  f7fffffe          BL       rcvr_spi
000242  4604              MOV      r4,r0
;;;294        } while ((token == 0xFF) && Timer1);
000244  2cff              CMP      r4,#0xff
000246  d103              BNE      |L1.592|
000248  487a              LDR      r0,|L1.1076|
00024a  7800              LDRB     r0,[r0,#0]  ; Timer1
00024c  2800              CMP      r0,#0
00024e  d1f6              BNE      |L1.574|
                  |L1.592|
;;;295        if(token != 0xFE) return FALSE;    /* If not valid data token, retutn with error */
000250  2cfe              CMP      r4,#0xfe
000252  d001              BEQ      |L1.600|
000254  2000              MOVS     r0,#0
                  |L1.598|
;;;296    
;;;297        do {                            /* Receive the data block into buffer */
;;;298            rcvr_spi_m(buff++);
;;;299            rcvr_spi_m(buff++);
;;;300        } while (btr -= 2);
;;;301        rcvr_spi();                        /* Discard CRC */
;;;302        rcvr_spi();
;;;303    
;;;304        return TRUE;                    /* Return with success */
;;;305    }
000256  bd70              POP      {r4-r6,pc}
                  |L1.600|
000258  bf00              NOP                            ;297
                  |L1.602|
00025a  4628              MOV      r0,r5                 ;298
00025c  1c6d              ADDS     r5,r5,#1              ;298
00025e  f7fffffe          BL       rcvr_spi_m
000262  4628              MOV      r0,r5                 ;299
000264  1c6d              ADDS     r5,r5,#1              ;299
000266  f7fffffe          BL       rcvr_spi_m
00026a  1eb0              SUBS     r0,r6,#2              ;300
00026c  0006              MOVS     r6,r0                 ;300
00026e  d1f4              BNE      |L1.602|
000270  f7fffffe          BL       rcvr_spi
000274  f7fffffe          BL       rcvr_spi
000278  2001              MOVS     r0,#1                 ;304
00027a  e7ec              B        |L1.598|
;;;306    
                          ENDP

                  xmit_datablock PROC
;;;314    static
;;;315    BOOL xmit_datablock (
00027c  e92d41f0          PUSH     {r4-r8,lr}
;;;316        const BYTE *buff,    /* 512 byte data block to be transmitted */
;;;317        BYTE token            /* Data/Stop token */
;;;318    )
;;;319    {
000280  4604              MOV      r4,r0
000282  460d              MOV      r5,r1
;;;320        BYTE resp, wc;
;;;321    
;;;322    
;;;323        if (wait_ready() != 0xFF) return FALSE;
000284  f7fffffe          BL       wait_ready
000288  28ff              CMP      r0,#0xff
00028a  d002              BEQ      |L1.658|
00028c  2000              MOVS     r0,#0
                  |L1.654|
;;;324    
;;;325        xmit_spi(token);                    /* Xmit data token */
;;;326        if (token != 0xFD) {    /* Is data token */
;;;327            wc = 0;
;;;328            do {                            /* Xmit the 512 byte data block to MMC */
;;;329                xmit_spi(*buff++);
;;;330                xmit_spi(*buff++);
;;;331            } while (--wc);
;;;332            xmit_spi(0xFF);                    /* CRC (Dummy) */
;;;333            xmit_spi(0xFF);
;;;334            resp = rcvr_spi();                /* Reveive data response */
;;;335            if ((resp & 0x1F) != 0x05)        /* If not accepted, return with error */
;;;336                return FALSE;
;;;337        }
;;;338    
;;;339        return TRUE;
;;;340    }
00028e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.658|
000292  4628              MOV      r0,r5                 ;325
000294  f7fffffe          BL       xmit_spi
000298  2dfd              CMP      r5,#0xfd              ;326
00029a  d01c              BEQ      |L1.726|
00029c  2700              MOVS     r7,#0                 ;327
00029e  bf00              NOP                            ;328
                  |L1.672|
0002a0  f8140b01          LDRB     r0,[r4],#1            ;329
0002a4  f7fffffe          BL       xmit_spi
0002a8  f8140b01          LDRB     r0,[r4],#1            ;330
0002ac  f7fffffe          BL       xmit_spi
0002b0  1e78              SUBS     r0,r7,#1              ;331
0002b2  b2c0              UXTB     r0,r0                 ;331
0002b4  0007              MOVS     r7,r0                 ;331
0002b6  d1f3              BNE      |L1.672|
0002b8  20ff              MOVS     r0,#0xff              ;332
0002ba  f7fffffe          BL       xmit_spi
0002be  20ff              MOVS     r0,#0xff              ;333
0002c0  f7fffffe          BL       xmit_spi
0002c4  f7fffffe          BL       rcvr_spi
0002c8  4606              MOV      r6,r0                 ;334
0002ca  f006001f          AND      r0,r6,#0x1f           ;335
0002ce  2805              CMP      r0,#5                 ;335
0002d0  d001              BEQ      |L1.726|
0002d2  2000              MOVS     r0,#0                 ;336
0002d4  e7db              B        |L1.654|
                  |L1.726|
0002d6  2001              MOVS     r0,#1                 ;339
0002d8  e7d9              B        |L1.654|
;;;341    #endif /* _READONLY */
                          ENDP

                  send_cmd PROC
;;;349    static
;;;350    BYTE send_cmd (
0002da  e92d41f0          PUSH     {r4-r8,lr}
;;;351        BYTE cmd,        /* Command byte */
;;;352        DWORD arg        /* Argument */
;;;353    )
;;;354    {
0002de  4605              MOV      r5,r0
0002e0  460c              MOV      r4,r1
;;;355        BYTE n, res;
;;;356    
;;;357    
;;;358        if (wait_ready() != 0xFF) return 0xFF;
0002e2  f7fffffe          BL       wait_ready
0002e6  28ff              CMP      r0,#0xff
0002e8  d002              BEQ      |L1.752|
0002ea  20ff              MOVS     r0,#0xff
                  |L1.748|
;;;359    
;;;360        /* Send command packet */
;;;361        xmit_spi(cmd);                        /* Command */
;;;362        xmit_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
;;;363        xmit_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
;;;364        xmit_spi((BYTE)(arg >> 8));            /* Argument[15..8] */
;;;365        xmit_spi((BYTE)arg);                /* Argument[7..0] */
;;;366        n = 0xff;
;;;367        if (cmd == CMD0) n = 0x95;            /* CRC for CMD0(0) */
;;;368        if (cmd == CMD8) n = 0x87;            /* CRC for CMD8(0x1AA) */
;;;369        xmit_spi(n);
;;;370    
;;;371        /* Receive command response */
;;;372        if (cmd == CMD12) rcvr_spi();        /* Skip a stuff byte when stop reading */
;;;373        n = 10;                                /* Wait for a valid response in timeout of 10 attempts */
;;;374        do
;;;375            res = rcvr_spi();
;;;376        while ((res & 0x80) && --n);
;;;377    
;;;378        return res;            /* Return with the response value */
;;;379    }
0002ec  e8bd81f0          POP      {r4-r8,pc}
                  |L1.752|
0002f0  4628              MOV      r0,r5                 ;361
0002f2  f7fffffe          BL       xmit_spi
0002f6  0e20              LSRS     r0,r4,#24             ;362
0002f8  f7fffffe          BL       xmit_spi
0002fc  f3c44007          UBFX     r0,r4,#16,#8          ;363
000300  f7fffffe          BL       xmit_spi
000304  f3c42007          UBFX     r0,r4,#8,#8           ;364
000308  f7fffffe          BL       xmit_spi
00030c  b2e0              UXTB     r0,r4                 ;365
00030e  f7fffffe          BL       xmit_spi
000312  26ff              MOVS     r6,#0xff              ;366
000314  2d40              CMP      r5,#0x40              ;367
000316  d100              BNE      |L1.794|
000318  2695              MOVS     r6,#0x95              ;367
                  |L1.794|
00031a  2d48              CMP      r5,#0x48              ;368
00031c  d100              BNE      |L1.800|
00031e  2687              MOVS     r6,#0x87              ;368
                  |L1.800|
000320  4630              MOV      r0,r6                 ;369
000322  f7fffffe          BL       xmit_spi
000326  2d4c              CMP      r5,#0x4c              ;372
000328  d101              BNE      |L1.814|
00032a  f7fffffe          BL       rcvr_spi
                  |L1.814|
00032e  260a              MOVS     r6,#0xa               ;373
000330  bf00              NOP                            ;374
                  |L1.818|
000332  f7fffffe          BL       rcvr_spi
000336  4607              MOV      r7,r0                 ;375
000338  f0170f80          TST      r7,#0x80              ;376
00033c  d003              BEQ      |L1.838|
00033e  1e70              SUBS     r0,r6,#1              ;376
000340  b2c0              UXTB     r0,r0                 ;376
000342  0006              MOVS     r6,r0                 ;376
000344  d1f5              BNE      |L1.818|
                  |L1.838|
000346  4638              MOV      r0,r7                 ;378
000348  e7d0              B        |L1.748|
;;;380    
                          ENDP

                  send_cmd12 PROC
;;;396    static
;;;397    BYTE send_cmd12 (void)
00034a  b570              PUSH     {r4-r6,lr}
;;;398    {
;;;399        BYTE n, res, val;
;;;400    
;;;401        /* For CMD12, we don't wait for the card to be idle before we send
;;;402         * the new command.
;;;403         */
;;;404    
;;;405        /* Send command packet - the argument for CMD12 is ignored. */
;;;406        xmit_spi(CMD12);
00034c  204c              MOVS     r0,#0x4c
00034e  f7fffffe          BL       xmit_spi
;;;407        xmit_spi(0);
000352  2000              MOVS     r0,#0
000354  f7fffffe          BL       xmit_spi
;;;408        xmit_spi(0);
000358  2000              MOVS     r0,#0
00035a  f7fffffe          BL       xmit_spi
;;;409        xmit_spi(0);
00035e  2000              MOVS     r0,#0
000360  f7fffffe          BL       xmit_spi
;;;410        xmit_spi(0);
000364  2000              MOVS     r0,#0
000366  f7fffffe          BL       xmit_spi
;;;411        xmit_spi(0);
00036a  2000              MOVS     r0,#0
00036c  f7fffffe          BL       xmit_spi
;;;412    
;;;413        /* Read up to 10 bytes from the card, remembering the value read if it's
;;;414           not 0xFF */
;;;415        for(n = 0; n < 10; n++)
000370  2500              MOVS     r5,#0
000372  e007              B        |L1.900|
                  |L1.884|
;;;416        {
;;;417            val = rcvr_spi();
000374  f7fffffe          BL       rcvr_spi
000378  4604              MOV      r4,r0
;;;418            if(val != 0xFF)
00037a  2cff              CMP      r4,#0xff
00037c  d000              BEQ      |L1.896|
;;;419            {
;;;420                res = val;
00037e  4626              MOV      r6,r4
                  |L1.896|
000380  1c68              ADDS     r0,r5,#1              ;415
000382  b2c5              UXTB     r5,r0                 ;415
                  |L1.900|
000384  2d0a              CMP      r5,#0xa               ;415
000386  dbf5              BLT      |L1.884|
;;;421            }
;;;422        }
;;;423    
;;;424        return res;            /* Return with the response value */
000388  4630              MOV      r0,r6
;;;425    }
00038a  bd70              POP      {r4-r6,pc}
;;;426    
                          ENDP

                  disk_initialize PROC
;;;437    
;;;438    DSTATUS disk_initialize (
00038c  b5f8              PUSH     {r3-r7,lr}
;;;439        BYTE drv        /* Physical drive nmuber (0) */
;;;440    )
;;;441    {
00038e  4606              MOV      r6,r0
;;;442        BYTE n, ty, ocr[4];
;;;443    
;;;444    
;;;445        if (drv) return STA_NOINIT;            /* Supports only single drive */
000390  b10e              CBZ      r6,|L1.918|
000392  2001              MOVS     r0,#1
                  |L1.916|
;;;446        if (Stat & STA_NODISK) return Stat;    /* No card in the socket */
;;;447    
;;;448        power_on();                            /* Force socket power on */
;;;449        send_initial_clock_train();            /* Ensure the card is in SPI mode */
;;;450    
;;;451        SELECT();                /* CS = L */
;;;452        ty = 0;
;;;453        if (send_cmd(CMD0, 0) == 1) {            /* Enter Idle state */
;;;454            Timer1 = 100;                        /* Initialization timeout of 1000 msec */
;;;455            if (send_cmd(CMD8, 0x1AA) == 1) {    /* SDC Ver2+ */
;;;456                for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
;;;457                if (ocr[2] == 0x01 && ocr[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
;;;458                    do {
;;;459                        if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 1UL << 30) == 0)    break;    /* ACMD41 with HCS bit */
;;;460                    } while (Timer1);
;;;461                    if (Timer1 && send_cmd(CMD58, 0) == 0) {    /* Check CCS bit */
;;;462                        for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
;;;463                        ty = (ocr[0] & 0x40) ? 6 : 2;
;;;464                    }
;;;465                }
;;;466            } else {                            /* SDC Ver1 or MMC */
;;;467                ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1;    /* SDC : MMC */
;;;468                do {
;;;469                    if (ty == 2) {
;;;470                        if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0) break;    /* ACMD41 */
;;;471                    } else {
;;;472                        if (send_cmd(CMD1, 0) == 0) break;                                /* CMD1 */
;;;473                    }
;;;474                } while (Timer1);
;;;475                if (!Timer1 || send_cmd(CMD16, 512) != 0)    /* Select R/W block length */
;;;476                    ty = 0;
;;;477            }
;;;478        }
;;;479        CardType = ty;
;;;480        DESELECT();            /* CS = H */
;;;481        rcvr_spi();            /* Idle (Release DO) */
;;;482    
;;;483        if (ty) {            /* Initialization succeded */
;;;484            Stat &= ~STA_NOINIT;        /* Clear STA_NOINIT */
;;;485            set_max_speed();
;;;486        } else {            /* Initialization failed */
;;;487            power_off();
;;;488        }
;;;489    
;;;490        return Stat;
;;;491    }
000394  bdf8              POP      {r3-r7,pc}
                  |L1.918|
000396  4828              LDR      r0,|L1.1080|
000398  7800              LDRB     r0,[r0,#0]            ;446  ; Stat
00039a  f0100f02          TST      r0,#2                 ;446
00039e  d002              BEQ      |L1.934|
0003a0  4825              LDR      r0,|L1.1080|
0003a2  7800              LDRB     r0,[r0,#0]            ;446  ; Stat
0003a4  e7f6              B        |L1.916|
                  |L1.934|
0003a6  f7fffffe          BL       power_on
0003aa  f7fffffe          BL       send_initial_clock_train
0003ae  f7fffffe          BL       SELECT
0003b2  2500              MOVS     r5,#0                 ;452
0003b4  2100              MOVS     r1,#0                 ;453
0003b6  2040              MOVS     r0,#0x40              ;453
0003b8  f7fffffe          BL       send_cmd
0003bc  2801              CMP      r0,#1                 ;453
0003be  d166              BNE      |L1.1166|
0003c0  2064              MOVS     r0,#0x64              ;454
0003c2  491c              LDR      r1,|L1.1076|
0003c4  7008              STRB     r0,[r1,#0]            ;454
0003c6  f44f71d5          MOV      r1,#0x1aa             ;455
0003ca  2048              MOVS     r0,#0x48              ;455
0003cc  f7fffffe          BL       send_cmd
0003d0  2801              CMP      r0,#1                 ;455
0003d2  d15d              BNE      |L1.1168|
0003d4  2400              MOVS     r4,#0                 ;456
0003d6  e005              B        |L1.996|
                  |L1.984|
0003d8  f7fffffe          BL       rcvr_spi
0003dc  f80d0004          STRB     r0,[sp,r4]            ;456
0003e0  1c60              ADDS     r0,r4,#1              ;456
0003e2  b2c4              UXTB     r4,r0                 ;456
                  |L1.996|
0003e4  2c04              CMP      r4,#4                 ;456
0003e6  dbf7              BLT      |L1.984|
0003e8  f89d0002          LDRB     r0,[sp,#2]            ;457
0003ec  2801              CMP      r0,#1                 ;457
0003ee  d14e              BNE      |L1.1166|
0003f0  f89d0003          LDRB     r0,[sp,#3]            ;457
0003f4  28aa              CMP      r0,#0xaa              ;457
0003f6  d17f              BNE      |L1.1272|
0003f8  bf00              NOP                            ;458
                  |L1.1018|
0003fa  2100              MOVS     r1,#0                 ;459
0003fc  2077              MOVS     r0,#0x77              ;459
0003fe  f7fffffe          BL       send_cmd
000402  2801              CMP      r0,#1                 ;459
000404  dc21              BGT      |L1.1098|
000406  e019              B        |L1.1084|
                  |L1.1032|
                          DCD      0x40027000
                  |L1.1036|
                          DCD      0x4000b000
                  |L1.1040|
                          DCD      Timer2
                  |L1.1044|
                          DCD      0x40025000
                  |L1.1048|
                          DCD      0xf0001c03
                  |L1.1052|
                          DCD      0xf000080e
                  |L1.1056|
                          DCD      0x40066000
                  |L1.1060|
                          DCD      0x00061a80
                  |L1.1064|
                          DCD      gSysClock
                  |L1.1068|
                          DCD      PowerFlag
                  |L1.1072|
                          DCD      0x00bebc20
                  |L1.1076|
                          DCD      Timer1
                  |L1.1080|
                          DCD      Stat
                  |L1.1084|
00043c  f04f4180          MOV      r1,#0x40000000        ;459
000440  2069              MOVS     r0,#0x69              ;459
000442  f7fffffe          BL       send_cmd
000446  b900              CBNZ     r0,|L1.1098|
000448  e003              B        |L1.1106|
                  |L1.1098|
00044a  48fd              LDR      r0,|L1.2112|
00044c  7800              LDRB     r0,[r0,#0]            ;460  ; Timer1
00044e  2800              CMP      r0,#0                 ;460
000450  d1d3              BNE      |L1.1018|
                  |L1.1106|
000452  bf00              NOP                            ;459
000454  48fa              LDR      r0,|L1.2112|
000456  7800              LDRB     r0,[r0,#0]            ;461  ; Timer1
000458  2800              CMP      r0,#0                 ;461
00045a  d04d              BEQ      |L1.1272|
00045c  2100              MOVS     r1,#0                 ;461
00045e  207a              MOVS     r0,#0x7a              ;461
000460  f7fffffe          BL       send_cmd
000464  2800              CMP      r0,#0                 ;461
000466  d147              BNE      |L1.1272|
000468  2400              MOVS     r4,#0                 ;462
00046a  e005              B        |L1.1144|
                  |L1.1132|
00046c  f7fffffe          BL       rcvr_spi
000470  f80d0004          STRB     r0,[sp,r4]            ;462
000474  1c60              ADDS     r0,r4,#1              ;462
000476  b2c4              UXTB     r4,r0                 ;462
                  |L1.1144|
000478  2c04              CMP      r4,#4                 ;462
00047a  dbf7              BLT      |L1.1132|
00047c  f89d0000          LDRB     r0,[sp,#0]            ;463
000480  f0100f40          TST      r0,#0x40              ;463
000484  d001              BEQ      |L1.1162|
000486  2006              MOVS     r0,#6                 ;463
000488  e000              B        |L1.1164|
                  |L1.1162|
00048a  2002              MOVS     r0,#2                 ;463
                  |L1.1164|
00048c  4605              MOV      r5,r0                 ;463
                  |L1.1166|
00048e  e033              B        |L1.1272|
                  |L1.1168|
000490  2100              MOVS     r1,#0                 ;467
000492  2077              MOVS     r0,#0x77              ;467
000494  f7fffffe          BL       send_cmd
000498  2801              CMP      r0,#1                 ;467
00049a  dc07              BGT      |L1.1196|
00049c  2100              MOVS     r1,#0                 ;467
00049e  2069              MOVS     r0,#0x69              ;467
0004a0  f7fffffe          BL       send_cmd
0004a4  2801              CMP      r0,#1                 ;467
0004a6  dc01              BGT      |L1.1196|
0004a8  2002              MOVS     r0,#2                 ;467
0004aa  e000              B        |L1.1198|
                  |L1.1196|
0004ac  2001              MOVS     r0,#1                 ;467
                  |L1.1198|
0004ae  4605              MOV      r5,r0                 ;467
0004b0  bf00              NOP                            ;468
                  |L1.1202|
0004b2  2d02              CMP      r5,#2                 ;469
0004b4  d10b              BNE      |L1.1230|
0004b6  2100              MOVS     r1,#0                 ;470
0004b8  2077              MOVS     r0,#0x77              ;470
0004ba  f7fffffe          BL       send_cmd
0004be  2801              CMP      r0,#1                 ;470
0004c0  dc0b              BGT      |L1.1242|
0004c2  2100              MOVS     r1,#0                 ;470
0004c4  2069              MOVS     r0,#0x69              ;470
0004c6  f7fffffe          BL       send_cmd
0004ca  b930              CBNZ     r0,|L1.1242|
0004cc  e009              B        |L1.1250|
                  |L1.1230|
0004ce  2100              MOVS     r1,#0                 ;472
0004d0  2041              MOVS     r0,#0x41              ;472
0004d2  f7fffffe          BL       send_cmd
0004d6  b900              CBNZ     r0,|L1.1242|
0004d8  e003              B        |L1.1250|
                  |L1.1242|
0004da  48d9              LDR      r0,|L1.2112|
0004dc  7800              LDRB     r0,[r0,#0]            ;474  ; Timer1
0004de  2800              CMP      r0,#0                 ;474
0004e0  d1e7              BNE      |L1.1202|
                  |L1.1250|
0004e2  bf00              NOP                            ;470
0004e4  48d6              LDR      r0,|L1.2112|
0004e6  7800              LDRB     r0,[r0,#0]            ;475  ; Timer1
0004e8  b128              CBZ      r0,|L1.1270|
0004ea  f44f7100          MOV      r1,#0x200             ;475
0004ee  2050              MOVS     r0,#0x50              ;475
0004f0  f7fffffe          BL       send_cmd
0004f4  b100              CBZ      r0,|L1.1272|
                  |L1.1270|
0004f6  2500              MOVS     r5,#0                 ;476
                  |L1.1272|
0004f8  48d2              LDR      r0,|L1.2116|
0004fa  7005              STRB     r5,[r0,#0]            ;479
0004fc  f7fffffe          BL       DESELECT
000500  f7fffffe          BL       rcvr_spi
000504  b145              CBZ      r5,|L1.1304|
000506  48d0              LDR      r0,|L1.2120|
000508  7800              LDRB     r0,[r0,#0]            ;484  ; Stat
00050a  f0200001          BIC      r0,r0,#1              ;484
00050e  49ce              LDR      r1,|L1.2120|
000510  7008              STRB     r0,[r1,#0]            ;484
000512  f7fffffe          BL       set_max_speed
000516  e001              B        |L1.1308|
                  |L1.1304|
000518  f7fffffe          BL       power_off
                  |L1.1308|
00051c  48ca              LDR      r0,|L1.2120|
00051e  7800              LDRB     r0,[r0,#0]            ;490  ; Stat
000520  e738              B        |L1.916|
;;;492    
                          ENDP

                  disk_status PROC
;;;498    
;;;499    DSTATUS disk_status (
000522  4601              MOV      r1,r0
;;;500        BYTE drv        /* Physical drive nmuber (0) */
;;;501    )
;;;502    {
;;;503        if (drv) return STA_NOINIT;        /* Supports only single drive */
000524  b109              CBZ      r1,|L1.1322|
000526  2001              MOVS     r0,#1
                  |L1.1320|
;;;504        return Stat;
;;;505    }
000528  4770              BX       lr
                  |L1.1322|
00052a  48c7              LDR      r0,|L1.2120|
00052c  7800              LDRB     r0,[r0,#0]            ;504  ; Stat
00052e  e7fb              B        |L1.1320|
;;;506    
                          ENDP

                  disk_read PROC
;;;512    
;;;513    DRESULT disk_read (
000530  e92d41f0          PUSH     {r4-r8,lr}
;;;514        BYTE drv,            /* Physical drive nmuber (0) */
;;;515        BYTE *buff,            /* Pointer to the data buffer to store read data */
;;;516        DWORD sector,        /* Start sector number (LBA) */
;;;517        BYTE count            /* Sector count (1..255) */
;;;518    )
;;;519    {
000534  4607              MOV      r7,r0
000536  460d              MOV      r5,r1
000538  4616              MOV      r6,r2
00053a  461c              MOV      r4,r3
;;;520        if (drv || !count) return RES_PARERR;
00053c  b907              CBNZ     r7,|L1.1344|
00053e  b914              CBNZ     r4,|L1.1350|
                  |L1.1344|
000540  2004              MOVS     r0,#4
                  |L1.1346|
;;;521        if (Stat & STA_NOINIT) return RES_NOTRDY;
;;;522    
;;;523        if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
;;;524    
;;;525        SELECT();            /* CS = L */
;;;526    
;;;527        if (count == 1) {    /* Single block read */
;;;528            if ((send_cmd(CMD17, sector) == 0)    /* READ_SINGLE_BLOCK */
;;;529                && rcvr_datablock(buff, 512))
;;;530                count = 0;
;;;531        }
;;;532        else {                /* Multiple block read */
;;;533            if (send_cmd(CMD18, sector) == 0) {    /* READ_MULTIPLE_BLOCK */
;;;534                do {
;;;535                    if (!rcvr_datablock(buff, 512)) break;
;;;536                    buff += 512;
;;;537                } while (--count);
;;;538                send_cmd12();                /* STOP_TRANSMISSION */
;;;539            }
;;;540        }
;;;541    
;;;542        DESELECT();            /* CS = H */
;;;543        rcvr_spi();            /* Idle (Release DO) */
;;;544    
;;;545        return count ? RES_ERROR : RES_OK;
;;;546    }
000542  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1350|
000546  48c0              LDR      r0,|L1.2120|
000548  7800              LDRB     r0,[r0,#0]            ;521  ; Stat
00054a  f0100f01          TST      r0,#1                 ;521
00054e  d001              BEQ      |L1.1364|
000550  2003              MOVS     r0,#3                 ;521
000552  e7f6              B        |L1.1346|
                  |L1.1364|
000554  48bb              LDR      r0,|L1.2116|
000556  7800              LDRB     r0,[r0,#0]            ;523  ; CardType
000558  f0100f04          TST      r0,#4                 ;523
00055c  d100              BNE      |L1.1376|
00055e  0276              LSLS     r6,r6,#9              ;523
                  |L1.1376|
000560  f7fffffe          BL       SELECT
000564  2c01              CMP      r4,#1                 ;527
000566  d10b              BNE      |L1.1408|
000568  4631              MOV      r1,r6                 ;528
00056a  2051              MOVS     r0,#0x51              ;528
00056c  f7fffffe          BL       send_cmd
000570  b9e0              CBNZ     r0,|L1.1452|
000572  0261              LSLS     r1,r4,#9              ;529
000574  4628              MOV      r0,r5                 ;529
000576  f7fffffe          BL       rcvr_datablock
00057a  b1b8              CBZ      r0,|L1.1452|
00057c  2400              MOVS     r4,#0                 ;530
00057e  e015              B        |L1.1452|
                  |L1.1408|
000580  4631              MOV      r1,r6                 ;533
000582  2052              MOVS     r0,#0x52              ;533
000584  f7fffffe          BL       send_cmd
000588  b980              CBNZ     r0,|L1.1452|
00058a  bf00              NOP                            ;534
                  |L1.1420|
00058c  f44f7100          MOV      r1,#0x200             ;535
000590  4628              MOV      r0,r5                 ;535
000592  f7fffffe          BL       rcvr_datablock
000596  b900              CBNZ     r0,|L1.1434|
000598  e005              B        |L1.1446|
                  |L1.1434|
00059a  f5057500          ADD      r5,r5,#0x200          ;536
00059e  1e60              SUBS     r0,r4,#1              ;537
0005a0  b2c0              UXTB     r0,r0                 ;537
0005a2  0004              MOVS     r4,r0                 ;537
0005a4  d1f2              BNE      |L1.1420|
                  |L1.1446|
0005a6  bf00              NOP                            ;535
0005a8  f7fffffe          BL       send_cmd12
                  |L1.1452|
0005ac  f7fffffe          BL       DESELECT
0005b0  f7fffffe          BL       rcvr_spi
0005b4  b10c              CBZ      r4,|L1.1466|
0005b6  2001              MOVS     r0,#1                 ;545
0005b8  e7c3              B        |L1.1346|
                  |L1.1466|
0005ba  2000              MOVS     r0,#0                 ;545
0005bc  e7c1              B        |L1.1346|
;;;547    
                          ENDP

                  disk_write PROC
;;;554    #if _READONLY == 0
;;;555    DRESULT disk_write (
0005be  e92d41f0          PUSH     {r4-r8,lr}
;;;556        BYTE drv,            /* Physical drive nmuber (0) */
;;;557        const BYTE *buff,    /* Pointer to the data to be written */
;;;558        DWORD sector,        /* Start sector number (LBA) */
;;;559        BYTE count            /* Sector count (1..255) */
;;;560    )
;;;561    {
0005c2  4607              MOV      r7,r0
0005c4  460d              MOV      r5,r1
0005c6  4616              MOV      r6,r2
0005c8  461c              MOV      r4,r3
;;;562        if (drv || !count) return RES_PARERR;
0005ca  b907              CBNZ     r7,|L1.1486|
0005cc  b914              CBNZ     r4,|L1.1492|
                  |L1.1486|
0005ce  2004              MOVS     r0,#4
                  |L1.1488|
;;;563        if (Stat & STA_NOINIT) return RES_NOTRDY;
;;;564        if (Stat & STA_PROTECT) return RES_WRPRT;
;;;565    
;;;566        if (!(CardType & 4)) sector *= 512;    /* Convert to byte address if needed */
;;;567    
;;;568        SELECT();            /* CS = L */
;;;569    
;;;570        if (count == 1) {    /* Single block write */
;;;571            if ((send_cmd(CMD24, sector) == 0)    /* WRITE_BLOCK */
;;;572                && xmit_datablock(buff, 0xFE))
;;;573                count = 0;
;;;574        }
;;;575        else {                /* Multiple block write */
;;;576            if (CardType & 2) {
;;;577                send_cmd(CMD55, 0); send_cmd(CMD23, count);    /* ACMD23 */
;;;578            }
;;;579            if (send_cmd(CMD25, sector) == 0) {    /* WRITE_MULTIPLE_BLOCK */
;;;580                do {
;;;581                    if (!xmit_datablock(buff, 0xFC)) break;
;;;582                    buff += 512;
;;;583                } while (--count);
;;;584                if (!xmit_datablock(0, 0xFD))    /* STOP_TRAN token */
;;;585                    count = 1;
;;;586            }
;;;587        }
;;;588    
;;;589        DESELECT();            /* CS = H */
;;;590        rcvr_spi();            /* Idle (Release DO) */
;;;591    
;;;592        return count ? RES_ERROR : RES_OK;
;;;593    }
0005d0  e8bd81f0          POP      {r4-r8,pc}
                  |L1.1492|
0005d4  489c              LDR      r0,|L1.2120|
0005d6  7800              LDRB     r0,[r0,#0]            ;563  ; Stat
0005d8  f0100f01          TST      r0,#1                 ;563
0005dc  d001              BEQ      |L1.1506|
0005de  2003              MOVS     r0,#3                 ;563
0005e0  e7f6              B        |L1.1488|
                  |L1.1506|
0005e2  4899              LDR      r0,|L1.2120|
0005e4  7800              LDRB     r0,[r0,#0]            ;564  ; Stat
0005e6  f0100f04          TST      r0,#4                 ;564
0005ea  d001              BEQ      |L1.1520|
0005ec  2002              MOVS     r0,#2                 ;564
0005ee  e7ef              B        |L1.1488|
                  |L1.1520|
0005f0  4894              LDR      r0,|L1.2116|
0005f2  7800              LDRB     r0,[r0,#0]            ;566  ; CardType
0005f4  f0100f04          TST      r0,#4                 ;566
0005f8  d100              BNE      |L1.1532|
0005fa  0276              LSLS     r6,r6,#9              ;566
                  |L1.1532|
0005fc  f7fffffe          BL       SELECT
000600  2c01              CMP      r4,#1                 ;570
000602  d10b              BNE      |L1.1564|
000604  4631              MOV      r1,r6                 ;571
000606  2058              MOVS     r0,#0x58              ;571
000608  f7fffffe          BL       send_cmd
00060c  bb60              CBNZ     r0,|L1.1640|
00060e  21fe              MOVS     r1,#0xfe              ;572
000610  4628              MOV      r0,r5                 ;572
000612  f7fffffe          BL       xmit_datablock
000616  b338              CBZ      r0,|L1.1640|
000618  2400              MOVS     r4,#0                 ;573
00061a  e025              B        |L1.1640|
                  |L1.1564|
00061c  4889              LDR      r0,|L1.2116|
00061e  7800              LDRB     r0,[r0,#0]            ;576  ; CardType
000620  f0100f02          TST      r0,#2                 ;576
000624  d007              BEQ      |L1.1590|
000626  2100              MOVS     r1,#0                 ;577
000628  2077              MOVS     r0,#0x77              ;577
00062a  f7fffffe          BL       send_cmd
00062e  4621              MOV      r1,r4                 ;577
000630  2057              MOVS     r0,#0x57              ;577
000632  f7fffffe          BL       send_cmd
                  |L1.1590|
000636  4631              MOV      r1,r6                 ;579
000638  2059              MOVS     r0,#0x59              ;579
00063a  f7fffffe          BL       send_cmd
00063e  b998              CBNZ     r0,|L1.1640|
000640  bf00              NOP                            ;580
                  |L1.1602|
000642  21fc              MOVS     r1,#0xfc              ;581
000644  4628              MOV      r0,r5                 ;581
000646  f7fffffe          BL       xmit_datablock
00064a  b900              CBNZ     r0,|L1.1614|
00064c  e005              B        |L1.1626|
                  |L1.1614|
00064e  f5057500          ADD      r5,r5,#0x200          ;582
000652  1e60              SUBS     r0,r4,#1              ;583
000654  b2c0              UXTB     r0,r0                 ;583
000656  0004              MOVS     r4,r0                 ;583
000658  d1f3              BNE      |L1.1602|
                  |L1.1626|
00065a  bf00              NOP                            ;581
00065c  21fd              MOVS     r1,#0xfd              ;584
00065e  2000              MOVS     r0,#0                 ;584
000660  f7fffffe          BL       xmit_datablock
000664  b900              CBNZ     r0,|L1.1640|
000666  2401              MOVS     r4,#1                 ;585
                  |L1.1640|
000668  f7fffffe          BL       DESELECT
00066c  f7fffffe          BL       rcvr_spi
000670  b10c              CBZ      r4,|L1.1654|
000672  2001              MOVS     r0,#1                 ;592
000674  e7ac              B        |L1.1488|
                  |L1.1654|
000676  2000              MOVS     r0,#0                 ;592
000678  e7aa              B        |L1.1488|
;;;594    #endif /* _READONLY */
                          ENDP

                  disk_ioctl PROC
;;;601    
;;;602    DRESULT disk_ioctl (
00067a  e92d47ff          PUSH     {r0-r10,lr}
;;;603        BYTE drv,        /* Physical drive nmuber (0) */
;;;604        BYTE ctrl,        /* Control code */
;;;605        void *buff        /* Buffer to send/receive control data */
;;;606    )
;;;607    {
00067e  4681              MOV      r9,r0
000680  4688              MOV      r8,r1
000682  4614              MOV      r4,r2
;;;608        DRESULT res;
;;;609        BYTE n, csd[16], *ptr = buff;
000684  4626              MOV      r6,r4
;;;610        WORD csize;
;;;611    
;;;612    
;;;613        if (drv) return RES_PARERR;
000686  f1b90f00          CMP      r9,#0
00068a  d003              BEQ      |L1.1684|
00068c  2004              MOVS     r0,#4
                  |L1.1678|
;;;614    
;;;615        res = RES_ERROR;
;;;616    
;;;617        if (ctrl == CTRL_POWER) {
;;;618            switch (*ptr) {
;;;619            case 0:        /* Sub control code == 0 (POWER_OFF) */
;;;620                if (chk_power())
;;;621                    power_off();        /* Power off */
;;;622                res = RES_OK;
;;;623                break;
;;;624            case 1:        /* Sub control code == 1 (POWER_ON) */
;;;625                power_on();                /* Power on */
;;;626                res = RES_OK;
;;;627                break;
;;;628            case 2:        /* Sub control code == 2 (POWER_GET) */
;;;629                *(ptr+1) = (BYTE)chk_power();
;;;630                res = RES_OK;
;;;631                break;
;;;632            default :
;;;633                res = RES_PARERR;
;;;634            }
;;;635        }
;;;636        else {
;;;637            if (Stat & STA_NOINIT) return RES_NOTRDY;
;;;638    
;;;639            SELECT();        /* CS = L */
;;;640    
;;;641            switch (ctrl) {
;;;642            case GET_SECTOR_COUNT :    /* Get number of sectors on the disk (DWORD) */
;;;643                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
;;;644                    if ((csd[0] >> 6) == 1) {    /* SDC ver 2.00 */
;;;645                        csize = csd[9] + ((WORD)csd[8] << 8) + 1;
;;;646                        *(DWORD*)buff = (DWORD)csize << 10;
;;;647                    } else {                    /* MMC or SDC ver 1.XX */
;;;648                        n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
;;;649                        csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
;;;650                        *(DWORD*)buff = (DWORD)csize << (n - 9);
;;;651                    }
;;;652                    res = RES_OK;
;;;653                }
;;;654                break;
;;;655    
;;;656            case GET_SECTOR_SIZE :    /* Get sectors on the disk (WORD) */
;;;657                *(WORD*)buff = 512;
;;;658                res = RES_OK;
;;;659                break;
;;;660    
;;;661            case CTRL_SYNC :    /* Make sure that data has been written */
;;;662                if (wait_ready() == 0xFF)
;;;663                    res = RES_OK;
;;;664                break;
;;;665    
;;;666            case MMC_GET_CSD :    /* Receive CSD as a data block (16 bytes) */
;;;667                if (send_cmd(CMD9, 0) == 0        /* READ_CSD */
;;;668                    && rcvr_datablock(ptr, 16))
;;;669                    res = RES_OK;
;;;670                break;
;;;671    
;;;672            case MMC_GET_CID :    /* Receive CID as a data block (16 bytes) */
;;;673                if (send_cmd(CMD10, 0) == 0        /* READ_CID */
;;;674                    && rcvr_datablock(ptr, 16))
;;;675                    res = RES_OK;
;;;676                break;
;;;677    
;;;678            case MMC_GET_OCR :    /* Receive OCR as an R3 resp (4 bytes) */
;;;679                if (send_cmd(CMD58, 0) == 0) {    /* READ_OCR */
;;;680                    for (n = 0; n < 4; n++)
;;;681                        *ptr++ = rcvr_spi();
;;;682                    res = RES_OK;
;;;683                }
;;;684    
;;;685    //        case MMC_GET_TYPE :    /* Get card type flags (1 byte) */
;;;686    //            *ptr = CardType;
;;;687    //            res = RES_OK;
;;;688    //            break;
;;;689    
;;;690            default:
;;;691                res = RES_PARERR;
;;;692            }
;;;693    
;;;694            DESELECT();            /* CS = H */
;;;695            rcvr_spi();            /* Idle (Release DO) */
;;;696        }
;;;697    
;;;698        return res;
;;;699    }
00068e  b004              ADD      sp,sp,#0x10
000690  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1684|
000694  f04f0a01          MOV      r10,#1                ;615
000698  f1b80f05          CMP      r8,#5                 ;617
00069c  d11d              BNE      |L1.1754|
00069e  7830              LDRB     r0,[r6,#0]            ;618
0006a0  b120              CBZ      r0,|L1.1708|
0006a2  2801              CMP      r0,#1                 ;618
0006a4  d00a              BEQ      |L1.1724|
0006a6  2802              CMP      r0,#2                 ;618
0006a8  d113              BNE      |L1.1746|
0006aa  e00c              B        |L1.1734|
                  |L1.1708|
0006ac  f7fffffe          BL       chk_power
0006b0  b108              CBZ      r0,|L1.1718|
0006b2  f7fffffe          BL       power_off
                  |L1.1718|
0006b6  f04f0a00          MOV      r10,#0                ;622
0006ba  e00d              B        |L1.1752|
                  |L1.1724|
0006bc  f7fffffe          BL       power_on
0006c0  f04f0a00          MOV      r10,#0                ;626
0006c4  e008              B        |L1.1752|
                  |L1.1734|
0006c6  f7fffffe          BL       chk_power
0006ca  7070              STRB     r0,[r6,#1]            ;629
0006cc  f04f0a00          MOV      r10,#0                ;630
0006d0  e002              B        |L1.1752|
                  |L1.1746|
0006d2  f04f0a04          MOV      r10,#4                ;633
0006d6  bf00              NOP                            ;618
                  |L1.1752|
0006d8  e09f              B        |L1.2074|
                  |L1.1754|
0006da  485b              LDR      r0,|L1.2120|
0006dc  7800              LDRB     r0,[r0,#0]            ;637  ; Stat
0006de  f0100f01          TST      r0,#1                 ;637
0006e2  d001              BEQ      |L1.1768|
0006e4  2003              MOVS     r0,#3                 ;637
0006e6  e7d2              B        |L1.1678|
                  |L1.1768|
0006e8  f7fffffe          BL       SELECT
0006ec  f1b80f0b          CMP      r8,#0xb               ;641
0006f0  d05e              BEQ      |L1.1968|
0006f2  dc09              BGT      |L1.1800|
0006f4  f1b80f00          CMP      r8,#0                 ;641
0006f8  d053              BEQ      |L1.1954|
0006fa  f1b80f01          CMP      r8,#1                 ;641
0006fe  d00a              BEQ      |L1.1814|
000700  f1b80f02          CMP      r8,#2                 ;641
000704  d175              BNE      |L1.2034|
000706  e046              B        |L1.1942|
                  |L1.1800|
000708  f1b80f0c          CMP      r8,#0xc               ;641
00070c  d05d              BEQ      |L1.1994|
00070e  f1b80f0d          CMP      r8,#0xd               ;641
000712  d17a              BNE      |L1.2058|
000714  e066              B        |L1.2020|
                  |L1.1814|
000716  2100              MOVS     r1,#0                 ;643
000718  2049              MOVS     r0,#0x49              ;643
00071a  f7fffffe          BL       send_cmd
00071e  bbc8              CBNZ     r0,|L1.1940|
000720  2110              MOVS     r1,#0x10              ;643
000722  4668              MOV      r0,sp                 ;643
000724  f7fffffe          BL       rcvr_datablock
000728  b3a0              CBZ      r0,|L1.1940|
00072a  f89d0000          LDRB     r0,[sp,#0]            ;644
00072e  2101              MOVS     r1,#1                 ;644
000730  ebb11fa0          CMP      r1,r0,ASR #6          ;644
000734  d10a              BNE      |L1.1868|
000736  f89d0009          LDRB     r0,[sp,#9]            ;645
00073a  f89d1008          LDRB     r1,[sp,#8]            ;645
00073e  eb002001          ADD      r0,r0,r1,LSL #8       ;645
000742  1c40              ADDS     r0,r0,#1              ;645
000744  b287              UXTH     r7,r0                 ;645
000746  02b8              LSLS     r0,r7,#10             ;646
000748  6020              STR      r0,[r4,#0]            ;646
00074a  e021              B        |L1.1936|
                  |L1.1868|
00074c  f89d0005          LDRB     r0,[sp,#5]            ;648
000750  f000000f          AND      r0,r0,#0xf            ;648
000754  f89d100a          LDRB     r1,[sp,#0xa]          ;648
000758  eb0010d1          ADD      r0,r0,r1,LSR #7       ;648
00075c  f89d1009          LDRB     r1,[sp,#9]            ;648
000760  f0010103          AND      r1,r1,#3              ;648
000764  eb000041          ADD      r0,r0,r1,LSL #1       ;648
000768  1c85              ADDS     r5,r0,#2              ;648
00076a  f89d0008          LDRB     r0,[sp,#8]            ;649
00076e  1180              ASRS     r0,r0,#6              ;649
000770  f89d1007          LDRB     r1,[sp,#7]            ;649
000774  eb000081          ADD      r0,r0,r1,LSL #2       ;649
000778  f89d1006          LDRB     r1,[sp,#6]            ;649
00077c  f0010103          AND      r1,r1,#3              ;649
000780  eb002081          ADD      r0,r0,r1,LSL #10      ;649
000784  1c47              ADDS     r7,r0,#1              ;649
000786  f1a50009          SUB      r0,r5,#9              ;650
00078a  fa07f000          LSL      r0,r7,r0              ;650
00078e  6020              STR      r0,[r4,#0]            ;650
                  |L1.1936|
000790  f04f0a00          MOV      r10,#0                ;652
                  |L1.1940|
000794  e03c              B        |L1.2064|
                  |L1.1942|
000796  f44f7000          MOV      r0,#0x200             ;657
00079a  8020              STRH     r0,[r4,#0]            ;657
00079c  f04f0a00          MOV      r10,#0                ;658
0007a0  e036              B        |L1.2064|
                  |L1.1954|
0007a2  f7fffffe          BL       wait_ready
0007a6  28ff              CMP      r0,#0xff              ;662
0007a8  d101              BNE      |L1.1966|
0007aa  f04f0a00          MOV      r10,#0                ;663
                  |L1.1966|
0007ae  e02f              B        |L1.2064|
                  |L1.1968|
0007b0  2100              MOVS     r1,#0                 ;667
0007b2  2049              MOVS     r0,#0x49              ;667
0007b4  f7fffffe          BL       send_cmd
0007b8  b930              CBNZ     r0,|L1.1992|
0007ba  2110              MOVS     r1,#0x10              ;668
0007bc  4630              MOV      r0,r6                 ;668
0007be  f7fffffe          BL       rcvr_datablock
0007c2  b108              CBZ      r0,|L1.1992|
0007c4  f04f0a00          MOV      r10,#0                ;669
                  |L1.1992|
0007c8  e022              B        |L1.2064|
                  |L1.1994|
0007ca  2100              MOVS     r1,#0                 ;673
0007cc  204a              MOVS     r0,#0x4a              ;673
0007ce  f7fffffe          BL       send_cmd
0007d2  b930              CBNZ     r0,|L1.2018|
0007d4  2110              MOVS     r1,#0x10              ;674
0007d6  4630              MOV      r0,r6                 ;674
0007d8  f7fffffe          BL       rcvr_datablock
0007dc  b108              CBZ      r0,|L1.2018|
0007de  f04f0a00          MOV      r10,#0                ;675
                  |L1.2018|
0007e2  e015              B        |L1.2064|
                  |L1.2020|
0007e4  2100              MOVS     r1,#0                 ;679
0007e6  207a              MOVS     r0,#0x7a              ;679
0007e8  f7fffffe          BL       send_cmd
0007ec  b960              CBNZ     r0,|L1.2056|
0007ee  2500              MOVS     r5,#0                 ;680
0007f0  e006              B        |L1.2048|
                  |L1.2034|
0007f2  e00a              B        |L1.2058|
                  |L1.2036|
0007f4  f7fffffe          BL       rcvr_spi
0007f8  f8060b01          STRB     r0,[r6],#1            ;681
0007fc  1c68              ADDS     r0,r5,#1              ;680
0007fe  b2c5              UXTB     r5,r0                 ;680
                  |L1.2048|
000800  2d04              CMP      r5,#4                 ;680
000802  dbf7              BLT      |L1.2036|
000804  f04f0a00          MOV      r10,#0                ;682
                  |L1.2056|
000808  bf00              NOP                            ;690
                  |L1.2058|
00080a  f04f0a04          MOV      r10,#4                ;691
00080e  bf00              NOP                            ;641
                  |L1.2064|
000810  bf00              NOP                            ;654
000812  f7fffffe          BL       DESELECT
000816  f7fffffe          BL       rcvr_spi
                  |L1.2074|
00081a  4650              MOV      r0,r10                ;698
00081c  e737              B        |L1.1678|
;;;700    
                          ENDP

                  disk_timerproc PROC
;;;707    
;;;708    void disk_timerproc (void)
00081e  4908              LDR      r1,|L1.2112|
;;;709    {
;;;710    //    BYTE n, s;
;;;711        BYTE n;
;;;712    
;;;713    
;;;714        n = Timer1;                        /* 100Hz decrement timer */
000820  7808              LDRB     r0,[r1,#0]  ; Timer1
;;;715        if (n) Timer1 = --n;
000822  b120              CBZ      r0,|L1.2094|
000824  1e41              SUBS     r1,r0,#1
000826  b2c9              UXTB     r1,r1
000828  4608              MOV      r0,r1
00082a  4a05              LDR      r2,|L1.2112|
00082c  7011              STRB     r1,[r2,#0]
                  |L1.2094|
;;;716        n = Timer2;
00082e  4907              LDR      r1,|L1.2124|
000830  7808              LDRB     r0,[r1,#0]  ; Timer2
;;;717        if (n) Timer2 = --n;
000832  b120              CBZ      r0,|L1.2110|
000834  1e41              SUBS     r1,r0,#1
000836  b2c9              UXTB     r1,r1
000838  4608              MOV      r0,r1
00083a  4a04              LDR      r2,|L1.2124|
00083c  7011              STRB     r1,[r2,#0]
                  |L1.2110|
;;;718    
;;;719    }
00083e  4770              BX       lr
                  |L1.2112|
                          DCD      Timer1
                  |L1.2116|
                          DCD      CardType
                  |L1.2120|
                          DCD      Stat
                  |L1.2124|
                          DCD      Timer2
                          ENDP

                  get_fattime PROC
;;;727    
;;;728    DWORD get_fattime (void)
000850  4800              LDR      r0,|L1.2132|
;;;729    {
;;;730    
;;;731        return    ((2007UL-1980) << 25)    // Year = 2007
;;;732                | (6UL << 21)            // Month = June
;;;733                | (5UL << 16)            // Day = 5
;;;734                | (11U << 11)            // Hour = 11
;;;735                | (38U << 5)            // Min = 38
;;;736                | (0U >> 1)                // Sec = 0
;;;737                ;
;;;738    
;;;739    }
000852  4770              BX       lr
                          ENDP

                  |L1.2132|
                          DCD      0x36c55cc0

                          AREA ||.data||, DATA, ALIGN=0

                  Stat
000000  01                DCB      0x01
                  PowerFlag
000001  00                DCB      0x00
                  Timer1
000002  00                DCB      0x00
                  Timer2
000003  00                DCB      0x00
                  CardType
000004  00                DCB      0x00
