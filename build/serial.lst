L 1 "Application\serial.c"
N#include "common_head.h"
L 1 ".\startup\common_head.h" 1
N#ifndef _COMMON_HEAD_H_
N#define _COMMON_HEAD_H_
N
N#include "stdlib.h"
L 1 "D:\Keil\ARM\ARMCC\bin\..\include\stdlib.h" 1
N/* stdlib.h: ANSI draft (X3J11 May 88) library header, section 4.10 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                          */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.            */
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: agrant $
N */
N 
N/*
N * stdlib.h declares four types, several general purpose functions,
N * and defines several macros.
N */
N
N#ifndef __stdlib_h
N#define __stdlib_h
N#define __ARMCLIB_VERSION 5030076
N
N#define _ARMABI __declspec(__nothrow)
N#define _ARMABI_PURE __declspec(__nothrow) __pure
N#define _ARMABI_NORETURN __declspec(__nothrow) __declspec(__noreturn)
N#define _ARMABI_THROW
N
N  #ifndef __STDLIB_DECLS
N  #define __STDLIB_DECLS
N
N  /*
N   * Some of these declarations are new in C99.  To access them in C++
N   * you can use -D__USE_C99_STDLIB (or -D__USE_C99ALL).
N   */
N  #ifndef __USE_C99_STDLIB
N    #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X    #if 0L || (1L && 199901L <= 199901L)
N      #define __USE_C99_STDLIB 1
N    #endif
N  #endif
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;
N#elif !defined(__size_t)
S  #define __size_t 1
S  typedef unsigned int size_t;   /* see <stddef.h> */
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N#ifndef __cplusplus  /* wchar_t is a builtin type for C++ */
N  #if !defined(__STRICT_ANSI__)
X  #if !0L
N   /* unconditional in non-strict C for consistency of debug info */
N   #if defined(__WCHAR32)
X   #if 0L
S    typedef unsigned int wchar_t; /* see <stddef.h> */
N   #else
N    typedef unsigned short wchar_t; /* see <stddef.h> */
N   #endif
N  #elif !defined(__wchar_t)
S    #define __wchar_t 1
S   #if defined(__WCHAR32)
S    typedef unsigned int wchar_t; /* see <stddef.h> */
S   #else
S    typedef unsigned short wchar_t; /* see <stddef.h> */
S   #endif
N  #endif
N#endif
N
Ntypedef struct div_t { int quot, rem; } div_t;
N   /* type of the value returned by the div function. */
Ntypedef struct ldiv_t { long int quot, rem; } ldiv_t;
N   /* type of the value returned by the ldiv function. */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Ntypedef struct lldiv_t { __int64 quot, rem; } lldiv_t;
N   /* type of the value returned by the lldiv function. */
N#endif
N
N#ifdef __EXIT_FAILURE
S#  define EXIT_FAILURE __EXIT_FAILURE
S   /*
S    * an integral expression which may be used as an argument to the exit
S    * function to return unsuccessful termination status to the host
S    * environment.
S    */
N#else
N#  define EXIT_FAILURE 1  /* unixoid */
N#endif
N#define EXIT_SUCCESS 0
N   /*
N    * an integral expression which may be used as an argument to the exit
N    * function to return successful termination status to the host
N    * environment.
N    */
N
N   /*
N    * Defining __USE_ANSI_EXAMPLE_RAND at compile time switches to
N    * the example implementation of rand() and srand() provided in
N    * the ANSI C standard. This implementation is very poor, but is
N    * provided for completeness.
N    */
N#ifdef __USE_ANSI_EXAMPLE_RAND
S#define srand _ANSI_srand
S#define rand _ANSI_rand
S#define RAND_MAX 0x7fff
N#else
N#define RAND_MAX 0x7fffffff
N#endif
N   /*
N    * RAND_MAX: an integral constant expression, the value of which
N    * is the maximum value returned by the rand function.
N    */
Nextern _ARMABI int __aeabi_MB_CUR_MAX(void);
Xextern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);
N#define MB_CUR_MAX ( __aeabi_MB_CUR_MAX() )
N   /*
N    * a positive integer expression whose value is the maximum number of bytes
N    * in a multibyte character for the extended character set specified by the
N    * current locale (category LC_CTYPE), and whose value is never greater
N    * than MB_LEN_MAX.
N    */
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain a compliant version of the strtod
N    * family of functions.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Nextern _ARMABI double atof(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI int atoi(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to int
N    * representation.
N    * Returns: the converted value.
N    */
Nextern _ARMABI long int atol(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation.
N    * Returns: the converted value.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI __int64 atoll(const char * /*nptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) __int64 atoll(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to
N    * long long int representation.
N    * Returns: the converted value.
N    */
N#endif
N
Nextern _ARMABI double strtod(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to double
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling a
N    * floating point constant; and a final string of one or more unrecognised
N    * characters, including the terminating null character of the input string.
N    * Then it attempts to convert the subject sequence to a floating point
N    * number, and returns the result. A pointer to the final string is stored
N    * in the object pointed to by endptr, provided that endptr is not a null
N    * pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned. If the correct value is outside the range of
N    *          representable values, plus or minus HUGE_VAL is returned
N    *          (according to the sign of the value), and the value of the macro
N    *          ERANGE is stored in errno. If the correct value would cause
N    *          underflow, zero is returned and the value of the macro ERANGE is
N    *          stored in errno.
N    */
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI float strtof(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
Nextern _ARMABI long double strtold(const char * __restrict /*nptr*/, char ** __restrict /*endptr*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
N   /*
N    * same as strtod, but return float and long double respectively.
N    */
N#endif
Nextern _ARMABI long int strtol(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) long int strtol(const char * __restrict  ,
N                        char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to long int
N    * representation. First it decomposes the input string into three parts:
N    * an initial, possibly empty, sequence of white-space characters (as
N    * specified by the isspace function), a subject sequence resembling an
N    * integer represented in some radix determined by the value of base, and a
N    * final string of one or more unrecognised characters, including the
N    * terminating null character of the input string. Then it attempts to
N    * convert the subject sequence to an integer, and returns the result.
N    * If the value of base is 0, the expected form of the subject sequence is
N    * that of an integer constant (described in ANSI Draft, section 3.1.3.2),
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. If the value of base is between 2 and 36, the expected form of
N    * the subject sequence is a sequence of letters and digits representing an
N    * integer with the radix specified by base, optionally preceded by a plus
N    * or minus sign, but not including an integer suffix. The letters from a
N    * (or A) through z (or Z) are ascribed the values 10 to 35; only letters
N    * whose ascribed values are less than that of the base are permitted. If
N    * the value of base is 16, the characters 0x or 0X may optionally precede
N    * the sequence of letters and digits following the sign if present.
N    * A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, LONG_MAX or LONG_MIN is returned
N    *          (according to the sign of the value), and the value of the
N    *          macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned long int strtoul(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
N                                       char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * converts the initial part of the string pointed to by nptr to unsigned
N    * long int representation. First it decomposes the input string into three
N    * parts: an initial, possibly empty, sequence of white-space characters (as
N    * determined by the isspace function), a subject sequence resembling an
N    * unsigned integer represented in some radix determined by the value of
N    * base, and a final string of one or more unrecognised characters,
N    * including the terminating null character of the input string. Then it
N    * attempts to convert the subject sequence to an unsigned integer, and
N    * returns the result. If the value of base is zero, the expected form of
N    * the subject sequence is that of an integer constant (described in ANSI
N    * Draft, section 3.1.3.2), optionally preceded by a '+' or '-' sign, but
N    * not including an integer suffix. If the value of base is between 2 and
N    * 36, the expected form of the subject sequence is a sequence of letters
N    * and digits representing an integer with the radix specified by base,
N    * optionally preceded by a '+' or '-' sign, but not including an integer
N    * suffix. The letters from a (or A) through z (or Z) stand for the values
N    * 10 to 35; only letters whose ascribed values are less than that of the
N    * base are permitted. If the value of base is 16, the characters 0x or 0X
N    * may optionally precede the sequence of letters and digits following the
N    * sign, if present. A pointer to the final string is stored in the object
N    * pointed to by endptr, provided that endptr is not a null pointer.
N    * Returns: the converted value if any. If no conversion could be performed,
N    *          zero is returned and nptr is stored in *endptr.
N    *          If the correct value is outside the range of
N    *          representable values, ULONG_MAX is returned, and the value of
N    *          the macro ERANGE is stored in errno.
N    */
N
N/* C90 reserves all names beginning with 'str' */
Nextern _ARMABI __int64 strtoll(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) __int64 strtoll(const char * __restrict  ,
N                               char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * as strtol but returns a long long int value.  If the correct value is
N    * outside the range of representable values,  LLONG_MAX or LLONG_MIN is
N    * returned (according to the sign of the value), and the value of the
N    * macro ERANGE is stored in errno.
N    */
Nextern _ARMABI unsigned __int64 strtoull(const char * __restrict /*nptr*/,
Xextern __declspec(__nothrow) unsigned __int64 strtoull(const char * __restrict  ,
N                                         char ** __restrict /*endptr*/, int /*base*/) __attribute__((__nonnull__(1)));
N   /*
N    * as strtoul but returns an unsigned long long int value.  If the correct
N    * value is outside the range of representable values, ULLONG_MAX is returned,
N    * and the value of the macro ERANGE is stored in errno.
N    */
N
Nextern _ARMABI int rand(void);
Xextern __declspec(__nothrow) int rand(void);
N   /*
N    * Computes a sequence of pseudo-random integers in the range 0 to RAND_MAX.
N    * Uses an additive generator (Mitchell & Moore) of the form:
N    *   Xn = (X[n-24] + X[n-55]) MOD 2^31
N    * This is described in section 3.2.2 of Knuth, vol 2. It's period is
N    * in excess of 2^55 and its randomness properties, though unproven, are
N    * conjectured to be good. Empirical testing since 1958 has shown no flaws.
N    * Returns: a pseudo-random integer.
N    */
Nextern _ARMABI void srand(unsigned int /*seed*/);
Xextern __declspec(__nothrow) void srand(unsigned int  );
N   /*
N    * uses its argument as a seed for a new sequence of pseudo-random numbers
N    * to be returned by subsequent calls to rand. If srand is then called with
N    * the same seed value, the sequence of pseudo-random numbers is repeated.
N    * If rand is called before any calls to srand have been made, the same
N    * sequence is generated as when srand is first called with a seed value
N    * of 1.
N    */
N
Nstruct _rand_state { int __x[57]; };
Nextern _ARMABI int _rand_r(struct _rand_state *);
Xextern __declspec(__nothrow) int _rand_r(struct _rand_state *);
Nextern _ARMABI void _srand_r(struct _rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
Nstruct _ANSI_rand_state { int __x[1]; };
Nextern _ARMABI int _ANSI_rand_r(struct _ANSI_rand_state *);
Xextern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
Nextern _ARMABI void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
Xextern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
N   /*
N    * Re-entrant variants of both flavours of rand, which operate on
N    * an explicitly supplied state buffer.
N    */
N
Nextern _ARMABI void *calloc(size_t /*nmemb*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *calloc(size_t  , size_t  );
N   /*
N    * allocates space for an array of nmemb objects, each of whose size is
N    * 'size'. The space is initialised to all bits zero.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void free(void * /*ptr*/);
Xextern __declspec(__nothrow) void free(void *  );
N   /*
N    * causes the space pointed to by ptr to be deallocated (i.e., made
N    * available for further allocation). If ptr is a null pointer, no action
N    * occurs. Otherwise, if ptr does not match a pointer earlier returned by
N    * calloc, malloc or realloc or if the space has been deallocated by a call
N    * to free or realloc, the behaviour is undefined.
N    */
Nextern _ARMABI void *malloc(size_t /*size*/);
Xextern __declspec(__nothrow) void *malloc(size_t  );
N   /*
N    * allocates space for an object whose size is specified by 'size' and whose
N    * value is indeterminate.
N    * Returns: either a null pointer or a pointer to the allocated space.
N    */
Nextern _ARMABI void *realloc(void * /*ptr*/, size_t /*size*/);
Xextern __declspec(__nothrow) void *realloc(void *  , size_t  );
N   /*
N    * changes the size of the object pointed to by ptr to the size specified by
N    * size. The contents of the object shall be unchanged up to the lesser of
N    * the new and old sizes. If the new size is larger, the value of the newly
N    * allocated portion of the object is indeterminate. If ptr is a null
N    * pointer, the realloc function behaves like a call to malloc for the
N    * specified size. Otherwise, if ptr does not match a pointer earlier
N    * returned by calloc, malloc or realloc, or if the space has been
N    * deallocated by a call to free or realloc, the behaviour is undefined.
N    * If the space cannot be allocated, the object pointed to by ptr is
N    * unchanged. If size is zero and ptr is not a null pointer, the object it
N    * points to is freed.
N    * Returns: either a null pointer or a pointer to the possibly moved
N    *          allocated space.
N    */
N#if !defined(__STRICT_ANSI__)
X#if !0L
Nextern _ARMABI int posix_memalign(void ** /*ret*/, size_t /*alignment*/, size_t /*size*/);
Xextern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
N   /*
N    * allocates space for an object of size 'size', aligned to a
N    * multiple of 'alignment' (which must be a power of two and at
N    * least 4).
N    *
N    * On success, a pointer to the allocated object is stored in
N    * *ret, and zero is returned. On failure, the return value is
N    * either ENOMEM (allocation failed because no suitable piece of
N    * memory was available) or EINVAL (the 'alignment' parameter was
N    * invalid).
N    */
N#endif
Ntypedef int (*__heapprt)(void *, char const *, ...);
Nextern _ARMABI void __heapstats(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                        void * /*param*/) __attribute__((__nonnull__(1)));
N   /*
N    * reports current heap statistics (eg. number of free blocks in
N    * the free-list). Output is as implementation-defined free-form
N    * text, provided via the dprint function. `param' gives an
N    * extra data word to pass to dprint. You can call
N    * __heapstats(fprintf,stdout) by casting fprintf to the above
N    * function type; the typedef `__heapprt' is provided for this
N    * purpose.
N    *
N    * `dprint' will not be called while the heap is being examined,
N    * so it can allocate memory itself without trouble.
N    */
Nextern _ARMABI int __heapvalid(int (* /*dprint*/)(void * /*param*/,
Xextern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
N                                           char const * /*format*/, ...),
N                       void * /*param*/, int /*verbose*/) __attribute__((__nonnull__(1)));
N   /*
N    * performs a consistency check on the heap. Errors are reported
N    * through dprint, like __heapstats. If `verbose' is nonzero,
N    * full diagnostic information on the heap state is printed out.
N    *
N    * This routine probably won't work if the heap isn't a
N    * contiguous chunk (for example, if __user_heap_extend has been
N    * overridden).
N    *
N    * `dprint' may be called while the heap is being examined or
N    * even in an invalid state, so it must perform no memory
N    * allocation. In particular, if `dprint' calls (or is) a stdio
N    * function, the stream it outputs to must already have either
N    * been written to or been setvbuf'ed, or else the system will
N    * allocate buffer space for it on the first call to dprint.
N    */
Nextern _ARMABI_NORETURN void abort(void);
Xextern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
N   /*
N    * causes abnormal program termination to occur, unless the signal SIGABRT
N    * is being caught and the signal handler does not return. Whether open
N    * output streams are flushed or open streams are closed or temporary
N    * files removed is implementation-defined.
N    * An implementation-defined form of the status 'unsuccessful termination'
N    * is returned to the host environment by means of a call to
N    * raise(SIGABRT).
N    */
N
Nextern _ARMABI int atexit(void (* /*func*/)(void)) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
N   /*
N    * registers the function pointed to by func, to be called without its
N    * arguments at normal program termination. It is possible to register at
N    * least 32 functions.
N    * Returns: zero if the registration succeeds, nonzero if it fails.
N    */
N#if defined(__cplusplus) && !defined(__GNUC__)
X#if 0L && !0L
S    /* atexit that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode  
S     */
S    typedef void (* __C_exitfuncptr)();
S    extern "C++"
S    inline int atexit(void (* __func)()) {
S      return atexit((__C_exitfuncptr)__func);
S    }
N#endif
N
N
Nextern _ARMABI_NORETURN void exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
N   /*
N    * causes normal program termination to occur. If more than one call to the
N    * exit function is executed by a program, the behaviour is undefined.
N    * First, all functions registered by the atexit function are called, in the
N    * reverse order of their registration.
N    * Next, all open output streams are flushed, all open streams are closed,
N    * and all files created by the tmpfile function are removed.
N    * Finally, control is returned to the host environment. If the value of
N    * status is zero or EXIT_SUCCESS, an implementation-defined form of the
N    * status 'successful termination' is returned. If the value of status is
N    * EXIT_FAILURE, an implementation-defined form of the status
N    * 'unsuccessful termination' is returned. Otherwise the status returned
N    * is implementation-defined.
N    */
N
Nextern _ARMABI_NORETURN void _Exit(int /*status*/);
Xextern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
N   /*
N    * causes normal program termination to occur. No functions registered
N    * by the atexit function are called.
N    * In this implementation, all open output streams are flushed, all
N    * open streams are closed, and all files created by the tmpfile function
N    * are removed.
N    * Control is returned to the host environment. The status returned to
N    * the host environment is determined in the same way as for 'exit'.
N    */     
N
Nextern _ARMABI char *getenv(const char * /*name*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * searches the environment list, provided by the host environment, for a
N    * string that matches the string pointed to by name. The set of environment
N    * names and the method for altering the environment list are
N    * implementation-defined.
N    * Returns: a pointer to a string associated with the matched list member.
N    *          The array pointed to shall not be modified by the program, but
N    *          may be overwritten by a subsequent call to the getenv function.
N    *          If the specified name cannot be found, a null pointer is
N    *          returned.
N    */
N
Nextern _ARMABI int  system(const char * /*string*/);
Xextern __declspec(__nothrow) int  system(const char *  );
N   /*
N    * passes the string pointed to by string to the host environment to be
N    * executed by a command processor in an implementation-defined manner.
N    * A null pointer may be used for string, to inquire whether a command
N    * processor exists.
N    *
N    * Returns: If the argument is a null pointer, the system function returns
N    *          non-zero only if a command processor is available. If the
N    *          argument is not a null pointer, the system function returns an
N    *          implementation-defined value.
N    */
N
Nextern _ARMABI_THROW void *bsearch(const void * /*key*/, const void * /*base*/,
Xextern  void *bsearch(const void *  , const void *  ,
N              size_t /*nmemb*/, size_t /*size*/,
N              int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
N   /*
N    * searches an array of nmemb objects, the initial member of which is
N    * pointed to by base, for a member that matches the object pointed to by
N    * key. The size of each member of the array is specified by size.
N    * The contents of the array shall be in ascending sorted order according to
N    * a comparison function pointed to by compar, which is called with two
N    * arguments that point to the key object and to an array member, in that
N    * order. The function shall return an integer less than, equal to, or
N    * greater than zero if the key object is considered, respectively, to be
N    * less than, to match, or to be greater than the array member.
N    * Returns: a pointer to a matching member of the array, or a null pointer
N    *          if no match is found. If two members compare as equal, which
N    *          member is matched is unspecified.
N    */
N#if defined(__cplusplus) && !defined(__GNUC__)
X#if 0L && !0L
S    /* bsearch that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */
S    typedef int (* __C_compareprocptr)(const void *, const void *);
S    extern "C++"
S    void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
S    extern "C++"
S    inline void *bsearch(const void * __key, const void * __base,
S              size_t __nmemb, size_t __size,
S              int (* __compar)(const void *, const void *)) {
S      return bsearch(__key, __base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
N
Nextern _ARMABI_THROW void qsort(void * /*base*/, size_t /*nmemb*/, size_t /*size*/,
Xextern  void qsort(void *  , size_t  , size_t  ,
N           int (* /*compar*/)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
N   /*
N    * sorts an array of nmemb objects, the initial member of which is pointed
N    * to by base. The size of each object is specified by size.
N    * The contents of the array shall be in ascending order according to a
N    * comparison function pointed to by compar, which is called with two
N    * arguments that point to the objects being compared. The function shall
N    * return an integer less than, equal to, or greater than zero if the first
N    * argument is considered to be respectively less than, equal to, or greater
N    * than the second. If two members compare as equal, their order in the
N    * sorted array is unspecified.
N    */
N
N#if defined(__cplusplus) && !defined(__GNUC__)
X#if 0L && !0L
S    /* qsort that takes a ptr to a function with C++ linkage 
S     * but not in GNU mode
S     */    
S    extern "C++"
S    void qsort(void * __base, size_t __nmemb, size_t __size,
S               int (* __compar)(const void *, const void *)) __attribute__((__nonnull__(1,4)));
S    extern "C++"
S    inline void qsort(void * __base, size_t __nmemb, size_t __size,
S                      int (* __compar)(const void *, const void *)) {
S      qsort(__base, __nmemb, __size, (__C_compareprocptr)__compar);
S    }
N#endif
N
Nextern _ARMABI_PURE int abs(int /*j*/);
Xextern __declspec(__nothrow) __pure int abs(int  );
N   /*
N    * computes the absolute value of an integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N
Nextern _ARMABI_PURE div_t div(int /*numer*/, int /*denom*/);
Xextern __declspec(__nothrow) __pure div_t div(int  , int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the resulting
N    * quotient is the integer of lesser magnitude that is the nearest to the
N    * algebraic quotient. If the result cannot be represented, the behaviour is
N    * undefined; otherwise, quot * denom + rem shall equal numer.
N    * Returns: a structure of type div_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          int quot; int rem;
N    */
Nextern _ARMABI_PURE long int labs(long int /*j*/);
Xextern __declspec(__nothrow) __pure long int labs(long int  );
N   /*
N    * computes the absolute value of an long integer j. If the result cannot be
N    * represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE long abs(long int x) { return labs(x); }
N#endif
N
Nextern _ARMABI_PURE ldiv_t ldiv(long int /*numer*/, long int /*denom*/);
Xextern __declspec(__nothrow) __pure ldiv_t ldiv(long int  , long int  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type ldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long int quot; long int rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE ldiv_t div(long int __numer, long int __denom) {
S       return ldiv(__numer, __denom);
S   }
N#endif
N
N#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
X#if !0L || 1
Nextern _ARMABI_PURE __int64 llabs(__int64 /*j*/);
Xextern __declspec(__nothrow) __pure __int64 llabs(__int64  );
N   /*
N    * computes the absolute value of a __int64 integer j. If the
N    * result cannot be represented, the behaviour is undefined.
N    * Returns: the absolute value.
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE __int64 abs(__int64 x) { return llabs(x); }
N#endif
N
Nextern _ARMABI_PURE lldiv_t lldiv(__int64 /*numer*/, __int64 /*denom*/);
Xextern __declspec(__nothrow) __pure lldiv_t lldiv(__int64  , __int64  );
N   /*
N    * computes the quotient and remainder of the division of the numerator
N    * numer by the denominator denom. If the division is inexact, the sign of
N    * the resulting quotient is that of the algebraic quotient, and the
N    * magnitude of the resulting quotient is the largest integer less than the
N    * magnitude of the algebraic quotient. If the result cannot be represented,
N    * the behaviour is undefined; otherwise, quot * denom + rem shall equal
N    * numer.
N    * Returns: a structure of type lldiv_t, comprising both the quotient and the
N    *          remainder. the structure shall contain the following members,
N    *          in either order.
N    *          long long quot; long long rem;
N    */
N#ifdef __cplusplus
S   extern "C++" inline _ARMABI_PURE lldiv_t div(__int64 __numer, __int64 __denom) {
S       return lldiv(__numer, __denom);
S   }
N#endif
N#endif
N
N/*
N * ARM real-time divide functions for guaranteed performance
N */
Ntypedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
Ntypedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
N   /* used int so that values return in separate regs, although 16-bit */
Ntypedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;
N
N__value_in_regs extern _ARMABI_PURE __sdiv32by16 __rt_sdiv32by16(
X__value_in_regs extern __declspec(__nothrow) __pure __sdiv32by16 __rt_sdiv32by16(
N     int /*numer*/,
N     short int /*denom*/);
N   /*
N    * Signed divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __udiv32by16 __rt_udiv32by16(
X__value_in_regs extern __declspec(__nothrow) __pure __udiv32by16 __rt_udiv32by16(
N     unsigned int /*numer*/,
N     unsigned short /*denom*/);
N   /*
N    * Unsigned divide: (16-bit quot), (16-bit rem) = (32-bit) / (16-bit)
N    */
N__value_in_regs extern _ARMABI_PURE __sdiv64by32 __rt_sdiv64by32(
X__value_in_regs extern __declspec(__nothrow) __pure __sdiv64by32 __rt_sdiv64by32(
N     int /*numer_h*/, unsigned int /*numer_l*/,
N     int /*denom*/);
N   /*
N    * Signed divide: (32-bit quot), (32-bit rem) = (64-bit) / (32-bit)
N    */
N
N/*
N * ARM floating-point mask/status function (for both hardfp and softfp)
N */
Nextern _ARMABI unsigned int __fp_status(unsigned int /*mask*/, unsigned int /*flags*/);
Xextern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
N   /*
N    * mask and flags are bit-fields which correspond directly to the
N    * floating point status register in the FPE/FPA and fplib.  
N    * __fp_status returns the current value of the status register,
N    * and also sets the writable bits of the word
N    * (the exception control and flag bytes) to:
N    *
N    *     new = (old & ~mask) ^ flags;
N    */
N#define __fpsr_IXE  0x100000
N#define __fpsr_UFE  0x80000
N#define __fpsr_OFE  0x40000
N#define __fpsr_DZE  0x20000
N#define __fpsr_IOE  0x10000
N
N#define __fpsr_IXC  0x10
N#define __fpsr_UFC  0x8
N#define __fpsr_OFC  0x4
N#define __fpsr_DZC  0x2
N#define __fpsr_IOC  0x1
N
N/*
N * Multibyte Character Functions.
N * The behaviour of the multibyte character functions is affected by the
N * LC_CTYPE category of the current locale. For a state-dependent encoding,
N * each function is placed into its initial state by a call for which its
N * character pointer argument, s, is a null pointer. Subsequent calls with s
N * as other than a null pointer cause the internal state of the function to be
N * altered as necessary. A call with s as a null pointer causes these functions
N * to return a nonzero value if encodings have state dependency, and a zero
N * otherwise. After the LC_CTYPE category is changed, the shift state of these
N * functions is indeterminate.
N */
Nextern _ARMABI int mblen(const char * /*s*/, size_t /*n*/);
Xextern __declspec(__nothrow) int mblen(const char *  , size_t  );
N   /*
N    * If s is not a null pointer, the mblen function determines the number of
N    * bytes compromising the multibyte character pointed to by s. Except that
N    * the shift state of the mbtowc function is not affected, it is equivalent
N    * to   mbtowc((wchar_t *)0, s, n);
N    * Returns: If s is a null pointer, the mblen function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mblen function either returns a 0 (if s points to a
N    *          null character), or returns the number of bytes that compromise
N    *          the multibyte character (if the next n of fewer bytes form a
N    *          valid multibyte character), or returns -1 (they do not form a
N    *          valid multibyte character).
N    */
Nextern _ARMABI int mbtowc(wchar_t * __restrict /*pwc*/,
Xextern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
N                   const char * __restrict /*s*/, size_t /*n*/);
N   /*
N    * If s is not a null pointer, the mbtowc function determines the number of
N    * bytes that compromise the multibyte character pointed to by s. It then
N    * determines the code for value of type wchar_t that corresponds to that
N    * multibyte character. (The value of the code corresponding to the null
N    * character is zero). If the multibyte character is valid and pwc is not a
N    * null pointer, the mbtowc function stores the code in the object pointed
N    * to by pwc. At most n bytes of the array pointed to by s will be examined.
N    * Returns: If s is a null pointer, the mbtowc function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the mbtowc function either returns a 0 (if s points to
N    *          a null character), or returns the number of bytes that
N    *          compromise the converted multibyte character (if the next n of
N    *          fewer bytes form a valid multibyte character), or returns -1
N    *          (they do not form a valid multibyte character).
N    */
Nextern _ARMABI int wctomb(char * /*s*/, wchar_t /*wchar*/);
Xextern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
N   /*
N    * determines the number of bytes need to represent the multibyte character
N    * corresponding to the code whose value is wchar (including any change in
N    * shift state). It stores the multibyte character representation in the
N    * array object pointed to by s (if s is not a null pointer). At most
N    * MB_CUR_MAX characters are stored. If the value of wchar is zero, the
N    * wctomb function is left in the initial shift state).
N    * Returns: If s is a null pointer, the wctomb function returns a nonzero or
N    *          zero value, if multibyte character encodings, respectively, do
N    *          or do not have state-dependent encodings. If s is not a null
N    *          pointer, the wctomb function returns a -1 if the value of wchar
N    *          does not correspond to a valid multibyte character, or returns
N    *          the number of bytes that compromise the multibyte character
N    *          corresponding to the value of wchar.
N    */
N
N/*
N * Multibyte String Functions.
N * The behaviour of the multibyte string functions is affected by the LC_CTYPE
N * category of the current locale.
N */
Nextern _ARMABI size_t mbstowcs(wchar_t * __restrict /*pwcs*/,
Xextern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
N                      const char * __restrict /*s*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of multibyte character that begins in the initial
N    * shift state from the array pointed to by s into a sequence of
N    * corresponding codes and stores not more than n codes into the array
N    * pointed to by pwcs. No multibyte character that follow a null character
N    * (which is converted into a code with value zero) will be examined or
N    * converted. Each multibyte character is converted as if by a call to
N    * mbtowc function, except that the shift state of the mbtowc function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by pwcs. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If an invalid multibyte character is encountered, the mbstowcs
N    *          function returns (size_t)-1. Otherwise, the mbstowcs function
N    *          returns the number of array elements modified, not including
N    *          a terminating zero code, if any.
N    */
Nextern _ARMABI size_t wcstombs(char * __restrict /*s*/,
Xextern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
N                      const wchar_t * __restrict /*pwcs*/, size_t /*n*/) __attribute__((__nonnull__(2)));
N   /*
N    * converts a sequence of codes that correspond to multibyte characters
N    * from the array pointed to by pwcs into a sequence of multibyte
N    * characters that begins in the initial shift state and stores these
N    * multibyte characters into the array pointed to by s, stopping if a
N    * multibyte character would exceed the limit of n total bytes or if a
N    * null character is stored. Each code is converted as if by a call to the
N    * wctomb function, except that the shift state of the wctomb function is
N    * not affected. No more than n elements will be modified in the array
N    * pointed to by s. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: If a code is encountered that does not correspond to a valid
N    *          multibyte character, the wcstombs function returns (size_t)-1.
N    *          Otherwise, the wcstombs function returns the number of bytes
N    *          modified, not including a terminating null character, if any.
N    */
N
Nextern _ARMABI void __use_realtime_heap(void);
Xextern __declspec(__nothrow) void __use_realtime_heap(void);
Nextern _ARMABI void __use_realtime_division(void);
Xextern __declspec(__nothrow) void __use_realtime_division(void);
Nextern _ARMABI void __use_two_region_memory(void);
Xextern __declspec(__nothrow) void __use_two_region_memory(void);
Nextern _ARMABI void __use_no_heap(void);
Xextern __declspec(__nothrow) void __use_no_heap(void);
Nextern _ARMABI void __use_no_heap_region(void);
Xextern __declspec(__nothrow) void __use_no_heap_region(void);
N
Nextern _ARMABI char const *__C_library_version_string(void);
Xextern __declspec(__nothrow) char const *__C_library_version_string(void);
Nextern _ARMABI int __C_library_version_number(void);
Xextern __declspec(__nothrow) int __C_library_version_number(void);
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDLIB_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #ifdef __cplusplus
S    #ifndef __STDLIB_NO_EXPORTS
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::atoll;
S        using ::std::lldiv_t;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::div_t;
S      using ::std::ldiv_t;
S      using ::std::atof;
S      using ::std::atoi;
S      using ::std::atol;
S      using ::std::strtod;
S#if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S      using ::std::strtof;
S      using ::std::strtold;
S#endif
S      using ::std::strtol;
S      using ::std::strtoul;
S      using ::std::strtoll;
S      using ::std::strtoull;
S      using ::std::rand;
S      using ::std::srand;
S      using ::std::_rand_state;
S      using ::std::_rand_r;
S      using ::std::_srand_r;
S      using ::std::_ANSI_rand_state;
S      using ::std::_ANSI_rand_r;
S      using ::std::_ANSI_srand_r;
S      using ::std::calloc;
S      using ::std::free;
S      using ::std::malloc;
S      using ::std::realloc;
S#if !defined(__STRICT_ANSI__)
S      using ::std::posix_memalign;
S#endif
S      using ::std::__heapprt;
S      using ::std::__heapstats;
S      using ::std::__heapvalid;
S      using ::std::abort;
S      using ::std::atexit;
S      using ::std::exit;
S      using ::std::_Exit;
S      using ::std::getenv;
S      using ::std::system;
S      using ::std::bsearch;
S      using ::std::qsort;
S      using ::std::abs;
S      using ::std::div;
S      using ::std::labs;
S      using ::std::ldiv;
S      #if !defined(__STRICT_ANSI__) || __USE_C99_STDLIB
S        using ::std::llabs;
S        using ::std::lldiv;
S      #endif /* !defined(__STRICT_ANSI__) || __USE_C99_STDLIB */
S      using ::std::__sdiv32by16;
S      using ::std::__udiv32by16;
S      using ::std::__sdiv64by32;
S      using ::std::__rt_sdiv32by16;
S      using ::std::__rt_udiv32by16;
S      using ::std::__rt_sdiv64by32;
S      using ::std::__fp_status;
S      using ::std::mblen;
S      using ::std::mbtowc;
S      using ::std::wctomb;
S      using ::std::mbstowcs;
S      using ::std::wcstombs;
S      using ::std::__use_realtime_heap;
S      using ::std::__use_realtime_division;
S      using ::std::__use_two_region_memory;
S      using ::std::__use_no_heap;
S      using ::std::__use_no_heap_region;
S      using ::std::__C_library_version_string;
S      using ::std::__C_library_version_number;
S      using ::std::size_t;
S      using ::std::__aeabi_MB_CUR_MAX;
S    #endif /* __STDLIB_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N/* end of stdlib.h */
N
L 5 ".\startup\common_head.h" 2
N#include "stdbool.h"
L 1 "D:\Keil\ARM\ARMCC\bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5030076
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 6 ".\startup\common_head.h" 2
N#include <stdarg.h>
L 1 "D:\Keil\ARM\ARMCC\bin\..\include\stdarg.h" 1
N/* stdarg.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.8 */
N/* Copyright (C) Codemist Ltd., 1988                            */
N/* Copyright (C) ARM Ltd., 1991-1999. All rights reserved */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: agrant $
N */
N
N#ifndef __stdarg_h
N#define __stdarg_h
N#define __ARMCLIB_VERSION 5030076
N
N  #ifndef __STDARG_DECLS
N  #define __STDARG_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS ::std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N/*
N * stdarg.h declares a type and defines macros for advancing through a
N * list of arguments whose number and types are not known to the called
N * function when it is translated. A function may be called with a variable
N * number of arguments of differing types. Its parameter list contains one or
N * more parameters. The rightmost parameter plays a special role in the access
N * mechanism, and will be called parmN in this description.
N */
N
N/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
N/* va_list.  Clearly the type __va_list there must keep in step.          */
N  typedef struct __va_list { void *__ap; } va_list;
N
N   /*
N    * an array type suitable for holding information needed by the macro va_arg
N    * and the function va_end. The called function shall declare a variable
N    * (referred to as ap) having type va_list. The variable ap may be passed as
N    * an argument to another function.
N    * Note: va_list is an array type so that when an object of that type
N    * is passed as an argument it gets passed by reference.
N    */
N  #define va_start(ap, parmN) __va_start(ap, parmN)
N
N   /*
N    * The va_start macro shall be executed before any access to the unnamed
N    * arguments. The parameter ap points to an object that has type va_list.
N    * The va_start macro initialises ap for subsequent use by va_arg and
N    * va_end. The parameter parmN is the identifier of the rightmost parameter
N    * in the variable parameter list in the function definition (the one just
N    * before the '...'). If the parameter parmN is declared with the register
N    * storage class an error is given.
N    * If parmN is a narrow type (char, short, float) an error is given in
N    * strict ANSI mode, or a warning otherwise.
N    * Returns: no value.
N    */
N  #define va_arg(ap, type) __va_arg(ap, type)
N
N   /*
N    * The va_arg macro expands to an expression that has the type and value of
N    * the next argument in the call. The parameter ap shall be the same as the
N    * va_list ap initialised by va_start. Each invocation of va_arg modifies
N    * ap so that successive arguments are returned in turn. The parameter
N    * 'type' is a type name such that the type of a pointer to an object that
N    * has the specified type can be obtained simply by postfixing a * to
N    * 'type'. If type is a narrow type, an error is given in strict ANSI
N    * mode, or a warning otherwise. If the type is an array or function type,
N    * an error is given.
N    * In non-strict ANSI mode, 'type' is allowed to be any expression.
N    * Returns: The first invocation of the va_arg macro after that of the
N    *          va_start macro returns the value of the argument after that
N    *          specified by parmN. Successive invocations return the values of
N    *          the remaining arguments in succession.
N    *          The result is cast to 'type', even if 'type' is narrow.
N    */
N
N#define __va_copy(dest, src) ((void)((dest) = (src)))
N
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199901L)
N   /* va_copy is in C99 and non-strict C90 and non-strict C++
N    * __va_copy is always present.
N    */
N  #define va_copy(dest, src) ((void)((dest) = (src)))
N
N   /* The va_copy macro makes the va_list dest be a copy of
N    * the va_list src, as if the va_start macro had been applied
N    * to it followed by the same sequence of uses of the va_arg
N    * macro as had previously been used to reach the present state
N    * of src.
N    */
N#endif
N
N#define va_end(ap) __va_end(ap)
N   /*
N    * The va_end macro facilitates a normal return from the function whose
N    * variable argument list was referenced by the expansion of va_start that
N    * initialised the va_list ap. If the va_end macro is not invoked before
N    * the return, the behaviour is undefined.
N    * Returns: no value.
N    */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N
N    #ifdef __GNUC__
S     /* be cooperative with glibc */
S     typedef __CLIBNS va_list __gnuc_va_list;
S     #define __GNUC_VA_LIST
S     #undef __need___va_list
N    #endif
N
N  #endif /* __STDARG_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDARG_NO_EXPORTS
S      using ::std::va_list;
S    #endif
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of stdarg.h */
N
L 7 ".\startup\common_head.h" 2
N#include <string.h>
L 1 "D:\Keil\ARM\ARMCC\bin\..\include\string.h" 1
N/* string.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.11 */
N/* Copyright (C) Codemist Ltd., 1988-1993.                        */
N/* Copyright 1991-1993 ARM Limited. All rights reserved.          */
N/* version 0.04 */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N */
N
N/*
N * string.h declares one type and several functions, and defines one macro
N * useful for manipulating character arrays and other objects treated as
N * character arrays. Various methods are used for determining the lengths of
N * the arrays, but in all cases a char * or void * argument points to the
N * initial (lowest addresses) character of the array. If an array is written
N * beyond the end of an object, the behaviour is undefined.
N */
N
N#ifndef __string_h
N#define __string_h
N#define __ARMCLIB_VERSION 5030076
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STRING_DECLS
N  #define __STRING_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S        namespace std {
S        #define __CLIBNS std::
S        extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__)
X#if 0L || !0L
N /* unconditional in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;
N#elif !defined(__size_t)
S  #define __size_t 1
S  typedef unsigned int size_t;   /* see <stddef.h> */
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
Nextern _ARMABI void *memcpy(void * __restrict /*s1*/,
Xextern __declspec(__nothrow) void *memcpy(void * __restrict  ,
N                    const void * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI void *memmove(void * /*s1*/,
Xextern __declspec(__nothrow) void *memmove(void *  ,
N                    const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies n characters from the object pointed to by s2 into the object
N    * pointed to by s1. Copying takes place as if the n characters from the
N    * object pointed to by s2 are first copied into a temporary array of n
N    * characters that does not overlap the objects pointed to by s1 and s2,
N    * and then the n characters from the temporary array are copied into the
N    * object pointed to by s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strcpy(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string pointed to by s2 (including the terminating nul
N    * character) into the array pointed to by s1. If copying takes place
N    * between objects that overlap, the behaviour is undefined.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncpy(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies not more than n characters (characters that follow a null
N    * character are not copied) from the array pointed to by s2 into the array
N    * pointed to by s1. If copying takes place between objects that overlap,
N    * the behaviour is undefined.
N    * Returns: the value of s1.
N    */
N
Nextern _ARMABI char *strcat(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends a copy of the string pointed to by s2 (including the terminating
N    * null character) to the end of the string pointed to by s1. The initial
N    * character of s2 overwrites the null character at the end of s1.
N    * Returns: the value of s1.
N    */
Nextern _ARMABI char *strncat(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * appends not more than n characters (a null character and characters that
N    * follow it are not appended) from the array pointed to by s2 to the end of
N    * the string pointed to by s1. The initial character of s2 overwrites the
N    * null character at the end of s1. A terminating null character is always
N    * appended to the result.
N    * Returns: the value of s1.
N    */
N
N/*
N * The sign of a nonzero value returned by the comparison functions is
N * determined by the sign of the difference between the values of the first
N * pair of characters (both interpreted as unsigned char) that differ in the
N * objects being compared.
N */
N
Nextern _ARMABI int memcmp(const void * /*s1*/, const void * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the first n characters of the object pointed to by s1 to the
N    * first n characters of the object pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the object pointed to by s1 is greater than, equal to, or
N    *          less than the object pointed to by s2.
N    */
Nextern _ARMABI int strcmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcasecmp(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2,
N    * case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strncasecmp(const char * /*s1*/, const char * /*s2*/, size_t /*n*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares not more than n characters (characters that follow a null
N    * character are not compared) from the array pointed to by s1 to the array
N    * pointed to by s2, case-insensitively as defined by the current locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2.
N    */
Nextern _ARMABI int strcoll(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * compares the string pointed to by s1 to the string pointed to by s2, both
N    * interpreted as appropriate to the LC_COLLATE category of the current
N    * locale.
N    * Returns: an integer greater than, equal to, or less than zero, according
N    *          as the string pointed to by s1 is greater than, equal to, or
N    *          less than the string pointed to by s2 when both are interpreted
N    *          as appropriate to the current locale.
N    */
N
Nextern _ARMABI size_t strxfrm(char * __restrict /*s1*/, const char * __restrict /*s2*/, size_t /*n*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
N   /*
N    * transforms the string pointed to by s2 and places the resulting string
N    * into the array pointed to by s1. The transformation function is such that
N    * if the strcmp function is applied to two transformed strings, it returns
N    * a value greater than, equal to or less than zero, corresponding to the
N    * result of the strcoll function applied to the same two original strings.
N    * No more than n characters are placed into the resulting array pointed to
N    * by s1, including the terminating null character. If n is zero, s1 is
N    * permitted to be a null pointer. If copying takes place between objects
N    * that overlap, the behaviour is undefined.
N    * Returns: The length of the transformed string is returned (not including
N    *          the terminating null character). If the value returned is n or
N    *          more, the contents of the array pointed to by s1 are
N    *          indeterminate.
N    */
N
N
N#ifdef __cplusplus
Sextern _ARMABI const void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Sextern "C++" void *memchr(void * __s, int __c, size_t __n) __attribute__((__nonnull__(1)));
Sextern "C++" inline void *memchr(void * __s, int __c, size_t __n)
S    { return const_cast<void *>(memchr(const_cast<const void *>(__s), __c, __n)); }
N#else
Nextern _ARMABI void *memchr(const void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an unsigned char) in the
N    * initial n characters (each interpreted as unsigned char) of the object
N    * pointed to by s.
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the object.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strchr(char * __s, int __c)
S    { return const_cast<char *>(strchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the first occurence of c (converted to an char) in the string
N    * pointed to by s (including the terminating null character).
N    * Returns: a pointer to the located character, or a null pointer if the
N    *          character does not occur in the string.
N    */
N
Nextern _ARMABI size_t strcspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters not from the string pointed to by
N    * s2. The terminating null character is not considered part of s2.
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strpbrk(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strpbrk(char * __s1, const char * __s2)
S    { return const_cast<char *>(strpbrk(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strpbrk(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of any
N    * character from the string pointed to by s2.
N    * Returns: returns a pointer to the character, or a null pointer if no
N    *          character form s2 occurs in s1.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Sextern "C++" char *strrchr(char * __s, int __c) __attribute__((__nonnull__(1)));
Sextern "C++" inline char *strrchr(char * __s, int __c)
S    { return const_cast<char *>(strrchr(const_cast<const char *>(__s), __c)); }
N#else
Nextern _ARMABI char *strrchr(const char * /*s*/, int /*c*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));
N#endif
N   /*
N    * locates the last occurence of c (converted to a char) in the string
N    * pointed to by s. The terminating null character is considered part of
N    * the string.
N    * Returns: returns a pointer to the character, or a null pointer if c does
N    *          not occur in the string.
N    */
N
Nextern _ARMABI size_t strspn(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * computes the length of the initial segment of the string pointed to by s1
N    * which consists entirely of characters from the string pointed to by S2
N    * Returns: the length of the segment.
N    */
N
N#ifdef __cplusplus
Sextern _ARMABI const char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Sextern "C++" char *strstr(char * __s1, const char * __s2) __attribute__((__nonnull__(1,2)));
Sextern "C++" inline char *strstr(char * __s1, const char * __s2)
S    { return const_cast<char *>(strstr(const_cast<const char *>(__s1), __s2)); }
N#else
Nextern _ARMABI char *strstr(const char * /*s1*/, const char * /*s2*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N#endif
N   /*
N    * locates the first occurence in the string pointed to by s1 of the
N    * sequence of characters (excluding the terminating null character) in the
N    * string pointed to by s2.
N    * Returns: a pointer to the located string, or a null pointer if the string
N    *          is not found.
N    */
N
Nextern _ARMABI char *strtok(char * __restrict /*s1*/, const char * __restrict /*s2*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI char *_strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#ifndef __STRICT_ANSI__
Nextern _ARMABI char *strtok_r(char * /*s1*/, const char * /*s2*/, char ** /*ptr*/) __attribute__((__nonnull__(2,3)));
Xextern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));
N#endif
N   /*
N    * A sequence of calls to the strtok function breaks the string pointed to
N    * by s1 into a sequence of tokens, each of which is delimited by a
N    * character from the string pointed to by s2. The first call in the
N    * sequence has s1 as its first argument, and is followed by calls with a
N    * null pointer as their first argument. The separator string pointed to by
N    * s2 may be different from call to call.
N    * The first call in the sequence searches for the first character that is
N    * not contained in the current separator string s2. If no such character
N    * is found, then there are no tokens in s1 and the strtok function returns
N    * a null pointer. If such a character is found, it is the start of the
N    * first token.
N    * The strtok function then searches from there for a character that is
N    * contained in the current separator string. If no such character is found,
N    * the current token extends to the end of the string pointed to by s1, and
N    * subsequent searches for a token will fail. If such a character is found,
N    * it is overwritten by a null character, which terminates the current
N    * token. The strtok function saves a pointer to the following character,
N    * from which the next search for a token will start.
N    * Each subsequent call, with a null pointer as the value for the first
N    * argument, starts searching from the saved pointer and behaves as
N    * described above.
N    * Returns: pointer to the first character of a token, or a null pointer if
N    *          there is no token.
N    *
N    * strtok_r() is a common extension which works exactly like
N    * strtok(), but instead of storing its state in a hidden
N    * library variable, requires the user to pass in a pointer to a
N    * char * variable which will be used instead. Any sequence of
N    * calls to strtok_r() passing the same char ** pointer should
N    * behave exactly like the corresponding sequence of calls to
N    * strtok(). This means that strtok_r() can safely be used in
N    * multi-threaded programs, and also that you can tokenise two
N    * strings in parallel.
N    */
N
Nextern _ARMABI void *memset(void * /*s*/, int /*c*/, size_t /*n*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
N   /*
N    * copies the value of c (converted to an unsigned char) into each of the
N    * first n charactes of the object pointed to by s.
N    * Returns: the value of s.
N    */
Nextern _ARMABI char *strerror(int /*errnum*/);
Xextern __declspec(__nothrow) char *strerror(int  );
N   /*
N    * maps the error number in errnum to an error message string.
N    * Returns: a pointer to the string, the contents of which are
N    *          implementation-defined. The array pointed to shall not be
N    *          modified by the program, but may be overwritten by a
N    *          subsequent call to the strerror function.
N    */
Nextern _ARMABI size_t strlen(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * computes the length of the string pointed to by s.
N    * Returns: the number of characters that precede the terminating null
N    *          character.
N    */
N
Nextern _ARMABI size_t strlcpy(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * copies the string src into the string dst, using no more than
N    * len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src. Thus, the operation
N    * succeeded without truncation if and only if ret < len;
N    * otherwise, the value in ret tells you how big to make dst if
N    * you decide to reallocate it. (That value does _not_ include
N    * the NUL.)
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI size_t strlcat(char * /*dst*/, const char * /*src*/, size_t /*len*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * concatenates the string src to the string dst, using no more
N    * than len bytes of dst. Always null-terminates dst _within the
N    * length len (i.e. will copy at most len-1 bytes of string plus
N    * a NUL), unless len is actually zero.
N    * 
N    * Return value is the length of the string that _would_ have
N    * been written, i.e. the length of src plus the original length
N    * of dst. Thus, the operation succeeded without truncation if
N    * and only if ret < len; otherwise, the value in ret tells you
N    * how big to make dst if you decide to reallocate it. (That
N    * value does _not_ include the NUL.)
N    * 
N    * If no NUL is encountered within the first len bytes of dst,
N    * then the length of dst is considered to have been equal to
N    * len for the purposes of the return value (as if there were a
N    * NUL at dst[len]). Thus, the return value in this case is len
N    * + strlen(src).
N    * 
N    * This is a BSD-derived library extension, which we are
N    * permitted to declare in a standard header because ISO defines
N    * function names beginning with 'str' as reserved for future
N    * expansion of <string.h>.
N    */
N
Nextern _ARMABI void _membitcpybl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpybb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpyhb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitcpywb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovebb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovehb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewl(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI void _membitmovewb(void * /*dest*/, const void * /*src*/, int /*destoffset*/, int /*srcoffset*/, size_t /*nbits*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
N    /*
N     * Copies or moves a piece of memory from one place to another,
N     * with one-bit granularity. So you can start or finish a copy
N     * part way through a byte, and you can copy between regions
N     * with different alignment within a byte.
N     * 
N     * All these functions have the same prototype: two void *
N     * pointers for destination and source, then two integers
N     * giving the bit offset from those pointers, and finally the
N     * number of bits to copy.
N     * 
N     * Just like memcpy and memmove, the "cpy" functions copy as
N     * fast as they can in the assumption that the memory regions
N     * do not overlap, while the "move" functions cope correctly
N     * with overlap.
N     *
N     * Treating memory as a stream of individual bits requires
N     * defining a convention about what order those bits are
N     * considered to be arranged in. The above functions support
N     * multiple conventions:
N     * 
N     *  - the "bl" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in little-endian fashion, so that the LSB comes
N     *    first. (For example, membitcpybl(a,b,0,7,1) would copy
N     *    the MSB of the byte at b to the LSB of the byte at a.)
N     * 
N     *  - the "bb" functions consider the unit of memory to be the
N     *    byte, and consider the bits within each byte to be
N     *    arranged in big-endian fashion, so that the MSB comes
N     *    first.
N     * 
N     *  - the "hl" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in little-endian fashion.
N     * 
N     *  - the "hb" functions consider the unit of memory to be the
N     *    16-bit halfword, and consider the bits within each word
N     *    to be arranged in big-endian fashion.
N     * 
N     *  - the "wl" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in little-endian fashion.
N     * 
N     *  - the "wb" functions consider the unit of memory to be the
N     *    32-bit word, and consider the bits within each word to be
N     *    arranged in big-endian fashion.
N     */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STRING_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STRING_NO_EXPORTS
S      using ::std::size_t;
S      using ::std::memcpy;
S      using ::std::memmove;
S      using ::std::strcpy;
S      using ::std::strncpy;
S      using ::std::strcat;
S      using ::std::strncat;
S      using ::std::memcmp;
S      using ::std::strcmp;
S      using ::std::strncmp;
S      using ::std::strcasecmp;
S      using ::std::strncasecmp;
S      using ::std::strcoll;
S      using ::std::strxfrm;
S      using ::std::memchr;
S      using ::std::strchr;
S      using ::std::strcspn;
S      using ::std::strpbrk;
S      using ::std::strrchr;
S      using ::std::strspn;
S      using ::std::strstr;
S      using ::std::strtok;
S#ifndef __STRICT_ANSI__
S      using ::std::strtok_r;
S#endif
S      using ::std::_strtok_r;
S      using ::std::memset;
S      using ::std::strerror;
S      using ::std::strlen;
S      using ::std::strlcpy;
S      using ::std::strlcat;
S      using ::std::_membitcpybl;
S      using ::std::_membitcpybb;
S      using ::std::_membitcpyhl;
S      using ::std::_membitcpyhb;
S      using ::std::_membitcpywl;
S      using ::std::_membitcpywb;
S      using ::std::_membitmovebl;
S      using ::std::_membitmovebb;
S      using ::std::_membitmovehl;
S      using ::std::_membitmovehb;
S      using ::std::_membitmovewl;
S      using ::std::_membitmovewb;
S    #endif /* __STRING_NO_EXPORTS */
N  #endif /* __cplusplus */
N
N#endif
N
N/* end of string.h */
N
L 8 ".\startup\common_head.h" 2
N#include <stdio.h>
L 1 "D:\Keil\ARM\ARMCC\bin\..\include\stdio.h" 1
N/* stdio.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.9 */
N/* Copyright (C) Codemist Ltd., 1988-1993                       */
N/* Copyright 1991-1998 ARM Limited. All rights reserved.        */
N
N/*
N * RCS $Revision: 178085 $
N * Checkin $Date: 2012-12-11 14:54:17 +0000 (Tue, 11 Dec 2012) $
N * Revising $Author: sdouglas $
N */
N
N/*
N * stdio.h declares two types, several macros, and many functions for
N * performing input and output. For a discussion on Streams and Files
N * refer to sections 4.9.2 and 4.9.3 in the above ANSI draft, or to a
N * modern textbook on C.
N */
N
N#ifndef __stdio_h
N#define __stdio_h
N#define __ARMCLIB_VERSION 5030076
N
N
N
N
N#define _ARMABI __declspec(__nothrow)
N
N  #ifndef __STDIO_DECLS
N  #define __STDIO_DECLS
N
N    #undef __CLIBNS
N    #ifdef __cplusplus
S      namespace std {
S      #define __CLIBNS ::std::
S        extern "C" {
N    #else /* ndef __cplusplus */
N      #define __CLIBNS
N    #endif /* ndef __cplusplus */
N
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__size_t)
X#if 0L || !0L || !0L
N /* always defined in C++ and non-strict C for consistency of debug info */
N  typedef unsigned int size_t;   /* see <stddef.h> */
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __size_t 1
N  #endif
N#endif
N
N#undef NULL
N#define NULL 0                   /* see <stddef.h> */
N
N/* ANSI forbids va_list to be defined here */
N/* keep in step with <stdarg.h> and <wchar.h> */
N#if defined(__cplusplus) || !defined(__STRICT_ANSI__) || !defined(__va_list_defined)
X#if 0L || !0L || !0L
N/* always defined in C++ and non-strict C for consistency of debug info */
N  typedef struct __va_list __va_list;
N  #if !defined(__cplusplus) && defined(__STRICT_ANSI__)
X  #if !0L && 0L
S    #define __va_list_defined 1
N  #endif
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain compliant versions of the printf
N    * and scanf families of functions
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
Ntypedef struct __fpos_t_struct {
N    unsigned __int64 __pos;
N    /*
N     * this structure is equivalent to an mbstate_t, but we're not
N     * allowed to actually define the type name `mbstate_t' within
N     * stdio.h
N     */
N    struct {
N        unsigned int __state1, __state2;
N    } __mbstate;
N} fpos_t;
N   /*
N    * fpos_t is an object capable of recording all information needed to
N    * specify uniquely every position within a file.
N    */
N
N#define _SYS_OPEN 16
N   /* _SYS_OPEN defines a limit on the number of open files that is imposed
N    * by this C library
N    */
N
Ntypedef struct __FILE FILE;
N   /*
N    * FILE is an object capable of recording all information needed to control
N    * a stream, such as its file position indicator, a pointer to its
N    * associated buffer, an error indicator that records whether a read/write
N    * error has occurred and an end-of-file indicator that records whether the
N    * end-of-file has been reached.
N    * Its structure is not made known to library clients.
N    */
N
Nextern FILE __stdin, __stdout, __stderr;
Nextern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;
N
N#if _AEABI_PORTABILITY_LEVEL != 0 || (!defined _AEABI_PORTABILITY_LEVEL && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
X#if _AEABI_PORTABILITY_LEVEL != 0 || (!0L && __DEFAULT_AEABI_PORTABILITY_LEVEL != 0)
S#define stdin  (__CLIBNS __aeabi_stdin)
S   /* pointer to a FILE object associated with standard input stream */
S#define stdout (__CLIBNS __aeabi_stdout)
S   /* pointer to a FILE object associated with standard output stream */
S#define stderr (__CLIBNS __aeabi_stderr)
S   /* pointer to a FILE object associated with standard error stream */
Sextern const int __aeabi_IOFBF;
S#define _IOFBF (__CLIBNS __aeabi_IOFBF)
Sextern const int __aeabi_IONBF;
S#define _IONBF (__CLIBNS __aeabi_IONBF)
Sextern const int __aeabi_IOLBF;
S#define _IOLBF (__CLIBNS __aeabi_IOLBF)
Sextern const int __aeabi_BUFSIZ;
S#define BUFSIZ (__CLIBNS __aeabi_BUFSIZ)
Sextern const int __aeabi_FOPEN_MAX;
S#define FOPEN_MAX (__CLIBNS __aeabi_FOPEN_MAX)
Sextern const int __aeabi_TMP_MAX;
S#define TMP_MAX (__CLIBNS __aeabi_TMP_MAX)
Sextern const int __aeabi_FILENAME_MAX;
S#define FILENAME_MAX (__CLIBNS __aeabi_FILENAME_MAX)
Sextern const int __aeabi_L_tmpnam;
S#define L_tmpnam (__CLIBNS __aeabi_L_tmpnam)
N#else
N#define stdin  (&__CLIBNS __stdin)
N   /* pointer to a FILE object associated with standard input stream */
N#define stdout (&__CLIBNS __stdout)
N   /* pointer to a FILE object associated with standard output stream */
N#define stderr (&__CLIBNS __stderr)
N   /* pointer to a FILE object associated with standard error stream */
N
N#define _IOFBF           0x100 /* fully buffered IO */
N#define _IOLBF           0x200 /* line buffered IO */
N#define _IONBF           0x400 /* unbuffered IO */
N
N    /* Various default file IO buffer sizes */
N#define BUFSIZ       (512)  /* system buffer size (as used by setbuf) */
N
N#define FOPEN_MAX _SYS_OPEN
N   /*
N    * an integral constant expression that is the minimum number of files that
N    * this implementation guarantees can be open simultaneously.
N    */
N
N#define FILENAME_MAX 256
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold the longest filename string
N    */
N#define L_tmpnam FILENAME_MAX
N   /*
N    * an integral constant expression that is the size of an array of char
N    * large enough to hold a temporary file name string generated by the
N    * tmpnam function.
N    */
N#define TMP_MAX 256
N   /*
N    * an integral constant expression that is the minimum number of unique
N    * file names that shall be generated by the tmpnam function.
N    */
N
N#endif
N
N#define EOF      (-1)
N   /*
N    * negative integral constant, indicates end-of-file, that is, no more input
N    * from a stream.
N    */
N
N#define SEEK_SET 0 /* start of stream (see fseek) */
N#define SEEK_CUR 1 /* current position in stream (see fseek) */
N#define SEEK_END 2 /* end of stream (see fseek) */
N
N    /*
N     * _IOBIN is the flag passed to _sys_write to denote a binary
N     * file.
N     */
N#define _IOBIN            0x04     /* binary stream */
N
N#define __STDIN_BUFSIZ  (64)  /* default stdin buffer size */
N#define __STDOUT_BUFSIZ (64)  /* default stdout buffer size */
N#define __STDERR_BUFSIZ (16)  /* default stderr buffer size */
N
Nextern _ARMABI int remove(const char * /*filename*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the file whose name is the string pointed to by filename to be
N    * removed. Subsequent attempts to open the file will fail, unless it is
N    * created anew. If the file is open, the behaviour of the remove function
N    * is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails.
N    */
Nextern _ARMABI int rename(const char * /*old*/, const char * /*new*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * causes the file whose name is the string pointed to by old to be
N    * henceforth known by the name given by the string pointed to by new. The
N    * file named old is effectively removed. If a file named by the string
N    * pointed to by new exists prior to the call of the rename function, the
N    * behaviour is implementation-defined.
N    * Returns: zero if the operation succeeds, nonzero if it fails, in which
N    *          case if the file existed previously it is still known by its
N    *          original name.
N    */
Nextern _ARMABI FILE *tmpfile(void);
Xextern __declspec(__nothrow) FILE *tmpfile(void);
N   /*
N    * creates a temporary binary file that will be automatically removed when
N    * it is closed or at program termination. The file is opened for update.
N    * Returns: a pointer to the stream of the file that it created. If the file
N    *          cannot be created, a null pointer is returned.
N    */
Nextern _ARMABI char *tmpnam(char * /*s*/);
Xextern __declspec(__nothrow) char *tmpnam(char *  );
N   /*
N    * generates a string that is not the same as the name of an existing file.
N    * The tmpnam function generates a different string each time it is called,
N    * up to TMP_MAX times. If it is called more than TMP_MAX times, the
N    * behaviour is implementation-defined.
N    * Returns: If the argument is a null pointer, the tmpnam function leaves
N    *          its result in an internal static object and returns a pointer to
N    *          that object. Subsequent calls to the tmpnam function may modify
N    *          the same object. if the argument is not a null pointer, it is
N    *          assumed to point to an array of at least L_tmpnam characters;
N    *          the tmpnam function writes its result in that array and returns
N    *          the argument as its value.
N    */
N
Nextern _ARMABI int fclose(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * causes the stream pointed to by stream to be flushed and the associated
N    * file to be closed. Any unwritten buffered data for the stream are
N    * delivered to the host environment to be written to the file; any unread
N    * buffered data are discarded. The stream is disassociated from the file.
N    * If the associated buffer was automatically allocated, it is deallocated.
N    * Returns: zero if the stream was succesfully closed, or nonzero if any
N    *          errors were detected or if the stream was already closed.
N    */
Nextern _ARMABI int fflush(FILE * /*stream*/);
Xextern __declspec(__nothrow) int fflush(FILE *  );
N   /*
N    * If the stream points to an output or update stream in which the most
N    * recent operation was output, the fflush function causes any unwritten
N    * data for that stream to be delivered to the host environment to be
N    * written to the file. If the stream points to an input or update stream,
N    * the fflush function undoes the effect of any preceding ungetc operation
N    * on the stream.
N    * Returns: nonzero if a write error occurs.
N    */
Nextern _ARMABI FILE *fopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
N                           const char * __restrict /*mode*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * opens the file whose name is the string pointed to by filename, and
N    * associates a stream with it.
N    * The argument mode points to a string beginning with one of the following
N    * sequences:
N    * "r"         open text file for reading
N    * "w"         create text file for writing, or truncate to zero length
N    * "a"         append; open text file or create for writing at eof
N    * "rb"        open binary file for reading
N    * "wb"        create binary file for writing, or truncate to zero length
N    * "ab"        append; open binary file or create for writing at eof
N    * "r+"        open text file for update (reading and writing)
N    * "w+"        create text file for update, or truncate to zero length
N    * "a+"        append; open text file or create for update, writing at eof
N    * "r+b"/"rb+" open binary file for update (reading and writing)
N    * "w+b"/"wb+" create binary file for update, or truncate to zero length
N    * "a+b"/"ab+" append; open binary file or create for update, writing at eof
N    *
N    * Opening a file with read mode ('r' as the first character in the mode
N    * argument) fails if the file does not exist or cannot be read.
N    * Opening a file with append mode ('a' as the first character in the mode
N    * argument) causes all subsequent writes to be forced to the current end of
N    * file, regardless of intervening calls to the fseek function. In some
N    * implementations, opening a binary file with append mode ('b' as the
N    * second or third character in the mode argument) may initially position
N    * the file position indicator beyond the last data written, because of the
N    * NUL padding.
N    * When a file is opened with update mode ('+' as the second or third
N    * character in the mode argument), both input and output may be performed
N    * on the associated stream. However, output may not be directly followed
N    * by input without an intervening call to the fflush fuction or to a file
N    * positioning function (fseek, fsetpos, or rewind), and input be not be
N    * directly followed by output without an intervening call to the fflush
N    * fuction or to a file positioning function, unless the input operation
N    * encounters end-of-file. Opening a file with update mode may open or
N    * create a binary stream in some implementations. When opened, a stream
N    * is fully buffered if and only if it does not refer to an interactive
N    * device. The error and end-of-file indicators for the stream are
N    * cleared.
N    * Returns: a pointer to the object controlling the stream. If the open
N    *          operation fails, fopen returns a null pointer.
N    */
Nextern _ARMABI FILE *freopen(const char * __restrict /*filename*/,
Xextern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
N                    const char * __restrict /*mode*/,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(2,3)));
N   /*
N    * opens the file whose name is the string pointed to by filename and
N    * associates the stream pointed to by stream with it. The mode argument is
N    * used just as in the fopen function.
N    * The freopen function first attempts to close any file that is associated
N    * with the specified stream. Failure to close the file successfully is
N    * ignored. The error and end-of-file indicators for the stream are cleared.
N    * Returns: a null pointer if the operation fails. Otherwise, freopen
N    *          returns the value of the stream.
N    */
Nextern _ARMABI void setbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
N                    char * __restrict /*buf*/) __attribute__((__nonnull__(1)));
N   /*
N    * Except that it returns no value, the setbuf function is equivalent to the
N    * setvbuf function invoked with the values _IOFBF for mode and BUFSIZ for
N    * size, or (if buf is a null pointer), with the value _IONBF for mode.
N    * Returns: no value.
N    */
Nextern _ARMABI int setvbuf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
N                   char * __restrict /*buf*/,
N                   int /*mode*/, size_t /*size*/) __attribute__((__nonnull__(1)));
N   /*
N    * may be used after the stream pointed to by stream has been associated
N    * with an open file but before it is read or written. The argument mode
N    * determines how stream will be buffered, as follows: _IOFBF causes
N    * input/output to be fully buffered; _IOLBF causes output to be line
N    * buffered (the buffer will be flushed when a new-line character is
N    * written, when the buffer is full, or when input is requested); _IONBF
N    * causes input/output to be completely unbuffered. If buf is not the null
N    * pointer, the array it points to may be used instead of an automatically
N    * allocated buffer (the buffer must have a lifetime at least as great as
N    * the open stream, so the stream should be closed before a buffer that has
N    * automatic storage duration is deallocated upon block exit). The argument
N    * size specifies the size of the array. The contents of the array at any
N    * time are indeterminate.
N    * Returns: zero on success, or nonzero if an invalid value is given for
N    *          mode or size, or if the request cannot be honoured.
N    */
N#pragma __printf_args
Nextern _ARMABI int fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes output to the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies how subsequent arguments are
N    * converted for output. If there are insufficient arguments for the format,
N    * the behaviour is undefined. If the format is exhausted while arguments
N    * remain, the excess arguments are evaluated but otherwise ignored. The
N    * fprintf function returns when the end of the format string is reached.
N    * The format shall be a multibyte character sequence, beginning and ending
N    * in its initial shift state. The format is composed of zero or more
N    * directives: ordinary multibyte characters (not %), which are copied
N    * unchanged to the output stream; and conversion specifiers, each of which
N    * results in fetching zero or more subsequent arguments. Each conversion
N    * specification is introduced by the character %. For a description of the
N    * available conversion specifiers refer to section 4.9.6.1 in the ANSI
N    * draft mentioned at the start of this file or to any modern textbook on C.
N    * The minimum value for the maximum number of characters producable by any
N    * single conversion is at least 509.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _fprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, but does not support floating-point formats.
N    * You can use instead of fprintf to improve code size.
N    * Returns: as fprintf.
N    */
N#pragma __printf_args
Nextern _ARMABI int printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fprintf with the argument stdout interposed before the
N    * arguments to printf.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
N#pragma __printf_args
Nextern _ARMABI int _printf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, but does not support floating-point formats.
N    * You can use instead of printf to improve code size.
N    * Returns: as printf.
N    */
N#pragma __printf_args
Nextern _ARMABI int sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. A null character is written at the end of the characters written;
N    * it is not counted as part of the returned sum.
N    * Returns: the number of characters written to the array, not counting the
N    *          terminating null character.
N    */
N#pragma __printf_args
Nextern _ARMABI int _sprintf(char * __restrict /*s*/, const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, but does not support floating-point formats.
N    * You can use instead of sprintf to improve code size.
N    * Returns: as sprintf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199901L)
N#pragma __printf_args
Nextern _ARMABI int snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to fprintf, except that the argument s specifies an array
N    * into which the generated output is to be written, rather than to a
N    * stream. The argument n specifies the size of the output array, so as to
N    * avoid overflowing the buffer.
N    * A null character is written at the end of the characters written, even
N    * if the formatting was not completed; it is not counted as part of the
N    * returned sum. At most n characters of the output buffer are used,
N    * _including_ the null character.
N    * Returns: the number of characters that would have been written to the
N    *          array, not counting the terminating null character, if the
N    *          array had been big enough. So if the return is >=0 and <n, then
N    *          the entire string was successfully formatted; if the return is
N    *          >=n, the string was truncated (but there is still a null char
N    *          at the end of what was written); if the return is <0, there was
N    *          an error.
N    */
N#endif
N#pragma __printf_args
Nextern _ARMABI int _snprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, ...) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, but does not support floating-point formats.
N    * You can use instead of snprintf to improve code size.
N    * Returns: as snprintf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * reads input from the stream pointed to by stream, under control of the
N    * string pointed to by format that specifies the admissible input sequences
N    * and how thay are to be converted for assignment, using subsequent
N    * arguments as pointers to the objects to receive the converted input. If
N    * there are insufficient arguments for the format, the behaviour is
N    * undefined. If the format is exhausted while arguments remain, the excess
N    * arguments are evaluated but otherwise ignored.
N    * The format is composed of zero or more directives: one or more
N    * white-space characters; an ordinary character (not %); or a conversion
N    * specification. Each conversion specification is introduced by the
N    * character %. For a description of the available conversion specifiers
N    * refer to section 4.9.6.2 in the ANSI draft mentioned at the start of this
N    * file, or to any modern textbook on C.
N    * If end-of-file is encountered during input, conversion is terminated. If
N    * end-of-file occurs before any characters matching the current directive
N    * have been read (other than leading white space, where permitted),
N    * execution of the current directive terminates with an input failure;
N    * otherwise, unless execution of the current directive is terminated with a
N    * matching failure, execution of the following directive (if any) is
N    * terminated with an input failure.
N    * If conversions terminates on a conflicting input character, the offending
N    * input character is left unread in the input strem. Trailing white space
N    * (including new-line characters) is left unread unless matched by a
N    * directive. The success of literal matches and suppressed asignments is
N    * not directly determinable other than via the %n directive.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the fscanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early conflict between an input
N    *          character and the format.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _fscanf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf, but does not support floating-point formats.
N    * You can use instead of fscanf to improve code size.
N    * Returns: as fscanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fscanf with the argument stdin interposed before the
N    * arguments to scanf.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _scanf(const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to scanf, but does not support floating-point formats.
N    * You can use instead of scanf to improve code size.
N    * Returns: as scanf.
N    */
N#pragma __scanf_args
Nextern _ARMABI int sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int sscanf(const char * __restrict  ,
N                    const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fscanf except that the argument s specifies a string
N    * from which the input is to be obtained, rather than from a stream.
N    * Reaching the end of the string is equivalent to encountering end-of-file
N    * for the fscanf function.
N    * Returns: the value of the macro EOF if an input failure occurs before any
N    *          conversion. Otherwise, the scanf function returns the number of
N    *          input items assigned, which can be fewer than provided for, or
N    *          even zero, in the event of an early matching failure.
N    */
N#pragma __scanf_args
Nextern _ARMABI int _sscanf(const char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
N                     const char * __restrict /*format*/, ...) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sscanf, but does not support floating-point formats.
N    * You can use instead of sscanf to improve code size.
N    * Returns: as sscanf.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199901L)
N/* C99 additions */
Nextern _ARMABI int vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N#endif
Nextern _ARMABI int _vfscanf(FILE * __restrict /*stream*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
Nextern _ARMABI int _vscanf(const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
Nextern _ARMABI int _vsscanf(const char * __restrict /*s*/, const char * __restrict /*format*/, __va_list) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
N
Nextern _ARMABI int vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to printf, with the variable argument list replaced by arg,
N    * which has been initialised by the va_start macro (and possibly subsequent
N    * va_arg calls). The vprintf function does not invoke the va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int _vprintf(const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to vprintf, but does not support floating-point formats.
N    * You can use instead of vprintf to improve code size.
N    * Returns: as vprintf.
N    */
Nextern _ARMABI int vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
N                    const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to fprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vfprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters transmitted, or a negative value if an
N    *          output error occurred.
N    */
Nextern _ARMABI int vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int vsprintf(char * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to sprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters written in the array, not counting the
N    *          terminating null character.
N    */
N#if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#if !0L || (1L && 199901L <= 199901L)
Nextern _ARMABI int vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to snprintf, with the variable argument list replaced by
N    * arg, which has been initialised by the va_start macro (and possibly
N    * subsequent va_arg calls). The vsprintf function does not invoke the
N    * va_end function.
N    * Returns: the number of characters that would have been written in the
N    *          array, not counting the terminating null character. As
N    *          snprintf.
N    */
N#endif
Nextern _ARMABI int _vsprintf(char * __restrict /*s*/,
Xextern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vsprintf, but does not support floating-point formats.
N    * You can use instead of vsprintf to improve code size.
N    * Returns: as vsprintf.
N    */
Nextern _ARMABI int _vfprintf(FILE * __restrict /*stream*/,
Xextern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
N                     const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(1,2)));
N   /*
N    * is equivalent to vfprintf, but does not support floating-point formats.
N    * You can use instead of vfprintf to improve code size.
N    * Returns: as vfprintf.
N    */
Nextern _ARMABI int _vsnprintf(char * __restrict /*s*/, size_t /*n*/,
Xextern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
N                      const char * __restrict /*format*/, __va_list /*arg*/) __attribute__((__nonnull__(3)));
N   /*
N    * is equivalent to vsnprintf, but does not support floating-point formats.
N    * You can use instead of vsnprintf to improve code size.
N    * Returns: as vsnprintf.
N    */
Nextern _ARMABI int fgetc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the next character (if present) as an unsigned char converted to
N    * an int, from the input stream pointed to by stream, and advances the
N    * associated file position indicator (if defined).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and fgetc returns EOF. If a read error occurs, the error
N    *          indicator is set and fgetc returns EOF.
N    */
Nextern _ARMABI char *fgets(char * __restrict /*s*/, int /*n*/,
Xextern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
N                    FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads at most one less than the number of characters specified by n from
N    * the stream pointed to by stream into the array pointed to by s. No
N    * additional characters are read after a new-line character (which is
N    * retained) or after end-of-file. A null character is written immediately
N    * after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int fputc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * writes the character specified by c (converted to an unsigned char) to
N    * the output stream pointed to by stream, at the position indicated by the
N    * asociated file position indicator (if defined), and advances the
N    * indicator appropriately. If the file position indicator is not defined,
N    * the character is appended to the output stream.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and fputc returns EOF.
N    */
Nextern _ARMABI int fputs(const char * __restrict /*s*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stream.
N    * The terminating null character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int getc(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * is equivalent to fgetc except that it may be implemented as an unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the next character from the input stream pointed to by stream.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getc returns EOF. If a read error occurs, the error
N    *          indicator is set and getc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int getchar() { return getc(stdin); }
N#else
N    #define getchar() getc(stdin)
N    extern _ARMABI int (getchar)(void);
X    extern __declspec(__nothrow) int (getchar)(void);
N#endif
N   /*
N    * is equivalent to getc with the argument stdin.
N    * Returns: the next character from the input stream pointed to by stdin.
N    *          If the stream is at end-of-file, the end-of-file indicator is
N    *          set and getchar returns EOF. If a read error occurs, the error
N    *          indicator is set and getchar returns EOF.
N    */
Nextern _ARMABI char *gets(char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * reads characters from the input stream pointed to by stdin into the array
N    * pointed to by s, until end-of-file is encountered or a new-line character
N    * is read. Any new-line character is discarded, and a null character is
N    * written immediately after the last character read into the array.
N    * Returns: s if successful. If end-of-file is encountered and no characters
N    *          have been read into the array, the contents of the array remain
N    *          unchanged and a null pointer is returned. If a read error occurs
N    *          during the operation, the array contents are indeterminate and a
N    *          null pointer is returned.
N    */
Nextern _ARMABI int putc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * is equivalent to fputc except that it may be implemented as aan unsafe
N    * macro (stream may be evaluated more than once, so the argument should
N    * never be an expression with side-effects).
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
N#ifdef __cplusplus
S    inline int putchar(int __c) { return putc(__c, stdout); }
N#else
N    #define putchar(c) putc(c, stdout)
N    extern _ARMABI int (putchar)(int /*c*/);
X    extern __declspec(__nothrow) int (putchar)(int  );
N#endif
N   /*
N    * is equivalent to putc with the second argument stdout.
N    * Returns: the character written. If a write error occurs, the error
N    *          indicator is set and putc returns EOF.
N    */
Nextern _ARMABI int puts(const char * /*s*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
N   /*
N    * writes the string pointed to by s to the stream pointed to by stdout, and
N    * appends a new-line character to the output. The terminating null
N    * character is not written.
N    * Returns: EOF if a write error occurs; otherwise it returns a nonnegative
N    *          value.
N    */
Nextern _ARMABI int ungetc(int /*c*/, FILE * /*stream*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
N   /*
N    * pushes the character specified by c (converted to an unsigned char) back
N    * onto the input stream pointed to by stream. The character will be
N    * returned by the next read on that stream. An intervening call to the
N    * fflush function or to a file positioning function (fseek, fsetpos,
N    * rewind) discards any pushed-back characters. The extern _ARMABIal storage
N    * corresponding to the stream is unchanged.
N    * One character pushback is guaranteed. If the unget function is called too
N    * many times on the same stream without an intervening read or file
N    * positioning operation on that stream, the operation may fail.
N    * If the value of c equals that of the macro EOF, the operation fails and
N    * the input stream is unchanged.
N    * A successful call to the ungetc function clears the end-of-file
N    * indicator. The value of the file position indicator after reading or
N    * discarding all pushed-back characters shall be the same as it was before
N    * the characters were pushed back. For a text stream, the value of the file
N    * position indicator after a successful call to the ungetc function is
N    * unspecified until all pushed-back characters are read or discarded. For a
N    * binary stream, the file position indicator is decremented by each
N    * successful call to the ungetc function; if its value was zero before a
N    * call, it is indeterminate after the call.
N    * Returns: the character pushed back after conversion, or EOF if the
N    *          operation fails.
N    */
N
Nextern _ARMABI size_t fread(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fread(void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * reads into the array pointed to by ptr, up to nmemb members whose size is
N    * specified by size, from the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully read. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate. If a partial member is read, its
N    * value is indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.
N    * Returns: the number of members successfully read, which may be less than
N    *          nmemb if a read error or end-of-file is encountered. If size or
N    *          nmemb is zero, fread returns zero and the contents of the array
N    *          and the state of the stream remain unchanged.
N    */
N
Nextern _ARMABI size_t __fread_bytes_avail(void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
N                    size_t /*count*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,3)));
N   /*
N    * reads into the array pointed to by ptr, up to count characters from the
N    * stream pointed to by stream. The file position indicator (if defined)
N    * is advanced by the number of characters successfully read. If an error
N    * occurs, the resulting value of the file position indicator is
N    * indeterminate. The ferror or feof function shall be used to
N    * distinguish between a read error and end-of-file.  The call will block
N    * only if no characters are available.
N    * Returns: the number of characters successfully read, which may be less than
N    *          count. If count is zero, __fread_bytes_avail returns zero and
N    *          the contents of the array and the state of the stream remain
N    *          unchanged.
N    */
N
Nextern _ARMABI size_t fwrite(const void * __restrict /*ptr*/,
Xextern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
N                    size_t /*size*/, size_t /*nmemb*/, FILE * __restrict /*stream*/) __attribute__((__nonnull__(1,4)));
N   /*
N    * writes, from the array pointed to by ptr up to nmemb members whose size
N    * is specified by size, to the stream pointed to by stream. The file
N    * position indicator (if defined) is advanced by the number of characters
N    * successfully written. If an error occurs, the resulting value of the file
N    * position indicator is indeterminate.
N    * Returns: the number of members successfully written, which will be less
N    *          than nmemb only if a write error is encountered.
N    */
N
Nextern _ARMABI int fgetpos(FILE * __restrict /*stream*/, fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * stores the current value of the file position indicator for the stream
N    * pointed to by stream in the object pointed to by pos. The value stored
N    * contains unspecified information usable by the fsetpos function for
N    * repositioning the stream to its position at the time  of the call to the
N    * fgetpos function.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI int fseek(FILE * /*stream*/, long int /*offset*/, int /*whence*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream.
N    * For a binary stream, the new position is at the signed number of
N    * characters specified by offset away from the point specified by whence.
N    * The specified point is the beginning of the file for SEEK_SET, the
N    * current position in the file for SEEK_CUR, or end-of-file for SEEK_END.
N    * A binary stream need not meaningfully support fseek calls with a whence
N    * value of SEEK_END.
N    * For a text stream, either offset shall be zero, or offset shall be a
N    * value returned by an earlier call to the ftell function on the same
N    * stream and whence shall be SEEK_SET.
N    * The fseek function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fseek call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: nonzero only for a request that cannot be satisfied.
N    */
Nextern _ARMABI int fsetpos(FILE * __restrict /*stream*/, const fpos_t * __restrict /*pos*/) __attribute__((__nonnull__(1,2)));
Xextern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
N   /*
N    * sets  the file position indicator for the stream pointed to by stream
N    * according to the value of the object pointed to by pos, which shall be a
N    * value returned by an earlier call to the fgetpos function on the same
N    * stream.
N    * The fsetpos function clears the end-of-file indicator and undoes any
N    * effects of the ungetc function on the same stream. After an fsetpos call,
N    * the next operation on an update stream may be either input or output.
N    * Returns: zero, if successful. Otherwise nonzero is returned and the
N    *          integer expression errno is set to an implementation-defined
N    *          nonzero value.
N    */
Nextern _ARMABI long int ftell(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * obtains the current value of the file position indicator for the stream
N    * pointed to by stream. For a binary stream, the value is the number of
N    * characters from the beginning of the file. For a text stream, the file
N    * position indicator contains unspecified information, usable by the fseek
N    * function for returning the file position indicator to its position at the
N    * time of the ftell call; the difference between two such return values is
N    * not necessarily a meaningful measure of the number of characters written
N    * or read.
N    * Returns: if successful, the current value of the file position indicator.
N    *          On failure, the ftell function returns -1L and sets the integer
N    *          expression errno to an implementation-defined nonzero value.
N    */
Nextern _ARMABI void rewind(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * sets the file position indicator for the stream pointed to by stream to
N    * the beginning of the file. It is equivalent to
N    *          (void)fseek(stream, 0L, SEEK_SET)
N    * except that the error indicator for the stream is also cleared.
N    * Returns: no value.
N    */
N
Nextern _ARMABI void clearerr(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * clears the end-of-file and error indicators for the stream pointed to by
N    * stream. These indicators are cleared only when the file is opened or by
N    * an explicit call to the clearerr function or to the rewind function.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int feof(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the end-of-file indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the end-of-file indicator is set for stream.
N    */
Nextern _ARMABI int ferror(FILE * /*stream*/) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
N   /*
N    * tests the error indicator for the stream pointed to by stream.
N    * Returns: nonzero iff the error indicator is set for stream.
N    */
Nextern _ARMABI void perror(const char * /*s*/);
Xextern __declspec(__nothrow) void perror(const char *  );
N   /*
N    * maps the error number  in the integer expression errno to an error
N    * message. It writes a sequence of characters to the standard error stream
N    * thus: first (if s is not a null pointer and the character pointed to by
N    * s is not the null character), the string pointed to by s followed by a
N    * colon and a space; then an appropriate error message string followed by
N    * a new-line character. The contents of the error message strings are the
N    * same as those returned by the strerror function with argument errno,
N    * which are implementation-defined.
N    * Returns: no value.
N    */
N
Nextern _ARMABI int _fisatty(FILE * /*stream*/ ) __attribute__((__nonnull__(1)));
Xextern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
N    /* Returns 1 if the stream is tty (stdin), 0 otherwise. Not ANSI compliant.
N     */
N
Nextern _ARMABI void __use_no_semihosting_swi(void);
Xextern __declspec(__nothrow) void __use_no_semihosting_swi(void);
Nextern _ARMABI void __use_no_semihosting(void);
Xextern __declspec(__nothrow) void __use_no_semihosting(void);
N    /*
N     * Referencing either of these symbols will cause a link-time
N     * error if any library functions that use semihosting SWI
N     * calls are also present in the link, i.e. you define it if
N     * you want to make sure you haven't accidentally used any such
N     * SWIs.
N     */
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __STDIO_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__STDIO_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::size_t;
S    using ::std::fpos_t;
S    using ::std::FILE;
S    using ::std::remove;
S    using ::std::rename;
S    using ::std::tmpfile;
S    using ::std::tmpnam;
S    using ::std::fclose;
S    using ::std::fflush;
S    using ::std::fopen;
S    using ::std::freopen;
S    using ::std::setbuf;
S    using ::std::setvbuf;
S    using ::std::fprintf;
S    using ::std::_fprintf;
S    using ::std::printf;
S    using ::std::_printf;
S    using ::std::sprintf;
S    using ::std::_sprintf;
S    #if !defined(__STRICT_ANSI__) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
S      using ::std::snprintf;
S      using ::std::vsnprintf;
S      using ::std::vfscanf;
S      using ::std::vscanf;
S      using ::std::vsscanf;
S    #endif
S    using ::std::_snprintf;
S    using ::std::_vsnprintf;
S    using ::std::fscanf;
S    using ::std::_fscanf;
S    using ::std::scanf;
S    using ::std::_scanf;
S    using ::std::sscanf;
S    using ::std::_sscanf;
S    using ::std::_vfscanf;
S    using ::std::_vscanf;
S    using ::std::_vsscanf;
S    using ::std::vprintf;
S    using ::std::_vprintf;
S    using ::std::vfprintf;
S    using ::std::_vfprintf;
S    using ::std::vsprintf;
S    using ::std::_vsprintf;
S    using ::std::fgetc;
S    using ::std::fgets;
S    using ::std::fputc;
S    using ::std::fputs;
S    using ::std::getc;
S    using ::std::getchar;
S    using ::std::gets;
S    using ::std::putc;
S    using ::std::putchar;
S    using ::std::puts;
S    using ::std::ungetc;
S    using ::std::fread;
S    using ::std::__fread_bytes_avail;
S    using ::std::fwrite;
S    using ::std::fgetpos;
S    using ::std::fseek;
S    using ::std::fsetpos;
S    using ::std::ftell;
S    using ::std::rewind;
S    using ::std::clearerr;
S    using ::std::feof;
S    using ::std::ferror;
S    using ::std::perror;
S    using ::std::_fisatty;
S    using ::std::__use_no_semihosting_swi;
S    using ::std::__use_no_semihosting;
N  #endif
N
N#endif /* ndef __stdio_h */
N
N/* end of stdio.h */
N
L 9 ".\startup\common_head.h" 2
N
Ntypedef   unsigned int     uint32;
Ntypedef   unsigned short   uint16;
Ntypedef   unsigned char    uint8;
N
Ntypedef   unsigned int     UINT32;
Ntypedef   unsigned short   UINT16;
Ntypedef   unsigned char    UINT8;
N
Ntypedef   unsigned int     uint32_t;
Ntypedef   unsigned int   uint64_t;
Ntypedef   int              int32_t;
Ntypedef   unsigned short   uint16_t;
Ntypedef   unsigned char    uint8_t;
N
Ntypedef   unsigned int     size_t;
N
Nenum
N{
N	   OFF = 0,
N	   ON
N};
N
N#ifndef NULL
S#define NULL    ((void*)0)    
N#endif
N
N#define NOP()			__asm volatile (\
N							" nop \n" \
N						)
X#define NOP()			__asm volatile (							" nop \n" 						)
N
N#include "sysctl.h"
L 1 ".\driverlib\sysctl.h" 1
N//*****************************************************************************
N//
N// sysctl.h - Prototypes for the system control driver.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_SYSCTL_H__
N#define __DRIVERLIB_SYSCTL_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the
N// SysCtlPeripheralPresent(), SysCtlPeripheralEnable(),
N// SysCtlPeripheralDisable(), and SysCtlPeripheralReset() APIs as the
N// ui32Peripheral parameter.  The peripherals in the fourth group (upper nibble
N// is 3) can only be used with the SysCtlPeripheralPresent() API.
N//
N//*****************************************************************************
N#define SYSCTL_PERIPH_ADC0      0xf0003800  // ADC 0
N#define SYSCTL_PERIPH_ADC1      0xf0003801  // ADC 1
N#define SYSCTL_PERIPH_CAN0      0xf0003400  // CAN 0
N#define SYSCTL_PERIPH_CAN1      0xf0003401  // CAN 1
N#define SYSCTL_PERIPH_CAN2      0xf0003402  // CAN 2
N#define SYSCTL_PERIPH_COMP0     0xf0003c00  // Analog comparator 0
N#define SYSCTL_PERIPH_COMP1     0xf0003c01  // Analog comparator 1
N#define SYSCTL_PERIPH_COMP2     0xf0003c02  // Analog comparator 2
N#define SYSCTL_PERIPH_EMAC0     0xf0009c00  // Ethernet MAC0
N#define SYSCTL_PERIPH_EPHY0     0xf0003000  // Ethernet PHY0
N#define SYSCTL_PERIPH_EPI0      0xf0001000  // EPI0
N#define SYSCTL_PERIPH_GPIOA     0xf0000800  // GPIO A
N#define SYSCTL_PERIPH_GPIOB     0xf0000801  // GPIO B
N#define SYSCTL_PERIPH_GPIOC     0xf0000802  // GPIO C
N#define SYSCTL_PERIPH_GPIOD     0xf0000803  // GPIO D
N#define SYSCTL_PERIPH_GPIOE     0xf0000804  // GPIO E
N#define SYSCTL_PERIPH_GPIOF     0xf0000805  // GPIO F
N#define SYSCTL_PERIPH_GPIOG     0xf0000806  // GPIO G
N#define SYSCTL_PERIPH_GPIOH     0xf0000807  // GPIO H
N#define SYSCTL_PERIPH_GPIOJ     0xf0000808  // GPIO J
N#define SYSCTL_PERIPH_HIBERNATE 0xf0001400  // Hibernation module
N#define SYSCTL_PERIPH_CCM0      0xf0007400  // CCM 0
N#define SYSCTL_PERIPH_EEPROM0   0xf0005800  // EEPROM 0
N#define SYSCTL_PERIPH_FAN0      0xf0005400  // FAN 0
N#define SYSCTL_PERIPH_FAN1      0xf0005401  // FAN 1
N#define SYSCTL_PERIPH_GPIOK     0xf0000809  // GPIO K
N#define SYSCTL_PERIPH_GPIOL     0xf000080a  // GPIO L
N#define SYSCTL_PERIPH_GPIOM     0xf000080b  // GPIO M
N#define SYSCTL_PERIPH_GPION     0xf000080c  // GPIO N
N#define SYSCTL_PERIPH_GPIOP     0xf000080d  // GPIO P
N#define SYSCTL_PERIPH_GPIOQ     0xf000080e  // GPIO Q
N#define SYSCTL_PERIPH_GPIOR     0xf000080f  // GPIO R
N#define SYSCTL_PERIPH_GPIOS     0xf0000810  // GPIO S
N#define SYSCTL_PERIPH_GPIOT     0xf0000811  // GPIO T
N#define SYSCTL_PERIPH_I2C0      0xf0002000  // I2C 0
N#define SYSCTL_PERIPH_I2C1      0xf0002001  // I2C 1
N#define SYSCTL_PERIPH_I2C2      0xf0002002  // I2C 2
N#define SYSCTL_PERIPH_I2C3      0xf0002003  // I2C 3
N#define SYSCTL_PERIPH_I2C4      0xf0002004  // I2C 4
N#define SYSCTL_PERIPH_I2C5      0xf0002005  // I2C 5
N#define SYSCTL_PERIPH_I2C6      0xf0002006  // I2C 6
N#define SYSCTL_PERIPH_I2C7      0xf0002007  // I2C 7
N#define SYSCTL_PERIPH_I2C8      0xf0002008  // I2C 8
N#define SYSCTL_PERIPH_I2C9      0xf0002009  // I2C 9
N#define SYSCTL_PERIPH_LCD0      0xf0009000  // LCD 0
N#define SYSCTL_PERIPH_PWM0      0xf0004000  // PWM 0
N#define SYSCTL_PERIPH_PWM1      0xf0004001  // PWM 1
N#define SYSCTL_PERIPH_QEI0      0xf0004400  // QEI 0
N#define SYSCTL_PERIPH_QEI1      0xf0004401  // QEI 1
N#define SYSCTL_PERIPH_SSI0      0xf0001c00  // SSI 0
N#define SYSCTL_PERIPH_SSI1      0xf0001c01  // SSI 1
N#define SYSCTL_PERIPH_SSI2      0xf0001c02  // SSI 2
N#define SYSCTL_PERIPH_SSI3      0xf0001c03  // SSI 3
N#define SYSCTL_PERIPH_TIMER0    0xf0000400  // Timer 0
N#define SYSCTL_PERIPH_TIMER1    0xf0000401  // Timer 1
N#define SYSCTL_PERIPH_TIMER2    0xf0000402  // Timer 2
N#define SYSCTL_PERIPH_TIMER3    0xf0000403  // Timer 3
N#define SYSCTL_PERIPH_TIMER4    0xf0000404  // Timer 4
N#define SYSCTL_PERIPH_TIMER5    0xf0000405  // Timer 5
N#define SYSCTL_PERIPH_TIMER6    0xf0000406  // Timer 6
N#define SYSCTL_PERIPH_TIMER7    0xf0000407  // Timer 7
N#define SYSCTL_PERIPH_UART0     0xf0001800  // UART 0
N#define SYSCTL_PERIPH_UART1     0xf0001801  // UART 1
N#define SYSCTL_PERIPH_UART2     0xf0001802  // UART 2
N#define SYSCTL_PERIPH_UART3     0xf0001803  // UART 3
N#define SYSCTL_PERIPH_UART4     0xf0001804  // UART 4
N#define SYSCTL_PERIPH_UART5     0xf0001805  // UART 5
N#define SYSCTL_PERIPH_UART6     0xf0001806  // UART 6
N#define SYSCTL_PERIPH_UART7     0xf0001807  // UART 7
N#define SYSCTL_PERIPH_UDMA      0xf0000c00  // uDMA
N#define SYSCTL_PERIPH_USB0      0xf0002800  // USB 0
N#define SYSCTL_PERIPH_WDOG0     0xf0000000  // Watchdog 0
N#define SYSCTL_PERIPH_WDOG1     0xf0000001  // Watchdog 1
N#define SYSCTL_PERIPH_WTIMER0   0xf0005c00  // Wide Timer 0
N#define SYSCTL_PERIPH_WTIMER1   0xf0005c01  // Wide Timer 1
N#define SYSCTL_PERIPH_WTIMER2   0xf0005c02  // Wide Timer 2
N#define SYSCTL_PERIPH_WTIMER3   0xf0005c03  // Wide Timer 3
N#define SYSCTL_PERIPH_WTIMER4   0xf0005c04  // Wide Timer 4
N#define SYSCTL_PERIPH_WTIMER5   0xf0005c05  // Wide Timer 5
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlLDOSleepSet() and
N// SysCtlLDODeepSleepSet() APIs as the ui32Voltage value, or returned by the
N// SysCtlLDOSleepGet() and SysCtlLDODeepSleepGet() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_LDO_0_90V        0x80000012  // LDO output of 0.90V
N#define SYSCTL_LDO_0_95V        0x80000013  // LDO output of 0.95V
N#define SYSCTL_LDO_1_00V        0x80000014  // LDO output of 1.00V
N#define SYSCTL_LDO_1_05V        0x80000015  // LDO output of 1.05V
N#define SYSCTL_LDO_1_10V        0x80000016  // LDO output of 1.10V
N#define SYSCTL_LDO_1_15V        0x80000017  // LDO output of 1.15V
N#define SYSCTL_LDO_1_20V        0x80000018  // LDO output of 1.20V
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlIntEnable(),
N// SysCtlIntDisable(), and SysCtlIntClear() APIs, or returned in the bit mask
N// by the SysCtlIntStatus() API.
N//
N//*****************************************************************************
N#define SYSCTL_INT_MOSC_PUP     0x00000100  // MOSC power-up interrupt
N#define SYSCTL_INT_USBPLL_LOCK  0x00000080  // USB PLL lock interrupt
N#define SYSCTL_INT_PLL_LOCK     0x00000040  // PLL lock interrupt
N#define SYSCTL_INT_CUR_LIMIT    0x00000020  // Current limit interrupt
N#define SYSCTL_INT_IOSC_FAIL    0x00000010  // Internal oscillator failure int
N#define SYSCTL_INT_MOSC_FAIL    0x00000008  // Main oscillator failure int
N#define SYSCTL_INT_POR          0x00000004  // Power on reset interrupt
N#define SYSCTL_INT_BOR          0x00000002  // Brown out interrupt
N#define SYSCTL_INT_PLL_FAIL     0x00000001  // PLL failure interrupt
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlResetCauseClear()
N// API or returned by the SysCtlResetCauseGet() API.
N//
N//*****************************************************************************
N#define SYSCTL_CAUSE_HSRVREQ    0x00001000  // Hardware System Service Request
N#define SYSCTL_CAUSE_HIB        0x00000040  // Hibernate reset
N#define SYSCTL_CAUSE_LDO        0x00000020  // LDO power not OK reset
N#define SYSCTL_CAUSE_WDOG1      0x00000020  // Watchdog 1 reset
N#define SYSCTL_CAUSE_SW         0x00000010  // Software reset
N#define SYSCTL_CAUSE_WDOG0      0x00000008  // Watchdog 0 reset
N#define SYSCTL_CAUSE_WDOG       0x00000008  // Watchdog reset
N#define SYSCTL_CAUSE_BOR        0x00000004  // Brown-out reset
N#define SYSCTL_CAUSE_POR        0x00000002  // Power on reset
N#define SYSCTL_CAUSE_EXT        0x00000001  // External reset
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlBrownOutConfigSet()
N// API as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_BOR_RESET        0x00000002  // Reset instead of interrupting
N#define SYSCTL_BOR_RESAMPLE     0x00000001  // Resample BOR before asserting
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPWMClockSet() API
N// as the ui32Config parameter, and can be returned by the SysCtlPWMClockGet()
N// API.
N//
N//*****************************************************************************
N#define SYSCTL_PWMDIV_1         0x00000000  // PWM clock is processor clock /1
N#define SYSCTL_PWMDIV_2         0x00100000  // PWM clock is processor clock /2
N#define SYSCTL_PWMDIV_4         0x00120000  // PWM clock is processor clock /4
N#define SYSCTL_PWMDIV_8         0x00140000  // PWM clock is processor clock /8
N#define SYSCTL_PWMDIV_16        0x00160000  // PWM clock is processor clock /16
N#define SYSCTL_PWMDIV_32        0x00180000  // PWM clock is processor clock /32
N#define SYSCTL_PWMDIV_64        0x001A0000  // PWM clock is processor clock /64
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlADCSpeedSet() API
N// as the ui32Speed parameter, and can be returned by the SysCtlADCSpeedGet()
N// API.
N//
N//*****************************************************************************
N#define SYSCTL_ADCSPEED_1MSPS   0x00000F00  // 1,000,000 samples per second
N#define SYSCTL_ADCSPEED_500KSPS 0x00000A00  // 500,000 samples per second
N#define SYSCTL_ADCSPEED_250KSPS 0x00000500  // 250,000 samples per second
N#define SYSCTL_ADCSPEED_125KSPS 0x00000000  // 125,000 samples per second
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlClockSet() API as
N// the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_SYSDIV_1         0x07800000  // Processor clock is osc/pll /1
N#define SYSCTL_SYSDIV_2         0x00C00000  // Processor clock is osc/pll /2
N#define SYSCTL_SYSDIV_3         0x01400000  // Processor clock is osc/pll /3
N#define SYSCTL_SYSDIV_4         0x01C00000  // Processor clock is osc/pll /4
N#define SYSCTL_SYSDIV_5         0x02400000  // Processor clock is osc/pll /5
N#define SYSCTL_SYSDIV_6         0x02C00000  // Processor clock is osc/pll /6
N#define SYSCTL_SYSDIV_7         0x03400000  // Processor clock is osc/pll /7
N#define SYSCTL_SYSDIV_8         0x03C00000  // Processor clock is osc/pll /8
N#define SYSCTL_SYSDIV_9         0x04400000  // Processor clock is osc/pll /9
N#define SYSCTL_SYSDIV_10        0x04C00000  // Processor clock is osc/pll /10
N#define SYSCTL_SYSDIV_11        0x05400000  // Processor clock is osc/pll /11
N#define SYSCTL_SYSDIV_12        0x05C00000  // Processor clock is osc/pll /12
N#define SYSCTL_SYSDIV_13        0x06400000  // Processor clock is osc/pll /13
N#define SYSCTL_SYSDIV_14        0x06C00000  // Processor clock is osc/pll /14
N#define SYSCTL_SYSDIV_15        0x07400000  // Processor clock is osc/pll /15
N#define SYSCTL_SYSDIV_16        0x07C00000  // Processor clock is osc/pll /16
N#define SYSCTL_SYSDIV_17        0x88400000  // Processor clock is osc/pll /17
N#define SYSCTL_SYSDIV_18        0x88C00000  // Processor clock is osc/pll /18
N#define SYSCTL_SYSDIV_19        0x89400000  // Processor clock is osc/pll /19
N#define SYSCTL_SYSDIV_20        0x89C00000  // Processor clock is osc/pll /20
N#define SYSCTL_SYSDIV_21        0x8A400000  // Processor clock is osc/pll /21
N#define SYSCTL_SYSDIV_22        0x8AC00000  // Processor clock is osc/pll /22
N#define SYSCTL_SYSDIV_23        0x8B400000  // Processor clock is osc/pll /23
N#define SYSCTL_SYSDIV_24        0x8BC00000  // Processor clock is osc/pll /24
N#define SYSCTL_SYSDIV_25        0x8C400000  // Processor clock is osc/pll /25
N#define SYSCTL_SYSDIV_26        0x8CC00000  // Processor clock is osc/pll /26
N#define SYSCTL_SYSDIV_27        0x8D400000  // Processor clock is osc/pll /27
N#define SYSCTL_SYSDIV_28        0x8DC00000  // Processor clock is osc/pll /28
N#define SYSCTL_SYSDIV_29        0x8E400000  // Processor clock is osc/pll /29
N#define SYSCTL_SYSDIV_30        0x8EC00000  // Processor clock is osc/pll /30
N#define SYSCTL_SYSDIV_31        0x8F400000  // Processor clock is osc/pll /31
N#define SYSCTL_SYSDIV_32        0x8FC00000  // Processor clock is osc/pll /32
N#define SYSCTL_SYSDIV_33        0x90400000  // Processor clock is osc/pll /33
N#define SYSCTL_SYSDIV_34        0x90C00000  // Processor clock is osc/pll /34
N#define SYSCTL_SYSDIV_35        0x91400000  // Processor clock is osc/pll /35
N#define SYSCTL_SYSDIV_36        0x91C00000  // Processor clock is osc/pll /36
N#define SYSCTL_SYSDIV_37        0x92400000  // Processor clock is osc/pll /37
N#define SYSCTL_SYSDIV_38        0x92C00000  // Processor clock is osc/pll /38
N#define SYSCTL_SYSDIV_39        0x93400000  // Processor clock is osc/pll /39
N#define SYSCTL_SYSDIV_40        0x93C00000  // Processor clock is osc/pll /40
N#define SYSCTL_SYSDIV_41        0x94400000  // Processor clock is osc/pll /41
N#define SYSCTL_SYSDIV_42        0x94C00000  // Processor clock is osc/pll /42
N#define SYSCTL_SYSDIV_43        0x95400000  // Processor clock is osc/pll /43
N#define SYSCTL_SYSDIV_44        0x95C00000  // Processor clock is osc/pll /44
N#define SYSCTL_SYSDIV_45        0x96400000  // Processor clock is osc/pll /45
N#define SYSCTL_SYSDIV_46        0x96C00000  // Processor clock is osc/pll /46
N#define SYSCTL_SYSDIV_47        0x97400000  // Processor clock is osc/pll /47
N#define SYSCTL_SYSDIV_48        0x97C00000  // Processor clock is osc/pll /48
N#define SYSCTL_SYSDIV_49        0x98400000  // Processor clock is osc/pll /49
N#define SYSCTL_SYSDIV_50        0x98C00000  // Processor clock is osc/pll /50
N#define SYSCTL_SYSDIV_51        0x99400000  // Processor clock is osc/pll /51
N#define SYSCTL_SYSDIV_52        0x99C00000  // Processor clock is osc/pll /52
N#define SYSCTL_SYSDIV_53        0x9A400000  // Processor clock is osc/pll /53
N#define SYSCTL_SYSDIV_54        0x9AC00000  // Processor clock is osc/pll /54
N#define SYSCTL_SYSDIV_55        0x9B400000  // Processor clock is osc/pll /55
N#define SYSCTL_SYSDIV_56        0x9BC00000  // Processor clock is osc/pll /56
N#define SYSCTL_SYSDIV_57        0x9C400000  // Processor clock is osc/pll /57
N#define SYSCTL_SYSDIV_58        0x9CC00000  // Processor clock is osc/pll /58
N#define SYSCTL_SYSDIV_59        0x9D400000  // Processor clock is osc/pll /59
N#define SYSCTL_SYSDIV_60        0x9DC00000  // Processor clock is osc/pll /60
N#define SYSCTL_SYSDIV_61        0x9E400000  // Processor clock is osc/pll /61
N#define SYSCTL_SYSDIV_62        0x9EC00000  // Processor clock is osc/pll /62
N#define SYSCTL_SYSDIV_63        0x9F400000  // Processor clock is osc/pll /63
N#define SYSCTL_SYSDIV_64        0x9FC00000  // Processor clock is osc/pll /64
N#define SYSCTL_SYSDIV_2_5       0xC1000000  // Processor clock is pll / 2.5
N#define SYSCTL_SYSDIV_3_5       0xC1800000  // Processor clock is pll / 3.5
N#define SYSCTL_SYSDIV_4_5       0xC2000000  // Processor clock is pll / 4.5
N#define SYSCTL_SYSDIV_5_5       0xC2800000  // Processor clock is pll / 5.5
N#define SYSCTL_SYSDIV_6_5       0xC3000000  // Processor clock is pll / 6.5
N#define SYSCTL_SYSDIV_7_5       0xC3800000  // Processor clock is pll / 7.5
N#define SYSCTL_SYSDIV_8_5       0xC4000000  // Processor clock is pll / 8.5
N#define SYSCTL_SYSDIV_9_5       0xC4800000  // Processor clock is pll / 9.5
N#define SYSCTL_SYSDIV_10_5      0xC5000000  // Processor clock is pll / 10.5
N#define SYSCTL_SYSDIV_11_5      0xC5800000  // Processor clock is pll / 11.5
N#define SYSCTL_SYSDIV_12_5      0xC6000000  // Processor clock is pll / 12.5
N#define SYSCTL_SYSDIV_13_5      0xC6800000  // Processor clock is pll / 13.5
N#define SYSCTL_SYSDIV_14_5      0xC7000000  // Processor clock is pll / 14.5
N#define SYSCTL_SYSDIV_15_5      0xC7800000  // Processor clock is pll / 15.5
N#define SYSCTL_SYSDIV_16_5      0xC8000000  // Processor clock is pll / 16.5
N#define SYSCTL_SYSDIV_17_5      0xC8800000  // Processor clock is pll / 17.5
N#define SYSCTL_SYSDIV_18_5      0xC9000000  // Processor clock is pll / 18.5
N#define SYSCTL_SYSDIV_19_5      0xC9800000  // Processor clock is pll / 19.5
N#define SYSCTL_SYSDIV_20_5      0xCA000000  // Processor clock is pll / 20.5
N#define SYSCTL_SYSDIV_21_5      0xCA800000  // Processor clock is pll / 21.5
N#define SYSCTL_SYSDIV_22_5      0xCB000000  // Processor clock is pll / 22.5
N#define SYSCTL_SYSDIV_23_5      0xCB800000  // Processor clock is pll / 23.5
N#define SYSCTL_SYSDIV_24_5      0xCC000000  // Processor clock is pll / 24.5
N#define SYSCTL_SYSDIV_25_5      0xCC800000  // Processor clock is pll / 25.5
N#define SYSCTL_SYSDIV_26_5      0xCD000000  // Processor clock is pll / 26.5
N#define SYSCTL_SYSDIV_27_5      0xCD800000  // Processor clock is pll / 27.5
N#define SYSCTL_SYSDIV_28_5      0xCE000000  // Processor clock is pll / 28.5
N#define SYSCTL_SYSDIV_29_5      0xCE800000  // Processor clock is pll / 29.5
N#define SYSCTL_SYSDIV_30_5      0xCF000000  // Processor clock is pll / 30.5
N#define SYSCTL_SYSDIV_31_5      0xCF800000  // Processor clock is pll / 31.5
N#define SYSCTL_SYSDIV_32_5      0xD0000000  // Processor clock is pll / 32.5
N#define SYSCTL_SYSDIV_33_5      0xD0800000  // Processor clock is pll / 33.5
N#define SYSCTL_SYSDIV_34_5      0xD1000000  // Processor clock is pll / 34.5
N#define SYSCTL_SYSDIV_35_5      0xD1800000  // Processor clock is pll / 35.5
N#define SYSCTL_SYSDIV_36_5      0xD2000000  // Processor clock is pll / 36.5
N#define SYSCTL_SYSDIV_37_5      0xD2800000  // Processor clock is pll / 37.5
N#define SYSCTL_SYSDIV_38_5      0xD3000000  // Processor clock is pll / 38.5
N#define SYSCTL_SYSDIV_39_5      0xD3800000  // Processor clock is pll / 39.5
N#define SYSCTL_SYSDIV_40_5      0xD4000000  // Processor clock is pll / 40.5
N#define SYSCTL_SYSDIV_41_5      0xD4800000  // Processor clock is pll / 41.5
N#define SYSCTL_SYSDIV_42_5      0xD5000000  // Processor clock is pll / 42.5
N#define SYSCTL_SYSDIV_43_5      0xD5800000  // Processor clock is pll / 43.5
N#define SYSCTL_SYSDIV_44_5      0xD6000000  // Processor clock is pll / 44.5
N#define SYSCTL_SYSDIV_45_5      0xD6800000  // Processor clock is pll / 45.5
N#define SYSCTL_SYSDIV_46_5      0xD7000000  // Processor clock is pll / 46.5
N#define SYSCTL_SYSDIV_47_5      0xD7800000  // Processor clock is pll / 47.5
N#define SYSCTL_SYSDIV_48_5      0xD8000000  // Processor clock is pll / 48.5
N#define SYSCTL_SYSDIV_49_5      0xD8800000  // Processor clock is pll / 49.5
N#define SYSCTL_SYSDIV_50_5      0xD9000000  // Processor clock is pll / 50.5
N#define SYSCTL_SYSDIV_51_5      0xD9800000  // Processor clock is pll / 51.5
N#define SYSCTL_SYSDIV_52_5      0xDA000000  // Processor clock is pll / 52.5
N#define SYSCTL_SYSDIV_53_5      0xDA800000  // Processor clock is pll / 53.5
N#define SYSCTL_SYSDIV_54_5      0xDB000000  // Processor clock is pll / 54.5
N#define SYSCTL_SYSDIV_55_5      0xDB800000  // Processor clock is pll / 55.5
N#define SYSCTL_SYSDIV_56_5      0xDC000000  // Processor clock is pll / 56.5
N#define SYSCTL_SYSDIV_57_5      0xDC800000  // Processor clock is pll / 57.5
N#define SYSCTL_SYSDIV_58_5      0xDD000000  // Processor clock is pll / 58.5
N#define SYSCTL_SYSDIV_59_5      0xDD800000  // Processor clock is pll / 59.5
N#define SYSCTL_SYSDIV_60_5      0xDE000000  // Processor clock is pll / 60.5
N#define SYSCTL_SYSDIV_61_5      0xDE800000  // Processor clock is pll / 61.5
N#define SYSCTL_SYSDIV_62_5      0xDF000000  // Processor clock is pll / 62.5
N#define SYSCTL_SYSDIV_63_5      0xDF800000  // Processor clock is pll / 63.5
N#define SYSCTL_CFG_VCO_480      0xF1000000  // VCO is 480 MHz
N#define SYSCTL_CFG_VCO_320      0xF0000000  // VCO is 320 MHz
N#define SYSCTL_USE_PLL          0x00000000  // System clock is the PLL clock
N#define SYSCTL_USE_OSC          0x00003800  // System clock is the osc clock
N#define SYSCTL_XTAL_1MHZ        0x00000000  // External crystal is 1MHz
N#define SYSCTL_XTAL_1_84MHZ     0x00000040  // External crystal is 1.8432MHz
N#define SYSCTL_XTAL_2MHZ        0x00000080  // External crystal is 2MHz
N#define SYSCTL_XTAL_2_45MHZ     0x000000C0  // External crystal is 2.4576MHz
N#define SYSCTL_XTAL_3_57MHZ     0x00000100  // External crystal is 3.579545MHz
N#define SYSCTL_XTAL_3_68MHZ     0x00000140  // External crystal is 3.6864MHz
N#define SYSCTL_XTAL_4MHZ        0x00000180  // External crystal is 4MHz
N#define SYSCTL_XTAL_4_09MHZ     0x000001C0  // External crystal is 4.096MHz
N#define SYSCTL_XTAL_4_91MHZ     0x00000200  // External crystal is 4.9152MHz
N#define SYSCTL_XTAL_5MHZ        0x00000240  // External crystal is 5MHz
N#define SYSCTL_XTAL_5_12MHZ     0x00000280  // External crystal is 5.12MHz
N#define SYSCTL_XTAL_6MHZ        0x000002C0  // External crystal is 6MHz
N#define SYSCTL_XTAL_6_14MHZ     0x00000300  // External crystal is 6.144MHz
N#define SYSCTL_XTAL_7_37MHZ     0x00000340  // External crystal is 7.3728MHz
N#define SYSCTL_XTAL_8MHZ        0x00000380  // External crystal is 8MHz
N#define SYSCTL_XTAL_8_19MHZ     0x000003C0  // External crystal is 8.192MHz
N#define SYSCTL_XTAL_10MHZ       0x00000400  // External crystal is 10 MHz
N#define SYSCTL_XTAL_12MHZ       0x00000440  // External crystal is 12 MHz
N#define SYSCTL_XTAL_12_2MHZ     0x00000480  // External crystal is 12.288 MHz
N#define SYSCTL_XTAL_13_5MHZ     0x000004C0  // External crystal is 13.56 MHz
N#define SYSCTL_XTAL_14_3MHZ     0x00000500  // External crystal is 14.31818 MHz
N#define SYSCTL_XTAL_16MHZ       0x00000540  // External crystal is 16 MHz
N#define SYSCTL_XTAL_16_3MHZ     0x00000580  // External crystal is 16.384 MHz
N#define SYSCTL_XTAL_18MHZ       0x000005C0  // External crystal is 18.0 MHz
N#define SYSCTL_XTAL_20MHZ       0x00000600  // External crystal is 20.0 MHz
N#define SYSCTL_XTAL_24MHZ       0x00000640  // External crystal is 24.0 MHz
N#define SYSCTL_XTAL_25MHZ       0x00000680  // External crystal is 25.0 MHz
N#define SYSCTL_OSC_MAIN         0x00000000  // Osc source is main osc
N#define SYSCTL_OSC_INT          0x00000010  // Osc source is int. osc
N#define SYSCTL_OSC_INT4         0x00000020  // Osc source is int. osc /4
N#define SYSCTL_OSC_INT30        0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_OSC_EXT4_19      0x80000028  // Osc source is ext. 4.19 MHz
N#define SYSCTL_OSC_EXT32        0x80000038  // Osc source is ext. 32 KHz
N#define SYSCTL_INT_OSC_DIS      0x00000002  // Disable internal oscillator
N#define SYSCTL_MAIN_OSC_DIS     0x00000001  // Disable main oscillator
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlDeepSleepClockSet()
N// API as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_DSLP_DIV_1       0x00000000  // Deep-sleep clock is osc /1
N#define SYSCTL_DSLP_DIV_2       0x00800000  // Deep-sleep clock is osc /2
N#define SYSCTL_DSLP_DIV_3       0x01000000  // Deep-sleep clock is osc /3
N#define SYSCTL_DSLP_DIV_4       0x01800000  // Deep-sleep clock is osc /4
N#define SYSCTL_DSLP_DIV_5       0x02000000  // Deep-sleep clock is osc /5
N#define SYSCTL_DSLP_DIV_6       0x02800000  // Deep-sleep clock is osc /6
N#define SYSCTL_DSLP_DIV_7       0x03000000  // Deep-sleep clock is osc /7
N#define SYSCTL_DSLP_DIV_8       0x03800000  // Deep-sleep clock is osc /8
N#define SYSCTL_DSLP_DIV_9       0x04000000  // Deep-sleep clock is osc /9
N#define SYSCTL_DSLP_DIV_10      0x04800000  // Deep-sleep clock is osc /10
N#define SYSCTL_DSLP_DIV_11      0x05000000  // Deep-sleep clock is osc /11
N#define SYSCTL_DSLP_DIV_12      0x05800000  // Deep-sleep clock is osc /12
N#define SYSCTL_DSLP_DIV_13      0x06000000  // Deep-sleep clock is osc /13
N#define SYSCTL_DSLP_DIV_14      0x06800000  // Deep-sleep clock is osc /14
N#define SYSCTL_DSLP_DIV_15      0x07000000  // Deep-sleep clock is osc /15
N#define SYSCTL_DSLP_DIV_16      0x07800000  // Deep-sleep clock is osc /16
N#define SYSCTL_DSLP_DIV_17      0x08000000  // Deep-sleep clock is osc /17
N#define SYSCTL_DSLP_DIV_18      0x08800000  // Deep-sleep clock is osc /18
N#define SYSCTL_DSLP_DIV_19      0x09000000  // Deep-sleep clock is osc /19
N#define SYSCTL_DSLP_DIV_20      0x09800000  // Deep-sleep clock is osc /20
N#define SYSCTL_DSLP_DIV_21      0x0A000000  // Deep-sleep clock is osc /21
N#define SYSCTL_DSLP_DIV_22      0x0A800000  // Deep-sleep clock is osc /22
N#define SYSCTL_DSLP_DIV_23      0x0B000000  // Deep-sleep clock is osc /23
N#define SYSCTL_DSLP_DIV_24      0x0B800000  // Deep-sleep clock is osc /24
N#define SYSCTL_DSLP_DIV_25      0x0C000000  // Deep-sleep clock is osc /25
N#define SYSCTL_DSLP_DIV_26      0x0C800000  // Deep-sleep clock is osc /26
N#define SYSCTL_DSLP_DIV_27      0x0D000000  // Deep-sleep clock is osc /27
N#define SYSCTL_DSLP_DIV_28      0x0D800000  // Deep-sleep clock is osc /28
N#define SYSCTL_DSLP_DIV_29      0x0E000000  // Deep-sleep clock is osc /29
N#define SYSCTL_DSLP_DIV_30      0x0E800000  // Deep-sleep clock is osc /30
N#define SYSCTL_DSLP_DIV_31      0x0F000000  // Deep-sleep clock is osc /31
N#define SYSCTL_DSLP_DIV_32      0x0F800000  // Deep-sleep clock is osc /32
N#define SYSCTL_DSLP_DIV_33      0x10000000  // Deep-sleep clock is osc /33
N#define SYSCTL_DSLP_DIV_34      0x10800000  // Deep-sleep clock is osc /34
N#define SYSCTL_DSLP_DIV_35      0x11000000  // Deep-sleep clock is osc /35
N#define SYSCTL_DSLP_DIV_36      0x11800000  // Deep-sleep clock is osc /36
N#define SYSCTL_DSLP_DIV_37      0x12000000  // Deep-sleep clock is osc /37
N#define SYSCTL_DSLP_DIV_38      0x12800000  // Deep-sleep clock is osc /38
N#define SYSCTL_DSLP_DIV_39      0x13000000  // Deep-sleep clock is osc /39
N#define SYSCTL_DSLP_DIV_40      0x13800000  // Deep-sleep clock is osc /40
N#define SYSCTL_DSLP_DIV_41      0x14000000  // Deep-sleep clock is osc /41
N#define SYSCTL_DSLP_DIV_42      0x14800000  // Deep-sleep clock is osc /42
N#define SYSCTL_DSLP_DIV_43      0x15000000  // Deep-sleep clock is osc /43
N#define SYSCTL_DSLP_DIV_44      0x15800000  // Deep-sleep clock is osc /44
N#define SYSCTL_DSLP_DIV_45      0x16000000  // Deep-sleep clock is osc /45
N#define SYSCTL_DSLP_DIV_46      0x16800000  // Deep-sleep clock is osc /46
N#define SYSCTL_DSLP_DIV_47      0x17000000  // Deep-sleep clock is osc /47
N#define SYSCTL_DSLP_DIV_48      0x17800000  // Deep-sleep clock is osc /48
N#define SYSCTL_DSLP_DIV_49      0x18000000  // Deep-sleep clock is osc /49
N#define SYSCTL_DSLP_DIV_50      0x18800000  // Deep-sleep clock is osc /50
N#define SYSCTL_DSLP_DIV_51      0x19000000  // Deep-sleep clock is osc /51
N#define SYSCTL_DSLP_DIV_52      0x19800000  // Deep-sleep clock is osc /52
N#define SYSCTL_DSLP_DIV_53      0x1A000000  // Deep-sleep clock is osc /53
N#define SYSCTL_DSLP_DIV_54      0x1A800000  // Deep-sleep clock is osc /54
N#define SYSCTL_DSLP_DIV_55      0x1B000000  // Deep-sleep clock is osc /55
N#define SYSCTL_DSLP_DIV_56      0x1B800000  // Deep-sleep clock is osc /56
N#define SYSCTL_DSLP_DIV_57      0x1C000000  // Deep-sleep clock is osc /57
N#define SYSCTL_DSLP_DIV_58      0x1C800000  // Deep-sleep clock is osc /58
N#define SYSCTL_DSLP_DIV_59      0x1D000000  // Deep-sleep clock is osc /59
N#define SYSCTL_DSLP_DIV_60      0x1D800000  // Deep-sleep clock is osc /60
N#define SYSCTL_DSLP_DIV_61      0x1E000000  // Deep-sleep clock is osc /61
N#define SYSCTL_DSLP_DIV_62      0x1E800000  // Deep-sleep clock is osc /62
N#define SYSCTL_DSLP_DIV_63      0x1F000000  // Deep-sleep clock is osc /63
N#define SYSCTL_DSLP_DIV_64      0x1F800000  // Deep-sleep clock is osc /64
N#define SYSCTL_DSLP_OSC_MAIN    0x00000000  // Osc source is main osc
N#define SYSCTL_DSLP_OSC_INT     0x00000010  // Osc source is int. osc
N#define SYSCTL_DSLP_OSC_INT30   0x00000030  // Osc source is int. 30 KHz
N#define SYSCTL_DSLP_OSC_EXT32   0x00000070  // Osc source is ext. 32 KHz
N#define SYSCTL_DSLP_PIOSC_PD    0x00000002  // Power down PIOSC in deep-sleep
N#define SYSCTL_DSLP_MOSC_PD     0x40000000  // Power down MOSC in deep-sleep
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlPIOSCCalibrate()
N// API as the ui32Type parameter.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSC_CAL_AUTO   0x00000200  // Automatic calibration
N#define SYSCTL_PIOSC_CAL_FACT   0x00000100  // Factory calibration
N#define SYSCTL_PIOSC_CAL_USER   0x80000100  // User-supplied calibration
N
N//*****************************************************************************
N//
N// The following are values that can be passed to the SysCtlMOSCConfigSet() API
N// as the ui32Config parameter.
N//
N//*****************************************************************************
N#define SYSCTL_MOSC_VALIDATE    0x00000001  // Enable MOSC validation
N#define SYSCTL_MOSC_INTERRUPT   0x00000002  // Generate interrupt on MOSC fail
N#define SYSCTL_MOSC_NO_XTAL     0x00000004  // No crystal is attached to MOSC
N#define SYSCTL_MOSC_PWR_DIS     0x00000008  // Power down the MOSC.
N#define SYSCTL_MOSC_LOWFREQ     0x00000000  // MOSC is less than 10MHz
N#define SYSCTL_MOSC_HIGHFREQ    0x00000010  // MOSC is greater than 10MHz
N#define SYSCTL_MOSC_SESRC       0x00000020  // Singled ended oscillator source.
N
N//*****************************************************************************
N//
N// Defines for the SysCtlResetBehaviorSet() and SysCtlResetBehaviorGet() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_ONRST_WDOG0_POR  0x00000030
N#define SYSCTL_ONRST_WDOG0_SYS  0x00000020
N#define SYSCTL_ONRST_WDOG1_POR  0x000000C0
N#define SYSCTL_ONRST_WDOG1_SYS  0x00000080
N#define SYSCTL_ONRST_BOR_POR    0x0000000C
N#define SYSCTL_ONRST_BOR_SYS    0x00000008
N#define SYSCTL_ONRST_EXT_POR    0x00000003
N#define SYSCTL_ONRST_EXT_SYS    0x00000002
N
N//*****************************************************************************
N//
N// The valid settings for the ui32Config parameter of the
N// SysCtlLPCLowPowerConfigSet() function.
N//
N//*****************************************************************************
N#define SYSCTL_LPCLPWR_SRAM_OFF                                               \
N                                0x00000000
X#define SYSCTL_LPCLPWR_SRAM_OFF                                                                               0x00000000
N#define SYSCTL_LPCLPWR_SRAM_RETENTION                                         \
N                                0x00000001
X#define SYSCTL_LPCLPWR_SRAM_RETENTION                                                                         0x00000001
N#define SYSCTL_LPCLPWR_SRAM_ON  0x00000003
N
N//*****************************************************************************
N//
N// The return values from the SysCtlLPCLowPowerStatusGet() function.
N//
N//*****************************************************************************
N#define SYSCTL_LPCLPWRS_PD_OFF  0x00000000
N#define SYSCTL_LPCLPWRS_SRAM_OFF                                              \
N                                0x00000033
X#define SYSCTL_LPCLPWRS_SRAM_OFF                                                                              0x00000033
N#define SYSCTL_LPCLPWRS_SRAM_RETENTION                                        \
N                                0x00000037
X#define SYSCTL_LPCLPWRS_SRAM_RETENTION                                                                        0x00000037
N#define SYSCTL_LPCLPWRS_SRAM_ON 0x0000003F
N
N//*****************************************************************************
N//
N// Values used with the SysCtlVoltageEventConfig() API.
N//
N//*****************************************************************************
N#define SYSCTL_VEVENT_VDDCBO_NONE                                             \
N                                0x00000000
X#define SYSCTL_VEVENT_VDDCBO_NONE                                                                             0x00000000
N#define SYSCTL_VEVENT_VDDCBO_INT                                              \
N                                0x00001000
X#define SYSCTL_VEVENT_VDDCBO_INT                                                                              0x00001000
N#define SYSCTL_VEVENT_VDDCBO_NMI                                              \
N                                0x00002000
X#define SYSCTL_VEVENT_VDDCBO_NMI                                                                              0x00002000
N#define SYSCTL_VEVENT_VDDCBO_RST                                              \
N                                0x00003000
X#define SYSCTL_VEVENT_VDDCBO_RST                                                                              0x00003000
N#define SYSCTL_VEVENT_VDDABO_NONE                                             \
N                                0x00000000
X#define SYSCTL_VEVENT_VDDABO_NONE                                                                             0x00000000
N#define SYSCTL_VEVENT_VDDABO_INT                                              \
N                                0x00000100
X#define SYSCTL_VEVENT_VDDABO_INT                                                                              0x00000100
N#define SYSCTL_VEVENT_VDDABO_NMI                                              \
N                                0x00000200
X#define SYSCTL_VEVENT_VDDABO_NMI                                                                              0x00000200
N#define SYSCTL_VEVENT_VDDABO_RST                                              \
N                                0x00000300
X#define SYSCTL_VEVENT_VDDABO_RST                                                                              0x00000300
N#define SYSCTL_VEVENT_VDDBO_NONE                                              \
N                                0x00000000
X#define SYSCTL_VEVENT_VDDBO_NONE                                                                              0x00000000
N#define SYSCTL_VEVENT_VDDBO_INT 0x00000001
N#define SYSCTL_VEVENT_VDDBO_NMI 0x00000002
N#define SYSCTL_VEVENT_VDDBO_RST 0x00000003
N
N//*****************************************************************************
N//
N// Values used with the SysCtlVoltageEventStatus() and
N// SysCtlVoltageEventClear() APIs.
N//
N//*****************************************************************************
N#define SYSCTL_VESTAT_VDDBOR    0x00000040
N#define SYSCTL_VESTAT_VDDABOR   0x00000010
N#define SYSCTL_VESTAT_VDDCBOR   0x00000001
N
N//*****************************************************************************
N//
N// Values used with the SysCtlNMIStatus() API.
N//
N//*****************************************************************************
N#define SYSCTL_NMI_MOSCFAIL     0x00010000
N#define SYSCTL_NMI_TAMPER       0x00000200
N#define SYSCTL_NMI_WDT1         0x00000020
N#define SYSCTL_NMI_WDT0         0x00000008
N#define SYSCTL_NMI_POWER        0x00000004
N#define SYSCTL_NMI_EXTERNAL     0x00000001
N
N//*****************************************************************************
N//
N// The defines for the SysCtlClockOutConfig() API.
N//
N//*****************************************************************************
N#define SYSCTL_CLKOUT_EN        0x80000000
N#define SYSCTL_CLKOUT_DIS       0x00000000
N#define SYSCTL_CLKOUT_SYSCLK    0x00000000
N#define SYSCTL_CLKOUT_PIOSC     0x00010000
N#define SYSCTL_CLKOUT_MOSC      0x00020000
N
N//*****************************************************************************
N//
N// The following defines are used with the SysCtlAltClkConfig() function.
N//
N//*****************************************************************************
N#define SYSCTL_ALTCLK_PIOSC     0x00000000
N#define SYSCTL_ALTCLK_PIOSC48   0x00000001
N#define SYSCTL_ALTCLK_LFIOSC    0x00000002
N#define SYSCTL_ALTCLK_HIB       0x00000004
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern uint32_t SysCtlSRAMSizeGet(void);
Nextern uint32_t SysCtlFlashSizeGet(void);
Nextern uint32_t SysCtlFlashSectorSizeGet(void);
Nextern bool SysCtlPeripheralPresent(uint32_t ui32Peripheral);
Xextern _Bool SysCtlPeripheralPresent(uint32_t ui32Peripheral);
Nextern bool SysCtlPeripheralReady(uint32_t ui32Peripheral);
Xextern _Bool SysCtlPeripheralReady(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralPowerOn(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralPowerOff(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralReset(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralSleepEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralSleepDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDeepSleepEnable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralDeepSleepDisable(uint32_t ui32Peripheral);
Nextern void SysCtlPeripheralClockGating(bool bEnable);
Xextern void SysCtlPeripheralClockGating(_Bool bEnable);
Nextern void SysCtlIntRegister(void (*pfnHandler)(void));
Nextern void SysCtlIntUnregister(void);
Nextern void SysCtlIntEnable(uint32_t ui32Ints);
Nextern void SysCtlIntDisable(uint32_t ui32Ints);
Nextern void SysCtlIntClear(uint32_t ui32Ints);
Nextern uint32_t SysCtlIntStatus(bool bMasked);
Xextern uint32_t SysCtlIntStatus(_Bool bMasked);
Nextern void SysCtlLDOSleepSet(uint32_t ui32Voltage);
Nextern uint32_t SysCtlLDOSleepGet(void);
Nextern void SysCtlLDODeepSleepSet(uint32_t ui32Voltage);
Nextern uint32_t SysCtlLDODeepSleepGet(void);
Nextern void SysCtlSleepPowerSet(uint32_t ui32Config);
Nextern void SysCtlDeepSleepPowerSet(uint32_t ui32Config);
Nextern void SysCtlLDOConfigSet(uint32_t ui32Config);
Nextern void SysCtlReset(void);
Nextern void SysCtlSleep(void);
Nextern void SysCtlDeepSleep(void);
Nextern uint32_t SysCtlResetCauseGet(void);
Nextern void SysCtlResetCauseClear(uint32_t ui32Causes);
Nextern void SysCtlBrownOutConfigSet(uint32_t ui32Config,
N                                    uint32_t ui32Delay);
Nextern void SysCtlDelay(uint32_t ui32Count);
Nextern void SysCtlMOSCConfigSet(uint32_t ui32Config);
Nextern uint32_t SysCtlPIOSCCalibrate(uint32_t ui32Type);
Nextern void SysCtlClockSet(uint32_t ui32Config);
Nextern uint32_t SysCtlClockGet(void);
Nextern void SysCtlDeepSleepClockSet(uint32_t ui32Config);
Nextern void SysCtlDeepSleepClockConfigSet(uint32_t ui32Div,
N                                          uint32_t ui32Config);
Nextern void SysCtlPWMClockSet(uint32_t ui32Config);
Nextern uint32_t SysCtlPWMClockGet(void);
Nextern void SysCtlADCSpeedSet(uint32_t ui32Speed);
Nextern uint32_t SysCtlADCSpeedGet(void);
Nextern void SysCtlIOSCVerificationSet(bool bEnable);
Xextern void SysCtlIOSCVerificationSet(_Bool bEnable);
Nextern void SysCtlMOSCVerificationSet(bool bEnable);
Xextern void SysCtlMOSCVerificationSet(_Bool bEnable);
Nextern void SysCtlPLLVerificationSet(bool bEnable);
Xextern void SysCtlPLLVerificationSet(_Bool bEnable);
Nextern void SysCtlClkVerificationClear(void);
Nextern void SysCtlGPIOAHBEnable(uint32_t ui32GPIOPeripheral);
Nextern void SysCtlGPIOAHBDisable(uint32_t ui32GPIOPeripheral);
Nextern void SysCtlUSBPLLEnable(void);
Nextern void SysCtlUSBPLLDisable(void);
Nextern uint32_t SysCtlClockFreqSet(uint32_t ui32Config,
N                                   uint32_t ui32SysClock);
Nextern void SysCtlLPCLowPowerConfigSet(uint32_t ui32Config);
Nextern uint32_t SysCtlLPCLowPowerStatusGet(void);
Nextern void SysCtlResetBehaviorSet(uint32_t ui32Behavior);
Nextern uint32_t SysCtlResetBehaviorGet(void);
Nextern void SysCtlClockOutConfig(uint32_t ui32Config, uint32_t ui32Div);
Nextern void SysCtlAltClkConfig(uint32_t ui32Config);
Nextern uint32_t SysCtlNMIStatus(void);
Nextern void SysCtlNMIClear(uint32_t ui32Status);
Nextern void SysCtlVoltageEventConfig(uint32_t ui32Config);
Nextern uint32_t SysCtlVoltageEventStatus(void);
Nextern void SysCtlVoltageEventClear(uint32_t ui32Status);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_SYSCTL_H__
L 41 ".\startup\common_head.h" 2
N#include "pin_map.h"
L 1 ".\driverlib\pin_map.h" 1
N//*****************************************************************************
N//
N// pin_map.h - Mapping of peripherals to pins for all parts.
N//
N// Copyright (c) 2007-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_PIN_MAP_H__
N#define __DRIVERLIB_PIN_MAP_H__
N
N//*****************************************************************************
N//
N// TM4C1230C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230C3PM
N
N//*****************************************************************************
N//
N// TM4C1230D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230D5PM
N
N//*****************************************************************************
N//
N// TM4C1230E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230E6PM
N
N//*****************************************************************************
N//
N// TM4C1230H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1230H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1230H6PM
N
N//*****************************************************************************
N//
N// TM4C1231C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231C3PM
N
N//*****************************************************************************
N//
N// TM4C1231D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231D5PM
N
N//*****************************************************************************
N//
N// TM4C1231D5PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231D5PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1231D5PZ
N
N//*****************************************************************************
N//
N// TM4C1231E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231E6PM
N
N//*****************************************************************************
N//
N// TM4C1231E6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231E6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1231E6PZ
N
N//*****************************************************************************
N//
N// TM4C1231H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1231H6PM
N
N//*****************************************************************************
N//
N// TM4C1231H6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231H6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1231H6PZ
N
N//*****************************************************************************
N//
N// TM4C1232C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232C3PM
N
N//*****************************************************************************
N//
N// TM4C1232D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232D5PM
N
N//*****************************************************************************
N//
N// TM4C1232E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232E6PM
N
N//*****************************************************************************
N//
N// TM4C1232H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1232H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C1232H6PM
N
N//*****************************************************************************
N//
N// TM4C1233C3PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233C3PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233C3PM
N
N//*****************************************************************************
N//
N// TM4C1233D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233D5PM
N
N//*****************************************************************************
N//
N// TM4C1233D5PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233D5PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1233D5PZ
N
N//*****************************************************************************
N//
N// TM4C1233E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233E6PM
N
N//*****************************************************************************
N//
N// TM4C1233E6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233E6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1233E6PZ
N
N//*****************************************************************************
N//
N// TM4C1233H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C1233H6PM
N
N//*****************************************************************************
N//
N// TM4C1233H6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233H6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1233H6PZ
N
N//*****************************************************************************
N//
N// TM4C1236D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1236D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C1236D5PM
N
N//*****************************************************************************
N//
N// TM4C1236E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1236E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C1236E6PM
N
N//*****************************************************************************
N//
N// TM4C1236H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1236H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C1236H6PM
N
N//*****************************************************************************
N//
N// TM4C1237D5PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237D5PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C1237D5PM
N
N//*****************************************************************************
N//
N// TM4C1237D5PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237D5PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1237D5PZ
N
N//*****************************************************************************
N//
N// TM4C1237E6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237E6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C1237E6PM
N
N//*****************************************************************************
N//
N// TM4C1237E6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237E6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1237E6PZ
N
N//*****************************************************************************
N//
N// TM4C1237H6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237H6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C1237H6PM
N
N//*****************************************************************************
N//
N// TM4C1237H6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237H6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
N#endif // PART_TM4C1237H6PZ
N
N//*****************************************************************************
N//
N// TM4C123AE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123AE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C123AE6PM
N
N//*****************************************************************************
N//
N// TM4C123AH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123AH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
N#endif // PART_TM4C123AH6PM
N
N//*****************************************************************************
N//
N// TM4C123BE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C123BE6PM
N
N//*****************************************************************************
N//
N// TM4C123BE6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BE6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123BE6PZ
N
N//*****************************************************************************
N//
N// TM4C123BH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S
N#endif // PART_TM4C123BH6PM
N
N//*****************************************************************************
N//
N// TM4C123BH6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123BH6PZ
N
N//*****************************************************************************
N//
N// TM4C123FE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123FE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C123FE6PM
N
N//*****************************************************************************
N//
N// TM4C123FH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123FH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
N#endif // PART_TM4C123FH6PM
N
N//*****************************************************************************
N//
N// TM4C123GE6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GE6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C123GE6PM
N
N//*****************************************************************************
N//
N// TM4C123GE6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GE6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123GE6PZ
N
N//*****************************************************************************
N//
N// TM4C123GH6PM Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6PM
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S
N#endif // PART_TM4C123GH6PM
N
N//*****************************************************************************
N//
N// TM4C123GH6PZ Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6PZ
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
N#endif // PART_TM4C123GH6PZ
N
N//*****************************************************************************
N//
N// TM4C1231H6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1231H6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C1231H6PGE
N
N//*****************************************************************************
N//
N// TM4C1233H6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1233H6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C1233H6PGE
N
N//*****************************************************************************
N//
N// TM4C1237H6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1237H6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S
S#define GPIO_PA1_U0TX           0x00000401
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE7_U1RI           0x00041C01
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S
S#define GPIO_PK2_SSI3RX         0x00090802
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C1237H6PGE
N
N//*****************************************************************************
N//
N// TM4C123BH6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C123BH6PGE
N
N//*****************************************************************************
N//
N// TM4C123BH6ZRB Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123BH6ZRB
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
S#define GPIO_PP3_M0PWM3         0x000D0C01
S#define GPIO_PP3_T5CCP1         0x000D0C07
S
S#define GPIO_PP4_M0PWM4         0x000D1001
S#define GPIO_PP4_WT0CCP0        0x000D1007
S
S#define GPIO_PP5_M0PWM5         0x000D1401
S#define GPIO_PP5_WT0CCP1        0x000D1407
S
S#define GPIO_PP6_M0PWM6         0x000D1801
S#define GPIO_PP6_WT1CCP0        0x000D1807
S
S#define GPIO_PP7_M0PWM7         0x000D1C01
S#define GPIO_PP7_WT1CCP1        0x000D1C07
S
S#define GPIO_PQ0_M1PWM0         0x000E0001
S#define GPIO_PQ0_WT2CCP0        0x000E0007
S
S#define GPIO_PQ1_M1PWM1         0x000E0401
S#define GPIO_PQ1_WT2CCP1        0x000E0407
S
S#define GPIO_PQ2_M1PWM2         0x000E0801
S#define GPIO_PQ2_WT3CCP0        0x000E0807
S
S#define GPIO_PQ3_M1PWM3         0x000E0C01
S#define GPIO_PQ3_WT3CCP1        0x000E0C07
S
S#define GPIO_PQ4_M1PWM4         0x000E1001
S#define GPIO_PQ4_WT4CCP0        0x000E1007
S
S#define GPIO_PQ5_M1PWM5         0x000E1401
S#define GPIO_PQ5_WT4CCP1        0x000E1407
S
S#define GPIO_PQ6_M1PWM6         0x000E1801
S#define GPIO_PQ6_WT5CCP0        0x000E1807
S
S#define GPIO_PQ7_M1PWM7         0x000E1C01
S#define GPIO_PQ7_WT5CCP1        0x000E1C07
S
N#endif // PART_TM4C123BH6ZRB
N
N//*****************************************************************************
N//
N// TM4C123GH6PGE Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6PGE
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
N#endif // PART_TM4C123GH6PGE
N
N//*****************************************************************************
N//
N// TM4C123GH6ZRB Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C123GH6ZRB
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_CAN1RX         0x00000008
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_CAN1TX         0x00000408
S
S#define GPIO_PA2_SSI0CLK        0x00000802
S
S#define GPIO_PA3_SSI0FSS        0x00000C02
S
S#define GPIO_PA4_SSI0RX         0x00001002
S
S#define GPIO_PA5_SSI0TX         0x00001402
S
S#define GPIO_PA6_I2C1SCL        0x00001803
S#define GPIO_PA6_M1PWM2         0x00001805
S
S#define GPIO_PA7_I2C1SDA        0x00001C03
S#define GPIO_PA7_M1PWM3         0x00001C05
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_T2CCP0         0x00010007
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_T2CCP1         0x00010407
S
S#define GPIO_PB2_I2C0SCL        0x00010803
S#define GPIO_PB2_T3CCP0         0x00010807
S
S#define GPIO_PB3_I2C0SDA        0x00010C03
S#define GPIO_PB3_T3CCP1         0x00010C07
S
S#define GPIO_PB4_SSI2CLK        0x00011002
S#define GPIO_PB4_M0PWM2         0x00011004
S#define GPIO_PB4_T1CCP0         0x00011007
S#define GPIO_PB4_CAN0RX         0x00011008
S
S#define GPIO_PB5_SSI2FSS        0x00011402
S#define GPIO_PB5_M0PWM3         0x00011404
S#define GPIO_PB5_T1CCP1         0x00011407
S#define GPIO_PB5_CAN0TX         0x00011408
S
S#define GPIO_PB6_SSI2RX         0x00011802
S#define GPIO_PB6_I2C5SCL        0x00011803
S#define GPIO_PB6_M0PWM0         0x00011804
S#define GPIO_PB6_T0CCP0         0x00011807
S
S#define GPIO_PB7_SSI2TX         0x00011C02
S#define GPIO_PB7_I2C5SDA        0x00011C03
S#define GPIO_PB7_M0PWM1         0x00011C04
S#define GPIO_PB7_T0CCP1         0x00011C07
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S#define GPIO_PC0_T4CCP0         0x00020007
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S#define GPIO_PC1_T4CCP1         0x00020407
S
S#define GPIO_PC2_TDI            0x00020801
S#define GPIO_PC2_T5CCP0         0x00020807
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S#define GPIO_PC3_T5CCP1         0x00020C07
S
S#define GPIO_PC4_U4RX           0x00021001
S#define GPIO_PC4_U1RX           0x00021002
S#define GPIO_PC4_M0PWM6         0x00021004
S#define GPIO_PC4_IDX1           0x00021006
S#define GPIO_PC4_WT0CCP0        0x00021007
S#define GPIO_PC4_U1RTS          0x00021008
S
S#define GPIO_PC5_U4TX           0x00021401
S#define GPIO_PC5_U1TX           0x00021402
S#define GPIO_PC5_M0PWM7         0x00021404
S#define GPIO_PC5_PHA1           0x00021406
S#define GPIO_PC5_WT0CCP1        0x00021407
S#define GPIO_PC5_U1CTS          0x00021408
S
S#define GPIO_PC6_U3RX           0x00021801
S#define GPIO_PC6_PHB1           0x00021806
S#define GPIO_PC6_WT1CCP0        0x00021807
S#define GPIO_PC6_USB0EPEN       0x00021808
S
S#define GPIO_PC7_U3TX           0x00021C01
S#define GPIO_PC7_WT1CCP1        0x00021C07
S#define GPIO_PC7_USB0PFLT       0x00021C08
S
S#define GPIO_PD0_SSI3CLK        0x00030001
S#define GPIO_PD0_SSI1CLK        0x00030002
S#define GPIO_PD0_I2C3SCL        0x00030003
S#define GPIO_PD0_M0PWM6         0x00030004
S#define GPIO_PD0_M1PWM0         0x00030005
S#define GPIO_PD0_WT2CCP0        0x00030007
S
S#define GPIO_PD1_SSI3FSS        0x00030401
S#define GPIO_PD1_SSI1FSS        0x00030402
S#define GPIO_PD1_I2C3SDA        0x00030403
S#define GPIO_PD1_M0PWM7         0x00030404
S#define GPIO_PD1_M1PWM1         0x00030405
S#define GPIO_PD1_WT2CCP1        0x00030407
S
S#define GPIO_PD2_SSI3RX         0x00030801
S#define GPIO_PD2_SSI1RX         0x00030802
S#define GPIO_PD2_M0FAULT0       0x00030804
S#define GPIO_PD2_WT3CCP0        0x00030807
S#define GPIO_PD2_USB0EPEN       0x00030808
S
S#define GPIO_PD3_SSI3TX         0x00030C01
S#define GPIO_PD3_SSI1TX         0x00030C02
S#define GPIO_PD3_IDX0           0x00030C06
S#define GPIO_PD3_WT3CCP1        0x00030C07
S#define GPIO_PD3_USB0PFLT       0x00030C08
S
S#define GPIO_PD4_U6RX           0x00031001
S#define GPIO_PD4_WT4CCP0        0x00031007
S
S#define GPIO_PD5_U6TX           0x00031401
S#define GPIO_PD5_WT4CCP1        0x00031407
S
S#define GPIO_PD6_U2RX           0x00031801
S#define GPIO_PD6_M0FAULT0       0x00031804
S#define GPIO_PD6_PHA0           0x00031806
S#define GPIO_PD6_WT5CCP0        0x00031807
S
S#define GPIO_PD7_U2TX           0x00031C01
S#define GPIO_PD7_M0FAULT1       0x00031C04
S#define GPIO_PD7_PHB0           0x00031C06
S#define GPIO_PD7_WT5CCP1        0x00031C07
S#define GPIO_PD7_NMI            0x00031C08
S
S#define GPIO_PE0_U7RX           0x00040001
S
S#define GPIO_PE1_U7TX           0x00040401
S
S#define GPIO_PE4_U5RX           0x00041001
S#define GPIO_PE4_I2C2SCL        0x00041003
S#define GPIO_PE4_M0PWM4         0x00041004
S#define GPIO_PE4_M1PWM2         0x00041005
S#define GPIO_PE4_CAN0RX         0x00041008
S
S#define GPIO_PE5_U5TX           0x00041401
S#define GPIO_PE5_I2C2SDA        0x00041403
S#define GPIO_PE5_M0PWM5         0x00041404
S#define GPIO_PE5_M1PWM3         0x00041405
S#define GPIO_PE5_CAN0TX         0x00041408
S
S#define GPIO_PE6_CAN1RX         0x00041808
S
S#define GPIO_PE7_U1RI           0x00041C01
S#define GPIO_PE7_CAN1TX         0x00041C08
S
S#define GPIO_PF0_U1RTS          0x00050001
S#define GPIO_PF0_SSI1RX         0x00050002
S#define GPIO_PF0_CAN0RX         0x00050003
S#define GPIO_PF0_M1PWM4         0x00050005
S#define GPIO_PF0_PHA0           0x00050006
S#define GPIO_PF0_T0CCP0         0x00050007
S#define GPIO_PF0_NMI            0x00050008
S#define GPIO_PF0_C0O            0x00050009
S#define GPIO_PF0_TRD2           0x0005000E
S
S#define GPIO_PF1_U1CTS          0x00050401
S#define GPIO_PF1_SSI1TX         0x00050402
S#define GPIO_PF1_M1PWM5         0x00050405
S#define GPIO_PF1_PHB0           0x00050406
S#define GPIO_PF1_T0CCP1         0x00050407
S#define GPIO_PF1_C1O            0x00050409
S#define GPIO_PF1_TRD1           0x0005040E
S
S#define GPIO_PF2_U1DCD          0x00050801
S#define GPIO_PF2_SSI1CLK        0x00050802
S#define GPIO_PF2_M0FAULT0       0x00050804
S#define GPIO_PF2_M1PWM6         0x00050805
S#define GPIO_PF2_T1CCP0         0x00050807
S#define GPIO_PF2_C2O            0x00050809
S#define GPIO_PF2_TRD0           0x0005080E
S
S#define GPIO_PF3_U1DSR          0x00050C01
S#define GPIO_PF3_SSI1FSS        0x00050C02
S#define GPIO_PF3_CAN0TX         0x00050C03
S#define GPIO_PF3_M0FAULT1       0x00050C04
S#define GPIO_PF3_M1PWM7         0x00050C05
S#define GPIO_PF3_T1CCP1         0x00050C07
S#define GPIO_PF3_TRCLK          0x00050C0E
S
S#define GPIO_PF4_U1DTR          0x00051001
S#define GPIO_PF4_M0FAULT2       0x00051004
S#define GPIO_PF4_M1FAULT0       0x00051005
S#define GPIO_PF4_IDX0           0x00051006
S#define GPIO_PF4_T2CCP0         0x00051007
S#define GPIO_PF4_USB0EPEN       0x00051008
S#define GPIO_PF4_TRD3           0x0005100E
S
S#define GPIO_PF5_M0FAULT3       0x00051404
S#define GPIO_PF5_T2CCP1         0x00051407
S#define GPIO_PF5_USB0PFLT       0x00051408
S
S#define GPIO_PF6_I2C2SCL        0x00051803
S#define GPIO_PF6_T3CCP0         0x00051807
S
S#define GPIO_PF7_I2C2SDA        0x00051C03
S#define GPIO_PF7_M1FAULT0       0x00051C05
S#define GPIO_PF7_T3CCP1         0x00051C07
S
S#define GPIO_PG0_I2C3SCL        0x00060003
S#define GPIO_PG0_M1FAULT1       0x00060005
S#define GPIO_PG0_PHA1           0x00060006
S#define GPIO_PG0_T4CCP0         0x00060007
S
S#define GPIO_PG1_I2C3SDA        0x00060403
S#define GPIO_PG1_M1FAULT2       0x00060405
S#define GPIO_PG1_PHB1           0x00060406
S#define GPIO_PG1_T4CCP1         0x00060407
S
S#define GPIO_PG2_I2C4SCL        0x00060803
S#define GPIO_PG2_M0FAULT1       0x00060804
S#define GPIO_PG2_M1PWM0         0x00060805
S#define GPIO_PG2_T5CCP0         0x00060807
S
S#define GPIO_PG3_I2C4SDA        0x00060C03
S#define GPIO_PG3_M0FAULT2       0x00060C04
S#define GPIO_PG3_M1PWM1         0x00060C05
S#define GPIO_PG3_PHA1           0x00060C06
S#define GPIO_PG3_T5CCP1         0x00060C07
S
S#define GPIO_PG4_U2RX           0x00061001
S#define GPIO_PG4_I2C1SCL        0x00061003
S#define GPIO_PG4_M0PWM4         0x00061004
S#define GPIO_PG4_M1PWM2         0x00061005
S#define GPIO_PG4_PHB1           0x00061006
S#define GPIO_PG4_WT0CCP0        0x00061007
S#define GPIO_PG4_USB0EPEN       0x00061008
S
S#define GPIO_PG5_U2TX           0x00061401
S#define GPIO_PG5_I2C1SDA        0x00061403
S#define GPIO_PG5_M0PWM5         0x00061404
S#define GPIO_PG5_M1PWM3         0x00061405
S#define GPIO_PG5_IDX1           0x00061406
S#define GPIO_PG5_WT0CCP1        0x00061407
S#define GPIO_PG5_USB0PFLT       0x00061408
S
S#define GPIO_PG6_I2C5SCL        0x00061803
S#define GPIO_PG6_M0PWM6         0x00061804
S#define GPIO_PG6_WT1CCP0        0x00061807
S
S#define GPIO_PG7_I2C5SDA        0x00061C03
S#define GPIO_PG7_M0PWM7         0x00061C04
S#define GPIO_PG7_IDX1           0x00061C05
S#define GPIO_PG7_WT1CCP1        0x00061C07
S
S#define GPIO_PH0_SSI3CLK        0x00070002
S#define GPIO_PH0_M0PWM0         0x00070004
S#define GPIO_PH0_M0FAULT0       0x00070006
S#define GPIO_PH0_WT2CCP0        0x00070007
S
S#define GPIO_PH1_SSI3FSS        0x00070402
S#define GPIO_PH1_M0PWM1         0x00070404
S#define GPIO_PH1_IDX0           0x00070405
S#define GPIO_PH1_M0FAULT1       0x00070406
S#define GPIO_PH1_WT2CCP1        0x00070407
S
S#define GPIO_PH2_SSI3RX         0x00070802
S#define GPIO_PH2_M0PWM2         0x00070804
S#define GPIO_PH2_M0FAULT2       0x00070806
S#define GPIO_PH2_WT5CCP0        0x00070807
S
S#define GPIO_PH3_SSI3TX         0x00070C02
S#define GPIO_PH3_M0PWM3         0x00070C04
S#define GPIO_PH3_M0FAULT3       0x00070C06
S#define GPIO_PH3_WT5CCP1        0x00070C07
S
S#define GPIO_PH4_SSI2CLK        0x00071002
S#define GPIO_PH4_M0PWM4         0x00071004
S#define GPIO_PH4_PHA0           0x00071005
S#define GPIO_PH4_WT3CCP0        0x00071007
S
S#define GPIO_PH5_SSI2FSS        0x00071402
S#define GPIO_PH5_M0PWM5         0x00071404
S#define GPIO_PH5_PHB0           0x00071405
S#define GPIO_PH5_WT3CCP1        0x00071407
S
S#define GPIO_PH6_SSI2RX         0x00071802
S#define GPIO_PH6_M0PWM6         0x00071804
S#define GPIO_PH6_WT4CCP0        0x00071807
S
S#define GPIO_PH7_SSI2TX         0x00071C02
S#define GPIO_PH7_M0PWM7         0x00071C04
S#define GPIO_PH7_WT4CCP1        0x00071C07
S
S#define GPIO_PJ0_U4RX           0x00080001
S#define GPIO_PJ0_T1CCP0         0x00080007
S
S#define GPIO_PJ1_U4TX           0x00080401
S#define GPIO_PJ1_T1CCP1         0x00080407
S
S#define GPIO_PJ2_U5RX           0x00080801
S#define GPIO_PJ2_IDX0           0x00080805
S#define GPIO_PJ2_T2CCP0         0x00080807
S
S#define GPIO_PJ3_U5TX           0x00080C01
S#define GPIO_PJ3_T2CCP1         0x00080C07
S
S#define GPIO_PJ4_U6RX           0x00081001
S#define GPIO_PJ4_T3CCP0         0x00081007
S
S#define GPIO_PJ5_U6TX           0x00081401
S#define GPIO_PJ5_T3CCP1         0x00081407
S
S#define GPIO_PK0_SSI3CLK        0x00090002
S#define GPIO_PK0_M1FAULT0       0x00090006
S
S#define GPIO_PK1_SSI3FSS        0x00090402
S#define GPIO_PK1_M1FAULT1       0x00090406
S
S#define GPIO_PK2_SSI3RX         0x00090802
S#define GPIO_PK2_M1FAULT2       0x00090806
S
S#define GPIO_PK3_SSI3TX         0x00090C02
S#define GPIO_PK3_M1FAULT3       0x00090C06
S
S#define GPIO_PK4_U7RX           0x00091001
S#define GPIO_PK4_M0FAULT0       0x00091006
S#define GPIO_PK4_RTCCLK         0x00091007
S#define GPIO_PK4_C0O            0x00091008
S
S#define GPIO_PK5_U7TX           0x00091401
S#define GPIO_PK5_M0FAULT1       0x00091406
S#define GPIO_PK5_C1O            0x00091408
S
S#define GPIO_PK6_M0FAULT2       0x00091806
S#define GPIO_PK6_WT1CCP0        0x00091807
S#define GPIO_PK6_C2O            0x00091808
S
S#define GPIO_PK7_M0FAULT3       0x00091C06
S#define GPIO_PK7_WT1CCP1        0x00091C07
S
S#define GPIO_PL0_T0CCP0         0x000A0007
S#define GPIO_PL0_WT0CCP0        0x000A0008
S
S#define GPIO_PL1_T0CCP1         0x000A0407
S#define GPIO_PL1_WT0CCP1        0x000A0408
S
S#define GPIO_PL2_T1CCP0         0x000A0807
S#define GPIO_PL2_WT1CCP0        0x000A0808
S
S#define GPIO_PL3_T1CCP1         0x000A0C07
S#define GPIO_PL3_WT1CCP1        0x000A0C08
S
S#define GPIO_PL4_T2CCP0         0x000A1007
S#define GPIO_PL4_WT2CCP0        0x000A1008
S
S#define GPIO_PL5_T2CCP1         0x000A1407
S#define GPIO_PL5_WT2CCP1        0x000A1408
S
S#define GPIO_PL6_T3CCP0         0x000A1807
S#define GPIO_PL6_WT3CCP0        0x000A1808
S
S#define GPIO_PL7_T3CCP1         0x000A1C07
S#define GPIO_PL7_WT3CCP1        0x000A1C08
S
S#define GPIO_PM0_T4CCP0         0x000B0007
S#define GPIO_PM0_WT4CCP0        0x000B0008
S
S#define GPIO_PM1_T4CCP1         0x000B0407
S#define GPIO_PM1_WT4CCP1        0x000B0408
S
S#define GPIO_PM2_T5CCP0         0x000B0807
S#define GPIO_PM2_WT5CCP0        0x000B0808
S
S#define GPIO_PM3_T5CCP1         0x000B0C07
S#define GPIO_PM3_WT5CCP1        0x000B0C08
S
S#define GPIO_PM6_M0PWM4         0x000B1802
S#define GPIO_PM6_WT0CCP0        0x000B1807
S
S#define GPIO_PM7_M0PWM5         0x000B1C02
S#define GPIO_PM7_WT0CCP1        0x000B1C07
S
S#define GPIO_PN0_CAN0RX         0x000C0001
S
S#define GPIO_PN1_CAN0TX         0x000C0401
S
S#define GPIO_PN2_M0PWM6         0x000C0802
S#define GPIO_PN2_WT2CCP0        0x000C0807
S
S#define GPIO_PN3_M0PWM7         0x000C0C02
S#define GPIO_PN3_WT2CCP1        0x000C0C07
S
S#define GPIO_PN4_M1PWM4         0x000C1002
S#define GPIO_PN4_WT3CCP0        0x000C1007
S
S#define GPIO_PN5_M1PWM5         0x000C1402
S#define GPIO_PN5_WT3CCP1        0x000C1407
S
S#define GPIO_PN6_M1PWM6         0x000C1802
S#define GPIO_PN6_WT4CCP0        0x000C1807
S
S#define GPIO_PN7_M1PWM7         0x000C1C02
S#define GPIO_PN7_WT4CCP1        0x000C1C07
S
S#define GPIO_PP0_M0PWM0         0x000D0001
S#define GPIO_PP0_T4CCP0         0x000D0007
S
S#define GPIO_PP1_M0PWM1         0x000D0401
S#define GPIO_PP1_T4CCP1         0x000D0407
S
S#define GPIO_PP2_M0PWM2         0x000D0801
S#define GPIO_PP2_T5CCP0         0x000D0807
S
S#define GPIO_PP3_M0PWM3         0x000D0C01
S#define GPIO_PP3_T5CCP1         0x000D0C07
S
S#define GPIO_PP4_M0PWM4         0x000D1001
S#define GPIO_PP4_WT0CCP0        0x000D1007
S
S#define GPIO_PP5_M0PWM5         0x000D1401
S#define GPIO_PP5_WT0CCP1        0x000D1407
S
S#define GPIO_PP6_M0PWM6         0x000D1801
S#define GPIO_PP6_WT1CCP0        0x000D1807
S
S#define GPIO_PP7_M0PWM7         0x000D1C01
S#define GPIO_PP7_WT1CCP1        0x000D1C07
S
S#define GPIO_PQ0_M1PWM0         0x000E0001
S#define GPIO_PQ0_WT2CCP0        0x000E0007
S
S#define GPIO_PQ1_M1PWM1         0x000E0401
S#define GPIO_PQ1_WT2CCP1        0x000E0407
S
S#define GPIO_PQ2_M1PWM2         0x000E0801
S#define GPIO_PQ2_WT3CCP0        0x000E0807
S
S#define GPIO_PQ3_M1PWM3         0x000E0C01
S#define GPIO_PQ3_WT3CCP1        0x000E0C07
S
S#define GPIO_PQ4_M1PWM4         0x000E1001
S#define GPIO_PQ4_WT4CCP0        0x000E1007
S
S#define GPIO_PQ5_M1PWM5         0x000E1401
S#define GPIO_PQ5_WT4CCP1        0x000E1407
S
S#define GPIO_PQ6_M1PWM6         0x000E1801
S#define GPIO_PQ6_WT5CCP0        0x000E1807
S
S#define GPIO_PQ7_M1PWM7         0x000E1C01
S#define GPIO_PQ7_WT5CCP1        0x000E1C07
S
N#endif // PART_TM4C123GH6ZRB
N
N//*****************************************************************************
N//
N// TM4C1290NCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1290NCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
N#endif // PART_TM4C1290NCPDT
N
N//*****************************************************************************
N//
N// TM4C1290NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1290NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S#define GPIO_PB6_PS2CLK3        0x00011804
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S#define GPIO_PB7_PS2DAT3        0x00011C04
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C1290NCZAD
N
N//*****************************************************************************
N//
N// TM4C1292NCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1292NCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
N#endif // PART_TM4C1292NCPDT
N
N//*****************************************************************************
N//
N// TM4C1292NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1292NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S#define GPIO_PB6_PS2CLK3        0x00011804
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S#define GPIO_PB7_PS2DAT3        0x00011C04
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C1292NCZAD
N
N//*****************************************************************************
N//
N// TM4C1294NCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1294NCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C1294NCPDT
N
N//*****************************************************************************
N//
N// TM4C1294NCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C1294NCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S#define GPIO_PB6_PS2CLK3        0x00011804
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S#define GPIO_PB7_PS2DAT3        0x00011C04
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C1294NCZAD
N
N//*****************************************************************************
N//
N// TM4C129CNCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129CNCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
N#endif // PART_TM4C129CNCPDT
N
N//*****************************************************************************
N//
N// TM4C129CNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129CNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S#define GPIO_PB6_PS2CLK3        0x00011804
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S#define GPIO_PB7_PS2DAT3        0x00011C04
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C129CNCZAD
N
N//*****************************************************************************
N//
N// TM4C129DNCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129DNCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
N#endif // PART_TM4C129DNCPDT
N
N//*****************************************************************************
N//
N// TM4C129DNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129DNCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EN0RXCK        0x0000180E
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_EN0MDC         0x00010805
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_EN0MDIO        0x00010C05
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S#define GPIO_PB6_PS2CLK3        0x00011804
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S#define GPIO_PB7_PS2DAT3        0x00011C04
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_EN0MDC         0x00050805
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_EN0MDIO        0x00050C05
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_EN0TXCK        0x0006080E
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_EN0TXEN        0x00060C0E
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_EN0TXD0        0x0006100E
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_EN0TXD1        0x0006140E
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_EN0RXER        0x0006180E
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_EN0RXDV        0x00061C0E
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EN0INTRN       0x00091007
S#define GPIO_PK4_EN0RXD3        0x0009100E
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EN0RXD2        0x0009140E
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EN0TXD2        0x0009180E
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EN0TXD3        0x00091C0E
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S#define GPIO_PM4_EN0RREF_CLK    0x000B100E
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S#define GPIO_PM6_EN0CRS         0x000B180E
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S#define GPIO_PM7_EN0COL         0x000B1C0E
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S#define GPIO_PN6_EN0TXER        0x000C180E
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_EN0INTRN       0x000D0007
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S#define GPIO_PQ5_EN0RXD0        0x000E140E
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S#define GPIO_PQ6_EN0RXD1        0x000E180E
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S#define GPIO_PR7_EN0TXEN        0x000F1C0E
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S#define GPIO_PS4_EN0TXD0        0x0010100E
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S#define GPIO_PS5_EN0TXD1        0x0010140E
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S#define GPIO_PS6_EN0RXER        0x0010180E
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S#define GPIO_PS7_EN0RXDV        0x00101C0E
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S#define GPIO_PT0_EN0RXD0        0x0011000E
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S#define GPIO_PT1_EN0RXD1        0x0011040E
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C129DNCZAD
N
N//*****************************************************************************
N//
N// TM4C129ENCPDT Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129ENCPDT
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
N#endif // PART_TM4C129ENCPDT
N
N//*****************************************************************************
N//
N// TM4C129ENCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129ENCZAD
S
S#define GPIO_PA0_U0RX           0x00000001
S#define GPIO_PA0_I2C9SCL        0x00000002
S#define GPIO_PA0_T0CCP0         0x00000003
S#define GPIO_PA0_CAN0RX         0x00000007
S
S#define GPIO_PA1_U0TX           0x00000401
S#define GPIO_PA1_I2C9SDA        0x00000402
S#define GPIO_PA1_T0CCP1         0x00000403
S#define GPIO_PA1_CAN0TX         0x00000407
S
S#define GPIO_PA2_U4RX           0x00000801
S#define GPIO_PA2_I2C8SCL        0x00000802
S#define GPIO_PA2_T1CCP0         0x00000803
S#define GPIO_PA2_SSI0CLK        0x0000080F
S
S#define GPIO_PA3_U4TX           0x00000C01
S#define GPIO_PA3_I2C8SDA        0x00000C02
S#define GPIO_PA3_T1CCP1         0x00000C03
S#define GPIO_PA3_SSI0FSS        0x00000C0F
S
S#define GPIO_PA4_U3RX           0x00001001
S#define GPIO_PA4_T2CCP0         0x00001003
S#define GPIO_PA4_I2C7SCL        0x00001002
S#define GPIO_PA4_SSI0XDAT0      0x0000100F
S
S#define GPIO_PA5_U3TX           0x00001401
S#define GPIO_PA5_T2CCP1         0x00001403
S#define GPIO_PA5_I2C7SDA        0x00001402
S#define GPIO_PA5_SSI0XDAT1      0x0000140F
S
S#define GPIO_PA6_U2RX           0x00001801
S#define GPIO_PA6_I2C6SCL        0x00001802
S#define GPIO_PA6_T3CCP0         0x00001803
S#define GPIO_PA6_USB0EPEN       0x00001805
S#define GPIO_PA6_SSI0XDAT2      0x0000180D
S#define GPIO_PA6_EPI0S8         0x0000180F
S
S#define GPIO_PA7_U2TX           0x00001C01
S#define GPIO_PA7_I2C6SDA        0x00001C02
S#define GPIO_PA7_T3CCP1         0x00001C03
S#define GPIO_PA7_USB0PFLT       0x00001C05
S#define GPIO_PA7_USB0EPEN       0x00001C0B
S#define GPIO_PA7_SSI0XDAT3      0x00001C0D
S#define GPIO_PA7_EPI0S9         0x00001C0F
S
S#define GPIO_PB0_U1RX           0x00010001
S#define GPIO_PB0_I2C5SCL        0x00010002
S#define GPIO_PB0_CAN1RX         0x00010007
S#define GPIO_PB0_T4CCP0         0x00010003
S
S#define GPIO_PB1_U1TX           0x00010401
S#define GPIO_PB1_I2C5SDA        0x00010402
S#define GPIO_PB1_CAN1TX         0x00010407
S#define GPIO_PB1_T4CCP1         0x00010403
S
S#define GPIO_PB2_T5CCP0         0x00010803
S#define GPIO_PB2_I2C0SCL        0x00010802
S#define GPIO_PB2_USB0STP        0x0001080E
S#define GPIO_PB2_EPI0S27        0x0001080F
S
S#define GPIO_PB3_I2C0SDA        0x00010C02
S#define GPIO_PB3_T5CCP1         0x00010C03
S#define GPIO_PB3_USB0CLK        0x00010C0E
S#define GPIO_PB3_EPI0S28        0x00010C0F
S
S#define GPIO_PB4_U0CTS          0x00011001
S#define GPIO_PB4_I2C5SCL        0x00011002
S#define GPIO_PB4_SSI1FSS        0x0001100F
S
S#define GPIO_PB5_U0RTS          0x00011401
S#define GPIO_PB5_I2C5SDA        0x00011402
S#define GPIO_PB5_SSI1CLK        0x0001140F
S
S#define GPIO_PB6_I2C6SCL        0x00011802
S#define GPIO_PB6_T6CCP0         0x00011803
S#define GPIO_PB6_PS2CLK3        0x00011804
S
S#define GPIO_PB7_I2C6SDA        0x00011C02
S#define GPIO_PB7_T6CCP1         0x00011C03
S#define GPIO_PB7_PS2DAT3        0x00011C04
S
S#define GPIO_PC0_TCK            0x00020001
S#define GPIO_PC0_SWCLK          0x00020001
S
S#define GPIO_PC1_TMS            0x00020401
S#define GPIO_PC1_SWDIO          0x00020401
S
S#define GPIO_PC2_TDI            0x00020801
S
S#define GPIO_PC3_SWO            0x00020C01
S#define GPIO_PC3_TDO            0x00020C01
S
S#define GPIO_PC4_U7RX           0x00021001
S#define GPIO_PC4_T7CCP0         0x00021003
S#define GPIO_PC4_EPI0S7         0x0002100F
S
S#define GPIO_PC5_U7TX           0x00021401
S#define GPIO_PC5_T7CCP1         0x00021403
S#define GPIO_PC5_RTCCLK         0x00021407
S#define GPIO_PC5_EPI0S6         0x0002140F
S
S#define GPIO_PC6_U5RX           0x00021801
S#define GPIO_PC6_EPI0S5         0x0002180F
S
S#define GPIO_PC7_U5TX           0x00021C01
S#define GPIO_PC7_EPI0S4         0x00021C0F
S
S#define GPIO_PD0_I2C7SCL        0x00030002
S#define GPIO_PD0_T0CCP0         0x00030003
S#define GPIO_PD0_C0O            0x00030005
S#define GPIO_PD0_SSI2XDAT1      0x0003000F
S
S#define GPIO_PD1_I2C7SDA        0x00030402
S#define GPIO_PD1_T0CCP1         0x00030403
S#define GPIO_PD1_C1O            0x00030405
S#define GPIO_PD1_SSI2XDAT0      0x0003040F
S
S#define GPIO_PD2_I2C8SCL        0x00030802
S#define GPIO_PD2_T1CCP0         0x00030803
S#define GPIO_PD2_C2O            0x00030805
S#define GPIO_PD2_SSI2FSS        0x0003080F
S
S#define GPIO_PD3_I2C8SDA        0x00030C02
S#define GPIO_PD3_T1CCP1         0x00030C03
S#define GPIO_PD3_SSI2CLK        0x00030C0F
S
S#define GPIO_PD4_U2RX           0x00031001
S#define GPIO_PD4_T3CCP0         0x00031003
S#define GPIO_PD4_SSI1XDAT2      0x0003100F
S
S#define GPIO_PD5_U2TX           0x00031401
S#define GPIO_PD5_T3CCP1         0x00031403
S#define GPIO_PD5_SSI1XDAT3      0x0003140F
S
S#define GPIO_PD6_U2RTS          0x00031801
S#define GPIO_PD6_T4CCP0         0x00031803
S#define GPIO_PD6_USB0EPEN       0x00031805
S#define GPIO_PD6_SSI2XDAT3      0x0003180F
S
S#define GPIO_PD7_U2CTS          0x00031C01
S#define GPIO_PD7_T4CCP1         0x00031C03
S#define GPIO_PD7_USB0PFLT       0x00031C05
S#define GPIO_PD7_NMI            0x00031C08
S#define GPIO_PD7_SSI2XDAT2      0x00031C0F
S
S#define GPIO_PE0_U1RTS          0x00040001
S
S#define GPIO_PE1_U1DSR          0x00040401
S
S#define GPIO_PE2_U1DCD          0x00040801
S
S#define GPIO_PE3_U1DTR          0x00040C01
S
S#define GPIO_PE4_U1RI           0x00041001
S#define GPIO_PE4_SSI1XDAT0      0x0004100F
S
S#define GPIO_PE5_SSI1XDAT1      0x0004140F
S
S#define GPIO_PE6_U0CTS          0x00041801
S#define GPIO_PE6_I2C9SCL        0x00041802
S
S#define GPIO_PE7_U0RTS          0x00041C01
S#define GPIO_PE7_I2C9SDA        0x00041C02
S#define GPIO_PE7_NMI            0x00041C08
S
S#define GPIO_PF0_EN0LED0        0x00050005
S#define GPIO_PF0_M0PWM0         0x00050006
S#define GPIO_PF0_SSI3XDAT1      0x0005000E
S#define GPIO_PF0_TRD2           0x0005000F
S
S#define GPIO_PF1_EN0LED2        0x00050405
S#define GPIO_PF1_M0PWM1         0x00050406
S#define GPIO_PF1_SSI3XDAT0      0x0005040E
S#define GPIO_PF1_TRD1           0x0005040F
S
S#define GPIO_PF2_M0PWM2         0x00050806
S#define GPIO_PF2_SSI3FSS        0x0005080E
S#define GPIO_PF2_TRD0           0x0005080F
S
S#define GPIO_PF3_M0PWM3         0x00050C06
S#define GPIO_PF3_SSI3CLK        0x00050C0E
S#define GPIO_PF3_TRCLK          0x00050C0F
S
S#define GPIO_PF4_EN0LED1        0x00051005
S#define GPIO_PF4_M0FAULT0       0x00051006
S#define GPIO_PF4_SSI3XDAT2      0x0005100E
S#define GPIO_PF4_TRD3           0x0005100F
S
S#define GPIO_PF5_SSI3XDAT3      0x0005140E
S
S#define GPIO_PG0_I2C1SCL        0x00060002
S#define GPIO_PG0_EN0PPS         0x00060005
S#define GPIO_PG0_M0PWM4         0x00060006
S#define GPIO_PG0_EPI0S11        0x0006000F
S
S#define GPIO_PG1_I2C1SDA        0x00060402
S#define GPIO_PG1_M0PWM5         0x00060406
S#define GPIO_PG1_EPI0S10        0x0006040F
S
S#define GPIO_PG2_I2C2SCL        0x00060802
S#define GPIO_PG2_SSI2XDAT3      0x0006080F
S
S#define GPIO_PG3_I2C2SDA        0x00060C02
S#define GPIO_PG3_SSI2XDAT2      0x00060C0F
S
S#define GPIO_PG4_U0CTS          0x00061001
S#define GPIO_PG4_I2C3SCL        0x00061002
S#define GPIO_PG4_SSI2XDAT1      0x0006100F
S
S#define GPIO_PG5_U0RTS          0x00061401
S#define GPIO_PG5_I2C3SDA        0x00061402
S#define GPIO_PG5_SSI2XDAT0      0x0006140F
S
S#define GPIO_PG6_I2C4SCL        0x00061802
S#define GPIO_PG6_SSI2FSS        0x0006180F
S
S#define GPIO_PG7_I2C4SDA        0x00061C02
S#define GPIO_PG7_SSI2CLK        0x00061C0F
S
S#define GPIO_PH0_U0RTS          0x00070001
S#define GPIO_PH0_EPI0S0         0x0007000F
S
S#define GPIO_PH1_U0CTS          0x00070401
S#define GPIO_PH1_EPI0S1         0x0007040F
S
S#define GPIO_PH2_U0DCD          0x00070801
S#define GPIO_PH2_EPI0S2         0x0007080F
S
S#define GPIO_PH3_U0DSR          0x00070C01
S#define GPIO_PH3_EPI0S3         0x00070C0F
S
S#define GPIO_PH4_U0DTR          0x00071001
S
S#define GPIO_PH5_U0RI           0x00071401
S#define GPIO_PH5_EN0PPS         0x00071405
S
S#define GPIO_PH6_U5RX           0x00071801
S#define GPIO_PH6_U7RX           0x00071802
S
S#define GPIO_PH7_U5TX           0x00071C01
S#define GPIO_PH7_U7TX           0x00071C02
S
S#define GPIO_PJ0_U3RX           0x00080001
S#define GPIO_PJ0_EN0PPS         0x00080005
S
S#define GPIO_PJ1_U3TX           0x00080401
S
S#define GPIO_PJ2_U2RTS          0x00080801
S
S#define GPIO_PJ3_U2CTS          0x00080C01
S
S#define GPIO_PJ4_U3RTS          0x00081001
S
S#define GPIO_PJ5_U3CTS          0x00081401
S
S#define GPIO_PJ6_U4RTS          0x00081801
S
S#define GPIO_PJ7_U4CTS          0x00081C01
S
S#define GPIO_PK0_U4RX           0x00090001
S#define GPIO_PK0_EPI0S0         0x0009000F
S
S#define GPIO_PK1_U4TX           0x00090401
S#define GPIO_PK1_EPI0S1         0x0009040F
S
S#define GPIO_PK2_U4RTS          0x00090801
S#define GPIO_PK2_EPI0S2         0x0009080F
S
S#define GPIO_PK3_U4CTS          0x00090C01
S#define GPIO_PK3_EPI0S3         0x00090C0F
S
S#define GPIO_PK4_I2C3SCL        0x00091002
S#define GPIO_PK4_EN0LED0        0x00091005
S#define GPIO_PK4_M0PWM6         0x00091006
S#define GPIO_PK4_EPI0S32        0x0009100F
S
S#define GPIO_PK5_I2C3SDA        0x00091402
S#define GPIO_PK5_EN0LED2        0x00091405
S#define GPIO_PK5_M0PWM7         0x00091406
S#define GPIO_PK5_EPI0S31        0x0009140F
S
S#define GPIO_PK6_I2C4SCL        0x00091802
S#define GPIO_PK6_EN0LED1        0x00091805
S#define GPIO_PK6_M0FAULT1       0x00091806
S#define GPIO_PK6_EPI0S25        0x0009180F
S
S#define GPIO_PK7_U0RI           0x00091C01
S#define GPIO_PK7_I2C4SDA        0x00091C02
S#define GPIO_PK7_RTCCLK         0x00091C05
S#define GPIO_PK7_M0FAULT2       0x00091C06
S#define GPIO_PK7_EPI0S24        0x00091C0F
S
S#define GPIO_PL0_I2C2SDA        0x000A0002
S#define GPIO_PL0_M0FAULT3       0x000A0006
S#define GPIO_PL0_USB0D0         0x000A000E
S#define GPIO_PL0_EPI0S16        0x000A000F
S
S#define GPIO_PL1_I2C2SCL        0x000A0402
S#define GPIO_PL1_PHA0           0x000A0406
S#define GPIO_PL1_USB0D1         0x000A040E
S#define GPIO_PL1_EPI0S17        0x000A040F
S
S#define GPIO_PL2_C0O            0x000A0805
S#define GPIO_PL2_PHB0           0x000A0806
S#define GPIO_PL2_USB0D2         0x000A080E
S#define GPIO_PL2_EPI0S18        0x000A080F
S
S#define GPIO_PL3_C1O            0x000A0C05
S#define GPIO_PL3_IDX0           0x000A0C06
S#define GPIO_PL3_USB0D3         0x000A0C0E
S#define GPIO_PL3_EPI0S19        0x000A0C0F
S
S#define GPIO_PL4_T0CCP0         0x000A1003
S#define GPIO_PL4_USB0D4         0x000A100E
S#define GPIO_PL4_EPI0S26        0x000A100F
S
S#define GPIO_PL5_T0CCP1         0x000A1403
S#define GPIO_PL5_EPI0S33        0x000A140F
S#define GPIO_PL5_USB0D5         0x000A140E
S
S#define GPIO_PL6_T1CCP0         0x000A1803
S
S#define GPIO_PL7_T1CCP1         0x000A1C03
S
S#define GPIO_PM0_T2CCP0         0x000B0003
S#define GPIO_PM0_EPI0S15        0x000B000F
S
S#define GPIO_PM1_T2CCP1         0x000B0403
S#define GPIO_PM1_EPI0S14        0x000B040F
S
S#define GPIO_PM2_T3CCP0         0x000B0803
S#define GPIO_PM2_EPI0S13        0x000B080F
S
S#define GPIO_PM3_T3CCP1         0x000B0C03
S#define GPIO_PM3_EPI0S12        0x000B0C0F
S
S#define GPIO_PM4_U0CTS          0x000B1001
S#define GPIO_PM4_T4CCP0         0x000B1003
S
S#define GPIO_PM5_U0DCD          0x000B1401
S#define GPIO_PM5_T4CCP1         0x000B1403
S
S#define GPIO_PM6_U0DSR          0x000B1801
S#define GPIO_PM6_T5CCP0         0x000B1803
S
S#define GPIO_PM7_U0RI           0x000B1C01
S#define GPIO_PM7_T5CCP1         0x000B1C03
S
S#define GPIO_PN0_U1RTS          0x000C0001
S
S#define GPIO_PN1_U1CTS          0x000C0401
S
S#define GPIO_PN2_U1DCD          0x000C0801
S#define GPIO_PN2_U2RTS          0x000C0802
S#define GPIO_PN2_EPI0S29        0x000C080F
S
S#define GPIO_PN3_U1DSR          0x000C0C01
S#define GPIO_PN3_U2CTS          0x000C0C02
S#define GPIO_PN3_EPI0S30        0x000C0C0F
S
S#define GPIO_PN4_U1DTR          0x000C1001
S#define GPIO_PN4_U3RTS          0x000C1002
S#define GPIO_PN4_I2C2SDA        0x000C1003
S#define GPIO_PN4_EPI0S34        0x000C100F
S
S#define GPIO_PN5_U1RI           0x000C1401
S#define GPIO_PN5_U3CTS          0x000C1402
S#define GPIO_PN5_I2C2SCL        0x000C1403
S#define GPIO_PN5_EPI0S35        0x000C140F
S
S#define GPIO_PN6_U4RTS          0x000C1802
S
S#define GPIO_PN7_U1RTS          0x000C1C01
S#define GPIO_PN7_U4CTS          0x000C1C02
S
S#define GPIO_PP0_U6RX           0x000D0001
S#define GPIO_PP0_T6CCP0         0x000D0005
S#define GPIO_PP0_SSI3XDAT2      0x000D000F
S
S#define GPIO_PP1_U6TX           0x000D0401
S#define GPIO_PP1_T6CCP1         0x000D0405
S#define GPIO_PP1_SSI3XDAT3      0x000D040F
S
S#define GPIO_PP2_U0DTR          0x000D0801
S#define GPIO_PP2_USB0NXT        0x000D080E
S#define GPIO_PP2_EPI0S29        0x000D080F
S
S#define GPIO_PP3_U1CTS          0x000D0C01
S#define GPIO_PP3_U0DCD          0x000D0C02
S#define GPIO_PP3_RTCCLK         0x000D0C07
S#define GPIO_PP3_USB0DIR        0x000D0C0E
S#define GPIO_PP3_EPI0S30        0x000D0C0F
S
S#define GPIO_PP4_U3RTS          0x000D1001
S#define GPIO_PP4_U0DSR          0x000D1002
S#define GPIO_PP4_USB0D7         0x000D100E
S
S#define GPIO_PP5_U3CTS          0x000D1401
S#define GPIO_PP5_I2C2SCL        0x000D1402
S#define GPIO_PP5_USB0D6         0x000D140E
S
S#define GPIO_PP6_U1DCD          0x000D1801
S#define GPIO_PP6_I2C2SDA        0x000D1802
S
S#define GPIO_PQ0_T6CCP0         0x000E0003
S#define GPIO_PQ0_SSI3CLK        0x000E000E
S#define GPIO_PQ0_EPI0S20        0x000E000F
S
S#define GPIO_PQ1_T6CCP1         0x000E0403
S#define GPIO_PQ1_SSI3FSS        0x000E040E
S#define GPIO_PQ1_EPI0S21        0x000E040F
S
S#define GPIO_PQ2_T7CCP0         0x000E0803
S#define GPIO_PQ2_SSI3XDAT0      0x000E080E
S#define GPIO_PQ2_EPI0S22        0x000E080F
S
S#define GPIO_PQ3_T7CCP1         0x000E0C03
S#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
S#define GPIO_PQ3_EPI0S23        0x000E0C0F
S
S#define GPIO_PQ4_U1RX           0x000E1001
S#define GPIO_PQ4_DIVSCLK        0x000E1007
S
S#define GPIO_PQ5_U1TX           0x000E1401
S
S#define GPIO_PQ6_U1DTR          0x000E1801
S
S#define GPIO_PQ7_U1RI           0x000E1C01
S
S#define GPIO_PR0_U4TX           0x000F0001
S#define GPIO_PR0_I2C1SCL        0x000F0002
S#define GPIO_PR0_M0PWM0         0x000F0006
S
S#define GPIO_PR1_U4RX           0x000F0401
S#define GPIO_PR1_I2C1SDA        0x000F0402
S#define GPIO_PR1_M0PWM1         0x000F0406
S
S#define GPIO_PR2_I2C2SCL        0x000F0802
S#define GPIO_PR2_M0PWM2         0x000F0806
S
S#define GPIO_PR3_I2C2SDA        0x000F0C02
S#define GPIO_PR3_M0PWM3         0x000F0C06
S
S#define GPIO_PR4_I2C3SCL        0x000F1002
S#define GPIO_PR4_T0CCP0         0x000F1003
S#define GPIO_PR4_M0PWM4         0x000F1006
S
S#define GPIO_PR5_U1RX           0x000F1401
S#define GPIO_PR5_I2C3SDA        0x000F1402
S#define GPIO_PR5_T0CCP1         0x000F1403
S#define GPIO_PR5_M0PWM5         0x000F1406
S
S#define GPIO_PR6_U1TX           0x000F1801
S#define GPIO_PR6_I2C4SCL        0x000F1802
S#define GPIO_PR6_T1CCP0         0x000F1803
S#define GPIO_PR6_M0PWM6         0x000F1806
S
S#define GPIO_PR7_I2C4SDA        0x000F1C02
S#define GPIO_PR7_T1CCP1         0x000F1C03
S#define GPIO_PR7_M0PWM7         0x000F1C06
S
S#define GPIO_PS0_T2CCP0         0x00100003
S#define GPIO_PS0_M0FAULT0       0x00100006
S
S#define GPIO_PS1_T2CCP1         0x00100403
S#define GPIO_PS1_M0FAULT1       0x00100406
S
S#define GPIO_PS2_U1DSR          0x00100801
S#define GPIO_PS2_T3CCP0         0x00100803
S#define GPIO_PS2_M0FAULT2       0x00100806
S
S#define GPIO_PS3_T3CCP1         0x00100C03
S#define GPIO_PS3_M0FAULT3       0x00100C06
S
S#define GPIO_PS4_T4CCP0         0x00101003
S#define GPIO_PS4_PHA0           0x00101006
S
S#define GPIO_PS5_T4CCP1         0x00101403
S#define GPIO_PS5_PHB0           0x00101406
S
S#define GPIO_PS6_T5CCP0         0x00101803
S#define GPIO_PS6_IDX0           0x00101806
S
S#define GPIO_PS7_T5CCP1         0x00101C03
S
S#define GPIO_PT0_T6CCP0         0x00110003
S#define GPIO_PT0_CAN0RX         0x00110007
S
S#define GPIO_PT1_T6CCP1         0x00110403
S#define GPIO_PT1_CAN0TX         0x00110407
S
S#define GPIO_PT2_T7CCP0         0x00110803
S#define GPIO_PT2_CAN1RX         0x00110807
S
S#define GPIO_PT3_T7CCP1         0x00110C03
S#define GPIO_PT3_CAN1TX         0x00110C07
S
N#endif // PART_TM4C129ENCZAD
N
N//*****************************************************************************
N//
N// TM4C129XNCZAD Port/Pin Mapping Definitions
N//
N//*****************************************************************************
N#ifdef PART_TM4C129XNCZAD
N
N#define GPIO_PA0_U0RX           0x00000001
N#define GPIO_PA0_I2C9SCL        0x00000002
N#define GPIO_PA0_T0CCP0         0x00000003
N#define GPIO_PA0_FAN1PWM5       0x00000004
N#define GPIO_PA0_KBCOUT08       0x00000005
N#define GPIO_PA0_CAN0RX         0x00000007
N
N#define GPIO_PA1_U0TX           0x00000401
N#define GPIO_PA1_I2C9SDA        0x00000402
N#define GPIO_PA1_T0CCP1         0x00000403
N#define GPIO_PA1_FAN1TACH5      0x00000404
N#define GPIO_PA1_KBCOUT09       0x00000405
N#define GPIO_PA1_CAN0TX         0x00000407
N
N#define GPIO_PA2_U4RX           0x00000801
N#define GPIO_PA2_I2C8SCL        0x00000802
N#define GPIO_PA2_T1CCP0         0x00000803
N#define GPIO_PA2_SSI0CLK        0x0000080F
N
N#define GPIO_PA3_U4TX           0x00000C01
N#define GPIO_PA3_I2C8SDA        0x00000C02
N#define GPIO_PA3_T1CCP1         0x00000C03
N#define GPIO_PA3_SSI0FSS        0x00000C0F
N
N#define GPIO_PA4_U3RX           0x00001001
N#define GPIO_PA4_T2CCP0         0x00001003
N#define GPIO_PA4_I2C7SCL        0x00001002
N#define GPIO_PA4_SSI0XDAT0      0x0000100F
N
N#define GPIO_PA5_U3TX           0x00001401
N#define GPIO_PA5_T2CCP1         0x00001403
N#define GPIO_PA5_I2C7SDA        0x00001402
N#define GPIO_PA5_SSI0XDAT1      0x0000140F
N
N#define GPIO_PA6_U2RX           0x00001801
N#define GPIO_PA6_I2C6SCL        0x00001802
N#define GPIO_PA6_T3CCP0         0x00001803
N#define GPIO_PA6_PS2CLK0        0x00001804
N#define GPIO_PA6_USB0EPEN       0x00001805
N#define GPIO_PA6_SSI0XDAT2      0x0000180D
N#define GPIO_PA6_EN0RXCK        0x0000180E
N#define GPIO_PA6_EPI0S8         0x0000180F
N
N#define GPIO_PA7_U2TX           0x00001C01
N#define GPIO_PA7_I2C6SDA        0x00001C02
N#define GPIO_PA7_T3CCP1         0x00001C03
N#define GPIO_PA7_PS2DAT0        0x00001C04
N#define GPIO_PA7_USB0PFLT       0x00001C05
N#define GPIO_PA7_USB0EPEN       0x00001C0B
N#define GPIO_PA7_SSI0XDAT3      0x00001C0D
N#define GPIO_PA7_EPI0S9         0x00001C0F
N
N#define GPIO_PB0_U1RX           0x00010001
N#define GPIO_PB0_I2C5SCL        0x00010002
N#define GPIO_PB0_PS2CLK1        0x00010004
N#define GPIO_PB0_LPC0COMYRX     0x00010005
N#define GPIO_PB0_CAN1RX         0x00010007
N#define GPIO_PB0_T4CCP0         0x00010003
N
N#define GPIO_PB1_U1TX           0x00010401
N#define GPIO_PB1_I2C5SDA        0x00010402
N#define GPIO_PB1_PS2DAT1        0x00010404
N#define GPIO_PB1_LPC0COMYTX     0x00010405
N#define GPIO_PB1_CAN1TX         0x00010407
N#define GPIO_PB1_T4CCP1         0x00010403
N
N#define GPIO_PB2_T5CCP0         0x00010803
N#define GPIO_PB2_I2C0SCL        0x00010802
N#define GPIO_PB2_PS2CLK2        0x00010804
N#define GPIO_PB2_EN0MDC         0x00010805
N#define GPIO_PB2_LPC0A20        0x0001080D
N#define GPIO_PB2_USB0STP        0x0001080E
N#define GPIO_PB2_EPI0S27        0x0001080F
N
N#define GPIO_PB3_I2C0SDA        0x00010C02
N#define GPIO_PB3_T5CCP1         0x00010C03
N#define GPIO_PB3_PS2DAT2        0x00010C04
N#define GPIO_PB3_EN0MDIO        0x00010C05
N#define GPIO_PB3_LPC0RESET_N    0x00010C0D
N#define GPIO_PB3_USB0CLK        0x00010C0E
N#define GPIO_PB3_EPI0S28        0x00010C0F
N
N#define GPIO_PB4_U0CTS          0x00011001
N#define GPIO_PB4_I2C5SCL        0x00011002
N#define GPIO_PB4_SSI1FSS        0x0001100F
N
N#define GPIO_PB5_U0RTS          0x00011401
N#define GPIO_PB5_I2C5SDA        0x00011402
N#define GPIO_PB5_SSI1CLK        0x0001140F
N
N#define GPIO_PB6_I2C6SCL        0x00011802
N#define GPIO_PB6_T6CCP0         0x00011803
N#define GPIO_PB6_PS2CLK3        0x00011804
N
N#define GPIO_PB7_I2C6SDA        0x00011C02
N#define GPIO_PB7_T6CCP1         0x00011C03
N#define GPIO_PB7_PS2DAT3        0x00011C04
N
N#define GPIO_PC0_TCK            0x00020001
N#define GPIO_PC0_SWCLK          0x00020001
N#define GPIO_PC0_HLED0          0x00020004
N#define GPIO_PC0_KBCOUT00       0x00020005
N
N#define GPIO_PC1_TMS            0x00020401
N#define GPIO_PC1_SWDIO          0x00020401
N#define GPIO_PC1_HLED1          0x00020404
N#define GPIO_PC1_KBCOUT01       0x00020405
N
N#define GPIO_PC2_TDI            0x00020801
N#define GPIO_PC2_HLED2          0x00020804
N#define GPIO_PC2_KBCOUT02       0x00020805
N
N#define GPIO_PC3_SWO            0x00020C01
N#define GPIO_PC3_TDO            0x00020C01
N#define GPIO_PC3_KBCOUT03       0x00020C05
N#define GPIO_PC3_HLED3          0x00020C04
N
N#define GPIO_PC4_U7RX           0x00021001
N#define GPIO_PC4_T7CCP0         0x00021003
N#define GPIO_PC4_FAN0PWM0       0x00021004
N#define GPIO_PC4_EPI0S7         0x0002100F
N
N#define GPIO_PC5_U7TX           0x00021401
N#define GPIO_PC5_T7CCP1         0x00021403
N#define GPIO_PC5_FAN0TACH0      0x00021404
N#define GPIO_PC5_RTCCLK         0x00021407
N#define GPIO_PC5_EPI0S6         0x0002140F
N
N#define GPIO_PC6_U5RX           0x00021801
N#define GPIO_PC6_FAN0PWM1       0x00021804
N#define GPIO_PC6_EPI0S5         0x0002180F
N
N#define GPIO_PC7_U5TX           0x00021C01
N#define GPIO_PC7_FAN0TACH1      0x00021C04
N#define GPIO_PC7_EPI0S4         0x00021C0F
N
N#define GPIO_PD0_I2C7SCL        0x00030002
N#define GPIO_PD0_T0CCP0         0x00030003
N#define GPIO_PD0_FAN0PWM4       0x00030004
N#define GPIO_PD0_C0O            0x00030005
N#define GPIO_PD0_SSI2XDAT1      0x0003000F
N
N#define GPIO_PD1_I2C7SDA        0x00030402
N#define GPIO_PD1_T0CCP1         0x00030403
N#define GPIO_PD1_FAN0TACH4      0x00030404
N#define GPIO_PD1_C1O            0x00030405
N#define GPIO_PD1_SSI2XDAT0      0x0003040F
N
N#define GPIO_PD2_I2C8SCL        0x00030802
N#define GPIO_PD2_T1CCP0         0x00030803
N#define GPIO_PD2_C2O            0x00030805
N#define GPIO_PD2_SSI2FSS        0x0003080F
N
N#define GPIO_PD3_I2C8SDA        0x00030C02
N#define GPIO_PD3_T1CCP1         0x00030C03
N#define GPIO_PD3_SSI2CLK        0x00030C0F
N
N#define GPIO_PD4_U2RX           0x00031001
N#define GPIO_PD4_T3CCP0         0x00031003
N#define GPIO_PD4_KBCOUT19       0x00031004
N#define GPIO_PD4_SSI1XDAT2      0x0003100F
N
N#define GPIO_PD5_U2TX           0x00031401
N#define GPIO_PD5_T3CCP1         0x00031403
N#define GPIO_PD5_KBCOUT18       0x00031404
N#define GPIO_PD5_SSI1XDAT3      0x0003140F
N
N#define GPIO_PD6_U2RTS          0x00031801
N#define GPIO_PD6_T4CCP0         0x00031803
N#define GPIO_PD6_USB0EPEN       0x00031805
N#define GPIO_PD6_SSI2XDAT3      0x0003180F
N
N#define GPIO_PD7_U2CTS          0x00031C01
N#define GPIO_PD7_T4CCP1         0x00031C03
N#define GPIO_PD7_USB0PFLT       0x00031C05
N#define GPIO_PD7_NMI            0x00031C08
N#define GPIO_PD7_SSI2XDAT2      0x00031C0F
N
N#define GPIO_PE0_U1RTS          0x00040001
N
N#define GPIO_PE1_U1DSR          0x00040401
N
N#define GPIO_PE2_U1DCD          0x00040801
N
N#define GPIO_PE3_U1DTR          0x00040C01
N
N#define GPIO_PE4_U1RI           0x00041001
N#define GPIO_PE4_FAN0TACH7      0x00041004
N#define GPIO_PE4_SSI1XDAT0      0x0004100F
N
N#define GPIO_PE5_FAN0PWM7       0x00041404
N#define GPIO_PE5_SSI1XDAT1      0x0004140F
N
N#define GPIO_PE6_U0CTS          0x00041801
N#define GPIO_PE6_I2C9SCL        0x00041802
N#define GPIO_PE6_HLED2          0x00041804
N
N#define GPIO_PE7_U0RTS          0x00041C01
N#define GPIO_PE7_I2C9SDA        0x00041C02
N#define GPIO_PE7_HLED3          0x00041C04
N#define GPIO_PE7_NMI            0x00041C08
N
N#define GPIO_PF0_KBCOUT00       0x00050003
N#define GPIO_PF0_FAN0PWM2       0x00050004
N#define GPIO_PF0_EN0LED0        0x00050005
N#define GPIO_PF0_M0PWM0         0x00050006
N#define GPIO_PF0_KBCOUT07       0x00050007
N#define GPIO_PF0_SSI3XDAT1      0x0005000E
N#define GPIO_PF0_TRD2           0x0005000F
N
N#define GPIO_PF1_KBCOUT01       0x00050403
N#define GPIO_PF1_FAN0TACH2      0x00050404
N#define GPIO_PF1_EN0LED2        0x00050405
N#define GPIO_PF1_M0PWM1         0x00050406
N#define GPIO_PF1_KBCOUT06       0x00050407
N#define GPIO_PF1_SSI3XDAT0      0x0005040E
N#define GPIO_PF1_TRD1           0x0005040F
N
N#define GPIO_PF2_KBCOUT02       0x00050803
N#define GPIO_PF2_FAN0PWM3       0x00050804
N#define GPIO_PF2_EN0MDC         0x00050805
N#define GPIO_PF2_M0PWM2         0x00050806
N#define GPIO_PF2_KBCOUT05       0x00050807
N#define GPIO_PF2_SSI3FSS        0x0005080E
N#define GPIO_PF2_TRD0           0x0005080F
N
N#define GPIO_PF3_KBCOUT03       0x00050C03
N#define GPIO_PF3_FAN0TACH3      0x00050C04
N#define GPIO_PF3_EN0MDIO        0x00050C05
N#define GPIO_PF3_M0PWM3         0x00050C06
N#define GPIO_PF3_KBCOUT04       0x00050C07
N#define GPIO_PF3_SSI3CLK        0x00050C0E
N#define GPIO_PF3_TRCLK          0x00050C0F
N
N#define GPIO_PF4_KBCOUT16       0x00051003
N#define GPIO_PF4_FAN0PWM4       0x00051004
N#define GPIO_PF4_EN0LED1        0x00051005
N#define GPIO_PF4_M0FAULT0       0x00051006
N#define GPIO_PF4_SSI3XDAT2      0x0005100E
N#define GPIO_PF4_TRD3           0x0005100F
N
N#define GPIO_PF5_KBCOUT17       0x00051403
N#define GPIO_PF5_FAN0TACH4      0x00051404
N#define GPIO_PF5_SSI3XDAT3      0x0005140E
N
N#define GPIO_PF6_FAN0PWM5       0x00051804
N#define GPIO_PF6_LCDMCLK        0x0005180F
N
N#define GPIO_PF7_FAN0TACH5      0x00051C04
N#define GPIO_PF7_LCDDATA02      0x00051C0F
N
N#define GPIO_PG0_I2C1SCL        0x00060002
N#define GPIO_PG0_FAN1PWM0       0x00060003
N#define GPIO_PG0_FAN0PWM6       0x00060004
N#define GPIO_PG0_EN0PPS         0x00060005
N#define GPIO_PG0_M0PWM4         0x00060006
N#define GPIO_PG0_EPI0S11        0x0006000F
N
N#define GPIO_PG1_I2C1SDA        0x00060402
N#define GPIO_PG1_KBRST_N        0x00060403
N#define GPIO_PG1_FAN0TACH6      0x00060404
N#define GPIO_PG1_FAN1TACH0      0x00060405
N#define GPIO_PG1_M0PWM5         0x00060406
N#define GPIO_PG1_EPI0S10        0x0006040F
N
N#define GPIO_PG2_I2C2SCL        0x00060802
N#define GPIO_PG2_KBCOUT00       0x00060803
N#define GPIO_PG2_FAN0PWM7       0x00060804
N#define GPIO_PG2_FAN1PWM1       0x00060805
N#define GPIO_PG2_EN0TXCK        0x0006080E
N#define GPIO_PG2_SSI2XDAT3      0x0006080F
N
N#define GPIO_PG3_I2C2SDA        0x00060C02
N#define GPIO_PG3_KBCOUT01       0x00060C03
N#define GPIO_PG3_FAN0TACH7      0x00060C04
N#define GPIO_PG3_FAN1TACH1      0x00060C05
N#define GPIO_PG3_EN0TXEN        0x00060C0E
N#define GPIO_PG3_SSI2XDAT2      0x00060C0F
N
N#define GPIO_PG4_U0CTS          0x00061001
N#define GPIO_PG4_I2C3SCL        0x00061002
N#define GPIO_PG4_OWIRE          0x00061005
N#define GPIO_PG4_EN0TXD0        0x0006100E
N#define GPIO_PG4_SSI2XDAT1      0x0006100F
N
N#define GPIO_PG5_U0RTS          0x00061401
N#define GPIO_PG5_I2C3SDA        0x00061402
N#define GPIO_PG5_KBRST_N        0x00061404
N#define GPIO_PG5_OWALT          0x00061405
N#define GPIO_PG5_EN0TXD1        0x0006140E
N#define GPIO_PG5_SSI2XDAT0      0x0006140F
N
N#define GPIO_PG6_I2C4SCL        0x00061802
N#define GPIO_PG6_KBCOUT00       0x00061804
N#define GPIO_PG6_EN0RXER        0x0006180E
N#define GPIO_PG6_SSI2FSS        0x0006180F
N
N#define GPIO_PG7_I2C4SDA        0x00061C02
N#define GPIO_PG7_KBCOUT01       0x00061C04
N#define GPIO_PG7_EN0RXDV        0x00061C0E
N#define GPIO_PG7_SSI2CLK        0x00061C0F
N
N#define GPIO_PH0_U0RTS          0x00070001
N#define GPIO_PH0_LPC0COMXRTS    0x00070002
N#define GPIO_PH0_KBCIN04        0x00070004
N#define GPIO_PH0_FAN1PWM3       0x00070005
N#define GPIO_PH0_EPI0S0         0x0007000F
N
N#define GPIO_PH1_U0CTS          0x00070401
N#define GPIO_PH1_LPC0COMXCTS    0x00070402
N#define GPIO_PH1_KBCIN05        0x00070404
N#define GPIO_PH1_FAN1TACH3      0x00070405
N#define GPIO_PH1_EPI0S1         0x0007040F
N
N#define GPIO_PH2_U0DCD          0x00070801
N#define GPIO_PH2_LPC0COMXDCD    0x00070802
N#define GPIO_PH2_KBCIN06        0x00070804
N#define GPIO_PH2_FAN0PWM4       0x00070805
N#define GPIO_PH2_EPI0S2         0x0007080F
N
N#define GPIO_PH3_U0DSR          0x00070C01
N#define GPIO_PH3_LPC0COMXDSR    0x00070C02
N#define GPIO_PH3_KBCIN07        0x00070C04
N#define GPIO_PH3_FAN0TACH4      0x00070C05
N#define GPIO_PH3_EPI0S3         0x00070C0F
N
N#define GPIO_PH4_U0DTR          0x00071001
N#define GPIO_PH4_LPC0COMXDTR    0x00071002
N#define GPIO_PH4_LPC0COMXRTS    0x00071003
N#define GPIO_PH4_PS2CLK0        0x00071004
N
N#define GPIO_PH5_U0RI           0x00071401
N#define GPIO_PH5_LPC0COMXRI     0x00071402
N#define GPIO_PH5_LPC0COMXCTS    0x00071403
N#define GPIO_PH5_PS2DAT0        0x00071404
N#define GPIO_PH5_EN0PPS         0x00071405
N
N#define GPIO_PH6_U5RX           0x00071801
N#define GPIO_PH6_U7RX           0x00071802
N#define GPIO_PH6_LPC0COMXDCD    0x00071803
N#define GPIO_PH6_FAN1PWM0       0x00071804
N#define GPIO_PH6_KBCIN04        0x00071805
N
N#define GPIO_PH7_U5TX           0x00071C01
N#define GPIO_PH7_U7TX           0x00071C02
N#define GPIO_PH7_LPC0COMXDSR    0x00071C03
N#define GPIO_PH7_FAN1TACH0      0x00071C04
N#define GPIO_PH7_KBCIN05        0x00071C05
N
N#define GPIO_PJ0_U3RX           0x00080001
N#define GPIO_PJ0_EN0PPS         0x00080005
N
N#define GPIO_PJ1_U3TX           0x00080401
N
N#define GPIO_PJ2_U2RTS          0x00080801
N#define GPIO_PJ2_KBCOUT02       0x00080804
N#define GPIO_PJ2_FAN1PWM1       0x00080805
N#define GPIO_PJ2_LCDDATA14      0x0008080F
N
N#define GPIO_PJ3_U2CTS          0x00080C01
N#define GPIO_PJ3_KBCOUT03       0x00080C04
N#define GPIO_PJ3_FAN1TACH1      0x00080C05
N#define GPIO_PJ3_LCDDATA15      0x00080C0F
N
N#define GPIO_PJ4_U3RTS          0x00081001
N#define GPIO_PJ4_KBCOUT04       0x00081004
N#define GPIO_PJ4_FAN1PWM5       0x00081005
N#define GPIO_PJ4_LCDDATA16      0x0008100F
N
N#define GPIO_PJ5_U3CTS          0x00081401
N#define GPIO_PJ5_KBCOUT05       0x00081404
N#define GPIO_PJ5_FAN1TACH5      0x00081405
N#define GPIO_PJ5_LCDDATA17      0x0008140F
N
N#define GPIO_PJ6_U4RTS          0x00081801
N#define GPIO_PJ6_KBCOUT06       0x00081804
N#define GPIO_PJ6_LCDAC          0x0008180F
N
N#define GPIO_PJ7_U4CTS          0x00081C01
N#define GPIO_PJ7_KBCOUT07       0x00081C04
N
N#define GPIO_PK0_U4RX           0x00090001
N#define GPIO_PK0_KBCIN06        0x00090003
N#define GPIO_PK0_FAN1PWM6       0x00090004
N#define GPIO_PK0_EPI0S0         0x0009000F
N
N#define GPIO_PK1_U4TX           0x00090401
N#define GPIO_PK1_KBCIN07        0x00090403
N#define GPIO_PK1_FAN1TACH6      0x00090404
N#define GPIO_PK1_EPI0S1         0x0009040F
N
N#define GPIO_PK2_U4RTS          0x00090801
N#define GPIO_PK2_KBCOUT05       0x00090803
N#define GPIO_PK2_FAN1PWM7       0x00090804
N#define GPIO_PK2_EPI0S2         0x0009080F
N
N#define GPIO_PK3_U4CTS          0x00090C01
N#define GPIO_PK3_KBCOUT06       0x00090C03
N#define GPIO_PK3_FAN1TACH7      0x00090C04
N#define GPIO_PK3_EPI0S3         0x00090C0F
N
N#define GPIO_PK4_I2C3SCL        0x00091002
N#define GPIO_PK4_KBCIN00        0x00091004
N#define GPIO_PK4_EN0LED0        0x00091005
N#define GPIO_PK4_M0PWM6         0x00091006
N#define GPIO_PK4_EN0INTRN       0x00091007
N#define GPIO_PK4_EN0RXD3        0x0009100E
N#define GPIO_PK4_EPI0S32        0x0009100F
N
N#define GPIO_PK5_I2C3SDA        0x00091402
N#define GPIO_PK5_KBCIN01        0x00091404
N#define GPIO_PK5_EN0LED2        0x00091405
N#define GPIO_PK5_M0PWM7         0x00091406
N#define GPIO_PK5_EN0RXD2        0x0009140E
N#define GPIO_PK5_EPI0S31        0x0009140F
N
N#define GPIO_PK6_I2C4SCL        0x00091802
N#define GPIO_PK6_KBCIN02        0x00091804
N#define GPIO_PK6_EN0LED1        0x00091805
N#define GPIO_PK6_M0FAULT1       0x00091806
N#define GPIO_PK6_EN0TXD2        0x0009180E
N#define GPIO_PK6_EPI0S25        0x0009180F
N
N#define GPIO_PK7_U0RI           0x00091C01
N#define GPIO_PK7_I2C4SDA        0x00091C02
N#define GPIO_PK7_KBCIN03        0x00091C04
N#define GPIO_PK7_RTCCLK         0x00091C05
N#define GPIO_PK7_M0FAULT2       0x00091C06
N#define GPIO_PK7_EN0TXD3        0x00091C0E
N#define GPIO_PK7_EPI0S24        0x00091C0F
N
N#define GPIO_PL0_I2C2SDA        0x000A0002
N#define GPIO_PL0_M0FAULT3       0x000A0006
N#define GPIO_PL0_LPC0FRAME_N    0x000A000D
N#define GPIO_PL0_USB0D0         0x000A000E
N#define GPIO_PL0_EPI0S16        0x000A000F
N
N#define GPIO_PL1_I2C2SCL        0x000A0402
N#define GPIO_PL1_PHA0           0x000A0406
N#define GPIO_PL1_LPC0CLK        0x000A040D
N#define GPIO_PL1_USB0D1         0x000A040E
N#define GPIO_PL1_EPI0S17        0x000A040F
N
N#define GPIO_PL2_C0O            0x000A0805
N#define GPIO_PL2_PHB0           0x000A0806
N#define GPIO_PL2_LPC0CLKRUN_N   0x000A080D
N#define GPIO_PL2_USB0D2         0x000A080E
N#define GPIO_PL2_EPI0S18        0x000A080F
N
N#define GPIO_PL3_C1O            0x000A0C05
N#define GPIO_PL3_IDX0           0x000A0C06
N#define GPIO_PL3_LPC0SERIRQ     0x000A0C0D
N#define GPIO_PL3_USB0D3         0x000A0C0E
N#define GPIO_PL3_EPI0S19        0x000A0C0F
N
N#define GPIO_PL4_T0CCP0         0x000A1003
N#define GPIO_PL4_LPC0SCI_N      0x000A100D
N#define GPIO_PL4_USB0D4         0x000A100E
N#define GPIO_PL4_EPI0S26        0x000A100F
N
N#define GPIO_PL5_T0CCP1         0x000A1403
N#define GPIO_PL5_EPI0S33        0x000A140F
N#define GPIO_PL5_LPC0PD_N       0x000A140D
N#define GPIO_PL5_USB0D5         0x000A140E
N
N#define GPIO_PL6_T1CCP0         0x000A1803
N#define GPIO_PL6_FAN1PWM4       0x000A1804
N
N#define GPIO_PL7_T1CCP1         0x000A1C03
N#define GPIO_PL7_FAN1TACH4      0x000A1C04
N
N#define GPIO_PM0_T2CCP0         0x000B0003
N#define GPIO_PM0_FAN0PWM5       0x000B0005
N#define GPIO_PM0_LPC0AD3        0x000B000D
N#define GPIO_PM0_EPI0S15        0x000B000F
N
N#define GPIO_PM1_T2CCP1         0x000B0403
N#define GPIO_PM1_FAN0TACH5      0x000B0405
N#define GPIO_PM1_LPC0AD2        0x000B040D
N#define GPIO_PM1_EPI0S14        0x000B040F
N
N#define GPIO_PM2_T3CCP0         0x000B0803
N#define GPIO_PM2_FAN1PWM4       0x000B0805
N#define GPIO_PM2_LPC0AD1        0x000B080D
N#define GPIO_PM2_EPI0S13        0x000B080F
N
N#define GPIO_PM3_T3CCP1         0x000B0C03
N#define GPIO_PM3_FAN1TACH4      0x000B0C05
N#define GPIO_PM3_LPC0AD0        0x000B0C0D
N#define GPIO_PM3_EPI0S12        0x000B0C0F
N
N#define GPIO_PM4_U0CTS          0x000B1001
N#define GPIO_PM4_T4CCP0         0x000B1003
N#define GPIO_PM4_KBCIN04        0x000B1004
N#define GPIO_PM4_EN0RREF_CLK    0x000B100E
N
N#define GPIO_PM5_U0DCD          0x000B1401
N#define GPIO_PM5_T4CCP1         0x000B1403
N#define GPIO_PM5_KBCIN05        0x000B1404
N
N#define GPIO_PM6_U0DSR          0x000B1801
N#define GPIO_PM6_LPC0COMXRTS    0x000B1802
N#define GPIO_PM6_KBCIN06        0x000B1804
N#define GPIO_PM6_T5CCP0         0x000B1803
N#define GPIO_PM6_EN0CRS         0x000B180E
N
N#define GPIO_PM7_U0RI           0x000B1C01
N#define GPIO_PM7_LPC0COMXCTS    0x000B1C02
N#define GPIO_PM7_KBCIN07        0x000B1C04
N#define GPIO_PM7_T5CCP1         0x000B1C03
N#define GPIO_PM7_EN0COL         0x000B1C0E
N
N#define GPIO_PN0_U1RTS          0x000C0001
N#define GPIO_PN0_LPC0COMYRTS    0x000C0002
N#define GPIO_PN0_KBCOUT11       0x000C0003
N#define GPIO_PN0_PS2CLK1        0x000C0004
N#define GPIO_PN0_FAN0PWM5       0x000C0005
N
N#define GPIO_PN1_U1CTS          0x000C0401
N#define GPIO_PN1_LPC0COMYCTS    0x000C0402
N#define GPIO_PN1_KBCOUT12       0x000C0403
N#define GPIO_PN1_PS2DAT1        0x000C0404
N#define GPIO_PN1_FAN0TACH5      0x000C0405
N
N#define GPIO_PN2_U1DCD          0x000C0801
N#define GPIO_PN2_U2RTS          0x000C0802
N#define GPIO_PN2_LPC0COMXDTR    0x000C0803
N#define GPIO_PN2_FAN1PWM4       0x000C0805
N#define GPIO_PN2_EPI0S29        0x000C080F
N
N#define GPIO_PN3_U1DSR          0x000C0C01
N#define GPIO_PN3_U2CTS          0x000C0C02
N#define GPIO_PN3_LPC0COMXRI     0x000C0C03
N#define GPIO_PN3_KBCOUT17       0x000C0C04
N#define GPIO_PN3_FAN1TACH4      0x000C0C05
N#define GPIO_PN3_EPI0S30        0x000C0C0F
N
N#define GPIO_PN4_U1DTR          0x000C1001
N#define GPIO_PN4_U3RTS          0x000C1002
N#define GPIO_PN4_I2C2SDA        0x000C1003
N#define GPIO_PN4_KBCOUT14       0x000C1004
N#define GPIO_PN4_EPI0S34        0x000C100F
N
N#define GPIO_PN5_U1RI           0x000C1401
N#define GPIO_PN5_U3CTS          0x000C1402
N#define GPIO_PN5_I2C2SCL        0x000C1403
N#define GPIO_PN5_KBCOUT15       0x000C1404
N#define GPIO_PN5_EPI0S35        0x000C140F
N
N#define GPIO_PN6_U4RTS          0x000C1802
N#define GPIO_PN6_KBCOUT07       0x000C1803
N#define GPIO_PN6_FAN1PWM3       0x000C1804
N#define GPIO_PN6_PS2CLK2        0x000C1805
N#define GPIO_PN6_EN0TXER        0x000C180E
N#define GPIO_PN6_LCDDATA13      0x000C180F
N
N#define GPIO_PN7_U1RTS          0x000C1C01
N#define GPIO_PN7_U4CTS          0x000C1C02
N#define GPIO_PN7_FAN1TACH3      0x000C1C04
N#define GPIO_PN7_PS2DAT2        0x000C1C05
N#define GPIO_PN7_LCDDATA12      0x000C1C0F
N
N#define GPIO_PP0_U6RX           0x000D0001
N#define GPIO_PP0_KBCOUT18       0x000D0003
N#define GPIO_PP0_HLED0          0x000D0004
N#define GPIO_PP0_T6CCP0         0x000D0005
N#define GPIO_PP0_EN0INTRN       0x000D0007
N#define GPIO_PP0_SSI3XDAT2      0x000D000F
N
N#define GPIO_PP1_U6TX           0x000D0401
N#define GPIO_PP1_KBCOUT19       0x000D0403
N#define GPIO_PP1_HLED1          0x000D0404
N#define GPIO_PP1_T6CCP1         0x000D0405
N#define GPIO_PP1_SSI3XDAT3      0x000D040F
N
N#define GPIO_PP2_U0DTR          0x000D0801
N#define GPIO_PP2_FAN1PWM2       0x000D0804
N#define GPIO_PP2_USB0NXT        0x000D080E
N#define GPIO_PP2_EPI0S29        0x000D080F
N
N#define GPIO_PP3_U1CTS          0x000D0C01
N#define GPIO_PP3_U0DCD          0x000D0C02
N#define GPIO_PP3_KBCOUT08       0x000D0C03
N#define GPIO_PP3_FAN1TACH2      0x000D0C04
N#define GPIO_PP3_RTCCLK         0x000D0C07
N#define GPIO_PP3_USB0DIR        0x000D0C0E
N#define GPIO_PP3_EPI0S30        0x000D0C0F
N
N#define GPIO_PP4_U3RTS          0x000D1001
N#define GPIO_PP4_U0DSR          0x000D1002
N#define GPIO_PP4_KBCOUT09       0x000D1003
N#define GPIO_PP4_OWIRE          0x000D1004
N#define GPIO_PP4_USB0D7         0x000D100E
N
N#define GPIO_PP5_U3CTS          0x000D1401
N#define GPIO_PP5_I2C2SCL        0x000D1402
N#define GPIO_PP5_KBCOUT10       0x000D1403
N#define GPIO_PP5_OWALT          0x000D1404
N#define GPIO_PP5_USB0D6         0x000D140E
N
N#define GPIO_PP6_U1DCD          0x000D1801
N#define GPIO_PP6_I2C2SDA        0x000D1802
N#define GPIO_PP6_KBCOUT11       0x000D1803
N
N#define GPIO_PP7_KBCOUT12       0x000D1C03
N
N#define GPIO_PQ0_T6CCP0         0x000E0003
N#define GPIO_PQ0_KBCOUT04       0x000E0004
N#define GPIO_PQ0_KBCOUT00       0x000E0005
N#define GPIO_PQ0_FAN1PWM1       0x000E0006
N#define GPIO_PQ0_SSI3CLK        0x000E000E
N#define GPIO_PQ0_EPI0S20        0x000E000F
N
N#define GPIO_PQ1_T6CCP1         0x000E0403
N#define GPIO_PQ1_KBCOUT05       0x000E0404
N#define GPIO_PQ1_KBCOUT01       0x000E0405
N#define GPIO_PQ1_FAN1TACH1      0x000E0406
N#define GPIO_PQ1_SSI3FSS        0x000E040E
N#define GPIO_PQ1_EPI0S21        0x000E040F
N
N#define GPIO_PQ2_T7CCP0         0x000E0803
N#define GPIO_PQ2_KBCOUT06       0x000E0804
N#define GPIO_PQ2_KBCOUT02       0x000E0805
N#define GPIO_PQ2_SSI3XDAT0      0x000E080E
N#define GPIO_PQ2_EPI0S22        0x000E080F
N
N#define GPIO_PQ3_T7CCP1         0x000E0C03
N#define GPIO_PQ3_KBCOUT07       0x000E0C04
N#define GPIO_PQ3_KBCOUT03       0x000E0C05
N#define GPIO_PQ3_SSI3XDAT1      0x000E0C0E
N#define GPIO_PQ3_EPI0S23        0x000E0C0F
N
N#define GPIO_PQ4_U1RX           0x000E1001
N#define GPIO_PQ4_KBCOUT13       0x000E1003
N#define GPIO_PQ4_FAN1PWM0       0x000E1004
N#define GPIO_PQ4_LPC0COMYRX     0x000E1005
N#define GPIO_PQ4_DIVSCLK        0x000E1007
N
N#define GPIO_PQ5_U1TX           0x000E1401
N#define GPIO_PQ5_KBCOUT14       0x000E1403
N#define GPIO_PQ5_FAN1TACH0      0x000E1404
N#define GPIO_PQ5_LPC0COMYTX     0x000E1405
N#define GPIO_PQ5_EN0RXD0        0x000E140E
N
N#define GPIO_PQ6_U1DTR          0x000E1801
N#define GPIO_PQ6_KBCOUT15       0x000E1803
N#define GPIO_PQ6_FAN1PWM1       0x000E1804
N#define GPIO_PQ6_EN0RXD1        0x000E180E
N
N#define GPIO_PQ7_U1RI           0x000E1C01
N#define GPIO_PQ7_FAN1TACH1      0x000E1C04
N
N#define GPIO_PR0_U4TX           0x000F0001
N#define GPIO_PR0_I2C1SCL        0x000F0002
N#define GPIO_PR0_KBCOUT08       0x000F0004
N#define GPIO_PR0_M0PWM0         0x000F0006
N#define GPIO_PR0_LCDCP          0x000F000F
N
N#define GPIO_PR1_U4RX           0x000F0401
N#define GPIO_PR1_I2C1SDA        0x000F0402
N#define GPIO_PR1_KBCOUT09       0x000F0404
N#define GPIO_PR1_M0PWM1         0x000F0406
N#define GPIO_PR1_LCDFP          0x000F040F
N
N#define GPIO_PR2_I2C2SCL        0x000F0802
N#define GPIO_PR2_KBCOUT10       0x000F0804
N#define GPIO_PR2_M0PWM2         0x000F0806
N#define GPIO_PR2_LCDLP          0x000F080F
N
N#define GPIO_PR3_I2C2SDA        0x000F0C02
N#define GPIO_PR3_KBCOUT11       0x000F0C04
N#define GPIO_PR3_M0PWM3         0x000F0C06
N#define GPIO_PR3_LCDDATA03      0x000F0C0F
N
N#define GPIO_PR4_I2C3SCL        0x000F1002
N#define GPIO_PR4_T0CCP0         0x000F1003
N#define GPIO_PR4_KBCOUT12       0x000F1004
N#define GPIO_PR4_M0PWM4         0x000F1006
N#define GPIO_PR4_LCDDATA00      0x000F100F
N
N#define GPIO_PR5_U1RX           0x000F1401
N#define GPIO_PR5_I2C3SDA        0x000F1402
N#define GPIO_PR5_T0CCP1         0x000F1403
N#define GPIO_PR5_KBCOUT13       0x000F1404
N#define GPIO_PR5_LPC0COMYRX     0x000F1405
N#define GPIO_PR5_M0PWM5         0x000F1406
N#define GPIO_PR5_LCDDATA01      0x000F140F
N
N#define GPIO_PR6_U1TX           0x000F1801
N#define GPIO_PR6_I2C4SCL        0x000F1802
N#define GPIO_PR6_T1CCP0         0x000F1803
N#define GPIO_PR6_KBCOUT14       0x000F1804
N#define GPIO_PR6_LPC0COMYTX     0x000F1805
N#define GPIO_PR6_M0PWM6         0x000F1806
N#define GPIO_PR6_LCDDATA04      0x000F180F
N
N#define GPIO_PR7_I2C4SDA        0x000F1C02
N#define GPIO_PR7_T1CCP1         0x000F1C03
N#define GPIO_PR7_KBCOUT15       0x000F1C04
N#define GPIO_PR7_M0PWM7         0x000F1C06
N#define GPIO_PR7_EN0TXEN        0x000F1C0E
N#define GPIO_PR7_LCDDATA05      0x000F1C0F
N
N#define GPIO_PS0_T2CCP0         0x00100003
N#define GPIO_PS0_KBCOUT16       0x00100004
N#define GPIO_PS0_M0FAULT0       0x00100006
N#define GPIO_PS0_LPC0A20        0x0010000D
N#define GPIO_PS0_LCDDATA20      0x0010000F
N
N#define GPIO_PS1_T2CCP1         0x00100403
N#define GPIO_PS1_KBCOUT17       0x00100404
N#define GPIO_PS1_M0FAULT1       0x00100406
N#define GPIO_PS1_LPC0RESET_N    0x0010040D
N#define GPIO_PS1_LCDDATA21      0x0010040F
N
N#define GPIO_PS2_U1DSR          0x00100801
N#define GPIO_PS2_T3CCP0         0x00100803
N#define GPIO_PS2_KBCOUT18       0x00100804
N#define GPIO_PS2_M0FAULT2       0x00100806
N#define GPIO_PS2_LCDDATA22      0x0010080F
N
N#define GPIO_PS3_T3CCP1         0x00100C03
N#define GPIO_PS3_KBCOUT19       0x00100C04
N#define GPIO_PS3_M0FAULT3       0x00100C06
N#define GPIO_PS3_LCDDATA23      0x00100C0F
N
N#define GPIO_PS4_T4CCP0         0x00101003
N#define GPIO_PS4_KBCIN07        0x00101004
N#define GPIO_PS4_PHA0           0x00101006
N#define GPIO_PS4_EN0TXD0        0x0010100E
N#define GPIO_PS4_LCDDATA06      0x0010100F
N
N#define GPIO_PS5_T4CCP1         0x00101403
N#define GPIO_PS5_KBCIN06        0x00101404
N#define GPIO_PS5_PHB0           0x00101406
N#define GPIO_PS5_EN0TXD1        0x0010140E
N#define GPIO_PS5_LCDDATA07      0x0010140F
N
N#define GPIO_PS6_T5CCP0         0x00101803
N#define GPIO_PS6_KBCIN05        0x00101804
N#define GPIO_PS6_IDX0           0x00101806
N#define GPIO_PS6_EN0RXER        0x0010180E
N#define GPIO_PS6_LCDDATA08      0x0010180F
N
N#define GPIO_PS7_T5CCP1         0x00101C03
N#define GPIO_PS7_KBCIN04        0x00101C04
N#define GPIO_PS7_EN0RXDV        0x00101C0E
N#define GPIO_PS7_LCDDATA09      0x00101C0F
N
N#define GPIO_PT0_T6CCP0         0x00110003
N#define GPIO_PT0_KBCIN03        0x00110004
N#define GPIO_PT0_CAN0RX         0x00110007
N#define GPIO_PT0_EN0RXD0        0x0011000E
N#define GPIO_PT0_LCDDATA10      0x0011000F
N
N#define GPIO_PT1_T6CCP1         0x00110403
N#define GPIO_PT1_KBCIN02        0x00110404
N#define GPIO_PT1_CAN0TX         0x00110407
N#define GPIO_PT1_EN0RXD1        0x0011040E
N#define GPIO_PT1_LCDDATA11      0x0011040F
N
N#define GPIO_PT2_T7CCP0         0x00110803
N#define GPIO_PT2_KBCIN01        0x00110804
N#define GPIO_PT2_CAN1RX         0x00110807
N#define GPIO_PT2_LCDDATA18      0x0011080F
N
N#define GPIO_PT3_T7CCP1         0x00110C03
N#define GPIO_PT3_KBCIN00        0x00110C04
N#define GPIO_PT3_CAN1TX         0x00110C07
N#define GPIO_PT3_LCDDATA19      0x00110C0F
N
N#endif // PART_TM4C129XNCZAD
N
N#endif // __DRIVERLIB_PIN_MAP_H__
L 42 ".\startup\common_head.h" 2
N#include "gpio.h"
L 1 ".\driverlib\gpio.h" 1
N//*****************************************************************************
N//
N// gpio.h - Defines and Macros for GPIO API.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_GPIO_H__
N#define __DRIVERLIB_GPIO_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following values define the bit field for the ui8Pins argument to
N// several of the APIs.
N//
N//*****************************************************************************
N#define GPIO_PIN_0              0x00000001  // GPIO pin 0
N#define GPIO_PIN_1              0x00000002  // GPIO pin 1
N#define GPIO_PIN_2              0x00000004  // GPIO pin 2
N#define GPIO_PIN_3              0x00000008  // GPIO pin 3
N#define GPIO_PIN_4              0x00000010  // GPIO pin 4
N#define GPIO_PIN_5              0x00000020  // GPIO pin 5
N#define GPIO_PIN_6              0x00000040  // GPIO pin 6
N#define GPIO_PIN_7              0x00000080  // GPIO pin 7
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIODirModeSet as the ui32PinIO parameter, and
N// returned from GPIODirModeGet.
N//
N//*****************************************************************************
N#define GPIO_DIR_MODE_IN        0x00000000  // Pin is a GPIO input
N#define GPIO_DIR_MODE_OUT       0x00000001  // Pin is a GPIO output
N#define GPIO_DIR_MODE_HW        0x00000002  // Pin is a peripheral function
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOIntTypeSet as the ui32IntType parameter,
N// and returned from GPIOIntTypeGet.
N//
N//*****************************************************************************
N#define GPIO_FALLING_EDGE       0x00000000  // Interrupt on falling edge
N#define GPIO_RISING_EDGE        0x00000004  // Interrupt on rising edge
N#define GPIO_BOTH_EDGES         0x00000001  // Interrupt on both edges
N#define GPIO_LOW_LEVEL          0x00000002  // Interrupt on low level
N#define GPIO_HIGH_LEVEL         0x00000006  // Interrupt on high level
N#define GPIO_DISCRETE_INT       0x00010000  // Interrupt for individual pins
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOPadConfigSet as the ui32Strength parameter,
N// and returned by GPIOPadConfigGet in the *pui32Strength parameter.
N//
N//*****************************************************************************
N#define GPIO_STRENGTH_2MA       0x00000001  // 2mA drive strength
N#define GPIO_STRENGTH_4MA       0x00000002  // 4mA drive strength
N#define GPIO_STRENGTH_6MA       0x00000065  // 6mA drive strength
N#define GPIO_STRENGTH_8MA       0x00000004  // 8mA drive strength
N#define GPIO_STRENGTH_8MA_SC    0x0000000C  // 8mA drive with slew rate control
N#define GPIO_STRENGTH_10MA      0x00000075  // 10mA drive strength
N#define GPIO_STRENGTH_12MA      0x00000077  // 12mA drive strength
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOPadConfigSet as the ui32PadType parameter,
N// and returned by GPIOPadConfigGet in the *pui32PadType parameter.
N//
N//*****************************************************************************
N#define GPIO_PIN_TYPE_STD       0x00000008  // Push-pull
N#define GPIO_PIN_TYPE_STD_WPU   0x0000000A  // Push-pull with weak pull-up
N#define GPIO_PIN_TYPE_STD_WPD   0x0000000C  // Push-pull with weak pull-down
N#define GPIO_PIN_TYPE_OD        0x00000009  // Open-drain
N#define GPIO_PIN_TYPE_ANALOG    0x00000000  // Analog comparator
N#define GPIO_PIN_TYPE_WAKE_HIGH 0x00000208  // Hibernate wake, high
N#define GPIO_PIN_TYPE_WAKE_LOW  0x00000108  // Hibernate wake, low
N
N//*****************************************************************************
N//
N// Values that can be passed to GPIOIntEnable() and GPIOIntDisable() functions
N// in the ui32IntFlags parameter.
N//
N//*****************************************************************************
N#define GPIO_INT_PIN_0          0x00000001
N#define GPIO_INT_PIN_1          0x00000002
N#define GPIO_INT_PIN_2          0x00000004
N#define GPIO_INT_PIN_3          0x00000008
N#define GPIO_INT_PIN_4          0x00000010
N#define GPIO_INT_PIN_5          0x00000020
N#define GPIO_INT_PIN_6          0x00000040
N#define GPIO_INT_PIN_7          0x00000080
N#define GPIO_INT_DMA            0x00000100
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void GPIODirModeSet(uint32_t ui32Port, uint8_t ui8Pins,
N                           uint32_t ui32PinIO);
Nextern uint32_t GPIODirModeGet(uint32_t ui32Port, uint8_t ui8Pin);
Nextern void GPIOIntTypeSet(uint32_t ui32Port, uint8_t ui8Pins,
N                           uint32_t ui32IntType);
Nextern uint32_t GPIOIntTypeGet(uint32_t ui32Port, uint8_t ui8Pin);
Nextern void GPIOPadConfigSet(uint32_t ui32Port, uint8_t ui8Pins,
N                             uint32_t ui32Strength, uint32_t ui32PadType);
Nextern void GPIOPadConfigGet(uint32_t ui32Port, uint8_t ui8Pin,
N                             uint32_t *pui32Strength, uint32_t *pui32PadType);
Nextern void GPIOIntEnable(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern void GPIOIntDisable(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern uint32_t GPIOIntStatus(uint32_t ui32Port, bool bMasked);
Xextern uint32_t GPIOIntStatus(uint32_t ui32Port, _Bool bMasked);
Nextern void GPIOIntClear(uint32_t ui32Port, uint32_t ui32IntFlags);
Nextern void GPIOIntRegister(uint32_t ui32Port, void (*pfnIntHandler)(void));
Nextern void GPIOIntUnregister(uint32_t ui32Port);
Nextern int32_t GPIOPinRead(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinWrite(uint32_t ui32Port, uint8_t ui8Pins, uint8_t ui8Val);
Nextern void GPIOPinConfigure(uint32_t ui32PinConfig);
Nextern void GPIOPinTypeADC(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeCAN(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeComparator(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEPI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEthernetLED(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeEthernetMII(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeFan(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOInput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOOutput(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeGPIOOutputOD(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeI2C(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeI2CSCL(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeLCD(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypePWM(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeQEI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeSSI(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeTimer(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUART(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUSBAnalog(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeUSBDigital(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeWakeHigh(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOPinTypeWakeLow(uint32_t ui32Port, uint8_t ui8Pins);
Nextern uint32_t GPIOPinWakeStatus(uint32_t ui32Port);
Nextern void GPIODMATriggerEnable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIODMATriggerDisable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOADCTriggerEnable(uint32_t ui32Port, uint8_t ui8Pins);
Nextern void GPIOADCTriggerDisable(uint32_t ui32Port, uint8_t ui8Pins);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_GPIO_H__
L 43 ".\startup\common_head.h" 2
N#include "uart.h"
L 1 ".\driverlib\uart.h" 1
N//*****************************************************************************
N//
N// uart.h - Defines and Macros for the UART.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_UART_H__
N#define __DRIVERLIB_UART_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTIntEnable, UARTIntDisable, and UARTIntClear
N// as the ui32IntFlags parameter, and returned from UARTIntStatus.
N//
N//*****************************************************************************
N#define UART_INT_DMATX          0x20000     // DMA TX interrupt
N#define UART_INT_DMARX          0x10000     // DMA RX interrupt
N#define UART_INT_9BIT           0x1000      // 9-bit address match interrupt
N#define UART_INT_OE             0x400       // Overrun Error Interrupt Mask
N#define UART_INT_BE             0x200       // Break Error Interrupt Mask
N#define UART_INT_PE             0x100       // Parity Error Interrupt Mask
N#define UART_INT_FE             0x080       // Framing Error Interrupt Mask
N#define UART_INT_RT             0x040       // Receive Timeout Interrupt Mask
N#define UART_INT_TX             0x020       // Transmit Interrupt Mask
N#define UART_INT_RX             0x010       // Receive Interrupt Mask
N#define UART_INT_DSR            0x008       // DSR Modem Interrupt Mask
N#define UART_INT_DCD            0x004       // DCD Modem Interrupt Mask
N#define UART_INT_CTS            0x002       // CTS Modem Interrupt Mask
N#define UART_INT_RI             0x001       // RI Modem Interrupt Mask
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTConfigSetExpClk as the ui32Config parameter
N// and returned by UARTConfigGetExpClk in the pui32Config parameter.
N// Additionally, the UART_CONFIG_PAR_* subset can be passed to
N// UARTParityModeSet as the ui32Parity parameter, and are returned by
N// UARTParityModeGet.
N//
N//*****************************************************************************
N#define UART_CONFIG_WLEN_MASK   0x00000060  // Mask for extracting word length
N#define UART_CONFIG_WLEN_8      0x00000060  // 8 bit data
N#define UART_CONFIG_WLEN_7      0x00000040  // 7 bit data
N#define UART_CONFIG_WLEN_6      0x00000020  // 6 bit data
N#define UART_CONFIG_WLEN_5      0x00000000  // 5 bit data
N#define UART_CONFIG_STOP_MASK   0x00000008  // Mask for extracting stop bits
N#define UART_CONFIG_STOP_ONE    0x00000000  // One stop bit
N#define UART_CONFIG_STOP_TWO    0x00000008  // Two stop bits
N#define UART_CONFIG_PAR_MASK    0x00000086  // Mask for extracting parity
N#define UART_CONFIG_PAR_NONE    0x00000000  // No parity
N#define UART_CONFIG_PAR_EVEN    0x00000006  // Even parity
N#define UART_CONFIG_PAR_ODD     0x00000002  // Odd parity
N#define UART_CONFIG_PAR_ONE     0x00000082  // Parity bit is one
N#define UART_CONFIG_PAR_ZERO    0x00000086  // Parity bit is zero
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTFIFOLevelSet as the ui32TxLevel parameter
N// and returned by UARTFIFOLevelGet in the pui32TxLevel.
N//
N//*****************************************************************************
N#define UART_FIFO_TX1_8         0x00000000  // Transmit interrupt at 1/8 Full
N#define UART_FIFO_TX2_8         0x00000001  // Transmit interrupt at 1/4 Full
N#define UART_FIFO_TX4_8         0x00000002  // Transmit interrupt at 1/2 Full
N#define UART_FIFO_TX6_8         0x00000003  // Transmit interrupt at 3/4 Full
N#define UART_FIFO_TX7_8         0x00000004  // Transmit interrupt at 7/8 Full
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTFIFOLevelSet as the ui32RxLevel parameter
N// and returned by UARTFIFOLevelGet in the pui32RxLevel.
N//
N//*****************************************************************************
N#define UART_FIFO_RX1_8         0x00000000  // Receive interrupt at 1/8 Full
N#define UART_FIFO_RX2_8         0x00000008  // Receive interrupt at 1/4 Full
N#define UART_FIFO_RX4_8         0x00000010  // Receive interrupt at 1/2 Full
N#define UART_FIFO_RX6_8         0x00000018  // Receive interrupt at 3/4 Full
N#define UART_FIFO_RX7_8         0x00000020  // Receive interrupt at 7/8 Full
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTDMAEnable() and UARTDMADisable().
N//
N//*****************************************************************************
N#define UART_DMA_ERR_RXSTOP     0x00000004  // Stop DMA receive if UART error
N#define UART_DMA_TX             0x00000002  // Enable DMA for transmit
N#define UART_DMA_RX             0x00000001  // Enable DMA for receive
N
N//*****************************************************************************
N//
N// Values returned from UARTRxErrorGet().
N//
N//*****************************************************************************
N#define UART_RXERROR_OVERRUN    0x00000008
N#define UART_RXERROR_BREAK      0x00000004
N#define UART_RXERROR_PARITY     0x00000002
N#define UART_RXERROR_FRAMING    0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTHandshakeOutputsSet() or returned from
N// UARTHandshakeOutputGet().
N//
N//*****************************************************************************
N#define UART_OUTPUT_RTS         0x00000800
N#define UART_OUTPUT_DTR         0x00000400
N
N//*****************************************************************************
N//
N// Values that can be returned from UARTHandshakeInputsGet().
N//
N//*****************************************************************************
N#define UART_INPUT_RI           0x00000100
N#define UART_INPUT_DCD          0x00000004
N#define UART_INPUT_DSR          0x00000002
N#define UART_INPUT_CTS          0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTFlowControl() or returned from
N// UARTFlowControlGet().
N//
N//*****************************************************************************
N#define UART_FLOWCONTROL_TX     0x00008000
N#define UART_FLOWCONTROL_RX     0x00004000
N#define UART_FLOWCONTROL_NONE   0x00000000
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTTxIntModeSet() or returned from
N// UARTTxIntModeGet().
N//
N//*****************************************************************************
N#define UART_TXINT_MODE_FIFO    0x00000000
N#define UART_TXINT_MODE_EOT     0x00000010
N
N//*****************************************************************************
N//
N// Values that can be passed to UARTClockSourceSet() or returned from
N// UARTClockSourceGet().
N//
N//*****************************************************************************
N#define UART_CLOCK_SYSTEM       0x00000000
N#define UART_CLOCK_PIOSC        0x00000005
N
N//*****************************************************************************
N//
N// API Function prototypes
N//
N//*****************************************************************************
Nextern void UARTParityModeSet(uint32_t ui32Base, uint32_t ui32Parity);
Nextern uint32_t UARTParityModeGet(uint32_t ui32Base);
Nextern void UARTFIFOLevelSet(uint32_t ui32Base, uint32_t ui32TxLevel,
N                             uint32_t ui32RxLevel);
Nextern void UARTFIFOLevelGet(uint32_t ui32Base, uint32_t *pui32TxLevel,
N                             uint32_t *pui32RxLevel);
Nextern void UARTConfigSetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
N                                uint32_t ui32Baud, uint32_t ui32Config);
Nextern void UARTConfigGetExpClk(uint32_t ui32Base, uint32_t ui32UARTClk,
N                                uint32_t *pui32Baud, uint32_t *pui32Config);
Nextern void UARTEnable(uint32_t ui32Base);
Nextern void UARTDisable(uint32_t ui32Base);
Nextern void UARTFIFOEnable(uint32_t ui32Base);
Nextern void UARTFIFODisable(uint32_t ui32Base);
Nextern void UARTEnableSIR(uint32_t ui32Base, bool bLowPower);
Xextern void UARTEnableSIR(uint32_t ui32Base, _Bool bLowPower);
Nextern void UARTDisableSIR(uint32_t ui32Base);
Nextern bool UARTCharsAvail(uint32_t ui32Base);
Xextern _Bool UARTCharsAvail(uint32_t ui32Base);
Nextern bool UARTSpaceAvail(uint32_t ui32Base);
Xextern _Bool UARTSpaceAvail(uint32_t ui32Base);
Nextern int32_t UARTCharGetNonBlocking(uint32_t ui32Base);
Nextern int32_t UARTCharGet(uint32_t ui32Base);
Nextern bool UARTCharPutNonBlocking(uint32_t ui32Base, unsigned char ucData);
Xextern _Bool UARTCharPutNonBlocking(uint32_t ui32Base, unsigned char ucData);
Nextern void UARTCharPut(uint32_t ui32Base, unsigned char ucData);
Nextern void UARTBreakCtl(uint32_t ui32Base, bool bBreakState);
Xextern void UARTBreakCtl(uint32_t ui32Base, _Bool bBreakState);
Nextern bool UARTBusy(uint32_t ui32Base);
Xextern _Bool UARTBusy(uint32_t ui32Base);
Nextern void UARTIntRegister(uint32_t ui32Base, void (*pfnHandler)(void));
Nextern void UARTIntUnregister(uint32_t ui32Base);
Nextern void UARTIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void UARTIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern uint32_t UARTIntStatus(uint32_t ui32Base, bool bMasked);
Xextern uint32_t UARTIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void UARTIntClear(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void UARTDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags);
Nextern void UARTDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags);
Nextern uint32_t UARTRxErrorGet(uint32_t ui32Base);
Nextern void UARTRxErrorClear(uint32_t ui32Base);
Nextern void UARTSmartCardEnable(uint32_t ui32Base);
Nextern void UARTSmartCardDisable(uint32_t ui32Base);
Nextern void UARTModemControlSet(uint32_t ui32Base, uint32_t ui32Control);
Nextern void UARTModemControlClear(uint32_t ui32Base, uint32_t ui32Control);
Nextern uint32_t UARTModemControlGet(uint32_t ui32Base);
Nextern uint32_t UARTModemStatusGet(uint32_t ui32Base);
Nextern void UARTFlowControlSet(uint32_t ui32Base, uint32_t ui32Mode);
Nextern uint32_t UARTFlowControlGet(uint32_t ui32Base);
Nextern void UARTTxIntModeSet(uint32_t ui32Base, uint32_t ui32Mode);
Nextern uint32_t UARTTxIntModeGet(uint32_t ui32Base);
Nextern void UARTClockSourceSet(uint32_t ui32Base, uint32_t ui32Source);
Nextern uint32_t UARTClockSourceGet(uint32_t ui32Base);
Nextern void UART9BitEnable(uint32_t ui32Base);
Nextern void UART9BitDisable(uint32_t ui32Base);
Nextern void UART9BitAddrSet(uint32_t ui32Base, uint8_t ui8Addr,
N                            uint8_t ui8Mask);
Nextern void UART9BitAddrSend(uint32_t ui32Base, uint8_t ui8Addr);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_UART_H__
L 44 ".\startup\common_head.h" 2
N#include "adc.h"
L 1 ".\driverlib\adc.h" 1
N//*****************************************************************************
N//
N// adc.h - ADC headers for using the ADC driver functions.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_ADC_H__
N#define __DRIVERLIB_ADC_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCSequenceConfigure as the ui32Trigger
N// parameter.
N//
N//*****************************************************************************
N#define ADC_TRIGGER_PROCESSOR   0x00000000  // Processor event
N#define ADC_TRIGGER_COMP0       0x00000001  // Analog comparator 0 event
N#define ADC_TRIGGER_COMP1       0x00000002  // Analog comparator 1 event
N#define ADC_TRIGGER_COMP2       0x00000003  // Analog comparator 2 event
N#define ADC_TRIGGER_EXTERNAL    0x00000004  // External event
N#define ADC_TRIGGER_TIMER       0x00000005  // Timer event
N#define ADC_TRIGGER_PWM0        0x00000006  // PWM0 event
N#define ADC_TRIGGER_PWM1        0x00000007  // PWM1 event
N#define ADC_TRIGGER_PWM2        0x00000008  // PWM2 event
N#define ADC_TRIGGER_PWM3        0x00000009  // PWM3 event
N#define ADC_TRIGGER_NEVER       0x0000000E  // Never Trigger
N#define ADC_TRIGGER_ALWAYS      0x0000000F  // Always event
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCSequenceStepConfigure as the ui32Config
N// parameter.
N//
N//*****************************************************************************
N#define ADC_CTL_TS              0x00000080  // Temperature sensor select
N#define ADC_CTL_IE              0x00000040  // Interrupt enable
N#define ADC_CTL_END             0x00000020  // Sequence end select
N#define ADC_CTL_D               0x00000010  // Differential select
N#define ADC_CTL_CH0             0x00000000  // Input channel 0
N#define ADC_CTL_CH1             0x00000001  // Input channel 1
N#define ADC_CTL_CH2             0x00000002  // Input channel 2
N#define ADC_CTL_CH3             0x00000003  // Input channel 3
N#define ADC_CTL_CH4             0x00000004  // Input channel 4
N#define ADC_CTL_CH5             0x00000005  // Input channel 5
N#define ADC_CTL_CH6             0x00000006  // Input channel 6
N#define ADC_CTL_CH7             0x00000007  // Input channel 7
N#define ADC_CTL_CH8             0x00000008  // Input channel 8
N#define ADC_CTL_CH9             0x00000009  // Input channel 9
N#define ADC_CTL_CH10            0x0000000A  // Input channel 10
N#define ADC_CTL_CH11            0x0000000B  // Input channel 11
N#define ADC_CTL_CH12            0x0000000C  // Input channel 12
N#define ADC_CTL_CH13            0x0000000D  // Input channel 13
N#define ADC_CTL_CH14            0x0000000E  // Input channel 14
N#define ADC_CTL_CH15            0x0000000F  // Input channel 15
N#define ADC_CTL_CH16            0x00000100  // Input channel 16
N#define ADC_CTL_CH17            0x00000101  // Input channel 17
N#define ADC_CTL_CH18            0x00000102  // Input channel 18
N#define ADC_CTL_CH19            0x00000103  // Input channel 19
N#define ADC_CTL_CH20            0x00000104  // Input channel 20
N#define ADC_CTL_CH21            0x00000105  // Input channel 21
N#define ADC_CTL_CH22            0x00000106  // Input channel 22
N#define ADC_CTL_CH23            0x00000107  // Input channel 23
N#define ADC_CTL_CMP0            0x00080000  // Select Comparator 0
N#define ADC_CTL_CMP1            0x00090000  // Select Comparator 1
N#define ADC_CTL_CMP2            0x000A0000  // Select Comparator 2
N#define ADC_CTL_CMP3            0x000B0000  // Select Comparator 3
N#define ADC_CTL_CMP4            0x000C0000  // Select Comparator 4
N#define ADC_CTL_CMP5            0x000D0000  // Select Comparator 5
N#define ADC_CTL_CMP6            0x000E0000  // Select Comparator 6
N#define ADC_CTL_CMP7            0x000F0000  // Select Comparator 7
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCComparatorConfigure as part of the
N// ui32Config parameter.
N//
N//*****************************************************************************
N#define ADC_COMP_TRIG_NONE      0x00000000  // Trigger Disabled
N#define ADC_COMP_TRIG_LOW_ALWAYS \
N                                0x00001000  // Trigger Low Always
X#define ADC_COMP_TRIG_LOW_ALWAYS                                 0x00001000  
N#define ADC_COMP_TRIG_LOW_ONCE  0x00001100  // Trigger Low Once
N#define ADC_COMP_TRIG_LOW_HALWAYS \
N                                0x00001200  // Trigger Low Always (Hysteresis)
X#define ADC_COMP_TRIG_LOW_HALWAYS                                 0x00001200  
N#define ADC_COMP_TRIG_LOW_HONCE 0x00001300  // Trigger Low Once (Hysteresis)
N#define ADC_COMP_TRIG_MID_ALWAYS \
N                                0x00001400  // Trigger Mid Always
X#define ADC_COMP_TRIG_MID_ALWAYS                                 0x00001400  
N#define ADC_COMP_TRIG_MID_ONCE  0x00001500  // Trigger Mid Once
N#define ADC_COMP_TRIG_HIGH_ALWAYS \
N                                0x00001C00  // Trigger High Always
X#define ADC_COMP_TRIG_HIGH_ALWAYS                                 0x00001C00  
N#define ADC_COMP_TRIG_HIGH_ONCE 0x00001D00  // Trigger High Once
N#define ADC_COMP_TRIG_HIGH_HALWAYS \
N                                0x00001E00  // Trigger High Always (Hysteresis)
X#define ADC_COMP_TRIG_HIGH_HALWAYS                                 0x00001E00  
N#define ADC_COMP_TRIG_HIGH_HONCE \
N                                0x00001F00  // Trigger High Once (Hysteresis)
X#define ADC_COMP_TRIG_HIGH_HONCE                                 0x00001F00  
N
N#define ADC_COMP_INT_NONE       0x00000000  // Interrupt Disabled
N#define ADC_COMP_INT_LOW_ALWAYS \
N                                0x00000010  // Interrupt Low Always
X#define ADC_COMP_INT_LOW_ALWAYS                                 0x00000010  
N#define ADC_COMP_INT_LOW_ONCE   0x00000011  // Interrupt Low Once
N#define ADC_COMP_INT_LOW_HALWAYS \
N                                0x00000012  // Interrupt Low Always
X#define ADC_COMP_INT_LOW_HALWAYS                                 0x00000012  
N                                            // (Hysteresis)
N#define ADC_COMP_INT_LOW_HONCE  0x00000013  // Interrupt Low Once (Hysteresis)
N#define ADC_COMP_INT_MID_ALWAYS \
N                                0x00000014  // Interrupt Mid Always
X#define ADC_COMP_INT_MID_ALWAYS                                 0x00000014  
N#define ADC_COMP_INT_MID_ONCE   0x00000015  // Interrupt Mid Once
N#define ADC_COMP_INT_HIGH_ALWAYS \
N                                0x0000001C  // Interrupt High Always
X#define ADC_COMP_INT_HIGH_ALWAYS                                 0x0000001C  
N#define ADC_COMP_INT_HIGH_ONCE  0x0000001D  // Interrupt High Once
N#define ADC_COMP_INT_HIGH_HALWAYS \
N                                0x0000001E  // Interrupt High Always
X#define ADC_COMP_INT_HIGH_HALWAYS                                 0x0000001E  
N                                            // (Hysteresis)
N#define ADC_COMP_INT_HIGH_HONCE \
N                                0x0000001F  // Interrupt High Once (Hysteresis)
X#define ADC_COMP_INT_HIGH_HONCE                                 0x0000001F  
N
N//*****************************************************************************
N//
N// Values that can be used to modify the sequence number passed to
N// ADCProcessorTrigger in order to get cross-module synchronous processor
N// triggers.
N//
N//*****************************************************************************
N#define ADC_TRIGGER_WAIT        0x08000000  // Wait for the synchronous trigger
N#define ADC_TRIGGER_SIGNAL      0x80000000  // Signal the synchronous trigger
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCPhaseDelaySet as the ui32Phase parameter and
N// returned from ADCPhaseDelayGet.
N//
N//*****************************************************************************
N#define ADC_PHASE_0             0x00000000  // 0 degrees
N#define ADC_PHASE_22_5          0x00000001  // 22.5 degrees
N#define ADC_PHASE_45            0x00000002  // 45 degrees
N#define ADC_PHASE_67_5          0x00000003  // 67.5 degrees
N#define ADC_PHASE_90            0x00000004  // 90 degrees
N#define ADC_PHASE_112_5         0x00000005  // 112.5 degrees
N#define ADC_PHASE_135           0x00000006  // 135 degrees
N#define ADC_PHASE_157_5         0x00000007  // 157.5 degrees
N#define ADC_PHASE_180           0x00000008  // 180 degrees
N#define ADC_PHASE_202_5         0x00000009  // 202.5 degrees
N#define ADC_PHASE_225           0x0000000A  // 225 degrees
N#define ADC_PHASE_247_5         0x0000000B  // 247.5 degrees
N#define ADC_PHASE_270           0x0000000C  // 270 degrees
N#define ADC_PHASE_292_5         0x0000000D  // 292.5 degrees
N#define ADC_PHASE_315           0x0000000E  // 315 degrees
N#define ADC_PHASE_337_5         0x0000000F  // 337.5 degrees
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCReferenceSet as the ui32Ref parameter.
N//
N//*****************************************************************************
N#define ADC_REF_INT             0x00000000  // Internal reference
N#define ADC_REF_EXT_3V          0x00000001  // External 3V reference
N#define ADC_REF_EXT_1V          0x00000003  // External 1V reference
N
N//*****************************************************************************
N//
N// Values that can be passed to ADCIntDisableEx(), ADCIntEnableEx(),
N// ADCIntClearEx() and ADCIntStatusEx().
N//
N//*****************************************************************************
N#define ADC_INT_SS0             0x00000001
N#define ADC_INT_SS1             0x00000002
N#define ADC_INT_SS2             0x00000004
N#define ADC_INT_SS3             0x00000008
N#define ADC_INT_DMA_SS0         0x00000100
N#define ADC_INT_DMA_SS1         0x00000200
N#define ADC_INT_DMA_SS2         0x00000400
N#define ADC_INT_DMA_SS3         0x00000800
N#define ADC_INT_DCON_SS0        0x00010000
N#define ADC_INT_DCON_SS1        0x00020000
N#define ADC_INT_DCON_SS2        0x00040000
N#define ADC_INT_DCON_SS3        0x00080000
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void ADCIntRegister(uint32_t ui32Base, uint32_t ui32SequenceNum,
N                           void (*pfnHandler)(void));
Nextern void ADCIntUnregister(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCIntDisable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCIntEnable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern uint32_t ADCIntStatus(uint32_t ui32Base, uint32_t ui32SequenceNum,
N                             bool bMasked);
X                             _Bool bMasked);
Nextern void ADCIntClear(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSequenceEnable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSequenceDisable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSequenceConfigure(uint32_t ui32Base, uint32_t ui32SequenceNum,
N                                 uint32_t ui32Trigger, uint32_t ui32Priority);
Nextern void ADCSequenceStepConfigure(uint32_t ui32Base,
N                                     uint32_t ui32SequenceNum,
N                                     uint32_t ui32Step, uint32_t ui32Config);
Nextern int32_t ADCSequenceOverflow(uint32_t ui32Base,
N                                   uint32_t ui32SequenceNum);
Nextern void ADCSequenceOverflowClear(uint32_t ui32Base,
N                                     uint32_t ui32SequenceNum);
Nextern int32_t ADCSequenceUnderflow(uint32_t ui32Base,
N                                    uint32_t ui32SequenceNum);
Nextern void ADCSequenceUnderflowClear(uint32_t ui32Base,
N                                      uint32_t ui32SequenceNum);
Nextern int32_t ADCSequenceDataGet(uint32_t ui32Base, uint32_t ui32SequenceNum,
N                                  uint32_t *pui32Buffer);
Nextern void ADCProcessorTrigger(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSoftwareOversampleConfigure(uint32_t ui32Base,
N                                           uint32_t ui32SequenceNum,
N                                           uint32_t ui32Factor);
Nextern void ADCSoftwareOversampleStepConfigure(uint32_t ui32Base,
N                                               uint32_t ui32SequenceNum,
N                                               uint32_t ui32Step,
N                                               uint32_t ui32Config);
Nextern void ADCSoftwareOversampleDataGet(uint32_t ui32Base,
N                                         uint32_t ui32SequenceNum,
N                                         uint32_t *pui32Buffer,
N                                         uint32_t ui32Count);
Nextern void ADCHardwareOversampleConfigure(uint32_t ui32Base,
N                                           uint32_t ui32Factor);
Nextern void ADCComparatorConfigure(uint32_t ui32Base, uint32_t ui32Comp,
N                                   uint32_t ui32Config);
Nextern void ADCComparatorRegionSet(uint32_t ui32Base, uint32_t ui32Comp,
N                                   uint32_t ui32LowRef, uint32_t ui32HighRef);
Nextern void ADCComparatorReset(uint32_t ui32Base, uint32_t ui32Comp,
N                               bool bTrigger, bool bInterrupt);
X                               _Bool bTrigger, _Bool bInterrupt);
Nextern void ADCComparatorIntDisable(uint32_t ui32Base,
N                                    uint32_t ui32SequenceNum);
Nextern void ADCComparatorIntEnable(uint32_t ui32Base,
N                                   uint32_t ui32SequenceNum);
Nextern uint32_t ADCComparatorIntStatus(uint32_t ui32Base);
Nextern void ADCComparatorIntClear(uint32_t ui32Base, uint32_t ui32Status);
Nextern void ADCIntDisableEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void ADCIntEnableEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern uint32_t ADCIntStatusEx(uint32_t ui32Base, bool bMasked);
Xextern uint32_t ADCIntStatusEx(uint32_t ui32Base, _Bool bMasked);
Nextern void ADCIntClearEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void ADCSequenceDMAEnable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern void ADCSequenceDMADisable(uint32_t ui32Base, uint32_t ui32SequenceNum);
Nextern bool ADCBusy(uint32_t ui32Base);
Xextern _Bool ADCBusy(uint32_t ui32Base);
Nextern void ADCReferenceSet(uint32_t ui32Base, uint32_t ui32Ref);
Nextern uint32_t ADCReferenceGet(uint32_t ui32Base);
Nextern void ADCPhaseDelaySet(uint32_t ui32Base, uint32_t ui32Phase);
Nextern uint32_t ADCPhaseDelayGet(uint32_t ui32Base);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_ADC_H__
L 45 ".\startup\common_head.h" 2
N#include "ssi.h"
L 1 ".\driverlib\ssi.h" 1
N//*****************************************************************************
N//
N// ssi.h - Prototypes for the Synchronous Serial Interface Driver.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_SSI_H__
N#define __DRIVERLIB_SSI_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Values that can be passed to SSIIntEnable, SSIIntDisable, and SSIIntClear
N// as the ui32IntFlags parameter, and returned by SSIIntStatus.
N//
N//*****************************************************************************
N#define SSI_TXEOT               0x00000040  // Transmit FIFO is empty
N#define SSI_DMATX               0x00000020  // DMA Transmit complete
N#define SSI_DMARX               0x00000010  // DMA Receive complete
N#define SSI_TXFF                0x00000008  // TX FIFO half full or less
N#define SSI_RXFF                0x00000004  // RX FIFO half full or more
N#define SSI_RXTO                0x00000002  // RX timeout
N#define SSI_RXOR                0x00000001  // RX overrun
N
N//*****************************************************************************
N//
N// Values that can be passed to SSIConfigSetExpClk.
N//
N//*****************************************************************************
N#define SSI_FRF_MOTO_MODE_0     0x00000000  // Moto fmt, polarity 0, phase 0
N#define SSI_FRF_MOTO_MODE_1     0x00000002  // Moto fmt, polarity 0, phase 1
N#define SSI_FRF_MOTO_MODE_2     0x00000001  // Moto fmt, polarity 1, phase 0
N#define SSI_FRF_MOTO_MODE_3     0x00000003  // Moto fmt, polarity 1, phase 1
N#define SSI_FRF_TI              0x00000010  // TI frame format
N#define SSI_FRF_NMW             0x00000020  // National MicroWire frame format
N
N#define SSI_MODE_MASTER         0x00000000  // SSI master
N#define SSI_MODE_SLAVE          0x00000001  // SSI slave
N#define SSI_MODE_SLAVE_OD       0x00000002  // SSI slave with output disabled
N
N//*****************************************************************************
N//
N// Values that can be passed to SSIDMAEnable() and SSIDMADisable().
N//
N//*****************************************************************************
N#define SSI_DMA_TX              0x00000002  // Enable DMA for transmit
N#define SSI_DMA_RX              0x00000001  // Enable DMA for receive
N
N//*****************************************************************************
N//
N// Values that can be passed to SSIClockSourceSet() or returned from
N// SSIClockSourceGet().
N//
N//*****************************************************************************
N#define SSI_CLOCK_SYSTEM        0x00000000
N#define SSI_CLOCK_PIOSC         0x00000005
N
N//*****************************************************************************
N//
N// Values that can be passed to SSIAdvModeSet().
N//
N//*****************************************************************************
N#define SSI_ADV_MODE_LEGACY     0x00000000
N#define SSI_ADV_MODE_READ_WRITE 0x000001c0
N#define SSI_ADV_MODE_WRITE      0x000000c0
N#define SSI_ADV_MODE_BI_READ    0x00000140
N#define SSI_ADV_MODE_BI_WRITE   0x00000040
N#define SSI_ADV_MODE_QUAD_READ  0x00000180
N#define SSI_ADV_MODE_QUAD_WRITE 0x00000080
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void SSIConfigSetExpClk(uint32_t ui32Base, uint32_t ui32SSIClk,
N                               uint32_t ui32Protocol, uint32_t ui32Mode,
N                               uint32_t ui32BitRate,
N                               uint32_t ui32DataWidth);
Nextern void SSIDataGet(uint32_t ui32Base, uint32_t *pui32Data);
Nextern int32_t SSIDataGetNonBlocking(uint32_t ui32Base,
N                                  uint32_t *pui32Data);
Nextern void SSIDataPut(uint32_t ui32Base, uint32_t ui32Data);
Nextern int32_t SSIDataPutNonBlocking(uint32_t ui32Base, uint32_t ui32Data);
Nextern void SSIDisable(uint32_t ui32Base);
Nextern void SSIEnable(uint32_t ui32Base);
Nextern void SSIIntClear(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void SSIIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void SSIIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void SSIIntRegister(uint32_t ui32Base, void (*pfnHandler)(void));
Nextern uint32_t SSIIntStatus(uint32_t ui32Base, bool bMasked);
Xextern uint32_t SSIIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void SSIIntUnregister(uint32_t ui32Base);
Nextern void SSIDMAEnable(uint32_t ui32Base, uint32_t ui32DMAFlags);
Nextern void SSIDMADisable(uint32_t ui32Base, uint32_t ui32DMAFlags);
Nextern bool SSIBusy(uint32_t ui32Base);
Xextern _Bool SSIBusy(uint32_t ui32Base);
Nextern void SSIClockSourceSet(uint32_t ui32Base, uint32_t ui32Source);
Nextern uint32_t SSIClockSourceGet(uint32_t ui32Base);
Nextern void SSIAdvModeSet(uint32_t ui32Base, uint32_t ui32Mode);
Nextern void SSIAdvDataPutFrameEnd(uint32_t ui32Base, uint32_t ui32Data);
Nextern int32_t SSIAdvDataPutFrameEndNonBlocking(uint32_t ui32Base,
N                                             uint32_t ui32Data);
Nextern void SSIAdvFrameHoldEnable(uint32_t ui32Base);
Nextern void SSIAdvFrameHoldDisable(uint32_t ui32Base);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_SSI_H__
L 46 ".\startup\common_head.h" 2
N#include "timer.h"
L 1 ".\driverlib\timer.h" 1
N//*****************************************************************************
N//
N// timer.h - Prototypes for the timer module
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_TIMER_H__
N#define __DRIVERLIB_TIMER_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerConfigure as the ui32Config parameter.
N//
N//*****************************************************************************
N#define TIMER_CFG_ONE_SHOT       0x00000021  // Full-width one-shot timer
N#define TIMER_CFG_ONE_SHOT_UP    0x00000031  // Full-width one-shot up-count
N                                            // timer
N#define TIMER_CFG_PERIODIC       0x00000022  // Full-width periodic timer
N#define TIMER_CFG_PERIODIC_UP    0x00000032  // Full-width periodic up-count
N                                            // timer
N#define TIMER_CFG_RTC            0x01000000  // Full-width RTC timer
N#define TIMER_CFG_SPLIT_PAIR     0x04000000  // Two half-width timers
N#define TIMER_CFG_A_ONE_SHOT     0x00000021  // Timer A one-shot timer
N#define TIMER_CFG_A_ONE_SHOT_UP  0x00000031  // Timer A one-shot up-count timer
N#define TIMER_CFG_A_PERIODIC     0x00000022  // Timer A periodic timer
N#define TIMER_CFG_A_PERIODIC_UP  0x00000032  // Timer A periodic up-count timer
N#define TIMER_CFG_A_CAP_COUNT    0x00000003  // Timer A event counter
N#define TIMER_CFG_A_CAP_COUNT_UP 0x00000013  // Timer A event up-counter
N#define TIMER_CFG_A_CAP_TIME     0x00000007  // Timer A event timer
N#define TIMER_CFG_A_CAP_TIME_UP  0x00000017  // Timer A event up-count timer
N#define TIMER_CFG_A_PWM          0x0000000A  // Timer A PWM output
N#define TIMER_CFG_B_ONE_SHOT     0x00002100  // Timer B one-shot timer
N#define TIMER_CFG_B_ONE_SHOT_UP  0x00003100  // Timer B one-shot up-count timer
N#define TIMER_CFG_B_PERIODIC     0x00002200  // Timer B periodic timer
N#define TIMER_CFG_B_PERIODIC_UP  0x00003200  // Timer B periodic up-count timer
N#define TIMER_CFG_B_CAP_COUNT    0x00000300  // Timer B event counter
N#define TIMER_CFG_B_CAP_COUNT_UP 0x00001300  // Timer B event up-counter
N#define TIMER_CFG_B_CAP_TIME     0x00000700  // Timer B event timer
N#define TIMER_CFG_B_CAP_TIME_UP  0x00001700  // Timer B event up-count timer
N#define TIMER_CFG_B_PWM          0x00000A00  // Timer B PWM output
N#define TIMER_CFG_A_ACT_TOINTD   0x00010000  // Timer A compare action disable
N                                             // time-out interrupt.
N#define TIMER_CFG_A_ACT_NONE     0x00000000  // Timer A compare action none.
N#define TIMER_CFG_A_ACT_TOGGLE   0x00020000  // Timer A compare action toggle.
N#define TIMER_CFG_A_ACT_CLRTO    0x00040000  // Timer A compare action CCP
N                                             // clear on time-out.
N#define TIMER_CFG_A_ACT_SETTO    0x00060000  // Timer A compare action CCP set
N                                             // on time-out.
N#define TIMER_CFG_A_ACT_SETTOGTO 0x00080000  // Timer A compare action set CCP
N                                             // toggle on time-out.
N#define TIMER_CFG_A_ACT_CLRTOGTO 0x000A0000  // Timer A compare action clear
N                                             // CCP toggle on time-out.
N#define TIMER_CFG_A_ACT_SETCLRTO 0x000C0000  // Timer A compare action set CCP
N                                             // clear on time-out.
N#define TIMER_CFG_A_ACT_CLRSETTO 0x000E0000  // Timer A compare action clear
N                                             // CCP set on time-out.
N#define TIMER_CFG_B_ACT_TOINTD   0x00100000  // Timer B compare action disable
N                                             // time-out interrupt.
N#define TIMER_CFG_B_ACT_NONE     0x00000000  // Timer A compare action none.
N#define TIMER_CFG_B_ACT_TOGGLE   0x00200000  // Timer A compare action toggle.
N#define TIMER_CFG_B_ACT_CLRTO    0x00400000  // Timer A compare action CCP
N                                             // clear on time-out.
N#define TIMER_CFG_B_ACT_SETTO    0x00600000  // Timer A compare action CCP set
N                                             // on time-out.
N#define TIMER_CFG_B_ACT_SETTOGTO 0x00800000  // Timer A compare action set CCP
N                                             // toggle on time-out.
N#define TIMER_CFG_B_ACT_CLRTOGTO 0x00A00000  // Timer A compare action clear
N                                             // CCP toggle on time-out.
N#define TIMER_CFG_B_ACT_SETCLRTO 0x00C00000  // Timer A compare action set CCP
N                                             // clear on time-out.
N#define TIMER_CFG_B_ACT_CLRSETTO 0x0000E000  // Timer A compare action clear
N                                             // CCP set on time-out.
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerIntEnable, TimerIntDisable, and
N// TimerIntClear as the ui32IntFlags parameter, and returned from
N// TimerIntStatus.
N//
N//*****************************************************************************
N#define TIMER_TIMB_DMA          0x00002000 // TimerB DMA Complete Interrupt.
N#define TIMER_TIMB_MATCH        0x00000800  // TimerB match interrupt
N#define TIMER_CAPB_EVENT        0x00000400  // CaptureB event interrupt
N#define TIMER_CAPB_MATCH        0x00000200  // CaptureB match interrupt
N#define TIMER_TIMB_TIMEOUT      0x00000100  // TimerB time out interrupt
N#define TIMER_TIMA_DMA          0x00000020 // TimerA DMA Complete Interrupt.
N#define TIMER_TIMA_MATCH        0x00000010  // TimerA match interrupt
N#define TIMER_RTC_MATCH         0x00000008  // RTC interrupt mask
N#define TIMER_CAPA_EVENT        0x00000004  // CaptureA event interrupt
N#define TIMER_CAPA_MATCH        0x00000002  // CaptureA match interrupt
N#define TIMER_TIMA_TIMEOUT      0x00000001  // TimerA time out interrupt
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerControlEvent as the ui32Event parameter.
N//
N//*****************************************************************************
N#define TIMER_EVENT_POS_EDGE    0x00000000  // Count positive edges
N#define TIMER_EVENT_NEG_EDGE    0x00000404  // Count negative edges
N#define TIMER_EVENT_BOTH_EDGES  0x00000C0C  // Count both edges
N
N//*****************************************************************************
N//
N// Values that can be passed to most of the timer APIs as the ui32Timer
N// parameter.
N//
N//*****************************************************************************
N#define TIMER_A                 0x000000ff  // Timer A
N#define TIMER_B                 0x0000ff00  // Timer B
N#define TIMER_BOTH              0x0000ffff  // Timer Both
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerSynchronize as the ui32Timers parameter.
N//
N//*****************************************************************************
N#define TIMER_0A_SYNC           0x00000001  // Synchronize Timer 0A
N#define TIMER_0B_SYNC           0x00000002  // Synchronize Timer 0B
N#define TIMER_1A_SYNC           0x00000004  // Synchronize Timer 1A
N#define TIMER_1B_SYNC           0x00000008  // Synchronize Timer 1B
N#define TIMER_2A_SYNC           0x00000010  // Synchronize Timer 2A
N#define TIMER_2B_SYNC           0x00000020  // Synchronize Timer 2B
N#define TIMER_3A_SYNC           0x00000040  // Synchronize Timer 3A
N#define TIMER_3B_SYNC           0x00000080  // Synchronize Timer 3B
N#define TIMER_4A_SYNC           0x00000100  // Synchronize Timer 4A
N#define TIMER_4B_SYNC           0x00000200  // Synchronize Timer 4B
N#define TIMER_5A_SYNC           0x00000400  // Synchronize Timer 5A
N#define TIMER_5B_SYNC           0x00000800  // Synchronize Timer 5B
N#define WTIMER_0A_SYNC          0x00001000  // Synchronize Wide Timer 0A
N#define WTIMER_0B_SYNC          0x00002000  // Synchronize Wide Timer 0B
N#define WTIMER_1A_SYNC          0x00004000  // Synchronize Wide Timer 1A
N#define WTIMER_1B_SYNC          0x00008000  // Synchronize Wide Timer 1B
N#define WTIMER_2A_SYNC          0x00010000  // Synchronize Wide Timer 2A
N#define WTIMER_2B_SYNC          0x00020000  // Synchronize Wide Timer 2B
N#define WTIMER_3A_SYNC          0x00040000  // Synchronize Wide Timer 3A
N#define WTIMER_3B_SYNC          0x00080000  // Synchronize Wide Timer 3B
N#define WTIMER_4A_SYNC          0x00100000  // Synchronize Wide Timer 4A
N#define WTIMER_4B_SYNC          0x00200000  // Synchronize Wide Timer 4B
N#define WTIMER_5A_SYNC          0x00400000  // Synchronize Wide Timer 5A
N#define WTIMER_5B_SYNC          0x00800000  // Synchronize Wide Timer 5B
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerClockSourceSet() or returned from
N// TimerClockSourceGet().
N//
N//*****************************************************************************
N#define TIMER_CLOCK_SYSTEM      0x00000000
N#define TIMER_CLOCK_PIOSC       0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerDMAEventSet() or returned from
N// TimerDMAEventGet().
N//
N//*****************************************************************************
N#define TIMER_DMA_MODEMATCH_B   0x00000800
N#define TIMER_DMA_CAPEVENT_B    0x00000400
N#define TIMER_DMA_CAPMATCH_B    0x00000200
N#define TIMER_DMA_TIMEOUT_B     0x00000100
N#define TIMER_DMA_MODEMATCH_A   0x00000010
N#define TIMER_DMA_RTC_A         0x00000008
N#define TIMER_DMA_CAPEVENT_A    0x00000004
N#define TIMER_DMA_CAPMATCH_A    0x00000002
N#define TIMER_DMA_TIMEOUT_A     0x00000001
N
N//*****************************************************************************
N//
N// Values that can be passed to TimerADCEventSet() or returned from
N// TimerADCEventGet().
N//
N//*****************************************************************************
N#define TIMER_ADC_MODEMATCH_B   0x00000800
N#define TIMER_ADC_CAPEVENT_B    0x00000400
N#define TIMER_ADC_CAPMATCH_B    0x00000200
N#define TIMER_ADC_TIMEOUT_B     0x00000100
N#define TIMER_ADC_MODEMATCH_A   0x00000010
N#define TIMER_ADC_RTC_A         0x00000008
N#define TIMER_ADC_CAPEVENT_A    0x00000004
N#define TIMER_ADC_CAPMATCH_A    0x00000002
N#define TIMER_ADC_TIMEOUT_A     0x00000001
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void TimerEnable(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerDisable(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerConfigure(uint32_t ui32Base, uint32_t ui32Config);
Nextern void TimerControlLevel(uint32_t ui32Base, uint32_t ui32Timer,
N                              bool bInvert);
X                              _Bool bInvert);
Nextern void TimerControlTrigger(uint32_t ui32Base, uint32_t ui32Timer,
N                                bool bEnable);
X                                _Bool bEnable);
Nextern void TimerControlEvent(uint32_t ui32Base, uint32_t ui32Timer,
N                              uint32_t ui32Event);
Nextern void TimerControlStall(uint32_t ui32Base, uint32_t ui32Timer,
N                              bool bStall);
X                              _Bool bStall);
Nextern void TimerControlWaitOnTrigger(uint32_t ui32Base, uint32_t ui32Timer,
N                                      bool bWait);
X                                      _Bool bWait);
Nextern void TimerRTCEnable(uint32_t ui32Base);
Nextern void TimerRTCDisable(uint32_t ui32Base);
Nextern void TimerPrescaleSet(uint32_t ui32Base, uint32_t ui32Timer,
N                             uint32_t ui32Value);
Nextern uint32_t TimerPrescaleGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerPrescaleMatchSet(uint32_t ui32Base, uint32_t ui32Timer,
N                                  uint32_t ui32Value);
Nextern uint32_t TimerPrescaleMatchGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerLoadSet(uint32_t ui32Base, uint32_t ui32Timer,
N                         uint32_t ui32Value);
Nextern uint32_t TimerLoadGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerLoadSet64(uint32_t ui32Base, uint64_t ui64Value);
Nextern uint64_t TimerLoadGet64(uint32_t ui32Base);
Nextern uint32_t TimerValueGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern uint64_t TimerValueGet64(uint32_t ui32Base);
Nextern void TimerMatchSet(uint32_t ui32Base, uint32_t ui32Timer,
N                          uint32_t ui32Value);
Nextern uint32_t TimerMatchGet(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerMatchSet64(uint32_t ui32Base, uint64_t ui64Value);
Nextern uint64_t TimerMatchGet64(uint32_t ui32Base);
Nextern void TimerIntRegister(uint32_t ui32Base, uint32_t ui32Timer,
N                             void (*pfnHandler)(void));
Nextern void TimerIntUnregister(uint32_t ui32Base, uint32_t ui32Timer);
Nextern void TimerIntEnable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void TimerIntDisable(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern uint32_t TimerIntStatus(uint32_t ui32Base, bool bMasked);
Xextern uint32_t TimerIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void TimerIntClear(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void TimerSynchronize(uint32_t ui32Base, uint32_t ui32Timers);
Nextern uint32_t TimerClockSourceGet(uint32_t ui32Base);
Nextern void TimerClockSourceSet(uint32_t ui32Base, uint32_t ui32Source);
Nextern uint32_t TimerADCEventGet(uint32_t ui32Base);
Nextern void TimerADCEventSet(uint32_t ui32Base, uint32_t ui32ADCEvent);
Nextern uint32_t TimerDMAEventGet(uint32_t ui32Base);
Nextern void TimerDMAEventSet(uint32_t ui32Base, uint32_t ui32DMAEvent);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_TIMER_H__
L 47 ".\startup\common_head.h" 2
N#include "pwm.h"
L 1 ".\driverlib\pwm.h" 1
N//*****************************************************************************
N//
N// pwm.h - API function protoypes for Pulse Width Modulation (PWM) ports
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_PWM_H__
N#define __DRIVERLIB_PWM_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The following defines are passed to PWMGenConfigure() as the ui32Config
N// parameter and specify the configuration of the PWM generator.
N//
N//*****************************************************************************
N#define PWM_GEN_MODE_DOWN       0x00000000  // Down count mode
N#define PWM_GEN_MODE_UP_DOWN    0x00000002  // Up/Down count mode
N#define PWM_GEN_MODE_SYNC       0x00000038  // Synchronous updates
N#define PWM_GEN_MODE_NO_SYNC    0x00000000  // Immediate updates
N#define PWM_GEN_MODE_DBG_RUN    0x00000004  // Continue running in debug mode
N#define PWM_GEN_MODE_DBG_STOP   0x00000000  // Stop running in debug mode
N#define PWM_GEN_MODE_FAULT_LATCHED \
N                                0x00040000  // Fault is latched
X#define PWM_GEN_MODE_FAULT_LATCHED                                 0x00040000  
N#define PWM_GEN_MODE_FAULT_UNLATCHED \
N                                0x00000000  // Fault is not latched
X#define PWM_GEN_MODE_FAULT_UNLATCHED                                 0x00000000  
N#define PWM_GEN_MODE_FAULT_MINPER \
N                                0x00020000  // Enable min fault period
X#define PWM_GEN_MODE_FAULT_MINPER                                 0x00020000  
N#define PWM_GEN_MODE_FAULT_NO_MINPER \
N                                0x00000000  // Disable min fault period
X#define PWM_GEN_MODE_FAULT_NO_MINPER                                 0x00000000  
N#define PWM_GEN_MODE_FAULT_EXT  0x00010000  // Enable extended fault support
N#define PWM_GEN_MODE_FAULT_LEGACY \
N                                0x00000000  // Disable extended fault support
X#define PWM_GEN_MODE_FAULT_LEGACY                                 0x00000000  
N#define PWM_GEN_MODE_DB_NO_SYNC 0x00000000  // Deadband updates occur
N                                            // immediately
N#define PWM_GEN_MODE_DB_SYNC_LOCAL \
N                                0x0000A800  // Deadband updates locally
X#define PWM_GEN_MODE_DB_SYNC_LOCAL                                 0x0000A800  
N                                            // synchronized
N#define PWM_GEN_MODE_DB_SYNC_GLOBAL \
N                                0x0000FC00  // Deadband updates globally
X#define PWM_GEN_MODE_DB_SYNC_GLOBAL                                 0x0000FC00  
N                                            // synchronized
N#define PWM_GEN_MODE_GEN_NO_SYNC \
N                                0x00000000  // Generator mode updates occur
X#define PWM_GEN_MODE_GEN_NO_SYNC                                 0x00000000  
N                                            // immediately
N#define PWM_GEN_MODE_GEN_SYNC_LOCAL \
N                                0x00000280  // Generator mode updates locally
X#define PWM_GEN_MODE_GEN_SYNC_LOCAL                                 0x00000280  
N                                            // synchronized
N#define PWM_GEN_MODE_GEN_SYNC_GLOBAL \
N                                0x000003C0  // Generator mode updates globally
X#define PWM_GEN_MODE_GEN_SYNC_GLOBAL                                 0x000003C0  
N                                            // synchronized
N
N//*****************************************************************************
N//
N// Defines for enabling, disabling, and clearing PWM generator interrupts and
N// triggers.
N//
N//*****************************************************************************
N#define PWM_INT_CNT_ZERO        0x00000001  // Int if COUNT = 0
N#define PWM_INT_CNT_LOAD        0x00000002  // Int if COUNT = LOAD
N#define PWM_INT_CNT_AU          0x00000004  // Int if COUNT = CMPA U
N#define PWM_INT_CNT_AD          0x00000008  // Int if COUNT = CMPA D
N#define PWM_INT_CNT_BU          0x00000010  // Int if COUNT = CMPA U
N#define PWM_INT_CNT_BD          0x00000020  // Int if COUNT = CMPA D
N#define PWM_TR_CNT_ZERO         0x00000100  // Trig if COUNT = 0
N#define PWM_TR_CNT_LOAD         0x00000200  // Trig if COUNT = LOAD
N#define PWM_TR_CNT_AU           0x00000400  // Trig if COUNT = CMPA U
N#define PWM_TR_CNT_AD           0x00000800  // Trig if COUNT = CMPA D
N#define PWM_TR_CNT_BU           0x00001000  // Trig if COUNT = CMPA U
N#define PWM_TR_CNT_BD           0x00002000  // Trig if COUNT = CMPA D
N
N//*****************************************************************************
N//
N// Defines for enabling, disabling, and clearing PWM interrupts.
N//
N//*****************************************************************************
N#define PWM_INT_GEN_0           0x00000001  // Generator 0 interrupt
N#define PWM_INT_GEN_1           0x00000002  // Generator 1 interrupt
N#define PWM_INT_GEN_2           0x00000004  // Generator 2 interrupt
N#define PWM_INT_GEN_3           0x00000008  // Generator 3 interrupt
N#define PWM_INT_FAULT0          0x00010000  // Fault0 interrupt
N#define PWM_INT_FAULT1          0x00020000  // Fault1 interrupt
N#define PWM_INT_FAULT2          0x00040000  // Fault2 interrupt
N#define PWM_INT_FAULT3          0x00080000  // Fault3 interrupt
N#define PWM_INT_FAULT_M         0x000F0000  // Fault interrupt source mask
N
N//*****************************************************************************
N//
N// Defines to identify the generators within a module.
N//
N//*****************************************************************************
N#define PWM_GEN_0               0x00000040  // Offset address of Gen0
N#define PWM_GEN_1               0x00000080  // Offset address of Gen1
N#define PWM_GEN_2               0x000000C0  // Offset address of Gen2
N#define PWM_GEN_3               0x00000100  // Offset address of Gen3
N
N#define PWM_GEN_0_BIT           0x00000001  // Bit-wise ID for Gen0
N#define PWM_GEN_1_BIT           0x00000002  // Bit-wise ID for Gen1
N#define PWM_GEN_2_BIT           0x00000004  // Bit-wise ID for Gen2
N#define PWM_GEN_3_BIT           0x00000008  // Bit-wise ID for Gen3
N
N#define PWM_GEN_EXT_0           0x00000800  // Offset of Gen0 ext address range
N#define PWM_GEN_EXT_1           0x00000880  // Offset of Gen1 ext address range
N#define PWM_GEN_EXT_2           0x00000900  // Offset of Gen2 ext address range
N#define PWM_GEN_EXT_3           0x00000980  // Offset of Gen3 ext address range
N
N//*****************************************************************************
N//
N// Defines to identify the outputs within a module.
N//
N//*****************************************************************************
N#define PWM_OUT_0               0x00000040  // Encoded offset address of PWM0
N#define PWM_OUT_1               0x00000041  // Encoded offset address of PWM1
N#define PWM_OUT_2               0x00000082  // Encoded offset address of PWM2
N#define PWM_OUT_3               0x00000083  // Encoded offset address of PWM3
N#define PWM_OUT_4               0x000000C4  // Encoded offset address of PWM4
N#define PWM_OUT_5               0x000000C5  // Encoded offset address of PWM5
N#define PWM_OUT_6               0x00000106  // Encoded offset address of PWM6
N#define PWM_OUT_7               0x00000107  // Encoded offset address of PWM7
N
N#define PWM_OUT_0_BIT           0x00000001  // Bit-wise ID for PWM0
N#define PWM_OUT_1_BIT           0x00000002  // Bit-wise ID for PWM1
N#define PWM_OUT_2_BIT           0x00000004  // Bit-wise ID for PWM2
N#define PWM_OUT_3_BIT           0x00000008  // Bit-wise ID for PWM3
N#define PWM_OUT_4_BIT           0x00000010  // Bit-wise ID for PWM4
N#define PWM_OUT_5_BIT           0x00000020  // Bit-wise ID for PWM5
N#define PWM_OUT_6_BIT           0x00000040  // Bit-wise ID for PWM6
N#define PWM_OUT_7_BIT           0x00000080  // Bit-wise ID for PWM7
N
N//*****************************************************************************
N//
N// Defines to identify each of the possible fault trigger conditions in
N// PWM_FAULT_GROUP_0.
N//
N//*****************************************************************************
N#define PWM_FAULT_GROUP_0       0
N
N#define PWM_FAULT_FAULT0        0x00000001
N#define PWM_FAULT_FAULT1        0x00000002
N#define PWM_FAULT_FAULT2        0x00000004
N#define PWM_FAULT_FAULT3        0x00000008
N#define PWM_FAULT_ACMP0         0x00010000
N#define PWM_FAULT_ACMP1         0x00020000
N#define PWM_FAULT_ACMP2         0x00040000
N
N//*****************************************************************************
N//
N// Defines to identify each of the possible fault trigger conditions in
N// PWM_FAULT_GROUP_1.
N//
N//*****************************************************************************
N#define PWM_FAULT_GROUP_1       1
N
N#define PWM_FAULT_DCMP0         0x00000001
N#define PWM_FAULT_DCMP1         0x00000002
N#define PWM_FAULT_DCMP2         0x00000004
N#define PWM_FAULT_DCMP3         0x00000008
N#define PWM_FAULT_DCMP4         0x00000010
N#define PWM_FAULT_DCMP5         0x00000020
N#define PWM_FAULT_DCMP6         0x00000040
N#define PWM_FAULT_DCMP7         0x00000080
N
N//*****************************************************************************
N//
N// Defines to identify the sense of each of the external FAULTn signals
N//
N//*****************************************************************************
N#define PWM_FAULT0_SENSE_HIGH   0x00000000
N#define PWM_FAULT0_SENSE_LOW    0x00000001
N#define PWM_FAULT1_SENSE_HIGH   0x00000000
N#define PWM_FAULT1_SENSE_LOW    0x00000002
N#define PWM_FAULT2_SENSE_HIGH   0x00000000
N#define PWM_FAULT2_SENSE_LOW    0x00000004
N#define PWM_FAULT3_SENSE_HIGH   0x00000000
N#define PWM_FAULT3_SENSE_LOW    0x00000008
N
N//*****************************************************************************
N//
N// Defines that can be passed to the PWMClockSet() API as the ui32Config
N// parameter, and can be returned by the PWMClockGet() API.
N//
N//*****************************************************************************
N#define PWM_SYSCLK_DIV_1        0x00000000  // PWM clock is system clock
N#define PWM_SYSCLK_DIV_2        0x00000100  // PWM clock is system clock /2
N#define PWM_SYSCLK_DIV_4        0x00000101  // PWM clock is system clock /4
N#define PWM_SYSCLK_DIV_8        0x00000102  // PWM clock is system clock /8
N#define PWM_SYSCLK_DIV_16       0x00000103  // PWM clock is system clock /16
N#define PWM_SYSCLK_DIV_32       0x00000104  // PWM clock is system clock /32
N#define PWM_SYSCLK_DIV_64       0x00000105  // PWM clock is system clock /64
N
N//*****************************************************************************
N//
N// Defines passed to PWMOutputUpdateMode() to identify the synchronization mode
N// to use when enabling or disabling outputs using PWMOutputState().
N//
N//*****************************************************************************
N#define PWM_OUTPUT_MODE_NO_SYNC 0x00000000 // Updates to occur immediately
N#define PWM_OUTPUT_MODE_SYNC_LOCAL \
N                                0x00000002 // Updates are locally synchronized
X#define PWM_OUTPUT_MODE_SYNC_LOCAL                                 0x00000002 
N#define PWM_OUTPUT_MODE_SYNC_GLOBAL \
N                                0x00000003 // Updates are globally synchronized
X#define PWM_OUTPUT_MODE_SYNC_GLOBAL                                 0x00000003 
N
N//*****************************************************************************
N//
N// API Function prototypes
N//
N//*****************************************************************************
Nextern void PWMGenConfigure(uint32_t ui32Base, uint32_t ui32Gen,
N                            uint32_t ui32Config);
Nextern void PWMGenPeriodSet(uint32_t ui32Base, uint32_t ui32Gen,
N                            uint32_t ui32Period);
Nextern uint32_t PWMGenPeriodGet(uint32_t ui32Base,
N                                uint32_t ui32Gen);
Nextern void PWMGenEnable(uint32_t ui32Base, uint32_t ui32Gen);
Nextern void PWMGenDisable(uint32_t ui32Base, uint32_t ui32Gen);
Nextern void PWMPulseWidthSet(uint32_t ui32Base, uint32_t ui32PWMOut,
N                             uint32_t ui32Width);
Nextern uint32_t PWMPulseWidthGet(uint32_t ui32Base,
N                                 uint32_t ui32PWMOut);
Nextern void PWMDeadBandEnable(uint32_t ui32Base, uint32_t ui32Gen,
N                              uint16_t ui16Rise, uint16_t ui16Fall);
Nextern void PWMDeadBandDisable(uint32_t ui32Base, uint32_t ui32Gen);
Nextern void PWMSyncUpdate(uint32_t ui32Base, uint32_t ui32GenBits);
Nextern void PWMSyncTimeBase(uint32_t ui32Base, uint32_t ui32GenBits);
Nextern void PWMOutputState(uint32_t ui32Base, uint32_t ui32PWMOutBits,
N                           bool bEnable);
X                           _Bool bEnable);
Nextern void PWMOutputInvert(uint32_t ui32Base, uint32_t ui32PWMOutBits,
N                            bool bInvert);
X                            _Bool bInvert);
Nextern void PWMOutputFaultLevel(uint32_t ui32Base,
N                                uint32_t ui32PWMOutBits,
N                                bool bDriveHigh);
X                                _Bool bDriveHigh);
Nextern void PWMOutputFault(uint32_t ui32Base, uint32_t ui32PWMOutBits,
N                           bool bFaultSuppress);
X                           _Bool bFaultSuppress);
Nextern void PWMGenIntRegister(uint32_t ui32Base, uint32_t ui32Gen,
N                              void (*pfnIntHandler)(void));
Nextern void PWMGenIntUnregister(uint32_t ui32Base, uint32_t ui32Gen);
Nextern void PWMFaultIntRegister(uint32_t ui32Base,
N                                void (*pfnIntHandler)(void));
Nextern void PWMFaultIntUnregister(uint32_t ui32Base);
Nextern void PWMGenIntTrigEnable(uint32_t ui32Base, uint32_t ui32Gen,
N                                uint32_t ui32IntTrig);
Nextern void PWMGenIntTrigDisable(uint32_t ui32Base, uint32_t ui32Gen,
N                                 uint32_t ui32IntTrig);
Nextern uint32_t PWMGenIntStatus(uint32_t ui32Base, uint32_t ui32Gen,
N                                bool bMasked);
X                                _Bool bMasked);
Nextern void PWMGenIntClear(uint32_t ui32Base, uint32_t ui32Gen,
N                           uint32_t ui32Ints);
Nextern void PWMIntEnable(uint32_t ui32Base, uint32_t ui32GenFault);
Nextern void PWMIntDisable(uint32_t ui32Base, uint32_t ui32GenFault);
Nextern void PWMFaultIntClear(uint32_t ui32Base);
Nextern uint32_t PWMIntStatus(uint32_t ui32Base, bool bMasked);
Xextern uint32_t PWMIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void PWMFaultIntClearExt(uint32_t ui32Base,
N                                uint32_t ui32FaultInts);
Nextern void PWMGenFaultConfigure(uint32_t ui32Base, uint32_t ui32Gen,
N                                 uint32_t ui32MinFaultPeriod,
N                                 uint32_t ui32FaultSenses);
Nextern void PWMGenFaultTriggerSet(uint32_t ui32Base, uint32_t ui32Gen,
N                                  uint32_t ui32Group,
N                                  uint32_t ui32FaultTriggers);
Nextern uint32_t PWMGenFaultTriggerGet(uint32_t ui32Base,
N                                      uint32_t ui32Gen,
N                                      uint32_t ui32Group);
Nextern uint32_t PWMGenFaultStatus(uint32_t ui32Base,
N                                  uint32_t ui32Gen,
N                                  uint32_t ui32Group);
Nextern void PWMGenFaultClear(uint32_t ui32Base, uint32_t ui32Gen,
N                             uint32_t ui32Group,
N                             uint32_t ui32FaultTriggers);
Nextern void PWMClockSet(uint32_t ui32Base, uint32_t ui32Config);
Nextern uint32_t PWMClockGet(uint32_t ui32Base);
Nextern void PWMOutputUpdateMode(uint32_t ui32Base,
N                                uint32_t ui32PWMOutBits,
N                                uint32_t ui32Mode);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_PWM_H__
L 48 ".\startup\common_head.h" 2
N#include "hw_memmap.h"
L 1 ".\inc\hw_memmap.h" 1
N//*****************************************************************************
N//
N// hw_memmap.h - Macros defining the memory map of the device.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_MEMMAP_H__
N#define __HW_MEMMAP_H__
N
N//*****************************************************************************
N//
N// The following are defines for the base address of the memories and
N// peripherals.
N//
N//*****************************************************************************
N#define FLASH_BASE              0x00000000  // FLASH memory
N#define SRAM_BASE               0x20000000  // SRAM memory
N#define WATCHDOG0_BASE          0x40000000  // Watchdog0
N#define WATCHDOG1_BASE          0x40001000  // Watchdog1
N#define GPIO_PORTA_BASE         0x40004000  // GPIO Port A
N#define GPIO_PORTB_BASE         0x40005000  // GPIO Port B
N#define GPIO_PORTC_BASE         0x40006000  // GPIO Port C
N#define GPIO_PORTD_BASE         0x40007000  // GPIO Port D
N#define SSI0_BASE               0x40008000  // SSI0
N#define SSI1_BASE               0x40009000  // SSI1
N#define SSI2_BASE               0x4000A000  // SSI2
N#define SSI3_BASE               0x4000B000  // SSI3
N#define UART0_BASE              0x4000C000  // UART0
N#define UART1_BASE              0x4000D000  // UART1
N#define UART2_BASE              0x4000E000  // UART2
N#define UART3_BASE              0x4000F000  // UART3
N#define UART4_BASE              0x40010000  // UART4
N#define UART5_BASE              0x40011000  // UART5
N#define UART6_BASE              0x40012000  // UART6
N#define UART7_BASE              0x40013000  // UART7
N#define I2C0_BASE               0x40020000  // I2C0
N#define I2C1_BASE               0x40021000  // I2C1
N#define I2C2_BASE               0x40022000  // I2C2
N#define I2C3_BASE               0x40023000  // I2C3
N#define GPIO_PORTE_BASE         0x40024000  // GPIO Port E
N#define GPIO_PORTF_BASE         0x40025000  // GPIO Port F
N#define GPIO_PORTG_BASE         0x40026000  // GPIO Port G
N#define GPIO_PORTH_BASE         0x40027000  // GPIO Port H
N#define PWM0_BASE               0x40028000  // Pulse Width Modulator (PWM)
N#define PWM1_BASE               0x40029000  // Pulse Width Modulator (PWM)
N#define QEI0_BASE               0x4002C000  // QEI0
N#define QEI1_BASE               0x4002D000  // QEI1
N#define TIMER0_BASE             0x40030000  // Timer0
N#define TIMER1_BASE             0x40031000  // Timer1
N#define TIMER2_BASE             0x40032000  // Timer2
N#define TIMER3_BASE             0x40033000  // Timer3
N#define TIMER4_BASE             0x40034000  // Timer4
N#define TIMER5_BASE             0x40035000  // Timer5
N#define WTIMER0_BASE            0x40036000  // Wide Timer0
N#define WTIMER1_BASE            0x40037000  // Wide Timer1
N#define ADC0_BASE               0x40038000  // ADC0
N#define ADC1_BASE               0x40039000  // ADC1
N#define COMP_BASE               0x4003C000  // Analog comparators
N#define GPIO_PORTJ_BASE         0x4003D000  // GPIO Port J
N#define CAN0_BASE               0x40040000  // CAN0
N#define CAN1_BASE               0x40041000  // CAN1
N#define WTIMER2_BASE            0x4004C000  // Wide Timer2
N#define WTIMER3_BASE            0x4004D000  // Wide Timer3
N#define WTIMER4_BASE            0x4004E000  // Wide Timer4
N#define WTIMER5_BASE            0x4004F000  // Wide Timer5
N#define USB0_BASE               0x40050000  // USB 0 Controller
N#define GPIO_PORTA_AHB_BASE     0x40058000  // GPIO Port A (high speed)
N#define GPIO_PORTB_AHB_BASE     0x40059000  // GPIO Port B (high speed)
N#define GPIO_PORTC_AHB_BASE     0x4005A000  // GPIO Port C (high speed)
N#define GPIO_PORTD_AHB_BASE     0x4005B000  // GPIO Port D (high speed)
N#define GPIO_PORTE_AHB_BASE     0x4005C000  // GPIO Port E (high speed)
N#define GPIO_PORTF_AHB_BASE     0x4005D000  // GPIO Port F (high speed)
N#define GPIO_PORTG_AHB_BASE     0x4005E000  // GPIO Port G (high speed)
N#define GPIO_PORTH_AHB_BASE     0x4005F000  // GPIO Port H (high speed)
N#define GPIO_PORTJ_AHB_BASE     0x40060000  // GPIO Port J (high speed)
N#define GPIO_PORTK_BASE         0x40061000  // GPIO Port K
N#define GPIO_PORTL_BASE         0x40062000  // GPIO Port L
N#define GPIO_PORTM_BASE         0x40063000  // GPIO Port M
N#define GPIO_PORTN_BASE         0x40064000  // GPIO Port N
N#define GPIO_PORTP_BASE         0x40065000  // GPIO Port P
N#define GPIO_PORTQ_BASE         0x40066000  // GPIO Port Q
N#define GPIO_PORTR_BASE         0x40067000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTS_BASE         0x40068000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTT_BASE         0x40069000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define LPCB0_BASE              0x40080000  // Low Pin Count Interface (LPC)
N#define FAN0_BASE               0x40084000  // Fan Control (FAN)
N#define FAN1_BASE               0x40085000  // Fan Control (FAN)
N#define EEPROM_BASE             0x400AF000  // EEPROM memory
N#define PECI0_BASE              0x400B0000  // Platform Environment Control
N                                            // Interface (PECI)
N#define ONEWIRE0_BASE           0x400B6000  // 1-Wire Master Module
N#define HIM0_BASE               0x400B7000  // Human Interface Master (HIM)
N#define I2C8_BASE               0x400B8000  // I2C8
N#define I2C9_BASE               0x400B9000  // I2C9
N#define I2C4_BASE               0x400C0000  // I2C4
N#define I2C5_BASE               0x400C1000  // I2C5
N#define I2C6_BASE               0x400C2000  // I2C6
N#define I2C7_BASE               0x400C3000  // I2C7
N#define EPI0_BASE               0x400D0000  // EPI0
N#define TIMER6_BASE             0x400E0000  // General-Purpose Timers
N#define TIMER7_BASE             0x400E1000  // General-Purpose Timers
N#define EMAC0_BASE              0x400EC000  // Ethernet Controller
N#define SYSEXC_BASE             0x400F9000  // System Exception Module
N#define HIB_BASE                0x400FC000  // Hibernation Module
N#define FLASH_CTRL_BASE         0x400FD000  // FLASH Controller
N#define SYSCTL_BASE             0x400FE000  // System Control
N#define UDMA_BASE               0x400FF000  // uDMA Controller
N#define CCM0_BASE               0x44030000  // Cyclical Redundancy Check (CRC)
N#define SHAMD5_BASE             0x44034000  // SHA/MD5 Accelerator
N#define AES_BASE                0x44036000  // Advance Encryption
N                                            // Hardware-Accelerated Module
N#define DES_BASE                0x44038000  // Data Encryption Standard
N                                            // Accelerator (DES)
N#define LCD0_BASE               0x44050000  // LCD Controller
N#define ITM_BASE                0xE0000000  // Instrumentation Trace Macrocell
N#define DWT_BASE                0xE0001000  // Data Watchpoint and Trace
N#define FPB_BASE                0xE0002000  // FLASH Patch and Breakpoint
N#define NVIC_BASE               0xE000E000  // Nested Vectored Interrupt Ctrl
N#define TPIU_BASE               0xE0040000  // Trace Port Interface Unit
N
N#endif // __HW_MEMMAP_H__
L 49 ".\startup\common_head.h" 2
N#include "hw_gpio.h"
L 1 ".\inc\hw_gpio.h" 1
N//*****************************************************************************
N//
N// hw_gpio.h - Defines and Macros for GPIO hardware.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_GPIO_H__
N#define __HW_GPIO_H__
N
N//*****************************************************************************
N//
N// The following are defines for the GPIO register offsets.
N//
N//*****************************************************************************
N#define GPIO_O_DATA             0x00000000  // GPIO Data
N#define GPIO_O_DIR              0x00000400  // GPIO Direction
N#define GPIO_O_IS               0x00000404  // GPIO Interrupt Sense
N#define GPIO_O_IBE              0x00000408  // GPIO Interrupt Both Edges
N#define GPIO_O_IEV              0x0000040C  // GPIO Interrupt Event
N#define GPIO_O_IM               0x00000410  // GPIO Interrupt Mask
N#define GPIO_O_RIS              0x00000414  // GPIO Raw Interrupt Status
N#define GPIO_O_MIS              0x00000418  // GPIO Masked Interrupt Status
N#define GPIO_O_ICR              0x0000041C  // GPIO Interrupt Clear
N#define GPIO_O_AFSEL            0x00000420  // GPIO Alternate Function Select
N#define GPIO_O_DR2R             0x00000500  // GPIO 2-mA Drive Select
N#define GPIO_O_DR4R             0x00000504  // GPIO 4-mA Drive Select
N#define GPIO_O_DR8R             0x00000508  // GPIO 8-mA Drive Select
N#define GPIO_O_ODR              0x0000050C  // GPIO Open Drain Select
N#define GPIO_O_PUR              0x00000510  // GPIO Pull-Up Select
N#define GPIO_O_PDR              0x00000514  // GPIO Pull-Down Select
N#define GPIO_O_SLR              0x00000518  // GPIO Slew Rate Control Select
N#define GPIO_O_DEN              0x0000051C  // GPIO Digital Enable
N#define GPIO_O_LOCK             0x00000520  // GPIO Lock
N#define GPIO_O_CR               0x00000524  // GPIO Commit
N#define GPIO_O_AMSEL            0x00000528  // GPIO Analog Mode Select
N#define GPIO_O_PCTL             0x0000052C  // GPIO Port Control
N#define GPIO_O_ADCCTL           0x00000530  // GPIO ADC Control
N#define GPIO_O_DMACTL           0x00000534  // GPIO DMA Control
N#define GPIO_O_SI               0x00000538  // GPIO Select Interrupt
N#define GPIO_O_DR12R            0x0000053C  // GPIO 12-mA Drive Select
N#define GPIO_O_WAKEPEN          0x00000540  // GPIO Wake Pin Enable
N#define GPIO_O_WAKELVL          0x00000544  // GPIO Wake Level
N#define GPIO_O_WAKESTAT         0x00000548  // GPIO Wake Status
N#define GPIO_O_PP               0x00000FC0  // GPIO Peripheral Property
N#define GPIO_O_PC               0x00000FC4  // GPIO Peripheral Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_IM register.
N//
N//*****************************************************************************
N#define GPIO_IM_DMAIME          0x00000100  // GPIO uDMA Interrupt Mask Enable
N#define GPIO_IM_GPIO_M          0x000000FF  // GPIO Interrupt Mask Enable
N#define GPIO_IM_GPIO_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_RIS register.
N//
N//*****************************************************************************
N#define GPIO_RIS_DMARIS         0x00000100  // GPIO uDMA Interrupt Raw Status
N#define GPIO_RIS_GPIO_M         0x000000FF  // GPIO Interrupt Raw Status
N#define GPIO_RIS_GPIO_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_MIS register.
N//
N//*****************************************************************************
N#define GPIO_MIS_DMAMIS         0x00000100  // GPIO uDMA Masked Interrupt
N                                            // Status
N#define GPIO_MIS_GPIO_M         0x000000FF  // GPIO Masked Interrupt Status
N#define GPIO_MIS_GPIO_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_ICR register.
N//
N//*****************************************************************************
N#define GPIO_ICR_DMAIC          0x00000100  // GPIO uDMA Interrupt Clear
N#define GPIO_ICR_GPIO_M         0x000000FF  // GPIO Interrupt Clear
N#define GPIO_ICR_GPIO_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_LOCK register.
N//
N//*****************************************************************************
N#define GPIO_LOCK_M             0xFFFFFFFF  // GPIO Lock
N#define GPIO_LOCK_UNLOCKED      0x00000000  // The GPIOCR register is unlocked
N                                            // and may be modified
N#define GPIO_LOCK_LOCKED        0x00000001  // The GPIOCR register is locked
N                                            // and may not be modified
N#define GPIO_LOCK_KEY           0x4C4F434B  // Unlocks the GPIO_CR register
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_SI register.
N//
N//*****************************************************************************
N#define GPIO_SI_SUM             0x00000001  // Summary Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_DR12R register.
N//
N//*****************************************************************************
N#define GPIO_DR12R_DRV12_M      0x000000FF  // Output Pad 12-mA Drive Enable
N#define GPIO_DR12R_DRV12_12MA   0x00000001  // The corresponding GPIO pin has
N                                            // 12-mA drive. This encoding is
N                                            // only valid if the GPIOPP EDE bit
N                                            // is set and the appropriate
N                                            // GPIOPC EDM bit field is
N                                            // programmed to 0x3
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_WAKEPEN register.
N//
N//*****************************************************************************
N#define GPIO_WAKEPEN_WAKEP4     0x00000010  // P[4] Wake Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_WAKELVL register.
N//
N//*****************************************************************************
N#define GPIO_WAKELVL_WAKELVL4   0x00000010  // P[4] Wake Level
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_WAKESTAT
N// register.
N//
N//*****************************************************************************
N#define GPIO_WAKESTAT_STAT4     0x00000010  // P[4] Wake State
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_PP register.
N//
N//*****************************************************************************
N#define GPIO_PP_EDE             0x00000001  // Extended Drive Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the GPIO_O_PC register.
N//
N//*****************************************************************************
N#define GPIO_PC_EDM7_M          0x0000C000  // Extended Drive Mode Bit 7
N#define GPIO_PC_EDM6_M          0x00003000  // Extended Drive Mode Bit 6
N#define GPIO_PC_EDM5_M          0x00000C00  // Extended Drive Mode Bit 5
N#define GPIO_PC_EDM4_M          0x00000300  // Extended Drive Mode Bit 4
N#define GPIO_PC_EDM3_M          0x000000C0  // Extended Drive Mode Bit 3
N#define GPIO_PC_EDM2_M          0x00000030  // Extended Drive Mode Bit 2
N#define GPIO_PC_EDM1_M          0x0000000C  // Extended Drive Mode Bit 1
N#define GPIO_PC_EDM0_M          0x00000003  // Extended Drive Mode Bit 0
N#define GPIO_PC_EDM0_DISABLE    0x00000000  // Drive values of 2, 4 and 8 mA
N                                            // are maintained. GPIO n Drive
N                                            // Select (GPIODRnR) registers
N                                            // function as normal
N#define GPIO_PC_EDM0_6MA        0x00000001  // An additional 6 mA option is
N                                            // provided
N#define GPIO_PC_EDM0_PLUS2MA    0x00000003  // A 2 mA driver is always enabled;
N                                            // setting the corresponding
N                                            // GPIODR4R register bit adds 2 mA
N                                            // and setting the corresponding
N                                            // GPIODR8R of GPIODR12R register
N                                            // bit adds an additional 4 mA
N#define GPIO_PC_EDM7_S          14
N#define GPIO_PC_EDM6_S          12
N#define GPIO_PC_EDM5_S          10
N#define GPIO_PC_EDM4_S          8
N#define GPIO_PC_EDM3_S          6
N#define GPIO_PC_EDM2_S          4
N#define GPIO_PC_EDM1_S          2
N
N#endif // __HW_GPIO_H__
L 50 ".\startup\common_head.h" 2
N#include "watchdog.h"
L 1 ".\driverlib\watchdog.h" 1
N//*****************************************************************************
N//
N// watchdog.h - Prototypes for the Watchdog Timer API
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_WATCHDOG_H__
N#define __DRIVERLIB_WATCHDOG_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// The type of interrupt that can be generated by the watchdog.
N//
N//*****************************************************************************
N#define WATCHDOG_INT_TYPE_INT   0x00000000
N#define WATCHDOG_INT_TYPE_NMI   0x00000004
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern bool WatchdogRunning(uint32_t ui32Base);
Xextern _Bool WatchdogRunning(uint32_t ui32Base);
Nextern void WatchdogEnable(uint32_t ui32Base);
Nextern void WatchdogResetEnable(uint32_t ui32Base);
Nextern void WatchdogResetDisable(uint32_t ui32Base);
Nextern void WatchdogLock(uint32_t ui32Base);
Nextern void WatchdogUnlock(uint32_t ui32Base);
Nextern bool WatchdogLockState(uint32_t ui32Base);
Xextern _Bool WatchdogLockState(uint32_t ui32Base);
Nextern void WatchdogReloadSet(uint32_t ui32Base, uint32_t ui32LoadVal);
Nextern uint32_t WatchdogReloadGet(uint32_t ui32Base);
Nextern uint32_t WatchdogValueGet(uint32_t ui32Base);
Nextern void WatchdogIntRegister(uint32_t ui32Base, void (*pfnHandler)(void));
Nextern void WatchdogIntUnregister(uint32_t ui32Base);
Nextern void WatchdogIntEnable(uint32_t ui32Base);
Nextern uint32_t WatchdogIntStatus(uint32_t ui32Base, bool bMasked);
Xextern uint32_t WatchdogIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void WatchdogIntClear(uint32_t ui32Base);
Nextern void WatchdogIntTypeSet(uint32_t ui32Base, uint32_t ui32Type);
Nextern void WatchdogStallEnable(uint32_t ui32Base);
Nextern void WatchdogStallDisable(uint32_t ui32Base);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_WATCHDOG_H__
L 51 ".\startup\common_head.h" 2
N#include "hw_types.h"
L 1 ".\inc\hw_types.h" 1
N//*****************************************************************************
N//
N// hw_types.h - Common types and macros.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_TYPES_H__
N#define __HW_TYPES_H__
N
N//*****************************************************************************
N//
N// Macros for hardware access, both direct and via the bit-band region.
N//
N//*****************************************************************************
N#define HWREG(x)                                                              \
N        (*((volatile uint32_t *)(x)))
X#define HWREG(x)                                                                      (*((volatile uint32_t *)(x)))
N#define HWREGH(x)                                                             \
N        (*((volatile uint16_t *)(x)))
X#define HWREGH(x)                                                                     (*((volatile uint16_t *)(x)))
N#define HWREGB(x)                                                             \
N        (*((volatile uint8_t *)(x)))
X#define HWREGB(x)                                                                     (*((volatile uint8_t *)(x)))
N#define HWREGBITW(x, b)                                                       \
N        HWREG(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                     \
N              (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITW(x, b)                                                               HWREG(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITH(x, b)                                                       \
N        HWREGH(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                    \
N               (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITH(x, b)                                                               HWREGH(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITB(x, b)                                                       \
N        HWREGB(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                    \
N               (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITB(x, b)                                                               HWREGB(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N
N//*****************************************************************************
N//
N// Helper Macros for determining silicon revisions, etc.
N//
N// These macros will be used by Driverlib at "run-time" to create necessary
N// conditional code blocks that will allow a single version of the Driverlib
N// "binary" code to support multiple(all) Tiva silicon revisions.
N//
N// It is expected that these macros will be used inside of a standard 'C'
N// conditional block of code, e.g.
N//
N//     if(CLASS_IS_BLIZZARD)
N//     {
N//         do some Blizzard-class specific code here.
N//     }
N//
N// By default, these macros will be defined as run-time checks of the
N// appropriate register(s) to allow creation of run-time conditional code
N// blocks for a common DriverLib across the entire Tiva family.
N//
N// However, if code-space optimization is required, these macros can be "hard-
N// coded" for a specific version of Tiva silicon.  Many compilers will then
N// detect the "hard-coded" conditionals, and appropriately optimize the code
N// blocks, eliminating any "unreachable" code.  This would result in a smaller
N// Driverlib, thus producing a smaller final application size, but at the cost
N// of limiting the Driverlib binary to a specific Tiva silicon revision.
N//
N//*****************************************************************************
N
N
N
N
N#ifndef true
S#define true 1
N#endif
N
N#ifndef false
S#define false 0
N#endif
N
N
N
N
N#ifndef CLASS_IS_BLIZZARD
N#define CLASS_IS_BLIZZARD                                                    \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_BLIZZARD))
X#define CLASS_IS_BLIZZARD                                                            ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_BLIZZARD))
N#endif
N
N#ifndef CLASS_IS_SNOWFLAKE
N#define CLASS_IS_SNOWFLAKE                                                   \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_SNOWFLAKE))
X#define CLASS_IS_SNOWFLAKE                                                           ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_SNOWFLAKE))
N#endif
N
N#ifndef REVISION_IS_A0
N#define REVISION_IS_A0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A1
N#define REVISION_IS_A1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A2
N#define REVISION_IS_A2                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
X#define REVISION_IS_A2                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
N#endif
N
N#ifndef REVISION_IS_B0
N#define REVISION_IS_B0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_B0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_B1
N#define REVISION_IS_B1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
X#define REVISION_IS_B1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
N#endif
N
N#endif // __HW_TYPES_H__
L 52 ".\startup\common_head.h" 2
N#include "hw_ssi.h"
L 1 ".\inc\hw_ssi.h" 1
N//*****************************************************************************
N//
N// hw_ssi.h - Macros used when accessing the SSI hardware.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_SSI_H__
N#define __HW_SSI_H__
N
N//*****************************************************************************
N//
N// The following are defines for the SSI register offsets.
N//
N//*****************************************************************************
N#define SSI_O_CR0               0x00000000  // SSI Control 0
N#define SSI_O_CR1               0x00000004  // SSI Control 1
N#define SSI_O_DR                0x00000008  // SSI Data
N#define SSI_O_SR                0x0000000C  // SSI Status
N#define SSI_O_CPSR              0x00000010  // SSI Clock Prescale
N#define SSI_O_IM                0x00000014  // SSI Interrupt Mask
N#define SSI_O_RIS               0x00000018  // SSI Raw Interrupt Status
N#define SSI_O_MIS               0x0000001C  // SSI Masked Interrupt Status
N#define SSI_O_ICR               0x00000020  // SSI Interrupt Clear
N#define SSI_O_DMACTL            0x00000024  // SSI DMA Control
N#define SSI_O_PP                0x00000FC0  // SSI Peripheral Properties
N#define SSI_O_CC                0x00000FC8  // SSI Clock Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_CR0 register.
N//
N//*****************************************************************************
N#define SSI_CR0_SCR_M           0x0000FF00  // SSI Serial Clock Rate
N#define SSI_CR0_SPH             0x00000080  // SSI Serial Clock Phase
N#define SSI_CR0_SPO             0x00000040  // SSI Serial Clock Polarity
N#define SSI_CR0_FRF_M           0x00000030  // SSI Frame Format Select
N#define SSI_CR0_FRF_MOTO        0x00000000  // Freescale SPI Frame Format
N#define SSI_CR0_FRF_TI          0x00000010  // Texas Instruments Synchronous
N                                            // Serial Frame Format
N#define SSI_CR0_FRF_NMW         0x00000020  // MICROWIRE Frame Format
N#define SSI_CR0_DSS_M           0x0000000F  // SSI Data Size Select
N#define SSI_CR0_DSS_4           0x00000003  // 4-bit data
N#define SSI_CR0_DSS_5           0x00000004  // 5-bit data
N#define SSI_CR0_DSS_6           0x00000005  // 6-bit data
N#define SSI_CR0_DSS_7           0x00000006  // 7-bit data
N#define SSI_CR0_DSS_8           0x00000007  // 8-bit data
N#define SSI_CR0_DSS_9           0x00000008  // 9-bit data
N#define SSI_CR0_DSS_10          0x00000009  // 10-bit data
N#define SSI_CR0_DSS_11          0x0000000A  // 11-bit data
N#define SSI_CR0_DSS_12          0x0000000B  // 12-bit data
N#define SSI_CR0_DSS_13          0x0000000C  // 13-bit data
N#define SSI_CR0_DSS_14          0x0000000D  // 14-bit data
N#define SSI_CR0_DSS_15          0x0000000E  // 15-bit data
N#define SSI_CR0_DSS_16          0x0000000F  // 16-bit data
N#define SSI_CR0_SCR_S           8
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_CR1 register.
N//
N//*****************************************************************************
N#define SSI_CR1_EOM             0x00000800  // Stop Frame (End of Message)
N#define SSI_CR1_FSSHLDFRM       0x00000400  // FSS Hold Frame
N#define SSI_CR1_HSCLKEN         0x00000200  // High Speed Clock Enable
N#define SSI_CR1_DIR             0x00000100  // SSI Direction of Operation
N#define SSI_CR1_MODE_M          0x000000C0  // SSI Mode
N#define SSI_CR1_MODE_LEGACY     0x00000000  // Legacy SSI mode
N#define SSI_CR1_MODE_BI         0x00000040  // Bi-SSI mode
N#define SSI_CR1_MODE_QUAD       0x00000080  // Quad-SSI Mode
N#define SSI_CR1_MODE_ADVANCED   0x000000C0  // Advanced SSI Mode
N#define SSI_CR1_EOT             0x00000010  // End of Transmission
N#define SSI_CR1_SOD             0x00000008  // SSI Slave Mode Output Disable
N#define SSI_CR1_MS              0x00000004  // SSI Master/Slave Select
N#define SSI_CR1_SSE             0x00000002  // SSI Synchronous Serial Port
N                                            // Enable
N#define SSI_CR1_LBM             0x00000001  // SSI Loopback Mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_DR register.
N//
N//*****************************************************************************
N#define SSI_DR_DATA_M           0x0000FFFF  // SSI Receive/Transmit Data
N#define SSI_DR_DATA_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_SR register.
N//
N//*****************************************************************************
N#define SSI_SR_BSY              0x00000010  // SSI Busy Bit
N#define SSI_SR_RFF              0x00000008  // SSI Receive FIFO Full
N#define SSI_SR_RNE              0x00000004  // SSI Receive FIFO Not Empty
N#define SSI_SR_TNF              0x00000002  // SSI Transmit FIFO Not Full
N#define SSI_SR_TFE              0x00000001  // SSI Transmit FIFO Empty
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_CPSR register.
N//
N//*****************************************************************************
N#define SSI_CPSR_CPSDVSR_M      0x000000FF  // SSI Clock Prescale Divisor
N#define SSI_CPSR_CPSDVSR_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_IM register.
N//
N//*****************************************************************************
N#define SSI_IM_EOTIM            0x00000040  // End of Transmit Interrupt Mask
N#define SSI_IM_DMATXIM          0x00000020  // SSI Transmit DMA Interrupt Mask
N#define SSI_IM_DMARXIM          0x00000010  // SSI Receive DMA Interrupt Mask
N#define SSI_IM_TXIM             0x00000008  // SSI Transmit FIFO Interrupt Mask
N#define SSI_IM_RXIM             0x00000004  // SSI Receive FIFO Interrupt Mask
N#define SSI_IM_RTIM             0x00000002  // SSI Receive Time-Out Interrupt
N                                            // Mask
N#define SSI_IM_RORIM            0x00000001  // SSI Receive Overrun Interrupt
N                                            // Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_RIS register.
N//
N//*****************************************************************************
N#define SSI_RIS_EOTRIS          0x00000040  // End of Transmit Raw Interrupt
N                                            // Status
N#define SSI_RIS_DMATXRIS        0x00000020  // SSI Transmit DMA Raw Interrupt
N                                            // Status
N#define SSI_RIS_DMARXRIS        0x00000010  // SSI Receive DMA Raw Interrupt
N                                            // Status
N#define SSI_RIS_TXRIS           0x00000008  // SSI Transmit FIFO Raw Interrupt
N                                            // Status
N#define SSI_RIS_RXRIS           0x00000004  // SSI Receive FIFO Raw Interrupt
N                                            // Status
N#define SSI_RIS_RTRIS           0x00000002  // SSI Receive Time-Out Raw
N                                            // Interrupt Status
N#define SSI_RIS_RORRIS          0x00000001  // SSI Receive Overrun Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_MIS register.
N//
N//*****************************************************************************
N#define SSI_MIS_EOTMIS          0x00000040  // End of Transmit Masked Interrupt
N                                            // Status
N#define SSI_MIS_DMATXMIS        0x00000020  // SSI Transmit DMA Masked
N                                            // Interrupt Status
N#define SSI_MIS_DMARXMIS        0x00000010  // SSI Receive DMA Masked Interrupt
N                                            // Status
N#define SSI_MIS_TXMIS           0x00000008  // SSI Transmit FIFO Masked
N                                            // Interrupt Status
N#define SSI_MIS_RXMIS           0x00000004  // SSI Receive FIFO Masked
N                                            // Interrupt Status
N#define SSI_MIS_RTMIS           0x00000002  // SSI Receive Time-Out Masked
N                                            // Interrupt Status
N#define SSI_MIS_RORMIS          0x00000001  // SSI Receive Overrun Masked
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_ICR register.
N//
N//*****************************************************************************
N#define SSI_ICR_EOTIC           0x00000040  // End of Transmit Interrupt Clear
N#define SSI_ICR_DMATXIC         0x00000020  // SSI Transmit DMA Interrupt Clear
N#define SSI_ICR_DMARXIC         0x00000010  // SSI Receive DMA Interrupt Clear
N#define SSI_ICR_RTIC            0x00000002  // SSI Receive Time-Out Interrupt
N                                            // Clear
N#define SSI_ICR_RORIC           0x00000001  // SSI Receive Overrun Interrupt
N                                            // Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_DMACTL register.
N//
N//*****************************************************************************
N#define SSI_DMACTL_TXDMAE       0x00000002  // Transmit DMA Enable
N#define SSI_DMACTL_RXDMAE       0x00000001  // Receive DMA Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_PP register.
N//
N//*****************************************************************************
N#define SSI_PP_FSSHLDFRM        0x00000008  // FSS Hold Frame Capability
N#define SSI_PP_MODE_M           0x00000006  // Mode of Operation
N#define SSI_PP_MODE_LEGACY      0x00000000  // Legacy SSI mode
N#define SSI_PP_MODE_ADVBI       0x00000002  // Advanced SSI and Bi-SSI
N#define SSI_PP_MODE_ADVBIQUAD   0x00000004  // Advanced, Bi- and Quad-SSI
N#define SSI_PP_HSCLK            0x00000001  // High Speed Capability
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_CC register.
N//
N//*****************************************************************************
N#define SSI_CC_CS_M             0x0000000F  // SSI Baud Clock Source
N#define SSI_CC_CS_SYSPLL        0x00000000  // Either the system clock (if the
N                                            // PLL bypass is in effect) or the
N                                            // PLL output (default)
N#define SSI_CC_CS_PIOSC         0x00000005  // PIOSC
N
N#endif // __HW_SSI_H__
L 53 ".\startup\common_head.h" 2
N#include "interrupt.h"
L 1 ".\driverlib\interrupt.h" 1
N//*****************************************************************************
N//
N// interrupt.h - Prototypes for the NVIC Interrupt Controller Driver.
N//
N// Copyright (c) 2005-2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_INTERRUPT_H__
N#define __DRIVERLIB_INTERRUPT_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Macro to generate an interrupt priority mask based on the number of bits
N// of priority supported by the hardware.
N//
N//*****************************************************************************
N#define INT_PRIORITY_MASK       ((0xFF << (8 - NUM_PRIORITY_BITS)) & 0xFF)
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern bool IntMasterEnable(void);
Xextern _Bool IntMasterEnable(void);
Nextern bool IntMasterDisable(void);
Xextern _Bool IntMasterDisable(void);
Nextern void IntRegister(uint32_t ui32Interrupt, void (*pfnHandler)(void));
Nextern void IntUnregister(uint32_t ui32Interrupt);
Nextern void IntPriorityGroupingSet(uint32_t ui32Bits);
Nextern uint32_t IntPriorityGroupingGet(void);
Nextern void IntPrioritySet(uint32_t ui32Interrupt,
N                           uint8_t ui8Priority);
Nextern int32_t IntPriorityGet(uint32_t ui32Interrupt);
Nextern void IntEnable(uint32_t ui32Interrupt);
Nextern void IntDisable(uint32_t ui32Interrupt);
Nextern uint32_t IntIsEnabled(uint32_t ui32Interrupt);
Nextern void IntPendSet(uint32_t ui32Interrupt);
Nextern void IntPendClear(uint32_t ui32Interrupt);
Nextern void IntPriorityMaskSet(uint32_t ui32PriorityMask);
Nextern uint32_t IntPriorityMaskGet(void);
Nextern void IntTrigger(uint32_t ui32Interrupt);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_INTERRUPT_H__
L 54 ".\startup\common_head.h" 2
N#include "tm4c129encpdt.h"
L 1 ".\inc\tm4c129encpdt.h" 1
N//*****************************************************************************
N//
N// tm4c129encpdt.h - TM4C129ENCPDT Register Definitions
N//
N// Copyright (c) 2013 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.0.1.11577 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __TM4C129ENCPDT_H__
N#define __TM4C129ENCPDT_H__
N
N//*****************************************************************************
N//
N// Interrupt assignments
N//
N//*****************************************************************************
N#define INT_GPIOA               16          // GPIO Port A
N#define INT_GPIOB               17          // GPIO Port B
N#define INT_GPIOC               18          // GPIO Port C
N#define INT_GPIOD               19          // GPIO Port D
N#define INT_GPIOE               20          // GPIO Port E
N#define INT_UART0               21          // UART0
N#define INT_UART1               22          // UART1
N#define INT_SSI0                23          // SSI0
N#define INT_I2C0                24          // I2C0
N#define INT_PWM0_FAULT          25          // PWM Fault
N#define INT_PWM0_0              26          // PWM Generator 0
N#define INT_PWM0_1              27          // PWM Generator 1
N#define INT_PWM0_2              28          // PWM Generator 2
N#define INT_QEI0                29          // QEI0
N#define INT_ADC0SS0             30          // ADC0 Sequence 0
N#define INT_ADC0SS1             31          // ADC0 Sequence 1
N#define INT_ADC0SS2             32          // ADC0 Sequence 2
N#define INT_ADC0SS3             33          // ADC0 Sequence 3
N#define INT_WATCHDOG            34          // Watchdog Timers 0 and 1
N#define INT_TIMER0A             35          // 16/32-Bit Timer 0A
N#define INT_TIMER0B             36          // 16/32-Bit Timer 0B
N#define INT_TIMER1A             37          // 16/32-Bit Timer 1A
N#define INT_TIMER1B             38          // 16/32-Bit Timer 1B
N#define INT_TIMER2A             39          // 16/32-Bit Timer 2A
N#define INT_TIMER2B             40          // 16/32-Bit Timer 2B
N#define INT_COMP0               41          // Analog Comparator 0
N#define INT_COMP1               42          // Analog Comparator 1
N#define INT_COMP2               43          // Analog Comparator 2
N#define INT_SYSCTL              44          // System Control
N#define INT_FLASH               45          // Flash Memory Control
N#define INT_GPIOF               46          // GPIO Port F
N#define INT_GPIOG               47          // GPIO Port G
N#define INT_GPIOH               48          // GPIO Port H
N#define INT_UART2               49          // UART2
N#define INT_SSI1                50          // SSI1
N#define INT_TIMER3A             51          // 16/32-Bit Timer 3A
N#define INT_TIMER3B             52          // 16/32-Bit Timer 3B
N#define INT_I2C1                53          // I2C1
N#define INT_CAN0                54          // CAN 0
N#define INT_CAN1                55          // CAN1
N#define INT_EMAC0               56          // Ethernet MAC
N#define INT_HIBERNATE           57          // HIB (Power Island)
N#define INT_USB0                58          // USB MAC
N#define INT_PWM0_3              59          // PWM Generator 3
N#define INT_UDMA                60          // uDMA 0 Software
N#define INT_UDMAERR             61          // uDMA 0 Error
N#define INT_ADC1SS0             62          // ADC1 Sequence 0
N#define INT_ADC1SS1             63          // ADC1 Sequence 1
N#define INT_ADC1SS2             64          // ADC1 Sequence 2
N#define INT_ADC1SS3             65          // ADC1 Sequence 3
N#define INT_EPI0                66          // EPI 0
N#define INT_GPIOJ               67          // GPIO Port J
N#define INT_GPIOK               68          // GPIO Port K
N#define INT_GPIOL               69          // GPIO Port L
N#define INT_SSI2                70          // SSI 2
N#define INT_SSI3                71          // SSI 3
N#define INT_UART3               72          // UART 3
N#define INT_UART4               73          // UART 4
N#define INT_UART5               74          // UART 5
N#define INT_UART6               75          // UART 6
N#define INT_UART7               76          // UART 7
N#define INT_I2C2                77          // I2C 2
N#define INT_I2C3                78          // I2C 3
N#define INT_TIMER4A             79          // Timer 4A
N#define INT_TIMER4B             80          // Timer 4B
N#define INT_TIMER5A             81          // Timer 5A
N#define INT_TIMER5B             82          // Timer 5B
N#define INT_SYSEXC              83          // Floating-Point Exception
N                                            // (imprecise)
N#define INT_I2C4                86          // I2C 4
N#define INT_I2C5                87          // I2C 5
N#define INT_GPIOM               88          // GPIO Port M
N#define INT_GPION               89          // GPIO Port N
N#define INT_TAMPER0             91          // Tamper
N#define INT_GPIOP0              92          // GPIO Port P (Summary or P0)
N#define INT_GPIOP1              93          // GPIO Port P1
N#define INT_GPIOP2              94          // GPIO Port P2
N#define INT_GPIOP3              95          // GPIO Port P3
N#define INT_GPIOP4              96          // GPIO Port P4
N#define INT_GPIOP5              97          // GPIO Port P5
N#define INT_GPIOP6              98          // GPIO Port P6
N#define INT_GPIOP7              99          // GPIO Port P7
N#define INT_GPIOQ0              100         // GPIO Port Q (Summary or Q0)
N#define INT_GPIOQ1              101         // GPIO Port Q1
N#define INT_GPIOQ2              102         // GPIO Port Q2
N#define INT_GPIOQ3              103         // GPIO Port Q3
N#define INT_GPIOQ4              104         // GPIO Port Q4
N#define INT_GPIOQ5              105         // GPIO Port Q5
N#define INT_GPIOQ6              106         // GPIO Port Q6
N#define INT_GPIOQ7              107         // GPIO Port Q7
N#define INT_SHA0                110         // SHA/MD5
N#define INT_AES0                111         // AES
N#define INT_DES0                112         // DES
N#define INT_TIMER6A             114         // 16/32-Bit Timer 6A
N#define INT_TIMER6B             115         // 16/32-Bit Timer 6B
N#define INT_TIMER7A             116         // 16/32-Bit Timer 7A
N#define INT_TIMER7B             117         // 16/32-Bit Timer 7B
N#define INT_I2C6                118         // I2C 6
N#define INT_I2C7                119         // I2C 7
N#define INT_I2C8                125         // I2C 8
N#define INT_I2C9                126         // I2C 9
N
N//*****************************************************************************
N//
N// Watchdog Timer registers (WATCHDOG0)
N//
N//*****************************************************************************
N#define WATCHDOG0_LOAD_R        (*((volatile uint32_t *)0x40000000))
N#define WATCHDOG0_VALUE_R       (*((volatile uint32_t *)0x40000004))
N#define WATCHDOG0_CTL_R         (*((volatile uint32_t *)0x40000008))
N#define WATCHDOG0_ICR_R         (*((volatile uint32_t *)0x4000000C))
N#define WATCHDOG0_RIS_R         (*((volatile uint32_t *)0x40000010))
N#define WATCHDOG0_MIS_R         (*((volatile uint32_t *)0x40000014))
N#define WATCHDOG0_TEST_R        (*((volatile uint32_t *)0x40000418))
N#define WATCHDOG0_LOCK_R        (*((volatile uint32_t *)0x40000C00))
N
N//*****************************************************************************
N//
N// Watchdog Timer registers (WATCHDOG1)
N//
N//*****************************************************************************
N#define WATCHDOG1_LOAD_R        (*((volatile uint32_t *)0x40001000))
N#define WATCHDOG1_VALUE_R       (*((volatile uint32_t *)0x40001004))
N#define WATCHDOG1_CTL_R         (*((volatile uint32_t *)0x40001008))
N#define WATCHDOG1_ICR_R         (*((volatile uint32_t *)0x4000100C))
N#define WATCHDOG1_RIS_R         (*((volatile uint32_t *)0x40001010))
N#define WATCHDOG1_MIS_R         (*((volatile uint32_t *)0x40001014))
N#define WATCHDOG1_TEST_R        (*((volatile uint32_t *)0x40001418))
N#define WATCHDOG1_LOCK_R        (*((volatile uint32_t *)0x40001C00))
N
N//*****************************************************************************
N//
N// SSI registers (SSI0)
N//
N//*****************************************************************************
N#define SSI0_CR0_R              (*((volatile uint32_t *)0x40008000))
N#define SSI0_CR1_R              (*((volatile uint32_t *)0x40008004))
N#define SSI0_DR_R               (*((volatile uint32_t *)0x40008008))
N#define SSI0_SR_R               (*((volatile uint32_t *)0x4000800C))
N#define SSI0_CPSR_R             (*((volatile uint32_t *)0x40008010))
N#define SSI0_IM_R               (*((volatile uint32_t *)0x40008014))
N#define SSI0_RIS_R              (*((volatile uint32_t *)0x40008018))
N#define SSI0_MIS_R              (*((volatile uint32_t *)0x4000801C))
N#define SSI0_ICR_R              (*((volatile uint32_t *)0x40008020))
N#define SSI0_DMACTL_R           (*((volatile uint32_t *)0x40008024))
N#define SSI0_PP_R               (*((volatile uint32_t *)0x40008FC0))
N#define SSI0_CC_R               (*((volatile uint32_t *)0x40008FC8))
N
N//*****************************************************************************
N//
N// SSI registers (SSI1)
N//
N//*****************************************************************************
N#define SSI1_CR0_R              (*((volatile uint32_t *)0x40009000))
N#define SSI1_CR1_R              (*((volatile uint32_t *)0x40009004))
N#define SSI1_DR_R               (*((volatile uint32_t *)0x40009008))
N#define SSI1_SR_R               (*((volatile uint32_t *)0x4000900C))
N#define SSI1_CPSR_R             (*((volatile uint32_t *)0x40009010))
N#define SSI1_IM_R               (*((volatile uint32_t *)0x40009014))
N#define SSI1_RIS_R              (*((volatile uint32_t *)0x40009018))
N#define SSI1_MIS_R              (*((volatile uint32_t *)0x4000901C))
N#define SSI1_ICR_R              (*((volatile uint32_t *)0x40009020))
N#define SSI1_DMACTL_R           (*((volatile uint32_t *)0x40009024))
N#define SSI1_PP_R               (*((volatile uint32_t *)0x40009FC0))
N#define SSI1_CC_R               (*((volatile uint32_t *)0x40009FC8))
N
N//*****************************************************************************
N//
N// SSI registers (SSI2)
N//
N//*****************************************************************************
N#define SSI2_CR0_R              (*((volatile uint32_t *)0x4000A000))
N#define SSI2_CR1_R              (*((volatile uint32_t *)0x4000A004))
N#define SSI2_DR_R               (*((volatile uint32_t *)0x4000A008))
N#define SSI2_SR_R               (*((volatile uint32_t *)0x4000A00C))
N#define SSI2_CPSR_R             (*((volatile uint32_t *)0x4000A010))
N#define SSI2_IM_R               (*((volatile uint32_t *)0x4000A014))
N#define SSI2_RIS_R              (*((volatile uint32_t *)0x4000A018))
N#define SSI2_MIS_R              (*((volatile uint32_t *)0x4000A01C))
N#define SSI2_ICR_R              (*((volatile uint32_t *)0x4000A020))
N#define SSI2_DMACTL_R           (*((volatile uint32_t *)0x4000A024))
N#define SSI2_PP_R               (*((volatile uint32_t *)0x4000AFC0))
N#define SSI2_CC_R               (*((volatile uint32_t *)0x4000AFC8))
N
N//*****************************************************************************
N//
N// SSI registers (SSI3)
N//
N//*****************************************************************************
N#define SSI3_CR0_R              (*((volatile uint32_t *)0x4000B000))
N#define SSI3_CR1_R              (*((volatile uint32_t *)0x4000B004))
N#define SSI3_DR_R               (*((volatile uint32_t *)0x4000B008))
N#define SSI3_SR_R               (*((volatile uint32_t *)0x4000B00C))
N#define SSI3_CPSR_R             (*((volatile uint32_t *)0x4000B010))
N#define SSI3_IM_R               (*((volatile uint32_t *)0x4000B014))
N#define SSI3_RIS_R              (*((volatile uint32_t *)0x4000B018))
N#define SSI3_MIS_R              (*((volatile uint32_t *)0x4000B01C))
N#define SSI3_ICR_R              (*((volatile uint32_t *)0x4000B020))
N#define SSI3_DMACTL_R           (*((volatile uint32_t *)0x4000B024))
N#define SSI3_PP_R               (*((volatile uint32_t *)0x4000BFC0))
N#define SSI3_CC_R               (*((volatile uint32_t *)0x4000BFC8))
N
N//*****************************************************************************
N//
N// UART registers (UART0)
N//
N//*****************************************************************************
N#define UART0_DR_R              (*((volatile uint32_t *)0x4000C000))
N#define UART0_RSR_R             (*((volatile uint32_t *)0x4000C004))
N#define UART0_ECR_R             (*((volatile uint32_t *)0x4000C004))
N#define UART0_FR_R              (*((volatile uint32_t *)0x4000C018))
N#define UART0_ILPR_R            (*((volatile uint32_t *)0x4000C020))
N#define UART0_IBRD_R            (*((volatile uint32_t *)0x4000C024))
N#define UART0_FBRD_R            (*((volatile uint32_t *)0x4000C028))
N#define UART0_LCRH_R            (*((volatile uint32_t *)0x4000C02C))
N#define UART0_CTL_R             (*((volatile uint32_t *)0x4000C030))
N#define UART0_IFLS_R            (*((volatile uint32_t *)0x4000C034))
N#define UART0_IM_R              (*((volatile uint32_t *)0x4000C038))
N#define UART0_RIS_R             (*((volatile uint32_t *)0x4000C03C))
N#define UART0_MIS_R             (*((volatile uint32_t *)0x4000C040))
N#define UART0_ICR_R             (*((volatile uint32_t *)0x4000C044))
N#define UART0_DMACTL_R          (*((volatile uint32_t *)0x4000C048))
N#define UART0_9BITADDR_R        (*((volatile uint32_t *)0x4000C0A4))
N#define UART0_9BITAMASK_R       (*((volatile uint32_t *)0x4000C0A8))
N#define UART0_PP_R              (*((volatile uint32_t *)0x4000CFC0))
N#define UART0_CC_R              (*((volatile uint32_t *)0x4000CFC8))
N
N//*****************************************************************************
N//
N// UART registers (UART1)
N//
N//*****************************************************************************
N#define UART1_DR_R              (*((volatile uint32_t *)0x4000D000))
N#define UART1_RSR_R             (*((volatile uint32_t *)0x4000D004))
N#define UART1_ECR_R             (*((volatile uint32_t *)0x4000D004))
N#define UART1_FR_R              (*((volatile uint32_t *)0x4000D018))
N#define UART1_ILPR_R            (*((volatile uint32_t *)0x4000D020))
N#define UART1_IBRD_R            (*((volatile uint32_t *)0x4000D024))
N#define UART1_FBRD_R            (*((volatile uint32_t *)0x4000D028))
N#define UART1_LCRH_R            (*((volatile uint32_t *)0x4000D02C))
N#define UART1_CTL_R             (*((volatile uint32_t *)0x4000D030))
N#define UART1_IFLS_R            (*((volatile uint32_t *)0x4000D034))
N#define UART1_IM_R              (*((volatile uint32_t *)0x4000D038))
N#define UART1_RIS_R             (*((volatile uint32_t *)0x4000D03C))
N#define UART1_MIS_R             (*((volatile uint32_t *)0x4000D040))
N#define UART1_ICR_R             (*((volatile uint32_t *)0x4000D044))
N#define UART1_DMACTL_R          (*((volatile uint32_t *)0x4000D048))
N#define UART1_9BITADDR_R        (*((volatile uint32_t *)0x4000D0A4))
N#define UART1_9BITAMASK_R       (*((volatile uint32_t *)0x4000D0A8))
N#define UART1_PP_R              (*((volatile uint32_t *)0x4000DFC0))
N#define UART1_CC_R              (*((volatile uint32_t *)0x4000DFC8))
N
N//*****************************************************************************
N//
N// UART registers (UART2)
N//
N//*****************************************************************************
N#define UART2_DR_R              (*((volatile uint32_t *)0x4000E000))
N#define UART2_RSR_R             (*((volatile uint32_t *)0x4000E004))
N#define UART2_ECR_R             (*((volatile uint32_t *)0x4000E004))
N#define UART2_FR_R              (*((volatile uint32_t *)0x4000E018))
N#define UART2_ILPR_R            (*((volatile uint32_t *)0x4000E020))
N#define UART2_IBRD_R            (*((volatile uint32_t *)0x4000E024))
N#define UART2_FBRD_R            (*((volatile uint32_t *)0x4000E028))
N#define UART2_LCRH_R            (*((volatile uint32_t *)0x4000E02C))
N#define UART2_CTL_R             (*((volatile uint32_t *)0x4000E030))
N#define UART2_IFLS_R            (*((volatile uint32_t *)0x4000E034))
N#define UART2_IM_R              (*((volatile uint32_t *)0x4000E038))
N#define UART2_RIS_R             (*((volatile uint32_t *)0x4000E03C))
N#define UART2_MIS_R             (*((volatile uint32_t *)0x4000E040))
N#define UART2_ICR_R             (*((volatile uint32_t *)0x4000E044))
N#define UART2_DMACTL_R          (*((volatile uint32_t *)0x4000E048))
N#define UART2_9BITADDR_R        (*((volatile uint32_t *)0x4000E0A4))
N#define UART2_9BITAMASK_R       (*((volatile uint32_t *)0x4000E0A8))
N#define UART2_PP_R              (*((volatile uint32_t *)0x4000EFC0))
N#define UART2_CC_R              (*((volatile uint32_t *)0x4000EFC8))
N
N//*****************************************************************************
N//
N// UART registers (UART3)
N//
N//*****************************************************************************
N#define UART3_DR_R              (*((volatile uint32_t *)0x4000F000))
N#define UART3_RSR_R             (*((volatile uint32_t *)0x4000F004))
N#define UART3_ECR_R             (*((volatile uint32_t *)0x4000F004))
N#define UART3_FR_R              (*((volatile uint32_t *)0x4000F018))
N#define UART3_ILPR_R            (*((volatile uint32_t *)0x4000F020))
N#define UART3_IBRD_R            (*((volatile uint32_t *)0x4000F024))
N#define UART3_FBRD_R            (*((volatile uint32_t *)0x4000F028))
N#define UART3_LCRH_R            (*((volatile uint32_t *)0x4000F02C))
N#define UART3_CTL_R             (*((volatile uint32_t *)0x4000F030))
N#define UART3_IFLS_R            (*((volatile uint32_t *)0x4000F034))
N#define UART3_IM_R              (*((volatile uint32_t *)0x4000F038))
N#define UART3_RIS_R             (*((volatile uint32_t *)0x4000F03C))
N#define UART3_MIS_R             (*((volatile uint32_t *)0x4000F040))
N#define UART3_ICR_R             (*((volatile uint32_t *)0x4000F044))
N#define UART3_DMACTL_R          (*((volatile uint32_t *)0x4000F048))
N#define UART3_9BITADDR_R        (*((volatile uint32_t *)0x4000F0A4))
N#define UART3_9BITAMASK_R       (*((volatile uint32_t *)0x4000F0A8))
N#define UART3_PP_R              (*((volatile uint32_t *)0x4000FFC0))
N#define UART3_CC_R              (*((volatile uint32_t *)0x4000FFC8))
N
N//*****************************************************************************
N//
N// UART registers (UART4)
N//
N//*****************************************************************************
N#define UART4_DR_R              (*((volatile uint32_t *)0x40010000))
N#define UART4_RSR_R             (*((volatile uint32_t *)0x40010004))
N#define UART4_ECR_R             (*((volatile uint32_t *)0x40010004))
N#define UART4_FR_R              (*((volatile uint32_t *)0x40010018))
N#define UART4_ILPR_R            (*((volatile uint32_t *)0x40010020))
N#define UART4_IBRD_R            (*((volatile uint32_t *)0x40010024))
N#define UART4_FBRD_R            (*((volatile uint32_t *)0x40010028))
N#define UART4_LCRH_R            (*((volatile uint32_t *)0x4001002C))
N#define UART4_CTL_R             (*((volatile uint32_t *)0x40010030))
N#define UART4_IFLS_R            (*((volatile uint32_t *)0x40010034))
N#define UART4_IM_R              (*((volatile uint32_t *)0x40010038))
N#define UART4_RIS_R             (*((volatile uint32_t *)0x4001003C))
N#define UART4_MIS_R             (*((volatile uint32_t *)0x40010040))
N#define UART4_ICR_R             (*((volatile uint32_t *)0x40010044))
N#define UART4_DMACTL_R          (*((volatile uint32_t *)0x40010048))
N#define UART4_9BITADDR_R        (*((volatile uint32_t *)0x400100A4))
N#define UART4_9BITAMASK_R       (*((volatile uint32_t *)0x400100A8))
N#define UART4_PP_R              (*((volatile uint32_t *)0x40010FC0))
N#define UART4_CC_R              (*((volatile uint32_t *)0x40010FC8))
N
N//*****************************************************************************
N//
N// UART registers (UART5)
N//
N//*****************************************************************************
N#define UART5_DR_R              (*((volatile uint32_t *)0x40011000))
N#define UART5_RSR_R             (*((volatile uint32_t *)0x40011004))
N#define UART5_ECR_R             (*((volatile uint32_t *)0x40011004))
N#define UART5_FR_R              (*((volatile uint32_t *)0x40011018))
N#define UART5_ILPR_R            (*((volatile uint32_t *)0x40011020))
N#define UART5_IBRD_R            (*((volatile uint32_t *)0x40011024))
N#define UART5_FBRD_R            (*((volatile uint32_t *)0x40011028))
N#define UART5_LCRH_R            (*((volatile uint32_t *)0x4001102C))
N#define UART5_CTL_R             (*((volatile uint32_t *)0x40011030))
N#define UART5_IFLS_R            (*((volatile uint32_t *)0x40011034))
N#define UART5_IM_R              (*((volatile uint32_t *)0x40011038))
N#define UART5_RIS_R             (*((volatile uint32_t *)0x4001103C))
N#define UART5_MIS_R             (*((volatile uint32_t *)0x40011040))
N#define UART5_ICR_R             (*((volatile uint32_t *)0x40011044))
N#define UART5_DMACTL_R          (*((volatile uint32_t *)0x40011048))
N#define UART5_9BITADDR_R        (*((volatile uint32_t *)0x400110A4))
N#define UART5_9BITAMASK_R       (*((volatile uint32_t *)0x400110A8))
N#define UART5_PP_R              (*((volatile uint32_t *)0x40011FC0))
N#define UART5_CC_R              (*((volatile uint32_t *)0x40011FC8))
N
N//*****************************************************************************
N//
N// UART registers (UART6)
N//
N//*****************************************************************************
N#define UART6_DR_R              (*((volatile uint32_t *)0x40012000))
N#define UART6_RSR_R             (*((volatile uint32_t *)0x40012004))
N#define UART6_ECR_R             (*((volatile uint32_t *)0x40012004))
N#define UART6_FR_R              (*((volatile uint32_t *)0x40012018))
N#define UART6_ILPR_R            (*((volatile uint32_t *)0x40012020))
N#define UART6_IBRD_R            (*((volatile uint32_t *)0x40012024))
N#define UART6_FBRD_R            (*((volatile uint32_t *)0x40012028))
N#define UART6_LCRH_R            (*((volatile uint32_t *)0x4001202C))
N#define UART6_CTL_R             (*((volatile uint32_t *)0x40012030))
N#define UART6_IFLS_R            (*((volatile uint32_t *)0x40012034))
N#define UART6_IM_R              (*((volatile uint32_t *)0x40012038))
N#define UART6_RIS_R             (*((volatile uint32_t *)0x4001203C))
N#define UART6_MIS_R             (*((volatile uint32_t *)0x40012040))
N#define UART6_ICR_R             (*((volatile uint32_t *)0x40012044))
N#define UART6_DMACTL_R          (*((volatile uint32_t *)0x40012048))
N#define UART6_9BITADDR_R        (*((volatile uint32_t *)0x400120A4))
N#define UART6_9BITAMASK_R       (*((volatile uint32_t *)0x400120A8))
N#define UART6_PP_R              (*((volatile uint32_t *)0x40012FC0))
N#define UART6_CC_R              (*((volatile uint32_t *)0x40012FC8))
N
N//*****************************************************************************
N//
N// UART registers (UART7)
N//
N//*****************************************************************************
N#define UART7_DR_R              (*((volatile uint32_t *)0x40013000))
N#define UART7_RSR_R             (*((volatile uint32_t *)0x40013004))
N#define UART7_ECR_R             (*((volatile uint32_t *)0x40013004))
N#define UART7_FR_R              (*((volatile uint32_t *)0x40013018))
N#define UART7_ILPR_R            (*((volatile uint32_t *)0x40013020))
N#define UART7_IBRD_R            (*((volatile uint32_t *)0x40013024))
N#define UART7_FBRD_R            (*((volatile uint32_t *)0x40013028))
N#define UART7_LCRH_R            (*((volatile uint32_t *)0x4001302C))
N#define UART7_CTL_R             (*((volatile uint32_t *)0x40013030))
N#define UART7_IFLS_R            (*((volatile uint32_t *)0x40013034))
N#define UART7_IM_R              (*((volatile uint32_t *)0x40013038))
N#define UART7_RIS_R             (*((volatile uint32_t *)0x4001303C))
N#define UART7_MIS_R             (*((volatile uint32_t *)0x40013040))
N#define UART7_ICR_R             (*((volatile uint32_t *)0x40013044))
N#define UART7_DMACTL_R          (*((volatile uint32_t *)0x40013048))
N#define UART7_9BITADDR_R        (*((volatile uint32_t *)0x400130A4))
N#define UART7_9BITAMASK_R       (*((volatile uint32_t *)0x400130A8))
N#define UART7_PP_R              (*((volatile uint32_t *)0x40013FC0))
N#define UART7_CC_R              (*((volatile uint32_t *)0x40013FC8))
N
N//*****************************************************************************
N//
N// I2C registers (I2C0)
N//
N//*****************************************************************************
N#define I2C0_MSA_R              (*((volatile uint32_t *)0x40020000))
N#define I2C0_MCS_R              (*((volatile uint32_t *)0x40020004))
N#define I2C0_MDR_R              (*((volatile uint32_t *)0x40020008))
N#define I2C0_MTPR_R             (*((volatile uint32_t *)0x4002000C))
N#define I2C0_MIMR_R             (*((volatile uint32_t *)0x40020010))
N#define I2C0_MRIS_R             (*((volatile uint32_t *)0x40020014))
N#define I2C0_MMIS_R             (*((volatile uint32_t *)0x40020018))
N#define I2C0_MICR_R             (*((volatile uint32_t *)0x4002001C))
N#define I2C0_MCR_R              (*((volatile uint32_t *)0x40020020))
N#define I2C0_MCLKOCNT_R         (*((volatile uint32_t *)0x40020024))
N#define I2C0_MBMON_R            (*((volatile uint32_t *)0x4002002C))
N#define I2C0_MBLEN_R            (*((volatile uint32_t *)0x40020030))
N#define I2C0_MBCNT_R            (*((volatile uint32_t *)0x40020034))
N#define I2C0_SOAR_R             (*((volatile uint32_t *)0x40020800))
N#define I2C0_SCSR_R             (*((volatile uint32_t *)0x40020804))
N#define I2C0_SDR_R              (*((volatile uint32_t *)0x40020808))
N#define I2C0_SIMR_R             (*((volatile uint32_t *)0x4002080C))
N#define I2C0_SRIS_R             (*((volatile uint32_t *)0x40020810))
N#define I2C0_SMIS_R             (*((volatile uint32_t *)0x40020814))
N#define I2C0_SICR_R             (*((volatile uint32_t *)0x40020818))
N#define I2C0_SOAR2_R            (*((volatile uint32_t *)0x4002081C))
N#define I2C0_SACKCTL_R          (*((volatile uint32_t *)0x40020820))
N#define I2C0_FIFODATA_R         (*((volatile uint32_t *)0x40020F00))
N#define I2C0_FIFOCTL_R          (*((volatile uint32_t *)0x40020F04))
N#define I2C0_FIFOSTATUS_R       (*((volatile uint32_t *)0x40020F08))
N#define I2C0_PP_R               (*((volatile uint32_t *)0x40020FC0))
N#define I2C0_PC_R               (*((volatile uint32_t *)0x40020FC4))
N
N//*****************************************************************************
N//
N// I2C registers (I2C1)
N//
N//*****************************************************************************
N#define I2C1_MSA_R              (*((volatile uint32_t *)0x40021000))
N#define I2C1_MCS_R              (*((volatile uint32_t *)0x40021004))
N#define I2C1_MDR_R              (*((volatile uint32_t *)0x40021008))
N#define I2C1_MTPR_R             (*((volatile uint32_t *)0x4002100C))
N#define I2C1_MIMR_R             (*((volatile uint32_t *)0x40021010))
N#define I2C1_MRIS_R             (*((volatile uint32_t *)0x40021014))
N#define I2C1_MMIS_R             (*((volatile uint32_t *)0x40021018))
N#define I2C1_MICR_R             (*((volatile uint32_t *)0x4002101C))
N#define I2C1_MCR_R              (*((volatile uint32_t *)0x40021020))
N#define I2C1_MCLKOCNT_R         (*((volatile uint32_t *)0x40021024))
N#define I2C1_MBMON_R            (*((volatile uint32_t *)0x4002102C))
N#define I2C1_MBLEN_R            (*((volatile uint32_t *)0x40021030))
N#define I2C1_MBCNT_R            (*((volatile uint32_t *)0x40021034))
N#define I2C1_SOAR_R             (*((volatile uint32_t *)0x40021800))
N#define I2C1_SCSR_R             (*((volatile uint32_t *)0x40021804))
N#define I2C1_SDR_R              (*((volatile uint32_t *)0x40021808))
N#define I2C1_SIMR_R             (*((volatile uint32_t *)0x4002180C))
N#define I2C1_SRIS_R             (*((volatile uint32_t *)0x40021810))
N#define I2C1_SMIS_R             (*((volatile uint32_t *)0x40021814))
N#define I2C1_SICR_R             (*((volatile uint32_t *)0x40021818))
N#define I2C1_SOAR2_R            (*((volatile uint32_t *)0x4002181C))
N#define I2C1_SACKCTL_R          (*((volatile uint32_t *)0x40021820))
N#define I2C1_FIFODATA_R         (*((volatile uint32_t *)0x40021F00))
N#define I2C1_FIFOCTL_R          (*((volatile uint32_t *)0x40021F04))
N#define I2C1_FIFOSTATUS_R       (*((volatile uint32_t *)0x40021F08))
N#define I2C1_PP_R               (*((volatile uint32_t *)0x40021FC0))
N#define I2C1_PC_R               (*((volatile uint32_t *)0x40021FC4))
N
N//*****************************************************************************
N//
N// I2C registers (I2C2)
N//
N//*****************************************************************************
N#define I2C2_MSA_R              (*((volatile uint32_t *)0x40022000))
N#define I2C2_MCS_R              (*((volatile uint32_t *)0x40022004))
N#define I2C2_MDR_R              (*((volatile uint32_t *)0x40022008))
N#define I2C2_MTPR_R             (*((volatile uint32_t *)0x4002200C))
N#define I2C2_MIMR_R             (*((volatile uint32_t *)0x40022010))
N#define I2C2_MRIS_R             (*((volatile uint32_t *)0x40022014))
N#define I2C2_MMIS_R             (*((volatile uint32_t *)0x40022018))
N#define I2C2_MICR_R             (*((volatile uint32_t *)0x4002201C))
N#define I2C2_MCR_R              (*((volatile uint32_t *)0x40022020))
N#define I2C2_MCLKOCNT_R         (*((volatile uint32_t *)0x40022024))
N#define I2C2_MBMON_R            (*((volatile uint32_t *)0x4002202C))
N#define I2C2_MBLEN_R            (*((volatile uint32_t *)0x40022030))
N#define I2C2_MBCNT_R            (*((volatile uint32_t *)0x40022034))
N#define I2C2_SOAR_R             (*((volatile uint32_t *)0x40022800))
N#define I2C2_SCSR_R             (*((volatile uint32_t *)0x40022804))
N#define I2C2_SDR_R              (*((volatile uint32_t *)0x40022808))
N#define I2C2_SIMR_R             (*((volatile uint32_t *)0x4002280C))
N#define I2C2_SRIS_R             (*((volatile uint32_t *)0x40022810))
N#define I2C2_SMIS_R             (*((volatile uint32_t *)0x40022814))
N#define I2C2_SICR_R             (*((volatile uint32_t *)0x40022818))
N#define I2C2_SOAR2_R            (*((volatile uint32_t *)0x4002281C))
N#define I2C2_SACKCTL_R          (*((volatile uint32_t *)0x40022820))
N#define I2C2_FIFODATA_R         (*((volatile uint32_t *)0x40022F00))
N#define I2C2_FIFOCTL_R          (*((volatile uint32_t *)0x40022F04))
N#define I2C2_FIFOSTATUS_R       (*((volatile uint32_t *)0x40022F08))
N#define I2C2_PP_R               (*((volatile uint32_t *)0x40022FC0))
N#define I2C2_PC_R               (*((volatile uint32_t *)0x40022FC4))
N
N//*****************************************************************************
N//
N// I2C registers (I2C3)
N//
N//*****************************************************************************
N#define I2C3_MSA_R              (*((volatile uint32_t *)0x40023000))
N#define I2C3_MCS_R              (*((volatile uint32_t *)0x40023004))
N#define I2C3_MDR_R              (*((volatile uint32_t *)0x40023008))
N#define I2C3_MTPR_R             (*((volatile uint32_t *)0x4002300C))
N#define I2C3_MIMR_R             (*((volatile uint32_t *)0x40023010))
N#define I2C3_MRIS_R             (*((volatile uint32_t *)0x40023014))
N#define I2C3_MMIS_R             (*((volatile uint32_t *)0x40023018))
N#define I2C3_MICR_R             (*((volatile uint32_t *)0x4002301C))
N#define I2C3_MCR_R              (*((volatile uint32_t *)0x40023020))
N#define I2C3_MCLKOCNT_R         (*((volatile uint32_t *)0x40023024))
N#define I2C3_MBMON_R            (*((volatile uint32_t *)0x4002302C))
N#define I2C3_MBLEN_R            (*((volatile uint32_t *)0x40023030))
N#define I2C3_MBCNT_R            (*((volatile uint32_t *)0x40023034))
N#define I2C3_SOAR_R             (*((volatile uint32_t *)0x40023800))
N#define I2C3_SCSR_R             (*((volatile uint32_t *)0x40023804))
N#define I2C3_SDR_R              (*((volatile uint32_t *)0x40023808))
N#define I2C3_SIMR_R             (*((volatile uint32_t *)0x4002380C))
N#define I2C3_SRIS_R             (*((volatile uint32_t *)0x40023810))
N#define I2C3_SMIS_R             (*((volatile uint32_t *)0x40023814))
N#define I2C3_SICR_R             (*((volatile uint32_t *)0x40023818))
N#define I2C3_SOAR2_R            (*((volatile uint32_t *)0x4002381C))
N#define I2C3_SACKCTL_R          (*((volatile uint32_t *)0x40023820))
N#define I2C3_FIFODATA_R         (*((volatile uint32_t *)0x40023F00))
N#define I2C3_FIFOCTL_R          (*((volatile uint32_t *)0x40023F04))
N#define I2C3_FIFOSTATUS_R       (*((volatile uint32_t *)0x40023F08))
N#define I2C3_PP_R               (*((volatile uint32_t *)0x40023FC0))
N#define I2C3_PC_R               (*((volatile uint32_t *)0x40023FC4))
N
N//*****************************************************************************
N//
N// PWM registers (PWM0)
N//
N//*****************************************************************************
N#define PWM0_CTL_R              (*((volatile uint32_t *)0x40028000))
N#define PWM0_SYNC_R             (*((volatile uint32_t *)0x40028004))
N#define PWM0_ENABLE_R           (*((volatile uint32_t *)0x40028008))
N#define PWM0_INVERT_R           (*((volatile uint32_t *)0x4002800C))
N#define PWM0_FAULT_R            (*((volatile uint32_t *)0x40028010))
N#define PWM0_INTEN_R            (*((volatile uint32_t *)0x40028014))
N#define PWM0_RIS_R              (*((volatile uint32_t *)0x40028018))
N#define PWM0_ISC_R              (*((volatile uint32_t *)0x4002801C))
N#define PWM0_STATUS_R           (*((volatile uint32_t *)0x40028020))
N#define PWM0_FAULTVAL_R         (*((volatile uint32_t *)0x40028024))
N#define PWM0_ENUPD_R            (*((volatile uint32_t *)0x40028028))
N#define PWM0_0_CTL_R            (*((volatile uint32_t *)0x40028040))
N#define PWM0_0_INTEN_R          (*((volatile uint32_t *)0x40028044))
N#define PWM0_0_RIS_R            (*((volatile uint32_t *)0x40028048))
N#define PWM0_0_ISC_R            (*((volatile uint32_t *)0x4002804C))
N#define PWM0_0_LOAD_R           (*((volatile uint32_t *)0x40028050))
N#define PWM0_0_COUNT_R          (*((volatile uint32_t *)0x40028054))
N#define PWM0_0_CMPA_R           (*((volatile uint32_t *)0x40028058))
N#define PWM0_0_CMPB_R           (*((volatile uint32_t *)0x4002805C))
N#define PWM0_0_GENA_R           (*((volatile uint32_t *)0x40028060))
N#define PWM0_0_GENB_R           (*((volatile uint32_t *)0x40028064))
N#define PWM0_0_DBCTL_R          (*((volatile uint32_t *)0x40028068))
N#define PWM0_0_DBRISE_R         (*((volatile uint32_t *)0x4002806C))
N#define PWM0_0_DBFALL_R         (*((volatile uint32_t *)0x40028070))
N#define PWM0_0_FLTSRC0_R        (*((volatile uint32_t *)0x40028074))
N#define PWM0_0_FLTSRC1_R        (*((volatile uint32_t *)0x40028078))
N#define PWM0_0_MINFLTPER_R      (*((volatile uint32_t *)0x4002807C))
N#define PWM0_1_CTL_R            (*((volatile uint32_t *)0x40028080))
N#define PWM0_1_INTEN_R          (*((volatile uint32_t *)0x40028084))
N#define PWM0_1_RIS_R            (*((volatile uint32_t *)0x40028088))
N#define PWM0_1_ISC_R            (*((volatile uint32_t *)0x4002808C))
N#define PWM0_1_LOAD_R           (*((volatile uint32_t *)0x40028090))
N#define PWM0_1_COUNT_R          (*((volatile uint32_t *)0x40028094))
N#define PWM0_1_CMPA_R           (*((volatile uint32_t *)0x40028098))
N#define PWM0_1_CMPB_R           (*((volatile uint32_t *)0x4002809C))
N#define PWM0_1_GENA_R           (*((volatile uint32_t *)0x400280A0))
N#define PWM0_1_GENB_R           (*((volatile uint32_t *)0x400280A4))
N#define PWM0_1_DBCTL_R          (*((volatile uint32_t *)0x400280A8))
N#define PWM0_1_DBRISE_R         (*((volatile uint32_t *)0x400280AC))
N#define PWM0_1_DBFALL_R         (*((volatile uint32_t *)0x400280B0))
N#define PWM0_1_FLTSRC0_R        (*((volatile uint32_t *)0x400280B4))
N#define PWM0_1_FLTSRC1_R        (*((volatile uint32_t *)0x400280B8))
N#define PWM0_1_MINFLTPER_R      (*((volatile uint32_t *)0x400280BC))
N#define PWM0_2_CTL_R            (*((volatile uint32_t *)0x400280C0))
N#define PWM0_2_INTEN_R          (*((volatile uint32_t *)0x400280C4))
N#define PWM0_2_RIS_R            (*((volatile uint32_t *)0x400280C8))
N#define PWM0_2_ISC_R            (*((volatile uint32_t *)0x400280CC))
N#define PWM0_2_LOAD_R           (*((volatile uint32_t *)0x400280D0))
N#define PWM0_2_COUNT_R          (*((volatile uint32_t *)0x400280D4))
N#define PWM0_2_CMPA_R           (*((volatile uint32_t *)0x400280D8))
N#define PWM0_2_CMPB_R           (*((volatile uint32_t *)0x400280DC))
N#define PWM0_2_GENA_R           (*((volatile uint32_t *)0x400280E0))
N#define PWM0_2_GENB_R           (*((volatile uint32_t *)0x400280E4))
N#define PWM0_2_DBCTL_R          (*((volatile uint32_t *)0x400280E8))
N#define PWM0_2_DBRISE_R         (*((volatile uint32_t *)0x400280EC))
N#define PWM0_2_DBFALL_R         (*((volatile uint32_t *)0x400280F0))
N#define PWM0_2_FLTSRC0_R        (*((volatile uint32_t *)0x400280F4))
N#define PWM0_2_FLTSRC1_R        (*((volatile uint32_t *)0x400280F8))
N#define PWM0_2_MINFLTPER_R      (*((volatile uint32_t *)0x400280FC))
N#define PWM0_3_CTL_R            (*((volatile uint32_t *)0x40028100))
N#define PWM0_3_INTEN_R          (*((volatile uint32_t *)0x40028104))
N#define PWM0_3_RIS_R            (*((volatile uint32_t *)0x40028108))
N#define PWM0_3_ISC_R            (*((volatile uint32_t *)0x4002810C))
N#define PWM0_3_LOAD_R           (*((volatile uint32_t *)0x40028110))
N#define PWM0_3_COUNT_R          (*((volatile uint32_t *)0x40028114))
N#define PWM0_3_CMPA_R           (*((volatile uint32_t *)0x40028118))
N#define PWM0_3_CMPB_R           (*((volatile uint32_t *)0x4002811C))
N#define PWM0_3_GENA_R           (*((volatile uint32_t *)0x40028120))
N#define PWM0_3_GENB_R           (*((volatile uint32_t *)0x40028124))
N#define PWM0_3_DBCTL_R          (*((volatile uint32_t *)0x40028128))
N#define PWM0_3_DBRISE_R         (*((volatile uint32_t *)0x4002812C))
N#define PWM0_3_DBFALL_R         (*((volatile uint32_t *)0x40028130))
N#define PWM0_3_FLTSRC0_R        (*((volatile uint32_t *)0x40028134))
N#define PWM0_3_FLTSRC1_R        (*((volatile uint32_t *)0x40028138))
N#define PWM0_3_MINFLTPER_R      (*((volatile uint32_t *)0x4002813C))
N#define PWM0_0_FLTSEN_R         (*((volatile uint32_t *)0x40028800))
N#define PWM0_0_FLTSTAT0_R       (*((volatile uint32_t *)0x40028804))
N#define PWM0_0_FLTSTAT1_R       (*((volatile uint32_t *)0x40028808))
N#define PWM0_1_FLTSEN_R         (*((volatile uint32_t *)0x40028880))
N#define PWM0_1_FLTSTAT0_R       (*((volatile uint32_t *)0x40028884))
N#define PWM0_1_FLTSTAT1_R       (*((volatile uint32_t *)0x40028888))
N#define PWM0_2_FLTSEN_R         (*((volatile uint32_t *)0x40028900))
N#define PWM0_2_FLTSTAT0_R       (*((volatile uint32_t *)0x40028904))
N#define PWM0_2_FLTSTAT1_R       (*((volatile uint32_t *)0x40028908))
N#define PWM0_3_FLTSEN_R         (*((volatile uint32_t *)0x40028980))
N#define PWM0_3_FLTSTAT0_R       (*((volatile uint32_t *)0x40028984))
N#define PWM0_3_FLTSTAT1_R       (*((volatile uint32_t *)0x40028988))
N#define PWM0_PP_R               (*((volatile uint32_t *)0x40028FC0))
N#define PWM0_CC_R               (*((volatile uint32_t *)0x40028FC8))
N
N//*****************************************************************************
N//
N// QEI registers (QEI0)
N//
N//*****************************************************************************
N#define QEI0_CTL_R              (*((volatile uint32_t *)0x4002C000))
N#define QEI0_STAT_R             (*((volatile uint32_t *)0x4002C004))
N#define QEI0_POS_R              (*((volatile uint32_t *)0x4002C008))
N#define QEI0_MAXPOS_R           (*((volatile uint32_t *)0x4002C00C))
N#define QEI0_LOAD_R             (*((volatile uint32_t *)0x4002C010))
N#define QEI0_TIME_R             (*((volatile uint32_t *)0x4002C014))
N#define QEI0_COUNT_R            (*((volatile uint32_t *)0x4002C018))
N#define QEI0_SPEED_R            (*((volatile uint32_t *)0x4002C01C))
N#define QEI0_INTEN_R            (*((volatile uint32_t *)0x4002C020))
N#define QEI0_RIS_R              (*((volatile uint32_t *)0x4002C024))
N#define QEI0_ISC_R              (*((volatile uint32_t *)0x4002C028))
N
N//*****************************************************************************
N//
N// Timer registers (TIMER0)
N//
N//*****************************************************************************
N#define TIMER0_CFG_R            (*((volatile uint32_t *)0x40030000))
N#define TIMER0_TAMR_R           (*((volatile uint32_t *)0x40030004))
N#define TIMER0_TBMR_R           (*((volatile uint32_t *)0x40030008))
N#define TIMER0_CTL_R            (*((volatile uint32_t *)0x4003000C))
N#define TIMER0_SYNC_R           (*((volatile uint32_t *)0x40030010))
N#define TIMER0_IMR_R            (*((volatile uint32_t *)0x40030018))
N#define TIMER0_RIS_R            (*((volatile uint32_t *)0x4003001C))
N#define TIMER0_MIS_R            (*((volatile uint32_t *)0x40030020))
N#define TIMER0_ICR_R            (*((volatile uint32_t *)0x40030024))
N#define TIMER0_TAILR_R          (*((volatile uint32_t *)0x40030028))
N#define TIMER0_TBILR_R          (*((volatile uint32_t *)0x4003002C))
N#define TIMER0_TAMATCHR_R       (*((volatile uint32_t *)0x40030030))
N#define TIMER0_TBMATCHR_R       (*((volatile uint32_t *)0x40030034))
N#define TIMER0_TAPR_R           (*((volatile uint32_t *)0x40030038))
N#define TIMER0_TBPR_R           (*((volatile uint32_t *)0x4003003C))
N#define TIMER0_TAPMR_R          (*((volatile uint32_t *)0x40030040))
N#define TIMER0_TBPMR_R          (*((volatile uint32_t *)0x40030044))
N#define TIMER0_TAR_R            (*((volatile uint32_t *)0x40030048))
N#define TIMER0_TBR_R            (*((volatile uint32_t *)0x4003004C))
N#define TIMER0_TAV_R            (*((volatile uint32_t *)0x40030050))
N#define TIMER0_TBV_R            (*((volatile uint32_t *)0x40030054))
N#define TIMER0_RTCPD_R          (*((volatile uint32_t *)0x40030058))
N#define TIMER0_TAPS_R           (*((volatile uint32_t *)0x4003005C))
N#define TIMER0_TBPS_R           (*((volatile uint32_t *)0x40030060))
N#define TIMER0_DMAEV_R          (*((volatile uint32_t *)0x4003006C))
N#define TIMER0_ADCEV_R          (*((volatile uint32_t *)0x40030070))
N#define TIMER0_PP_R             (*((volatile uint32_t *)0x40030FC0))
N#define TIMER0_CC_R             (*((volatile uint32_t *)0x40030FC8))
N
N//*****************************************************************************
N//
N// Timer registers (TIMER1)
N//
N//*****************************************************************************
N#define TIMER1_CFG_R            (*((volatile uint32_t *)0x40031000))
N#define TIMER1_TAMR_R           (*((volatile uint32_t *)0x40031004))
N#define TIMER1_TBMR_R           (*((volatile uint32_t *)0x40031008))
N#define TIMER1_CTL_R            (*((volatile uint32_t *)0x4003100C))
N#define TIMER1_SYNC_R           (*((volatile uint32_t *)0x40031010))
N#define TIMER1_IMR_R            (*((volatile uint32_t *)0x40031018))
N#define TIMER1_RIS_R            (*((volatile uint32_t *)0x4003101C))
N#define TIMER1_MIS_R            (*((volatile uint32_t *)0x40031020))
N#define TIMER1_ICR_R            (*((volatile uint32_t *)0x40031024))
N#define TIMER1_TAILR_R          (*((volatile uint32_t *)0x40031028))
N#define TIMER1_TBILR_R          (*((volatile uint32_t *)0x4003102C))
N#define TIMER1_TAMATCHR_R       (*((volatile uint32_t *)0x40031030))
N#define TIMER1_TBMATCHR_R       (*((volatile uint32_t *)0x40031034))
N#define TIMER1_TAPR_R           (*((volatile uint32_t *)0x40031038))
N#define TIMER1_TBPR_R           (*((volatile uint32_t *)0x4003103C))
N#define TIMER1_TAPMR_R          (*((volatile uint32_t *)0x40031040))
N#define TIMER1_TBPMR_R          (*((volatile uint32_t *)0x40031044))
N#define TIMER1_TAR_R            (*((volatile uint32_t *)0x40031048))
N#define TIMER1_TBR_R            (*((volatile uint32_t *)0x4003104C))
N#define TIMER1_TAV_R            (*((volatile uint32_t *)0x40031050))
N#define TIMER1_TBV_R            (*((volatile uint32_t *)0x40031054))
N#define TIMER1_RTCPD_R          (*((volatile uint32_t *)0x40031058))
N#define TIMER1_TAPS_R           (*((volatile uint32_t *)0x4003105C))
N#define TIMER1_TBPS_R           (*((volatile uint32_t *)0x40031060))
N#define TIMER1_DMAEV_R          (*((volatile uint32_t *)0x4003106C))
N#define TIMER1_ADCEV_R          (*((volatile uint32_t *)0x40031070))
N#define TIMER1_PP_R             (*((volatile uint32_t *)0x40031FC0))
N#define TIMER1_CC_R             (*((volatile uint32_t *)0x40031FC8))
N
N//*****************************************************************************
N//
N// Timer registers (TIMER2)
N//
N//*****************************************************************************
N#define TIMER2_CFG_R            (*((volatile uint32_t *)0x40032000))
N#define TIMER2_TAMR_R           (*((volatile uint32_t *)0x40032004))
N#define TIMER2_TBMR_R           (*((volatile uint32_t *)0x40032008))
N#define TIMER2_CTL_R            (*((volatile uint32_t *)0x4003200C))
N#define TIMER2_SYNC_R           (*((volatile uint32_t *)0x40032010))
N#define TIMER2_IMR_R            (*((volatile uint32_t *)0x40032018))
N#define TIMER2_RIS_R            (*((volatile uint32_t *)0x4003201C))
N#define TIMER2_MIS_R            (*((volatile uint32_t *)0x40032020))
N#define TIMER2_ICR_R            (*((volatile uint32_t *)0x40032024))
N#define TIMER2_TAILR_R          (*((volatile uint32_t *)0x40032028))
N#define TIMER2_TBILR_R          (*((volatile uint32_t *)0x4003202C))
N#define TIMER2_TAMATCHR_R       (*((volatile uint32_t *)0x40032030))
N#define TIMER2_TBMATCHR_R       (*((volatile uint32_t *)0x40032034))
N#define TIMER2_TAPR_R           (*((volatile uint32_t *)0x40032038))
N#define TIMER2_TBPR_R           (*((volatile uint32_t *)0x4003203C))
N#define TIMER2_TAPMR_R          (*((volatile uint32_t *)0x40032040))
N#define TIMER2_TBPMR_R          (*((volatile uint32_t *)0x40032044))
N#define TIMER2_TAR_R            (*((volatile uint32_t *)0x40032048))
N#define TIMER2_TBR_R            (*((volatile uint32_t *)0x4003204C))
N#define TIMER2_TAV_R            (*((volatile uint32_t *)0x40032050))
N#define TIMER2_TBV_R            (*((volatile uint32_t *)0x40032054))
N#define TIMER2_RTCPD_R          (*((volatile uint32_t *)0x40032058))
N#define TIMER2_TAPS_R           (*((volatile uint32_t *)0x4003205C))
N#define TIMER2_TBPS_R           (*((volatile uint32_t *)0x40032060))
N#define TIMER2_DMAEV_R          (*((volatile uint32_t *)0x4003206C))
N#define TIMER2_ADCEV_R          (*((volatile uint32_t *)0x40032070))
N#define TIMER2_PP_R             (*((volatile uint32_t *)0x40032FC0))
N#define TIMER2_CC_R             (*((volatile uint32_t *)0x40032FC8))
N
N//*****************************************************************************
N//
N// Timer registers (TIMER3)
N//
N//*****************************************************************************
N#define TIMER3_CFG_R            (*((volatile uint32_t *)0x40033000))
N#define TIMER3_TAMR_R           (*((volatile uint32_t *)0x40033004))
N#define TIMER3_TBMR_R           (*((volatile uint32_t *)0x40033008))
N#define TIMER3_CTL_R            (*((volatile uint32_t *)0x4003300C))
N#define TIMER3_SYNC_R           (*((volatile uint32_t *)0x40033010))
N#define TIMER3_IMR_R            (*((volatile uint32_t *)0x40033018))
N#define TIMER3_RIS_R            (*((volatile uint32_t *)0x4003301C))
N#define TIMER3_MIS_R            (*((volatile uint32_t *)0x40033020))
N#define TIMER3_ICR_R            (*((volatile uint32_t *)0x40033024))
N#define TIMER3_TAILR_R          (*((volatile uint32_t *)0x40033028))
N#define TIMER3_TBILR_R          (*((volatile uint32_t *)0x4003302C))
N#define TIMER3_TAMATCHR_R       (*((volatile uint32_t *)0x40033030))
N#define TIMER3_TBMATCHR_R       (*((volatile uint32_t *)0x40033034))
N#define TIMER3_TAPR_R           (*((volatile uint32_t *)0x40033038))
N#define TIMER3_TBPR_R           (*((volatile uint32_t *)0x4003303C))
N#define TIMER3_TAPMR_R          (*((volatile uint32_t *)0x40033040))
N#define TIMER3_TBPMR_R          (*((volatile uint32_t *)0x40033044))
N#define TIMER3_TAR_R            (*((volatile uint32_t *)0x40033048))
N#define TIMER3_TBR_R            (*((volatile uint32_t *)0x4003304C))
N#define TIMER3_TAV_R            (*((volatile uint32_t *)0x40033050))
N#define TIMER3_TBV_R            (*((volatile uint32_t *)0x40033054))
N#define TIMER3_RTCPD_R          (*((volatile uint32_t *)0x40033058))
N#define TIMER3_TAPS_R           (*((volatile uint32_t *)0x4003305C))
N#define TIMER3_TBPS_R           (*((volatile uint32_t *)0x40033060))
N#define TIMER3_DMAEV_R          (*((volatile uint32_t *)0x4003306C))
N#define TIMER3_ADCEV_R          (*((volatile uint32_t *)0x40033070))
N#define TIMER3_PP_R             (*((volatile uint32_t *)0x40033FC0))
N#define TIMER3_CC_R             (*((volatile uint32_t *)0x40033FC8))
N
N//*****************************************************************************
N//
N// Timer registers (TIMER4)
N//
N//*****************************************************************************
N#define TIMER4_CFG_R            (*((volatile uint32_t *)0x40034000))
N#define TIMER4_TAMR_R           (*((volatile uint32_t *)0x40034004))
N#define TIMER4_TBMR_R           (*((volatile uint32_t *)0x40034008))
N#define TIMER4_CTL_R            (*((volatile uint32_t *)0x4003400C))
N#define TIMER4_SYNC_R           (*((volatile uint32_t *)0x40034010))
N#define TIMER4_IMR_R            (*((volatile uint32_t *)0x40034018))
N#define TIMER4_RIS_R            (*((volatile uint32_t *)0x4003401C))
N#define TIMER4_MIS_R            (*((volatile uint32_t *)0x40034020))
N#define TIMER4_ICR_R            (*((volatile uint32_t *)0x40034024))
N#define TIMER4_TAILR_R          (*((volatile uint32_t *)0x40034028))
N#define TIMER4_TBILR_R          (*((volatile uint32_t *)0x4003402C))
N#define TIMER4_TAMATCHR_R       (*((volatile uint32_t *)0x40034030))
N#define TIMER4_TBMATCHR_R       (*((volatile uint32_t *)0x40034034))
N#define TIMER4_TAPR_R           (*((volatile uint32_t *)0x40034038))
N#define TIMER4_TBPR_R           (*((volatile uint32_t *)0x4003403C))
N#define TIMER4_TAPMR_R          (*((volatile uint32_t *)0x40034040))
N#define TIMER4_TBPMR_R          (*((volatile uint32_t *)0x40034044))
N#define TIMER4_TAR_R            (*((volatile uint32_t *)0x40034048))
N#define TIMER4_TBR_R            (*((volatile uint32_t *)0x4003404C))
N#define TIMER4_TAV_R            (*((volatile uint32_t *)0x40034050))
N#define TIMER4_TBV_R            (*((volatile uint32_t *)0x40034054))
N#define TIMER4_RTCPD_R          (*((volatile uint32_t *)0x40034058))
N#define TIMER4_TAPS_R           (*((volatile uint32_t *)0x4003405C))
N#define TIMER4_TBPS_R           (*((volatile uint32_t *)0x40034060))
N#define TIMER4_DMAEV_R          (*((volatile uint32_t *)0x4003406C))
N#define TIMER4_ADCEV_R          (*((volatile uint32_t *)0x40034070))
N#define TIMER4_PP_R             (*((volatile uint32_t *)0x40034FC0))
N#define TIMER4_CC_R             (*((volatile uint32_t *)0x40034FC8))
N
N//*****************************************************************************
N//
N// Timer registers (TIMER5)
N//
N//*****************************************************************************
N#define TIMER5_CFG_R            (*((volatile uint32_t *)0x40035000))
N#define TIMER5_TAMR_R           (*((volatile uint32_t *)0x40035004))
N#define TIMER5_TBMR_R           (*((volatile uint32_t *)0x40035008))
N#define TIMER5_CTL_R            (*((volatile uint32_t *)0x4003500C))
N#define TIMER5_SYNC_R           (*((volatile uint32_t *)0x40035010))
N#define TIMER5_IMR_R            (*((volatile uint32_t *)0x40035018))
N#define TIMER5_RIS_R            (*((volatile uint32_t *)0x4003501C))
N#define TIMER5_MIS_R            (*((volatile uint32_t *)0x40035020))
N#define TIMER5_ICR_R            (*((volatile uint32_t *)0x40035024))
N#define TIMER5_TAILR_R          (*((volatile uint32_t *)0x40035028))
N#define TIMER5_TBILR_R          (*((volatile uint32_t *)0x4003502C))
N#define TIMER5_TAMATCHR_R       (*((volatile uint32_t *)0x40035030))
N#define TIMER5_TBMATCHR_R       (*((volatile uint32_t *)0x40035034))
N#define TIMER5_TAPR_R           (*((volatile uint32_t *)0x40035038))
N#define TIMER5_TBPR_R           (*((volatile uint32_t *)0x4003503C))
N#define TIMER5_TAPMR_R          (*((volatile uint32_t *)0x40035040))
N#define TIMER5_TBPMR_R          (*((volatile uint32_t *)0x40035044))
N#define TIMER5_TAR_R            (*((volatile uint32_t *)0x40035048))
N#define TIMER5_TBR_R            (*((volatile uint32_t *)0x4003504C))
N#define TIMER5_TAV_R            (*((volatile uint32_t *)0x40035050))
N#define TIMER5_TBV_R            (*((volatile uint32_t *)0x40035054))
N#define TIMER5_RTCPD_R          (*((volatile uint32_t *)0x40035058))
N#define TIMER5_TAPS_R           (*((volatile uint32_t *)0x4003505C))
N#define TIMER5_TBPS_R           (*((volatile uint32_t *)0x40035060))
N#define TIMER5_DMAEV_R          (*((volatile uint32_t *)0x4003506C))
N#define TIMER5_ADCEV_R          (*((volatile uint32_t *)0x40035070))
N#define TIMER5_PP_R             (*((volatile uint32_t *)0x40035FC0))
N#define TIMER5_CC_R             (*((volatile uint32_t *)0x40035FC8))
N
N//*****************************************************************************
N//
N// ADC registers (ADC0)
N//
N//*****************************************************************************
N#define ADC0_ACTSS_R            (*((volatile uint32_t *)0x40038000))
N#define ADC0_RIS_R              (*((volatile uint32_t *)0x40038004))
N#define ADC0_IM_R               (*((volatile uint32_t *)0x40038008))
N#define ADC0_ISC_R              (*((volatile uint32_t *)0x4003800C))
N#define ADC0_OSTAT_R            (*((volatile uint32_t *)0x40038010))
N#define ADC0_EMUX_R             (*((volatile uint32_t *)0x40038014))
N#define ADC0_USTAT_R            (*((volatile uint32_t *)0x40038018))
N#define ADC0_TSSEL_R            (*((volatile uint32_t *)0x4003801C))
N#define ADC0_SSPRI_R            (*((volatile uint32_t *)0x40038020))
N#define ADC0_SPC_R              (*((volatile uint32_t *)0x40038024))
N#define ADC0_PSSI_R             (*((volatile uint32_t *)0x40038028))
N#define ADC0_SAC_R              (*((volatile uint32_t *)0x40038030))
N#define ADC0_DCISC_R            (*((volatile uint32_t *)0x40038034))
N#define ADC0_CTL_R              (*((volatile uint32_t *)0x40038038))
N#define ADC0_SSMUX0_R           (*((volatile uint32_t *)0x40038040))
N#define ADC0_SSCTL0_R           (*((volatile uint32_t *)0x40038044))
N#define ADC0_SSFIFO0_R          (*((volatile uint32_t *)0x40038048))
N#define ADC0_SSFSTAT0_R         (*((volatile uint32_t *)0x4003804C))
N#define ADC0_SSOP0_R            (*((volatile uint32_t *)0x40038050))
N#define ADC0_SSDC0_R            (*((volatile uint32_t *)0x40038054))
N#define ADC0_SSEMUX0_R          (*((volatile uint32_t *)0x40038058))
N#define ADC0_SSTSH0_R           (*((volatile uint32_t *)0x4003805C))
N#define ADC0_SSMUX1_R           (*((volatile uint32_t *)0x40038060))
N#define ADC0_SSCTL1_R           (*((volatile uint32_t *)0x40038064))
N#define ADC0_SSFIFO1_R          (*((volatile uint32_t *)0x40038068))
N#define ADC0_SSFSTAT1_R         (*((volatile uint32_t *)0x4003806C))
N#define ADC0_SSOP1_R            (*((volatile uint32_t *)0x40038070))
N#define ADC0_SSDC1_R            (*((volatile uint32_t *)0x40038074))
N#define ADC0_SSEMUX1_R          (*((volatile uint32_t *)0x40038078))
N#define ADC0_SSTSH1_R           (*((volatile uint32_t *)0x4003807C))
N#define ADC0_SSMUX2_R           (*((volatile uint32_t *)0x40038080))
N#define ADC0_SSCTL2_R           (*((volatile uint32_t *)0x40038084))
N#define ADC0_SSFIFO2_R          (*((volatile uint32_t *)0x40038088))
N#define ADC0_SSFSTAT2_R         (*((volatile uint32_t *)0x4003808C))
N#define ADC0_SSOP2_R            (*((volatile uint32_t *)0x40038090))
N#define ADC0_SSDC2_R            (*((volatile uint32_t *)0x40038094))
N#define ADC0_SSEMUX2_R          (*((volatile uint32_t *)0x40038098))
N#define ADC0_SSTSH2_R           (*((volatile uint32_t *)0x4003809C))
N#define ADC0_SSMUX3_R           (*((volatile uint32_t *)0x400380A0))
N#define ADC0_SSCTL3_R           (*((volatile uint32_t *)0x400380A4))
N#define ADC0_SSFIFO3_R          (*((volatile uint32_t *)0x400380A8))
N#define ADC0_SSFSTAT3_R         (*((volatile uint32_t *)0x400380AC))
N#define ADC0_SSOP3_R            (*((volatile uint32_t *)0x400380B0))
N#define ADC0_SSDC3_R            (*((volatile uint32_t *)0x400380B4))
N#define ADC0_SSEMUX3_R          (*((volatile uint32_t *)0x400380B8))
N#define ADC0_SSTSH3_R           (*((volatile uint32_t *)0x400380BC))
N#define ADC0_DCRIC_R            (*((volatile uint32_t *)0x40038D00))
N#define ADC0_DCCTL0_R           (*((volatile uint32_t *)0x40038E00))
N#define ADC0_DCCTL1_R           (*((volatile uint32_t *)0x40038E04))
N#define ADC0_DCCTL2_R           (*((volatile uint32_t *)0x40038E08))
N#define ADC0_DCCTL3_R           (*((volatile uint32_t *)0x40038E0C))
N#define ADC0_DCCTL4_R           (*((volatile uint32_t *)0x40038E10))
N#define ADC0_DCCTL5_R           (*((volatile uint32_t *)0x40038E14))
N#define ADC0_DCCTL6_R           (*((volatile uint32_t *)0x40038E18))
N#define ADC0_DCCTL7_R           (*((volatile uint32_t *)0x40038E1C))
N#define ADC0_DCCMP0_R           (*((volatile uint32_t *)0x40038E40))
N#define ADC0_DCCMP1_R           (*((volatile uint32_t *)0x40038E44))
N#define ADC0_DCCMP2_R           (*((volatile uint32_t *)0x40038E48))
N#define ADC0_DCCMP3_R           (*((volatile uint32_t *)0x40038E4C))
N#define ADC0_DCCMP4_R           (*((volatile uint32_t *)0x40038E50))
N#define ADC0_DCCMP5_R           (*((volatile uint32_t *)0x40038E54))
N#define ADC0_DCCMP6_R           (*((volatile uint32_t *)0x40038E58))
N#define ADC0_DCCMP7_R           (*((volatile uint32_t *)0x40038E5C))
N#define ADC0_PP_R               (*((volatile uint32_t *)0x40038FC0))
N#define ADC0_PC_R               (*((volatile uint32_t *)0x40038FC4))
N#define ADC0_CC_R               (*((volatile uint32_t *)0x40038FC8))
N
N//*****************************************************************************
N//
N// ADC registers (ADC1)
N//
N//*****************************************************************************
N#define ADC1_ACTSS_R            (*((volatile uint32_t *)0x40039000))
N#define ADC1_RIS_R              (*((volatile uint32_t *)0x40039004))
N#define ADC1_IM_R               (*((volatile uint32_t *)0x40039008))
N#define ADC1_ISC_R              (*((volatile uint32_t *)0x4003900C))
N#define ADC1_OSTAT_R            (*((volatile uint32_t *)0x40039010))
N#define ADC1_EMUX_R             (*((volatile uint32_t *)0x40039014))
N#define ADC1_USTAT_R            (*((volatile uint32_t *)0x40039018))
N#define ADC1_TSSEL_R            (*((volatile uint32_t *)0x4003901C))
N#define ADC1_SSPRI_R            (*((volatile uint32_t *)0x40039020))
N#define ADC1_SPC_R              (*((volatile uint32_t *)0x40039024))
N#define ADC1_PSSI_R             (*((volatile uint32_t *)0x40039028))
N#define ADC1_SAC_R              (*((volatile uint32_t *)0x40039030))
N#define ADC1_DCISC_R            (*((volatile uint32_t *)0x40039034))
N#define ADC1_CTL_R              (*((volatile uint32_t *)0x40039038))
N#define ADC1_SSMUX0_R           (*((volatile uint32_t *)0x40039040))
N#define ADC1_SSCTL0_R           (*((volatile uint32_t *)0x40039044))
N#define ADC1_SSFIFO0_R          (*((volatile uint32_t *)0x40039048))
N#define ADC1_SSFSTAT0_R         (*((volatile uint32_t *)0x4003904C))
N#define ADC1_SSOP0_R            (*((volatile uint32_t *)0x40039050))
N#define ADC1_SSDC0_R            (*((volatile uint32_t *)0x40039054))
N#define ADC1_SSEMUX0_R          (*((volatile uint32_t *)0x40039058))
N#define ADC1_SSTSH0_R           (*((volatile uint32_t *)0x4003905C))
N#define ADC1_SSMUX1_R           (*((volatile uint32_t *)0x40039060))
N#define ADC1_SSCTL1_R           (*((volatile uint32_t *)0x40039064))
N#define ADC1_SSFIFO1_R          (*((volatile uint32_t *)0x40039068))
N#define ADC1_SSFSTAT1_R         (*((volatile uint32_t *)0x4003906C))
N#define ADC1_SSOP1_R            (*((volatile uint32_t *)0x40039070))
N#define ADC1_SSDC1_R            (*((volatile uint32_t *)0x40039074))
N#define ADC1_SSEMUX1_R          (*((volatile uint32_t *)0x40039078))
N#define ADC1_SSTSH1_R           (*((volatile uint32_t *)0x4003907C))
N#define ADC1_SSMUX2_R           (*((volatile uint32_t *)0x40039080))
N#define ADC1_SSCTL2_R           (*((volatile uint32_t *)0x40039084))
N#define ADC1_SSFIFO2_R          (*((volatile uint32_t *)0x40039088))
N#define ADC1_SSFSTAT2_R         (*((volatile uint32_t *)0x4003908C))
N#define ADC1_SSOP2_R            (*((volatile uint32_t *)0x40039090))
N#define ADC1_SSDC2_R            (*((volatile uint32_t *)0x40039094))
N#define ADC1_SSEMUX2_R          (*((volatile uint32_t *)0x40039098))
N#define ADC1_SSTSH2_R           (*((volatile uint32_t *)0x4003909C))
N#define ADC1_SSMUX3_R           (*((volatile uint32_t *)0x400390A0))
N#define ADC1_SSCTL3_R           (*((volatile uint32_t *)0x400390A4))
N#define ADC1_SSFIFO3_R          (*((volatile uint32_t *)0x400390A8))
N#define ADC1_SSFSTAT3_R         (*((volatile uint32_t *)0x400390AC))
N#define ADC1_SSOP3_R            (*((volatile uint32_t *)0x400390B0))
N#define ADC1_SSDC3_R            (*((volatile uint32_t *)0x400390B4))
N#define ADC1_SSEMUX3_R          (*((volatile uint32_t *)0x400390B8))
N#define ADC1_SSTSH3_R           (*((volatile uint32_t *)0x400390BC))
N#define ADC1_DCRIC_R            (*((volatile uint32_t *)0x40039D00))
N#define ADC1_DCCTL0_R           (*((volatile uint32_t *)0x40039E00))
N#define ADC1_DCCTL1_R           (*((volatile uint32_t *)0x40039E04))
N#define ADC1_DCCTL2_R           (*((volatile uint32_t *)0x40039E08))
N#define ADC1_DCCTL3_R           (*((volatile uint32_t *)0x40039E0C))
N#define ADC1_DCCTL4_R           (*((volatile uint32_t *)0x40039E10))
N#define ADC1_DCCTL5_R           (*((volatile uint32_t *)0x40039E14))
N#define ADC1_DCCTL6_R           (*((volatile uint32_t *)0x40039E18))
N#define ADC1_DCCTL7_R           (*((volatile uint32_t *)0x40039E1C))
N#define ADC1_DCCMP0_R           (*((volatile uint32_t *)0x40039E40))
N#define ADC1_DCCMP1_R           (*((volatile uint32_t *)0x40039E44))
N#define ADC1_DCCMP2_R           (*((volatile uint32_t *)0x40039E48))
N#define ADC1_DCCMP3_R           (*((volatile uint32_t *)0x40039E4C))
N#define ADC1_DCCMP4_R           (*((volatile uint32_t *)0x40039E50))
N#define ADC1_DCCMP5_R           (*((volatile uint32_t *)0x40039E54))
N#define ADC1_DCCMP6_R           (*((volatile uint32_t *)0x40039E58))
N#define ADC1_DCCMP7_R           (*((volatile uint32_t *)0x40039E5C))
N#define ADC1_PP_R               (*((volatile uint32_t *)0x40039FC0))
N#define ADC1_PC_R               (*((volatile uint32_t *)0x40039FC4))
N#define ADC1_CC_R               (*((volatile uint32_t *)0x40039FC8))
N
N//*****************************************************************************
N//
N// Comparator registers (COMP)
N//
N//*****************************************************************************
N#define COMP_ACMIS_R            (*((volatile uint32_t *)0x4003C000))
N#define COMP_ACRIS_R            (*((volatile uint32_t *)0x4003C004))
N#define COMP_ACINTEN_R          (*((volatile uint32_t *)0x4003C008))
N#define COMP_ACREFCTL_R         (*((volatile uint32_t *)0x4003C010))
N#define COMP_ACSTAT0_R          (*((volatile uint32_t *)0x4003C020))
N#define COMP_ACCTL0_R           (*((volatile uint32_t *)0x4003C024))
N#define COMP_ACSTAT1_R          (*((volatile uint32_t *)0x4003C040))
N#define COMP_ACCTL1_R           (*((volatile uint32_t *)0x4003C044))
N#define COMP_ACSTAT2_R          (*((volatile uint32_t *)0x4003C060))
N#define COMP_ACCTL2_R           (*((volatile uint32_t *)0x4003C064))
N#define COMP_PP_R               (*((volatile uint32_t *)0x4003CFC0))
N
N//*****************************************************************************
N//
N// CAN registers (CAN0)
N//
N//*****************************************************************************
N#define CAN0_CTL_R              (*((volatile uint32_t *)0x40040000))
N#define CAN0_STS_R              (*((volatile uint32_t *)0x40040004))
N#define CAN0_ERR_R              (*((volatile uint32_t *)0x40040008))
N#define CAN0_BIT_R              (*((volatile uint32_t *)0x4004000C))
N#define CAN0_INT_R              (*((volatile uint32_t *)0x40040010))
N#define CAN0_TST_R              (*((volatile uint32_t *)0x40040014))
N#define CAN0_BRPE_R             (*((volatile uint32_t *)0x40040018))
N#define CAN0_IF1CRQ_R           (*((volatile uint32_t *)0x40040020))
N#define CAN0_IF1CMSK_R          (*((volatile uint32_t *)0x40040024))
N#define CAN0_IF1MSK1_R          (*((volatile uint32_t *)0x40040028))
N#define CAN0_IF1MSK2_R          (*((volatile uint32_t *)0x4004002C))
N#define CAN0_IF1ARB1_R          (*((volatile uint32_t *)0x40040030))
N#define CAN0_IF1ARB2_R          (*((volatile uint32_t *)0x40040034))
N#define CAN0_IF1MCTL_R          (*((volatile uint32_t *)0x40040038))
N#define CAN0_IF1DA1_R           (*((volatile uint32_t *)0x4004003C))
N#define CAN0_IF1DA2_R           (*((volatile uint32_t *)0x40040040))
N#define CAN0_IF1DB1_R           (*((volatile uint32_t *)0x40040044))
N#define CAN0_IF1DB2_R           (*((volatile uint32_t *)0x40040048))
N#define CAN0_IF2CRQ_R           (*((volatile uint32_t *)0x40040080))
N#define CAN0_IF2CMSK_R          (*((volatile uint32_t *)0x40040084))
N#define CAN0_IF2MSK1_R          (*((volatile uint32_t *)0x40040088))
N#define CAN0_IF2MSK2_R          (*((volatile uint32_t *)0x4004008C))
N#define CAN0_IF2ARB1_R          (*((volatile uint32_t *)0x40040090))
N#define CAN0_IF2ARB2_R          (*((volatile uint32_t *)0x40040094))
N#define CAN0_IF2MCTL_R          (*((volatile uint32_t *)0x40040098))
N#define CAN0_IF2DA1_R           (*((volatile uint32_t *)0x4004009C))
N#define CAN0_IF2DA2_R           (*((volatile uint32_t *)0x400400A0))
N#define CAN0_IF2DB1_R           (*((volatile uint32_t *)0x400400A4))
N#define CAN0_IF2DB2_R           (*((volatile uint32_t *)0x400400A8))
N#define CAN0_TXRQ1_R            (*((volatile uint32_t *)0x40040100))
N#define CAN0_TXRQ2_R            (*((volatile uint32_t *)0x40040104))
N#define CAN0_NWDA1_R            (*((volatile uint32_t *)0x40040120))
N#define CAN0_NWDA2_R            (*((volatile uint32_t *)0x40040124))
N#define CAN0_MSG1INT_R          (*((volatile uint32_t *)0x40040140))
N#define CAN0_MSG2INT_R          (*((volatile uint32_t *)0x40040144))
N#define CAN0_MSG1VAL_R          (*((volatile uint32_t *)0x40040160))
N#define CAN0_MSG2VAL_R          (*((volatile uint32_t *)0x40040164))
N
N//*****************************************************************************
N//
N// CAN registers (CAN1)
N//
N//*****************************************************************************
N#define CAN1_CTL_R              (*((volatile uint32_t *)0x40041000))
N#define CAN1_STS_R              (*((volatile uint32_t *)0x40041004))
N#define CAN1_ERR_R              (*((volatile uint32_t *)0x40041008))
N#define CAN1_BIT_R              (*((volatile uint32_t *)0x4004100C))
N#define CAN1_INT_R              (*((volatile uint32_t *)0x40041010))
N#define CAN1_TST_R              (*((volatile uint32_t *)0x40041014))
N#define CAN1_BRPE_R             (*((volatile uint32_t *)0x40041018))
N#define CAN1_IF1CRQ_R           (*((volatile uint32_t *)0x40041020))
N#define CAN1_IF1CMSK_R          (*((volatile uint32_t *)0x40041024))
N#define CAN1_IF1MSK1_R          (*((volatile uint32_t *)0x40041028))
N#define CAN1_IF1MSK2_R          (*((volatile uint32_t *)0x4004102C))
N#define CAN1_IF1ARB1_R          (*((volatile uint32_t *)0x40041030))
N#define CAN1_IF1ARB2_R          (*((volatile uint32_t *)0x40041034))
N#define CAN1_IF1MCTL_R          (*((volatile uint32_t *)0x40041038))
N#define CAN1_IF1DA1_R           (*((volatile uint32_t *)0x4004103C))
N#define CAN1_IF1DA2_R           (*((volatile uint32_t *)0x40041040))
N#define CAN1_IF1DB1_R           (*((volatile uint32_t *)0x40041044))
N#define CAN1_IF1DB2_R           (*((volatile uint32_t *)0x40041048))
N#define CAN1_IF2CRQ_R           (*((volatile uint32_t *)0x40041080))
N#define CAN1_IF2CMSK_R          (*((volatile uint32_t *)0x40041084))
N#define CAN1_IF2MSK1_R          (*((volatile uint32_t *)0x40041088))
N#define CAN1_IF2MSK2_R          (*((volatile uint32_t *)0x4004108C))
N#define CAN1_IF2ARB1_R          (*((volatile uint32_t *)0x40041090))
N#define CAN1_IF2ARB2_R          (*((volatile uint32_t *)0x40041094))
N#define CAN1_IF2MCTL_R          (*((volatile uint32_t *)0x40041098))
N#define CAN1_IF2DA1_R           (*((volatile uint32_t *)0x4004109C))
N#define CAN1_IF2DA2_R           (*((volatile uint32_t *)0x400410A0))
N#define CAN1_IF2DB1_R           (*((volatile uint32_t *)0x400410A4))
N#define CAN1_IF2DB2_R           (*((volatile uint32_t *)0x400410A8))
N#define CAN1_TXRQ1_R            (*((volatile uint32_t *)0x40041100))
N#define CAN1_TXRQ2_R            (*((volatile uint32_t *)0x40041104))
N#define CAN1_NWDA1_R            (*((volatile uint32_t *)0x40041120))
N#define CAN1_NWDA2_R            (*((volatile uint32_t *)0x40041124))
N#define CAN1_MSG1INT_R          (*((volatile uint32_t *)0x40041140))
N#define CAN1_MSG2INT_R          (*((volatile uint32_t *)0x40041144))
N#define CAN1_MSG1VAL_R          (*((volatile uint32_t *)0x40041160))
N#define CAN1_MSG2VAL_R          (*((volatile uint32_t *)0x40041164))
N
N//*****************************************************************************
N//
N// Univeral Serial Bus registers (USB0)
N//
N//*****************************************************************************
N#define USB0_FADDR_R            (*((volatile uint8_t *)0x40050000))
N#define USB0_POWER_R            (*((volatile uint8_t *)0x40050001))
N#define USB0_TXIS_R             (*((volatile uint16_t *)0x40050002))
N#define USB0_RXIS_R             (*((volatile uint16_t *)0x40050004))
N#define USB0_TXIE_R             (*((volatile uint16_t *)0x40050006))
N#define USB0_RXIE_R             (*((volatile uint16_t *)0x40050008))
N#define USB0_IS_R               (*((volatile uint8_t *)0x4005000A))
N#define USB0_IE_R               (*((volatile uint8_t *)0x4005000B))
N#define USB0_FRAME_R            (*((volatile uint16_t *)0x4005000C))
N#define USB0_EPIDX_R            (*((volatile uint8_t *)0x4005000E))
N#define USB0_TEST_R             (*((volatile uint8_t *)0x4005000F))
N#define USB0_FIFO0_R            (*((volatile uint32_t *)0x40050020))
N#define USB0_FIFO1_R            (*((volatile uint32_t *)0x40050024))
N#define USB0_FIFO2_R            (*((volatile uint32_t *)0x40050028))
N#define USB0_FIFO3_R            (*((volatile uint32_t *)0x4005002C))
N#define USB0_FIFO4_R            (*((volatile uint32_t *)0x40050030))
N#define USB0_FIFO5_R            (*((volatile uint32_t *)0x40050034))
N#define USB0_FIFO6_R            (*((volatile uint32_t *)0x40050038))
N#define USB0_FIFO7_R            (*((volatile uint32_t *)0x4005003C))
N#define USB0_DEVCTL_R           (*((volatile uint8_t *)0x40050060))
N#define USB0_CCONF_R            (*((volatile uint8_t *)0x40050061))
N#define USB0_TXFIFOSZ_R         (*((volatile uint8_t *)0x40050062))
N#define USB0_RXFIFOSZ_R         (*((volatile uint8_t *)0x40050063))
N#define USB0_TXFIFOADD_R        (*((volatile uint16_t *)0x40050064))
N#define USB0_RXFIFOADD_R        (*((volatile uint16_t *)0x40050066))
N#define USB0_ULPIVBUSCTL_R      (*((volatile uint8_t *)0x40050070))
N#define USB0_ULPIREGDATA_R      (*((volatile uint8_t *)0x40050074))
N#define USB0_ULPIREGADDR_R      (*((volatile uint8_t *)0x40050075))
N#define USB0_ULPIREGCTL_R       (*((volatile uint8_t *)0x40050076))
N#define USB0_ULPIRAWDATA_R      (*((volatile uint8_t *)0x40050077))
N#define USB0_EPINFO_R           (*((volatile uint8_t *)0x40050078))
N#define USB0_RAMINFO_R          (*((volatile uint8_t *)0x40050079))
N#define USB0_CONTIM_R           (*((volatile uint8_t *)0x4005007A))
N#define USB0_VPLEN_R            (*((volatile uint8_t *)0x4005007B))
N#define USB0_HSEOF_R            (*((volatile uint8_t *)0x4005007C))
N#define USB0_FSEOF_R            (*((volatile uint8_t *)0x4005007D))
N#define USB0_LSEOF_R            (*((volatile uint8_t *)0x4005007E))
N#define USB0_TXFUNCADDR0_R      (*((volatile uint8_t *)0x40050080))
N#define USB0_TXHUBADDR0_R       (*((volatile uint8_t *)0x40050082))
N#define USB0_TXHUBPORT0_R       (*((volatile uint8_t *)0x40050083))
N#define USB0_TXFUNCADDR1_R      (*((volatile uint8_t *)0x40050088))
N#define USB0_TXHUBADDR1_R       (*((volatile uint8_t *)0x4005008A))
N#define USB0_TXHUBPORT1_R       (*((volatile uint8_t *)0x4005008B))
N#define USB0_RXFUNCADDR1_R      (*((volatile uint8_t *)0x4005008C))
N#define USB0_RXHUBADDR1_R       (*((volatile uint8_t *)0x4005008E))
N#define USB0_RXHUBPORT1_R       (*((volatile uint8_t *)0x4005008F))
N#define USB0_TXFUNCADDR2_R      (*((volatile uint8_t *)0x40050090))
N#define USB0_TXHUBADDR2_R       (*((volatile uint8_t *)0x40050092))
N#define USB0_TXHUBPORT2_R       (*((volatile uint8_t *)0x40050093))
N#define USB0_RXFUNCADDR2_R      (*((volatile uint8_t *)0x40050094))
N#define USB0_RXHUBADDR2_R       (*((volatile uint8_t *)0x40050096))
N#define USB0_RXHUBPORT2_R       (*((volatile uint8_t *)0x40050097))
N#define USB0_TXFUNCADDR3_R      (*((volatile uint8_t *)0x40050098))
N#define USB0_TXHUBADDR3_R       (*((volatile uint8_t *)0x4005009A))
N#define USB0_TXHUBPORT3_R       (*((volatile uint8_t *)0x4005009B))
N#define USB0_RXFUNCADDR3_R      (*((volatile uint8_t *)0x4005009C))
N#define USB0_RXHUBADDR3_R       (*((volatile uint8_t *)0x4005009E))
N#define USB0_RXHUBPORT3_R       (*((volatile uint8_t *)0x4005009F))
N#define USB0_TXFUNCADDR4_R      (*((volatile uint8_t *)0x400500A0))
N#define USB0_TXHUBADDR4_R       (*((volatile uint8_t *)0x400500A2))
N#define USB0_TXHUBPORT4_R       (*((volatile uint8_t *)0x400500A3))
N#define USB0_RXFUNCADDR4_R      (*((volatile uint8_t *)0x400500A4))
N#define USB0_RXHUBADDR4_R       (*((volatile uint8_t *)0x400500A6))
N#define USB0_RXHUBPORT4_R       (*((volatile uint8_t *)0x400500A7))
N#define USB0_TXFUNCADDR5_R      (*((volatile uint8_t *)0x400500A8))
N#define USB0_TXHUBADDR5_R       (*((volatile uint8_t *)0x400500AA))
N#define USB0_TXHUBPORT5_R       (*((volatile uint8_t *)0x400500AB))
N#define USB0_RXFUNCADDR5_R      (*((volatile uint8_t *)0x400500AC))
N#define USB0_RXHUBADDR5_R       (*((volatile uint8_t *)0x400500AE))
N#define USB0_RXHUBPORT5_R       (*((volatile uint8_t *)0x400500AF))
N#define USB0_TXFUNCADDR6_R      (*((volatile uint8_t *)0x400500B0))
N#define USB0_TXHUBADDR6_R       (*((volatile uint8_t *)0x400500B2))
N#define USB0_TXHUBPORT6_R       (*((volatile uint8_t *)0x400500B3))
N#define USB0_RXFUNCADDR6_R      (*((volatile uint8_t *)0x400500B4))
N#define USB0_RXHUBADDR6_R       (*((volatile uint8_t *)0x400500B6))
N#define USB0_RXHUBPORT6_R       (*((volatile uint8_t *)0x400500B7))
N#define USB0_TXFUNCADDR7_R      (*((volatile uint8_t *)0x400500B8))
N#define USB0_TXHUBADDR7_R       (*((volatile uint8_t *)0x400500BA))
N#define USB0_TXHUBPORT7_R       (*((volatile uint8_t *)0x400500BB))
N#define USB0_RXFUNCADDR7_R      (*((volatile uint8_t *)0x400500BC))
N#define USB0_RXHUBADDR7_R       (*((volatile uint8_t *)0x400500BE))
N#define USB0_RXHUBPORT7_R       (*((volatile uint8_t *)0x400500BF))
N#define USB0_CSRL0_R            (*((volatile uint8_t *)0x40050102))
N#define USB0_CSRH0_R            (*((volatile uint8_t *)0x40050103))
N#define USB0_COUNT0_R           (*((volatile uint8_t *)0x40050108))
N#define USB0_TYPE0_R            (*((volatile uint8_t *)0x4005010A))
N#define USB0_NAKLMT_R           (*((volatile uint8_t *)0x4005010B))
N#define USB0_TXMAXP1_R          (*((volatile uint16_t *)0x40050110))
N#define USB0_TXCSRL1_R          (*((volatile uint8_t *)0x40050112))
N#define USB0_TXCSRH1_R          (*((volatile uint8_t *)0x40050113))
N#define USB0_RXMAXP1_R          (*((volatile uint16_t *)0x40050114))
N#define USB0_RXCSRL1_R          (*((volatile uint8_t *)0x40050116))
N#define USB0_RXCSRH1_R          (*((volatile uint8_t *)0x40050117))
N#define USB0_RXCOUNT1_R         (*((volatile uint16_t *)0x40050118))
N#define USB0_TXTYPE1_R          (*((volatile uint8_t *)0x4005011A))
N#define USB0_TXINTERVAL1_R      (*((volatile uint8_t *)0x4005011B))
N#define USB0_RXTYPE1_R          (*((volatile uint8_t *)0x4005011C))
N#define USB0_RXINTERVAL1_R      (*((volatile uint8_t *)0x4005011D))
N#define USB0_TXMAXP2_R          (*((volatile uint16_t *)0x40050120))
N#define USB0_TXCSRL2_R          (*((volatile uint8_t *)0x40050122))
N#define USB0_TXCSRH2_R          (*((volatile uint8_t *)0x40050123))
N#define USB0_RXMAXP2_R          (*((volatile uint16_t *)0x40050124))
N#define USB0_RXCSRL2_R          (*((volatile uint8_t *)0x40050126))
N#define USB0_RXCSRH2_R          (*((volatile uint8_t *)0x40050127))
N#define USB0_RXCOUNT2_R         (*((volatile uint16_t *)0x40050128))
N#define USB0_TXTYPE2_R          (*((volatile uint8_t *)0x4005012A))
N#define USB0_TXINTERVAL2_R      (*((volatile uint8_t *)0x4005012B))
N#define USB0_RXTYPE2_R          (*((volatile uint8_t *)0x4005012C))
N#define USB0_RXINTERVAL2_R      (*((volatile uint8_t *)0x4005012D))
N#define USB0_TXMAXP3_R          (*((volatile uint16_t *)0x40050130))
N#define USB0_TXCSRL3_R          (*((volatile uint8_t *)0x40050132))
N#define USB0_TXCSRH3_R          (*((volatile uint8_t *)0x40050133))
N#define USB0_RXMAXP3_R          (*((volatile uint16_t *)0x40050134))
N#define USB0_RXCSRL3_R          (*((volatile uint8_t *)0x40050136))
N#define USB0_RXCSRH3_R          (*((volatile uint8_t *)0x40050137))
N#define USB0_RXCOUNT3_R         (*((volatile uint16_t *)0x40050138))
N#define USB0_TXTYPE3_R          (*((volatile uint8_t *)0x4005013A))
N#define USB0_TXINTERVAL3_R      (*((volatile uint8_t *)0x4005013B))
N#define USB0_RXTYPE3_R          (*((volatile uint8_t *)0x4005013C))
N#define USB0_RXINTERVAL3_R      (*((volatile uint8_t *)0x4005013D))
N#define USB0_TXMAXP4_R          (*((volatile uint16_t *)0x40050140))
N#define USB0_TXCSRL4_R          (*((volatile uint8_t *)0x40050142))
N#define USB0_TXCSRH4_R          (*((volatile uint8_t *)0x40050143))
N#define USB0_RXMAXP4_R          (*((volatile uint16_t *)0x40050144))
N#define USB0_RXCSRL4_R          (*((volatile uint8_t *)0x40050146))
N#define USB0_RXCSRH4_R          (*((volatile uint8_t *)0x40050147))
N#define USB0_RXCOUNT4_R         (*((volatile uint16_t *)0x40050148))
N#define USB0_TXTYPE4_R          (*((volatile uint8_t *)0x4005014A))
N#define USB0_TXINTERVAL4_R      (*((volatile uint8_t *)0x4005014B))
N#define USB0_RXTYPE4_R          (*((volatile uint8_t *)0x4005014C))
N#define USB0_RXINTERVAL4_R      (*((volatile uint8_t *)0x4005014D))
N#define USB0_TXMAXP5_R          (*((volatile uint16_t *)0x40050150))
N#define USB0_TXCSRL5_R          (*((volatile uint8_t *)0x40050152))
N#define USB0_TXCSRH5_R          (*((volatile uint8_t *)0x40050153))
N#define USB0_RXMAXP5_R          (*((volatile uint16_t *)0x40050154))
N#define USB0_RXCSRL5_R          (*((volatile uint8_t *)0x40050156))
N#define USB0_RXCSRH5_R          (*((volatile uint8_t *)0x40050157))
N#define USB0_RXCOUNT5_R         (*((volatile uint16_t *)0x40050158))
N#define USB0_TXTYPE5_R          (*((volatile uint8_t *)0x4005015A))
N#define USB0_TXINTERVAL5_R      (*((volatile uint8_t *)0x4005015B))
N#define USB0_RXTYPE5_R          (*((volatile uint8_t *)0x4005015C))
N#define USB0_RXINTERVAL5_R      (*((volatile uint8_t *)0x4005015D))
N#define USB0_TXMAXP6_R          (*((volatile uint16_t *)0x40050160))
N#define USB0_TXCSRL6_R          (*((volatile uint8_t *)0x40050162))
N#define USB0_TXCSRH6_R          (*((volatile uint8_t *)0x40050163))
N#define USB0_RXMAXP6_R          (*((volatile uint16_t *)0x40050164))
N#define USB0_RXCSRL6_R          (*((volatile uint8_t *)0x40050166))
N#define USB0_RXCSRH6_R          (*((volatile uint8_t *)0x40050167))
N#define USB0_RXCOUNT6_R         (*((volatile uint16_t *)0x40050168))
N#define USB0_TXTYPE6_R          (*((volatile uint8_t *)0x4005016A))
N#define USB0_TXINTERVAL6_R      (*((volatile uint8_t *)0x4005016B))
N#define USB0_RXTYPE6_R          (*((volatile uint8_t *)0x4005016C))
N#define USB0_RXINTERVAL6_R      (*((volatile uint8_t *)0x4005016D))
N#define USB0_TXMAXP7_R          (*((volatile uint16_t *)0x40050170))
N#define USB0_TXCSRL7_R          (*((volatile uint8_t *)0x40050172))
N#define USB0_TXCSRH7_R          (*((volatile uint8_t *)0x40050173))
N#define USB0_RXMAXP7_R          (*((volatile uint16_t *)0x40050174))
N#define USB0_RXCSRL7_R          (*((volatile uint8_t *)0x40050176))
N#define USB0_RXCSRH7_R          (*((volatile uint8_t *)0x40050177))
N#define USB0_RXCOUNT7_R         (*((volatile uint16_t *)0x40050178))
N#define USB0_TXTYPE7_R          (*((volatile uint8_t *)0x4005017A))
N#define USB0_TXINTERVAL7_R      (*((volatile uint8_t *)0x4005017B))
N#define USB0_RXTYPE7_R          (*((volatile uint8_t *)0x4005017C))
N#define USB0_RXINTERVAL7_R      (*((volatile uint8_t *)0x4005017D))
N#define USB0_DMAINTR_R          (*((volatile uint8_t *)0x40050200))
N#define USB0_DMACTL0_R          (*((volatile uint16_t *)0x40050204))
N#define USB0_DMAADDR0_R         (*((volatile uint32_t *)0x40050208))
N#define USB0_DMACOUNT0_R        (*((volatile uint32_t *)0x4005020C))
N#define USB0_DMACTL1_R          (*((volatile uint16_t *)0x40050214))
N#define USB0_DMAADDR1_R         (*((volatile uint32_t *)0x40050218))
N#define USB0_DMACOUNT1_R        (*((volatile uint32_t *)0x4005021C))
N#define USB0_DMACTL2_R          (*((volatile uint16_t *)0x40050224))
N#define USB0_DMAADDR2_R         (*((volatile uint32_t *)0x40050228))
N#define USB0_DMACOUNT2_R        (*((volatile uint32_t *)0x4005022C))
N#define USB0_DMACTL3_R          (*((volatile uint16_t *)0x40050234))
N#define USB0_DMAADDR3_R         (*((volatile uint32_t *)0x40050238))
N#define USB0_DMACOUNT3_R        (*((volatile uint32_t *)0x4005023C))
N#define USB0_DMACTL4_R          (*((volatile uint16_t *)0x40050244))
N#define USB0_DMAADDR4_R         (*((volatile uint32_t *)0x40050248))
N#define USB0_DMACOUNT4_R        (*((volatile uint32_t *)0x4005024C))
N#define USB0_DMACTL5_R          (*((volatile uint16_t *)0x40050254))
N#define USB0_DMAADDR5_R         (*((volatile uint32_t *)0x40050258))
N#define USB0_DMACOUNT5_R        (*((volatile uint32_t *)0x4005025C))
N#define USB0_DMACTL6_R          (*((volatile uint16_t *)0x40050264))
N#define USB0_DMAADDR6_R         (*((volatile uint32_t *)0x40050268))
N#define USB0_DMACOUNT6_R        (*((volatile uint32_t *)0x4005026C))
N#define USB0_DMACTL7_R          (*((volatile uint16_t *)0x40050274))
N#define USB0_DMAADDR7_R         (*((volatile uint32_t *)0x40050278))
N#define USB0_DMACOUNT7_R        (*((volatile uint32_t *)0x4005027C))
N#define USB0_RQPKTCOUNT1_R      (*((volatile uint16_t *)0x40050304))
N#define USB0_RQPKTCOUNT2_R      (*((volatile uint16_t *)0x40050308))
N#define USB0_RQPKTCOUNT3_R      (*((volatile uint16_t *)0x4005030C))
N#define USB0_RQPKTCOUNT4_R      (*((volatile uint16_t *)0x40050310))
N#define USB0_RQPKTCOUNT5_R      (*((volatile uint16_t *)0x40050314))
N#define USB0_RQPKTCOUNT6_R      (*((volatile uint16_t *)0x40050318))
N#define USB0_RQPKTCOUNT7_R      (*((volatile uint16_t *)0x4005031C))
N#define USB0_RXDPKTBUFDIS_R     (*((volatile uint16_t *)0x40050340))
N#define USB0_TXDPKTBUFDIS_R     (*((volatile uint16_t *)0x40050342))
N#define USB0_CTO_R              (*((volatile uint16_t *)0x40050344))
N#define USB0_HHSRTN_R           (*((volatile uint16_t *)0x40050346))
N#define USB0_HSBT_R             (*((volatile uint16_t *)0x40050348))
N#define USB0_LPMATTR_R          (*((volatile uint16_t *)0x40050360))
N#define USB0_LPMCNTRL_R         (*((volatile uint8_t *)0x40050362))
N#define USB0_LPMIM_R            (*((volatile uint8_t *)0x40050363))
N#define USB0_LPMRIS_R           (*((volatile uint8_t *)0x40050364))
N#define USB0_LPMFADDR_R         (*((volatile uint8_t *)0x40050365))
N#define USB0_EPC_R              (*((volatile uint32_t *)0x40050400))
N#define USB0_EPCRIS_R           (*((volatile uint32_t *)0x40050404))
N#define USB0_EPCIM_R            (*((volatile uint32_t *)0x40050408))
N#define USB0_EPCISC_R           (*((volatile uint32_t *)0x4005040C))
N#define USB0_DRRIS_R            (*((volatile uint32_t *)0x40050410))
N#define USB0_DRIM_R             (*((volatile uint32_t *)0x40050414))
N#define USB0_DRISC_R            (*((volatile uint32_t *)0x40050418))
N#define USB0_GPCS_R             (*((volatile uint32_t *)0x4005041C))
N#define USB0_VDC_R              (*((volatile uint32_t *)0x40050430))
N#define USB0_VDCRIS_R           (*((volatile uint32_t *)0x40050434))
N#define USB0_VDCIM_R            (*((volatile uint32_t *)0x40050438))
N#define USB0_VDCISC_R           (*((volatile uint32_t *)0x4005043C))
N#define USB0_PP_R               (*((volatile uint32_t *)0x40050FC0))
N#define USB0_PC_R               (*((volatile uint32_t *)0x40050FC4))
N#define USB0_CC_R               (*((volatile uint32_t *)0x40050FC8))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTA AHB)
N//
N//*****************************************************************************
N#define GPIO_PORTA_AHB_DATA_BITS_R                                            \
N                                ((volatile uint32_t *)0x40058000)
X#define GPIO_PORTA_AHB_DATA_BITS_R                                                                            ((volatile uint32_t *)0x40058000)
N#define GPIO_PORTA_AHB_DATA_R   (*((volatile uint32_t *)0x400583FC))
N#define GPIO_PORTA_AHB_DIR_R    (*((volatile uint32_t *)0x40058400))
N#define GPIO_PORTA_AHB_IS_R     (*((volatile uint32_t *)0x40058404))
N#define GPIO_PORTA_AHB_IBE_R    (*((volatile uint32_t *)0x40058408))
N#define GPIO_PORTA_AHB_IEV_R    (*((volatile uint32_t *)0x4005840C))
N#define GPIO_PORTA_AHB_IM_R     (*((volatile uint32_t *)0x40058410))
N#define GPIO_PORTA_AHB_RIS_R    (*((volatile uint32_t *)0x40058414))
N#define GPIO_PORTA_AHB_MIS_R    (*((volatile uint32_t *)0x40058418))
N#define GPIO_PORTA_AHB_ICR_R    (*((volatile uint32_t *)0x4005841C))
N#define GPIO_PORTA_AHB_AFSEL_R  (*((volatile uint32_t *)0x40058420))
N#define GPIO_PORTA_AHB_DR2R_R   (*((volatile uint32_t *)0x40058500))
N#define GPIO_PORTA_AHB_DR4R_R   (*((volatile uint32_t *)0x40058504))
N#define GPIO_PORTA_AHB_DR8R_R   (*((volatile uint32_t *)0x40058508))
N#define GPIO_PORTA_AHB_ODR_R    (*((volatile uint32_t *)0x4005850C))
N#define GPIO_PORTA_AHB_PUR_R    (*((volatile uint32_t *)0x40058510))
N#define GPIO_PORTA_AHB_PDR_R    (*((volatile uint32_t *)0x40058514))
N#define GPIO_PORTA_AHB_SLR_R    (*((volatile uint32_t *)0x40058518))
N#define GPIO_PORTA_AHB_DEN_R    (*((volatile uint32_t *)0x4005851C))
N#define GPIO_PORTA_AHB_LOCK_R   (*((volatile uint32_t *)0x40058520))
N#define GPIO_PORTA_AHB_CR_R     (*((volatile uint32_t *)0x40058524))
N#define GPIO_PORTA_AHB_AMSEL_R  (*((volatile uint32_t *)0x40058528))
N#define GPIO_PORTA_AHB_PCTL_R   (*((volatile uint32_t *)0x4005852C))
N#define GPIO_PORTA_AHB_ADCCTL_R (*((volatile uint32_t *)0x40058530))
N#define GPIO_PORTA_AHB_DMACTL_R (*((volatile uint32_t *)0x40058534))
N#define GPIO_PORTA_AHB_SI_R     (*((volatile uint32_t *)0x40058538))
N#define GPIO_PORTA_AHB_DR12R_R  (*((volatile uint32_t *)0x4005853C))
N#define GPIO_PORTA_AHB_WAKEPEN_R                                              \
N                                (*((volatile uint32_t *)0x40058540))
X#define GPIO_PORTA_AHB_WAKEPEN_R                                                                              (*((volatile uint32_t *)0x40058540))
N#define GPIO_PORTA_AHB_WAKELVL_R                                              \
N                                (*((volatile uint32_t *)0x40058544))
X#define GPIO_PORTA_AHB_WAKELVL_R                                                                              (*((volatile uint32_t *)0x40058544))
N#define GPIO_PORTA_AHB_WAKESTAT_R                                             \
N                                (*((volatile uint32_t *)0x40058548))
X#define GPIO_PORTA_AHB_WAKESTAT_R                                                                             (*((volatile uint32_t *)0x40058548))
N#define GPIO_PORTA_AHB_PP_R     (*((volatile uint32_t *)0x40058FC0))
N#define GPIO_PORTA_AHB_PC_R     (*((volatile uint32_t *)0x40058FC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTB AHB)
N//
N//*****************************************************************************
N#define GPIO_PORTB_AHB_DATA_BITS_R                                            \
N                                ((volatile uint32_t *)0x40059000)
X#define GPIO_PORTB_AHB_DATA_BITS_R                                                                            ((volatile uint32_t *)0x40059000)
N#define GPIO_PORTB_AHB_DATA_R   (*((volatile uint32_t *)0x400593FC))
N#define GPIO_PORTB_AHB_DIR_R    (*((volatile uint32_t *)0x40059400))
N#define GPIO_PORTB_AHB_IS_R     (*((volatile uint32_t *)0x40059404))
N#define GPIO_PORTB_AHB_IBE_R    (*((volatile uint32_t *)0x40059408))
N#define GPIO_PORTB_AHB_IEV_R    (*((volatile uint32_t *)0x4005940C))
N#define GPIO_PORTB_AHB_IM_R     (*((volatile uint32_t *)0x40059410))
N#define GPIO_PORTB_AHB_RIS_R    (*((volatile uint32_t *)0x40059414))
N#define GPIO_PORTB_AHB_MIS_R    (*((volatile uint32_t *)0x40059418))
N#define GPIO_PORTB_AHB_ICR_R    (*((volatile uint32_t *)0x4005941C))
N#define GPIO_PORTB_AHB_AFSEL_R  (*((volatile uint32_t *)0x40059420))
N#define GPIO_PORTB_AHB_DR2R_R   (*((volatile uint32_t *)0x40059500))
N#define GPIO_PORTB_AHB_DR4R_R   (*((volatile uint32_t *)0x40059504))
N#define GPIO_PORTB_AHB_DR8R_R   (*((volatile uint32_t *)0x40059508))
N#define GPIO_PORTB_AHB_ODR_R    (*((volatile uint32_t *)0x4005950C))
N#define GPIO_PORTB_AHB_PUR_R    (*((volatile uint32_t *)0x40059510))
N#define GPIO_PORTB_AHB_PDR_R    (*((volatile uint32_t *)0x40059514))
N#define GPIO_PORTB_AHB_SLR_R    (*((volatile uint32_t *)0x40059518))
N#define GPIO_PORTB_AHB_DEN_R    (*((volatile uint32_t *)0x4005951C))
N#define GPIO_PORTB_AHB_LOCK_R   (*((volatile uint32_t *)0x40059520))
N#define GPIO_PORTB_AHB_CR_R     (*((volatile uint32_t *)0x40059524))
N#define GPIO_PORTB_AHB_AMSEL_R  (*((volatile uint32_t *)0x40059528))
N#define GPIO_PORTB_AHB_PCTL_R   (*((volatile uint32_t *)0x4005952C))
N#define GPIO_PORTB_AHB_ADCCTL_R (*((volatile uint32_t *)0x40059530))
N#define GPIO_PORTB_AHB_DMACTL_R (*((volatile uint32_t *)0x40059534))
N#define GPIO_PORTB_AHB_SI_R     (*((volatile uint32_t *)0x40059538))
N#define GPIO_PORTB_AHB_DR12R_R  (*((volatile uint32_t *)0x4005953C))
N#define GPIO_PORTB_AHB_WAKEPEN_R                                              \
N                                (*((volatile uint32_t *)0x40059540))
X#define GPIO_PORTB_AHB_WAKEPEN_R                                                                              (*((volatile uint32_t *)0x40059540))
N#define GPIO_PORTB_AHB_WAKELVL_R                                              \
N                                (*((volatile uint32_t *)0x40059544))
X#define GPIO_PORTB_AHB_WAKELVL_R                                                                              (*((volatile uint32_t *)0x40059544))
N#define GPIO_PORTB_AHB_WAKESTAT_R                                             \
N                                (*((volatile uint32_t *)0x40059548))
X#define GPIO_PORTB_AHB_WAKESTAT_R                                                                             (*((volatile uint32_t *)0x40059548))
N#define GPIO_PORTB_AHB_PP_R     (*((volatile uint32_t *)0x40059FC0))
N#define GPIO_PORTB_AHB_PC_R     (*((volatile uint32_t *)0x40059FC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTC AHB)
N//
N//*****************************************************************************
N#define GPIO_PORTC_AHB_DATA_BITS_R                                            \
N                                ((volatile uint32_t *)0x4005A000)
X#define GPIO_PORTC_AHB_DATA_BITS_R                                                                            ((volatile uint32_t *)0x4005A000)
N#define GPIO_PORTC_AHB_DATA_R   (*((volatile uint32_t *)0x4005A3FC))
N#define GPIO_PORTC_AHB_DIR_R    (*((volatile uint32_t *)0x4005A400))
N#define GPIO_PORTC_AHB_IS_R     (*((volatile uint32_t *)0x4005A404))
N#define GPIO_PORTC_AHB_IBE_R    (*((volatile uint32_t *)0x4005A408))
N#define GPIO_PORTC_AHB_IEV_R    (*((volatile uint32_t *)0x4005A40C))
N#define GPIO_PORTC_AHB_IM_R     (*((volatile uint32_t *)0x4005A410))
N#define GPIO_PORTC_AHB_RIS_R    (*((volatile uint32_t *)0x4005A414))
N#define GPIO_PORTC_AHB_MIS_R    (*((volatile uint32_t *)0x4005A418))
N#define GPIO_PORTC_AHB_ICR_R    (*((volatile uint32_t *)0x4005A41C))
N#define GPIO_PORTC_AHB_AFSEL_R  (*((volatile uint32_t *)0x4005A420))
N#define GPIO_PORTC_AHB_DR2R_R   (*((volatile uint32_t *)0x4005A500))
N#define GPIO_PORTC_AHB_DR4R_R   (*((volatile uint32_t *)0x4005A504))
N#define GPIO_PORTC_AHB_DR8R_R   (*((volatile uint32_t *)0x4005A508))
N#define GPIO_PORTC_AHB_ODR_R    (*((volatile uint32_t *)0x4005A50C))
N#define GPIO_PORTC_AHB_PUR_R    (*((volatile uint32_t *)0x4005A510))
N#define GPIO_PORTC_AHB_PDR_R    (*((volatile uint32_t *)0x4005A514))
N#define GPIO_PORTC_AHB_SLR_R    (*((volatile uint32_t *)0x4005A518))
N#define GPIO_PORTC_AHB_DEN_R    (*((volatile uint32_t *)0x4005A51C))
N#define GPIO_PORTC_AHB_LOCK_R   (*((volatile uint32_t *)0x4005A520))
N#define GPIO_PORTC_AHB_CR_R     (*((volatile uint32_t *)0x4005A524))
N#define GPIO_PORTC_AHB_AMSEL_R  (*((volatile uint32_t *)0x4005A528))
N#define GPIO_PORTC_AHB_PCTL_R   (*((volatile uint32_t *)0x4005A52C))
N#define GPIO_PORTC_AHB_ADCCTL_R (*((volatile uint32_t *)0x4005A530))
N#define GPIO_PORTC_AHB_DMACTL_R (*((volatile uint32_t *)0x4005A534))
N#define GPIO_PORTC_AHB_SI_R     (*((volatile uint32_t *)0x4005A538))
N#define GPIO_PORTC_AHB_DR12R_R  (*((volatile uint32_t *)0x4005A53C))
N#define GPIO_PORTC_AHB_WAKEPEN_R                                              \
N                                (*((volatile uint32_t *)0x4005A540))
X#define GPIO_PORTC_AHB_WAKEPEN_R                                                                              (*((volatile uint32_t *)0x4005A540))
N#define GPIO_PORTC_AHB_WAKELVL_R                                              \
N                                (*((volatile uint32_t *)0x4005A544))
X#define GPIO_PORTC_AHB_WAKELVL_R                                                                              (*((volatile uint32_t *)0x4005A544))
N#define GPIO_PORTC_AHB_WAKESTAT_R                                             \
N                                (*((volatile uint32_t *)0x4005A548))
X#define GPIO_PORTC_AHB_WAKESTAT_R                                                                             (*((volatile uint32_t *)0x4005A548))
N#define GPIO_PORTC_AHB_PP_R     (*((volatile uint32_t *)0x4005AFC0))
N#define GPIO_PORTC_AHB_PC_R     (*((volatile uint32_t *)0x4005AFC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTD AHB)
N//
N//*****************************************************************************
N#define GPIO_PORTD_AHB_DATA_BITS_R                                            \
N                                ((volatile uint32_t *)0x4005B000)
X#define GPIO_PORTD_AHB_DATA_BITS_R                                                                            ((volatile uint32_t *)0x4005B000)
N#define GPIO_PORTD_AHB_DATA_R   (*((volatile uint32_t *)0x4005B3FC))
N#define GPIO_PORTD_AHB_DIR_R    (*((volatile uint32_t *)0x4005B400))
N#define GPIO_PORTD_AHB_IS_R     (*((volatile uint32_t *)0x4005B404))
N#define GPIO_PORTD_AHB_IBE_R    (*((volatile uint32_t *)0x4005B408))
N#define GPIO_PORTD_AHB_IEV_R    (*((volatile uint32_t *)0x4005B40C))
N#define GPIO_PORTD_AHB_IM_R     (*((volatile uint32_t *)0x4005B410))
N#define GPIO_PORTD_AHB_RIS_R    (*((volatile uint32_t *)0x4005B414))
N#define GPIO_PORTD_AHB_MIS_R    (*((volatile uint32_t *)0x4005B418))
N#define GPIO_PORTD_AHB_ICR_R    (*((volatile uint32_t *)0x4005B41C))
N#define GPIO_PORTD_AHB_AFSEL_R  (*((volatile uint32_t *)0x4005B420))
N#define GPIO_PORTD_AHB_DR2R_R   (*((volatile uint32_t *)0x4005B500))
N#define GPIO_PORTD_AHB_DR4R_R   (*((volatile uint32_t *)0x4005B504))
N#define GPIO_PORTD_AHB_DR8R_R   (*((volatile uint32_t *)0x4005B508))
N#define GPIO_PORTD_AHB_ODR_R    (*((volatile uint32_t *)0x4005B50C))
N#define GPIO_PORTD_AHB_PUR_R    (*((volatile uint32_t *)0x4005B510))
N#define GPIO_PORTD_AHB_PDR_R    (*((volatile uint32_t *)0x4005B514))
N#define GPIO_PORTD_AHB_SLR_R    (*((volatile uint32_t *)0x4005B518))
N#define GPIO_PORTD_AHB_DEN_R    (*((volatile uint32_t *)0x4005B51C))
N#define GPIO_PORTD_AHB_LOCK_R   (*((volatile uint32_t *)0x4005B520))
N#define GPIO_PORTD_AHB_CR_R     (*((volatile uint32_t *)0x4005B524))
N#define GPIO_PORTD_AHB_AMSEL_R  (*((volatile uint32_t *)0x4005B528))
N#define GPIO_PORTD_AHB_PCTL_R   (*((volatile uint32_t *)0x4005B52C))
N#define GPIO_PORTD_AHB_ADCCTL_R (*((volatile uint32_t *)0x4005B530))
N#define GPIO_PORTD_AHB_DMACTL_R (*((volatile uint32_t *)0x4005B534))
N#define GPIO_PORTD_AHB_SI_R     (*((volatile uint32_t *)0x4005B538))
N#define GPIO_PORTD_AHB_DR12R_R  (*((volatile uint32_t *)0x4005B53C))
N#define GPIO_PORTD_AHB_WAKEPEN_R                                              \
N                                (*((volatile uint32_t *)0x4005B540))
X#define GPIO_PORTD_AHB_WAKEPEN_R                                                                              (*((volatile uint32_t *)0x4005B540))
N#define GPIO_PORTD_AHB_WAKELVL_R                                              \
N                                (*((volatile uint32_t *)0x4005B544))
X#define GPIO_PORTD_AHB_WAKELVL_R                                                                              (*((volatile uint32_t *)0x4005B544))
N#define GPIO_PORTD_AHB_WAKESTAT_R                                             \
N                                (*((volatile uint32_t *)0x4005B548))
X#define GPIO_PORTD_AHB_WAKESTAT_R                                                                             (*((volatile uint32_t *)0x4005B548))
N#define GPIO_PORTD_AHB_PP_R     (*((volatile uint32_t *)0x4005BFC0))
N#define GPIO_PORTD_AHB_PC_R     (*((volatile uint32_t *)0x4005BFC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTE AHB)
N//
N//*****************************************************************************
N#define GPIO_PORTE_AHB_DATA_BITS_R                                            \
N                                ((volatile uint32_t *)0x4005C000)
X#define GPIO_PORTE_AHB_DATA_BITS_R                                                                            ((volatile uint32_t *)0x4005C000)
N#define GPIO_PORTE_AHB_DATA_R   (*((volatile uint32_t *)0x4005C3FC))
N#define GPIO_PORTE_AHB_DIR_R    (*((volatile uint32_t *)0x4005C400))
N#define GPIO_PORTE_AHB_IS_R     (*((volatile uint32_t *)0x4005C404))
N#define GPIO_PORTE_AHB_IBE_R    (*((volatile uint32_t *)0x4005C408))
N#define GPIO_PORTE_AHB_IEV_R    (*((volatile uint32_t *)0x4005C40C))
N#define GPIO_PORTE_AHB_IM_R     (*((volatile uint32_t *)0x4005C410))
N#define GPIO_PORTE_AHB_RIS_R    (*((volatile uint32_t *)0x4005C414))
N#define GPIO_PORTE_AHB_MIS_R    (*((volatile uint32_t *)0x4005C418))
N#define GPIO_PORTE_AHB_ICR_R    (*((volatile uint32_t *)0x4005C41C))
N#define GPIO_PORTE_AHB_AFSEL_R  (*((volatile uint32_t *)0x4005C420))
N#define GPIO_PORTE_AHB_DR2R_R   (*((volatile uint32_t *)0x4005C500))
N#define GPIO_PORTE_AHB_DR4R_R   (*((volatile uint32_t *)0x4005C504))
N#define GPIO_PORTE_AHB_DR8R_R   (*((volatile uint32_t *)0x4005C508))
N#define GPIO_PORTE_AHB_ODR_R    (*((volatile uint32_t *)0x4005C50C))
N#define GPIO_PORTE_AHB_PUR_R    (*((volatile uint32_t *)0x4005C510))
N#define GPIO_PORTE_AHB_PDR_R    (*((volatile uint32_t *)0x4005C514))
N#define GPIO_PORTE_AHB_SLR_R    (*((volatile uint32_t *)0x4005C518))
N#define GPIO_PORTE_AHB_DEN_R    (*((volatile uint32_t *)0x4005C51C))
N#define GPIO_PORTE_AHB_LOCK_R   (*((volatile uint32_t *)0x4005C520))
N#define GPIO_PORTE_AHB_CR_R     (*((volatile uint32_t *)0x4005C524))
N#define GPIO_PORTE_AHB_AMSEL_R  (*((volatile uint32_t *)0x4005C528))
N#define GPIO_PORTE_AHB_PCTL_R   (*((volatile uint32_t *)0x4005C52C))
N#define GPIO_PORTE_AHB_ADCCTL_R (*((volatile uint32_t *)0x4005C530))
N#define GPIO_PORTE_AHB_DMACTL_R (*((volatile uint32_t *)0x4005C534))
N#define GPIO_PORTE_AHB_SI_R     (*((volatile uint32_t *)0x4005C538))
N#define GPIO_PORTE_AHB_DR12R_R  (*((volatile uint32_t *)0x4005C53C))
N#define GPIO_PORTE_AHB_WAKEPEN_R                                              \
N                                (*((volatile uint32_t *)0x4005C540))
X#define GPIO_PORTE_AHB_WAKEPEN_R                                                                              (*((volatile uint32_t *)0x4005C540))
N#define GPIO_PORTE_AHB_WAKELVL_R                                              \
N                                (*((volatile uint32_t *)0x4005C544))
X#define GPIO_PORTE_AHB_WAKELVL_R                                                                              (*((volatile uint32_t *)0x4005C544))
N#define GPIO_PORTE_AHB_WAKESTAT_R                                             \
N                                (*((volatile uint32_t *)0x4005C548))
X#define GPIO_PORTE_AHB_WAKESTAT_R                                                                             (*((volatile uint32_t *)0x4005C548))
N#define GPIO_PORTE_AHB_PP_R     (*((volatile uint32_t *)0x4005CFC0))
N#define GPIO_PORTE_AHB_PC_R     (*((volatile uint32_t *)0x4005CFC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTF AHB)
N//
N//*****************************************************************************
N#define GPIO_PORTF_AHB_DATA_BITS_R                                            \
N                                ((volatile uint32_t *)0x4005D000)
X#define GPIO_PORTF_AHB_DATA_BITS_R                                                                            ((volatile uint32_t *)0x4005D000)
N#define GPIO_PORTF_AHB_DATA_R   (*((volatile uint32_t *)0x4005D3FC))
N#define GPIO_PORTF_AHB_DIR_R    (*((volatile uint32_t *)0x4005D400))
N#define GPIO_PORTF_AHB_IS_R     (*((volatile uint32_t *)0x4005D404))
N#define GPIO_PORTF_AHB_IBE_R    (*((volatile uint32_t *)0x4005D408))
N#define GPIO_PORTF_AHB_IEV_R    (*((volatile uint32_t *)0x4005D40C))
N#define GPIO_PORTF_AHB_IM_R     (*((volatile uint32_t *)0x4005D410))
N#define GPIO_PORTF_AHB_RIS_R    (*((volatile uint32_t *)0x4005D414))
N#define GPIO_PORTF_AHB_MIS_R    (*((volatile uint32_t *)0x4005D418))
N#define GPIO_PORTF_AHB_ICR_R    (*((volatile uint32_t *)0x4005D41C))
N#define GPIO_PORTF_AHB_AFSEL_R  (*((volatile uint32_t *)0x4005D420))
N#define GPIO_PORTF_AHB_DR2R_R   (*((volatile uint32_t *)0x4005D500))
N#define GPIO_PORTF_AHB_DR4R_R   (*((volatile uint32_t *)0x4005D504))
N#define GPIO_PORTF_AHB_DR8R_R   (*((volatile uint32_t *)0x4005D508))
N#define GPIO_PORTF_AHB_ODR_R    (*((volatile uint32_t *)0x4005D50C))
N#define GPIO_PORTF_AHB_PUR_R    (*((volatile uint32_t *)0x4005D510))
N#define GPIO_PORTF_AHB_PDR_R    (*((volatile uint32_t *)0x4005D514))
N#define GPIO_PORTF_AHB_SLR_R    (*((volatile uint32_t *)0x4005D518))
N#define GPIO_PORTF_AHB_DEN_R    (*((volatile uint32_t *)0x4005D51C))
N#define GPIO_PORTF_AHB_LOCK_R   (*((volatile uint32_t *)0x4005D520))
N#define GPIO_PORTF_AHB_CR_R     (*((volatile uint32_t *)0x4005D524))
N#define GPIO_PORTF_AHB_AMSEL_R  (*((volatile uint32_t *)0x4005D528))
N#define GPIO_PORTF_AHB_PCTL_R   (*((volatile uint32_t *)0x4005D52C))
N#define GPIO_PORTF_AHB_ADCCTL_R (*((volatile uint32_t *)0x4005D530))
N#define GPIO_PORTF_AHB_DMACTL_R (*((volatile uint32_t *)0x4005D534))
N#define GPIO_PORTF_AHB_SI_R     (*((volatile uint32_t *)0x4005D538))
N#define GPIO_PORTF_AHB_DR12R_R  (*((volatile uint32_t *)0x4005D53C))
N#define GPIO_PORTF_AHB_WAKEPEN_R                                              \
N                                (*((volatile uint32_t *)0x4005D540))
X#define GPIO_PORTF_AHB_WAKEPEN_R                                                                              (*((volatile uint32_t *)0x4005D540))
N#define GPIO_PORTF_AHB_WAKELVL_R                                              \
N                                (*((volatile uint32_t *)0x4005D544))
X#define GPIO_PORTF_AHB_WAKELVL_R                                                                              (*((volatile uint32_t *)0x4005D544))
N#define GPIO_PORTF_AHB_WAKESTAT_R                                             \
N                                (*((volatile uint32_t *)0x4005D548))
X#define GPIO_PORTF_AHB_WAKESTAT_R                                                                             (*((volatile uint32_t *)0x4005D548))
N#define GPIO_PORTF_AHB_PP_R     (*((volatile uint32_t *)0x4005DFC0))
N#define GPIO_PORTF_AHB_PC_R     (*((volatile uint32_t *)0x4005DFC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTG AHB)
N//
N//*****************************************************************************
N#define GPIO_PORTG_AHB_DATA_BITS_R                                            \
N                                ((volatile uint32_t *)0x4005E000)
X#define GPIO_PORTG_AHB_DATA_BITS_R                                                                            ((volatile uint32_t *)0x4005E000)
N#define GPIO_PORTG_AHB_DATA_R   (*((volatile uint32_t *)0x4005E3FC))
N#define GPIO_PORTG_AHB_DIR_R    (*((volatile uint32_t *)0x4005E400))
N#define GPIO_PORTG_AHB_IS_R     (*((volatile uint32_t *)0x4005E404))
N#define GPIO_PORTG_AHB_IBE_R    (*((volatile uint32_t *)0x4005E408))
N#define GPIO_PORTG_AHB_IEV_R    (*((volatile uint32_t *)0x4005E40C))
N#define GPIO_PORTG_AHB_IM_R     (*((volatile uint32_t *)0x4005E410))
N#define GPIO_PORTG_AHB_RIS_R    (*((volatile uint32_t *)0x4005E414))
N#define GPIO_PORTG_AHB_MIS_R    (*((volatile uint32_t *)0x4005E418))
N#define GPIO_PORTG_AHB_ICR_R    (*((volatile uint32_t *)0x4005E41C))
N#define GPIO_PORTG_AHB_AFSEL_R  (*((volatile uint32_t *)0x4005E420))
N#define GPIO_PORTG_AHB_DR2R_R   (*((volatile uint32_t *)0x4005E500))
N#define GPIO_PORTG_AHB_DR4R_R   (*((volatile uint32_t *)0x4005E504))
N#define GPIO_PORTG_AHB_DR8R_R   (*((volatile uint32_t *)0x4005E508))
N#define GPIO_PORTG_AHB_ODR_R    (*((volatile uint32_t *)0x4005E50C))
N#define GPIO_PORTG_AHB_PUR_R    (*((volatile uint32_t *)0x4005E510))
N#define GPIO_PORTG_AHB_PDR_R    (*((volatile uint32_t *)0x4005E514))
N#define GPIO_PORTG_AHB_SLR_R    (*((volatile uint32_t *)0x4005E518))
N#define GPIO_PORTG_AHB_DEN_R    (*((volatile uint32_t *)0x4005E51C))
N#define GPIO_PORTG_AHB_LOCK_R   (*((volatile uint32_t *)0x4005E520))
N#define GPIO_PORTG_AHB_CR_R     (*((volatile uint32_t *)0x4005E524))
N#define GPIO_PORTG_AHB_AMSEL_R  (*((volatile uint32_t *)0x4005E528))
N#define GPIO_PORTG_AHB_PCTL_R   (*((volatile uint32_t *)0x4005E52C))
N#define GPIO_PORTG_AHB_ADCCTL_R (*((volatile uint32_t *)0x4005E530))
N#define GPIO_PORTG_AHB_DMACTL_R (*((volatile uint32_t *)0x4005E534))
N#define GPIO_PORTG_AHB_SI_R     (*((volatile uint32_t *)0x4005E538))
N#define GPIO_PORTG_AHB_DR12R_R  (*((volatile uint32_t *)0x4005E53C))
N#define GPIO_PORTG_AHB_WAKEPEN_R                                              \
N                                (*((volatile uint32_t *)0x4005E540))
X#define GPIO_PORTG_AHB_WAKEPEN_R                                                                              (*((volatile uint32_t *)0x4005E540))
N#define GPIO_PORTG_AHB_WAKELVL_R                                              \
N                                (*((volatile uint32_t *)0x4005E544))
X#define GPIO_PORTG_AHB_WAKELVL_R                                                                              (*((volatile uint32_t *)0x4005E544))
N#define GPIO_PORTG_AHB_WAKESTAT_R                                             \
N                                (*((volatile uint32_t *)0x4005E548))
X#define GPIO_PORTG_AHB_WAKESTAT_R                                                                             (*((volatile uint32_t *)0x4005E548))
N#define GPIO_PORTG_AHB_PP_R     (*((volatile uint32_t *)0x4005EFC0))
N#define GPIO_PORTG_AHB_PC_R     (*((volatile uint32_t *)0x4005EFC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTH AHB)
N//
N//*****************************************************************************
N#define GPIO_PORTH_AHB_DATA_BITS_R                                            \
N                                ((volatile uint32_t *)0x4005F000)
X#define GPIO_PORTH_AHB_DATA_BITS_R                                                                            ((volatile uint32_t *)0x4005F000)
N#define GPIO_PORTH_AHB_DATA_R   (*((volatile uint32_t *)0x4005F3FC))
N#define GPIO_PORTH_AHB_DIR_R    (*((volatile uint32_t *)0x4005F400))
N#define GPIO_PORTH_AHB_IS_R     (*((volatile uint32_t *)0x4005F404))
N#define GPIO_PORTH_AHB_IBE_R    (*((volatile uint32_t *)0x4005F408))
N#define GPIO_PORTH_AHB_IEV_R    (*((volatile uint32_t *)0x4005F40C))
N#define GPIO_PORTH_AHB_IM_R     (*((volatile uint32_t *)0x4005F410))
N#define GPIO_PORTH_AHB_RIS_R    (*((volatile uint32_t *)0x4005F414))
N#define GPIO_PORTH_AHB_MIS_R    (*((volatile uint32_t *)0x4005F418))
N#define GPIO_PORTH_AHB_ICR_R    (*((volatile uint32_t *)0x4005F41C))
N#define GPIO_PORTH_AHB_AFSEL_R  (*((volatile uint32_t *)0x4005F420))
N#define GPIO_PORTH_AHB_DR2R_R   (*((volatile uint32_t *)0x4005F500))
N#define GPIO_PORTH_AHB_DR4R_R   (*((volatile uint32_t *)0x4005F504))
N#define GPIO_PORTH_AHB_DR8R_R   (*((volatile uint32_t *)0x4005F508))
N#define GPIO_PORTH_AHB_ODR_R    (*((volatile uint32_t *)0x4005F50C))
N#define GPIO_PORTH_AHB_PUR_R    (*((volatile uint32_t *)0x4005F510))
N#define GPIO_PORTH_AHB_PDR_R    (*((volatile uint32_t *)0x4005F514))
N#define GPIO_PORTH_AHB_SLR_R    (*((volatile uint32_t *)0x4005F518))
N#define GPIO_PORTH_AHB_DEN_R    (*((volatile uint32_t *)0x4005F51C))
N#define GPIO_PORTH_AHB_LOCK_R   (*((volatile uint32_t *)0x4005F520))
N#define GPIO_PORTH_AHB_CR_R     (*((volatile uint32_t *)0x4005F524))
N#define GPIO_PORTH_AHB_AMSEL_R  (*((volatile uint32_t *)0x4005F528))
N#define GPIO_PORTH_AHB_PCTL_R   (*((volatile uint32_t *)0x4005F52C))
N#define GPIO_PORTH_AHB_ADCCTL_R (*((volatile uint32_t *)0x4005F530))
N#define GPIO_PORTH_AHB_DMACTL_R (*((volatile uint32_t *)0x4005F534))
N#define GPIO_PORTH_AHB_SI_R     (*((volatile uint32_t *)0x4005F538))
N#define GPIO_PORTH_AHB_DR12R_R  (*((volatile uint32_t *)0x4005F53C))
N#define GPIO_PORTH_AHB_WAKEPEN_R                                              \
N                                (*((volatile uint32_t *)0x4005F540))
X#define GPIO_PORTH_AHB_WAKEPEN_R                                                                              (*((volatile uint32_t *)0x4005F540))
N#define GPIO_PORTH_AHB_WAKELVL_R                                              \
N                                (*((volatile uint32_t *)0x4005F544))
X#define GPIO_PORTH_AHB_WAKELVL_R                                                                              (*((volatile uint32_t *)0x4005F544))
N#define GPIO_PORTH_AHB_WAKESTAT_R                                             \
N                                (*((volatile uint32_t *)0x4005F548))
X#define GPIO_PORTH_AHB_WAKESTAT_R                                                                             (*((volatile uint32_t *)0x4005F548))
N#define GPIO_PORTH_AHB_PP_R     (*((volatile uint32_t *)0x4005FFC0))
N#define GPIO_PORTH_AHB_PC_R     (*((volatile uint32_t *)0x4005FFC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTJ AHB)
N//
N//*****************************************************************************
N#define GPIO_PORTJ_AHB_DATA_BITS_R                                            \
N                                ((volatile uint32_t *)0x40060000)
X#define GPIO_PORTJ_AHB_DATA_BITS_R                                                                            ((volatile uint32_t *)0x40060000)
N#define GPIO_PORTJ_AHB_DATA_R   (*((volatile uint32_t *)0x400603FC))
N#define GPIO_PORTJ_AHB_DIR_R    (*((volatile uint32_t *)0x40060400))
N#define GPIO_PORTJ_AHB_IS_R     (*((volatile uint32_t *)0x40060404))
N#define GPIO_PORTJ_AHB_IBE_R    (*((volatile uint32_t *)0x40060408))
N#define GPIO_PORTJ_AHB_IEV_R    (*((volatile uint32_t *)0x4006040C))
N#define GPIO_PORTJ_AHB_IM_R     (*((volatile uint32_t *)0x40060410))
N#define GPIO_PORTJ_AHB_RIS_R    (*((volatile uint32_t *)0x40060414))
N#define GPIO_PORTJ_AHB_MIS_R    (*((volatile uint32_t *)0x40060418))
N#define GPIO_PORTJ_AHB_ICR_R    (*((volatile uint32_t *)0x4006041C))
N#define GPIO_PORTJ_AHB_AFSEL_R  (*((volatile uint32_t *)0x40060420))
N#define GPIO_PORTJ_AHB_DR2R_R   (*((volatile uint32_t *)0x40060500))
N#define GPIO_PORTJ_AHB_DR4R_R   (*((volatile uint32_t *)0x40060504))
N#define GPIO_PORTJ_AHB_DR8R_R   (*((volatile uint32_t *)0x40060508))
N#define GPIO_PORTJ_AHB_ODR_R    (*((volatile uint32_t *)0x4006050C))
N#define GPIO_PORTJ_AHB_PUR_R    (*((volatile uint32_t *)0x40060510))
N#define GPIO_PORTJ_AHB_PDR_R    (*((volatile uint32_t *)0x40060514))
N#define GPIO_PORTJ_AHB_SLR_R    (*((volatile uint32_t *)0x40060518))
N#define GPIO_PORTJ_AHB_DEN_R    (*((volatile uint32_t *)0x4006051C))
N#define GPIO_PORTJ_AHB_LOCK_R   (*((volatile uint32_t *)0x40060520))
N#define GPIO_PORTJ_AHB_CR_R     (*((volatile uint32_t *)0x40060524))
N#define GPIO_PORTJ_AHB_AMSEL_R  (*((volatile uint32_t *)0x40060528))
N#define GPIO_PORTJ_AHB_PCTL_R   (*((volatile uint32_t *)0x4006052C))
N#define GPIO_PORTJ_AHB_ADCCTL_R (*((volatile uint32_t *)0x40060530))
N#define GPIO_PORTJ_AHB_DMACTL_R (*((volatile uint32_t *)0x40060534))
N#define GPIO_PORTJ_AHB_SI_R     (*((volatile uint32_t *)0x40060538))
N#define GPIO_PORTJ_AHB_DR12R_R  (*((volatile uint32_t *)0x4006053C))
N#define GPIO_PORTJ_AHB_WAKEPEN_R                                              \
N                                (*((volatile uint32_t *)0x40060540))
X#define GPIO_PORTJ_AHB_WAKEPEN_R                                                                              (*((volatile uint32_t *)0x40060540))
N#define GPIO_PORTJ_AHB_WAKELVL_R                                              \
N                                (*((volatile uint32_t *)0x40060544))
X#define GPIO_PORTJ_AHB_WAKELVL_R                                                                              (*((volatile uint32_t *)0x40060544))
N#define GPIO_PORTJ_AHB_WAKESTAT_R                                             \
N                                (*((volatile uint32_t *)0x40060548))
X#define GPIO_PORTJ_AHB_WAKESTAT_R                                                                             (*((volatile uint32_t *)0x40060548))
N#define GPIO_PORTJ_AHB_PP_R     (*((volatile uint32_t *)0x40060FC0))
N#define GPIO_PORTJ_AHB_PC_R     (*((volatile uint32_t *)0x40060FC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTK)
N//
N//*****************************************************************************
N#define GPIO_PORTK_DATA_BITS_R  ((volatile uint32_t *)0x40061000)
N#define GPIO_PORTK_DATA_R       (*((volatile uint32_t *)0x400613FC))
N#define GPIO_PORTK_DIR_R        (*((volatile uint32_t *)0x40061400))
N#define GPIO_PORTK_IS_R         (*((volatile uint32_t *)0x40061404))
N#define GPIO_PORTK_IBE_R        (*((volatile uint32_t *)0x40061408))
N#define GPIO_PORTK_IEV_R        (*((volatile uint32_t *)0x4006140C))
N#define GPIO_PORTK_IM_R         (*((volatile uint32_t *)0x40061410))
N#define GPIO_PORTK_RIS_R        (*((volatile uint32_t *)0x40061414))
N#define GPIO_PORTK_MIS_R        (*((volatile uint32_t *)0x40061418))
N#define GPIO_PORTK_ICR_R        (*((volatile uint32_t *)0x4006141C))
N#define GPIO_PORTK_AFSEL_R      (*((volatile uint32_t *)0x40061420))
N#define GPIO_PORTK_DR2R_R       (*((volatile uint32_t *)0x40061500))
N#define GPIO_PORTK_DR4R_R       (*((volatile uint32_t *)0x40061504))
N#define GPIO_PORTK_DR8R_R       (*((volatile uint32_t *)0x40061508))
N#define GPIO_PORTK_ODR_R        (*((volatile uint32_t *)0x4006150C))
N#define GPIO_PORTK_PUR_R        (*((volatile uint32_t *)0x40061510))
N#define GPIO_PORTK_PDR_R        (*((volatile uint32_t *)0x40061514))
N#define GPIO_PORTK_SLR_R        (*((volatile uint32_t *)0x40061518))
N#define GPIO_PORTK_DEN_R        (*((volatile uint32_t *)0x4006151C))
N#define GPIO_PORTK_LOCK_R       (*((volatile uint32_t *)0x40061520))
N#define GPIO_PORTK_CR_R         (*((volatile uint32_t *)0x40061524))
N#define GPIO_PORTK_AMSEL_R      (*((volatile uint32_t *)0x40061528))
N#define GPIO_PORTK_PCTL_R       (*((volatile uint32_t *)0x4006152C))
N#define GPIO_PORTK_ADCCTL_R     (*((volatile uint32_t *)0x40061530))
N#define GPIO_PORTK_DMACTL_R     (*((volatile uint32_t *)0x40061534))
N#define GPIO_PORTK_SI_R         (*((volatile uint32_t *)0x40061538))
N#define GPIO_PORTK_DR12R_R      (*((volatile uint32_t *)0x4006153C))
N#define GPIO_PORTK_WAKEPEN_R    (*((volatile uint32_t *)0x40061540))
N#define GPIO_PORTK_WAKELVL_R    (*((volatile uint32_t *)0x40061544))
N#define GPIO_PORTK_WAKESTAT_R   (*((volatile uint32_t *)0x40061548))
N#define GPIO_PORTK_PP_R         (*((volatile uint32_t *)0x40061FC0))
N#define GPIO_PORTK_PC_R         (*((volatile uint32_t *)0x40061FC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTL)
N//
N//*****************************************************************************
N#define GPIO_PORTL_DATA_BITS_R  ((volatile uint32_t *)0x40062000)
N#define GPIO_PORTL_DATA_R       (*((volatile uint32_t *)0x400623FC))
N#define GPIO_PORTL_DIR_R        (*((volatile uint32_t *)0x40062400))
N#define GPIO_PORTL_IS_R         (*((volatile uint32_t *)0x40062404))
N#define GPIO_PORTL_IBE_R        (*((volatile uint32_t *)0x40062408))
N#define GPIO_PORTL_IEV_R        (*((volatile uint32_t *)0x4006240C))
N#define GPIO_PORTL_IM_R         (*((volatile uint32_t *)0x40062410))
N#define GPIO_PORTL_RIS_R        (*((volatile uint32_t *)0x40062414))
N#define GPIO_PORTL_MIS_R        (*((volatile uint32_t *)0x40062418))
N#define GPIO_PORTL_ICR_R        (*((volatile uint32_t *)0x4006241C))
N#define GPIO_PORTL_AFSEL_R      (*((volatile uint32_t *)0x40062420))
N#define GPIO_PORTL_DR2R_R       (*((volatile uint32_t *)0x40062500))
N#define GPIO_PORTL_DR4R_R       (*((volatile uint32_t *)0x40062504))
N#define GPIO_PORTL_DR8R_R       (*((volatile uint32_t *)0x40062508))
N#define GPIO_PORTL_ODR_R        (*((volatile uint32_t *)0x4006250C))
N#define GPIO_PORTL_PUR_R        (*((volatile uint32_t *)0x40062510))
N#define GPIO_PORTL_PDR_R        (*((volatile uint32_t *)0x40062514))
N#define GPIO_PORTL_SLR_R        (*((volatile uint32_t *)0x40062518))
N#define GPIO_PORTL_DEN_R        (*((volatile uint32_t *)0x4006251C))
N#define GPIO_PORTL_LOCK_R       (*((volatile uint32_t *)0x40062520))
N#define GPIO_PORTL_CR_R         (*((volatile uint32_t *)0x40062524))
N#define GPIO_PORTL_AMSEL_R      (*((volatile uint32_t *)0x40062528))
N#define GPIO_PORTL_PCTL_R       (*((volatile uint32_t *)0x4006252C))
N#define GPIO_PORTL_ADCCTL_R     (*((volatile uint32_t *)0x40062530))
N#define GPIO_PORTL_DMACTL_R     (*((volatile uint32_t *)0x40062534))
N#define GPIO_PORTL_SI_R         (*((volatile uint32_t *)0x40062538))
N#define GPIO_PORTL_DR12R_R      (*((volatile uint32_t *)0x4006253C))
N#define GPIO_PORTL_WAKEPEN_R    (*((volatile uint32_t *)0x40062540))
N#define GPIO_PORTL_WAKELVL_R    (*((volatile uint32_t *)0x40062544))
N#define GPIO_PORTL_WAKESTAT_R   (*((volatile uint32_t *)0x40062548))
N#define GPIO_PORTL_PP_R         (*((volatile uint32_t *)0x40062FC0))
N#define GPIO_PORTL_PC_R         (*((volatile uint32_t *)0x40062FC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTM)
N//
N//*****************************************************************************
N#define GPIO_PORTM_DATA_BITS_R  ((volatile uint32_t *)0x40063000)
N#define GPIO_PORTM_DATA_R       (*((volatile uint32_t *)0x400633FC))
N#define GPIO_PORTM_DIR_R        (*((volatile uint32_t *)0x40063400))
N#define GPIO_PORTM_IS_R         (*((volatile uint32_t *)0x40063404))
N#define GPIO_PORTM_IBE_R        (*((volatile uint32_t *)0x40063408))
N#define GPIO_PORTM_IEV_R        (*((volatile uint32_t *)0x4006340C))
N#define GPIO_PORTM_IM_R         (*((volatile uint32_t *)0x40063410))
N#define GPIO_PORTM_RIS_R        (*((volatile uint32_t *)0x40063414))
N#define GPIO_PORTM_MIS_R        (*((volatile uint32_t *)0x40063418))
N#define GPIO_PORTM_ICR_R        (*((volatile uint32_t *)0x4006341C))
N#define GPIO_PORTM_AFSEL_R      (*((volatile uint32_t *)0x40063420))
N#define GPIO_PORTM_DR2R_R       (*((volatile uint32_t *)0x40063500))
N#define GPIO_PORTM_DR4R_R       (*((volatile uint32_t *)0x40063504))
N#define GPIO_PORTM_DR8R_R       (*((volatile uint32_t *)0x40063508))
N#define GPIO_PORTM_ODR_R        (*((volatile uint32_t *)0x4006350C))
N#define GPIO_PORTM_PUR_R        (*((volatile uint32_t *)0x40063510))
N#define GPIO_PORTM_PDR_R        (*((volatile uint32_t *)0x40063514))
N#define GPIO_PORTM_SLR_R        (*((volatile uint32_t *)0x40063518))
N#define GPIO_PORTM_DEN_R        (*((volatile uint32_t *)0x4006351C))
N#define GPIO_PORTM_LOCK_R       (*((volatile uint32_t *)0x40063520))
N#define GPIO_PORTM_CR_R         (*((volatile uint32_t *)0x40063524))
N#define GPIO_PORTM_AMSEL_R      (*((volatile uint32_t *)0x40063528))
N#define GPIO_PORTM_PCTL_R       (*((volatile uint32_t *)0x4006352C))
N#define GPIO_PORTM_ADCCTL_R     (*((volatile uint32_t *)0x40063530))
N#define GPIO_PORTM_DMACTL_R     (*((volatile uint32_t *)0x40063534))
N#define GPIO_PORTM_SI_R         (*((volatile uint32_t *)0x40063538))
N#define GPIO_PORTM_DR12R_R      (*((volatile uint32_t *)0x4006353C))
N#define GPIO_PORTM_WAKEPEN_R    (*((volatile uint32_t *)0x40063540))
N#define GPIO_PORTM_WAKELVL_R    (*((volatile uint32_t *)0x40063544))
N#define GPIO_PORTM_WAKESTAT_R   (*((volatile uint32_t *)0x40063548))
N#define GPIO_PORTM_PP_R         (*((volatile uint32_t *)0x40063FC0))
N#define GPIO_PORTM_PC_R         (*((volatile uint32_t *)0x40063FC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTN)
N//
N//*****************************************************************************
N#define GPIO_PORTN_DATA_BITS_R  ((volatile uint32_t *)0x40064000)
N#define GPIO_PORTN_DATA_R       (*((volatile uint32_t *)0x400643FC))
N#define GPIO_PORTN_DIR_R        (*((volatile uint32_t *)0x40064400))
N#define GPIO_PORTN_IS_R         (*((volatile uint32_t *)0x40064404))
N#define GPIO_PORTN_IBE_R        (*((volatile uint32_t *)0x40064408))
N#define GPIO_PORTN_IEV_R        (*((volatile uint32_t *)0x4006440C))
N#define GPIO_PORTN_IM_R         (*((volatile uint32_t *)0x40064410))
N#define GPIO_PORTN_RIS_R        (*((volatile uint32_t *)0x40064414))
N#define GPIO_PORTN_MIS_R        (*((volatile uint32_t *)0x40064418))
N#define GPIO_PORTN_ICR_R        (*((volatile uint32_t *)0x4006441C))
N#define GPIO_PORTN_AFSEL_R      (*((volatile uint32_t *)0x40064420))
N#define GPIO_PORTN_DR2R_R       (*((volatile uint32_t *)0x40064500))
N#define GPIO_PORTN_DR4R_R       (*((volatile uint32_t *)0x40064504))
N#define GPIO_PORTN_DR8R_R       (*((volatile uint32_t *)0x40064508))
N#define GPIO_PORTN_ODR_R        (*((volatile uint32_t *)0x4006450C))
N#define GPIO_PORTN_PUR_R        (*((volatile uint32_t *)0x40064510))
N#define GPIO_PORTN_PDR_R        (*((volatile uint32_t *)0x40064514))
N#define GPIO_PORTN_SLR_R        (*((volatile uint32_t *)0x40064518))
N#define GPIO_PORTN_DEN_R        (*((volatile uint32_t *)0x4006451C))
N#define GPIO_PORTN_LOCK_R       (*((volatile uint32_t *)0x40064520))
N#define GPIO_PORTN_CR_R         (*((volatile uint32_t *)0x40064524))
N#define GPIO_PORTN_AMSEL_R      (*((volatile uint32_t *)0x40064528))
N#define GPIO_PORTN_PCTL_R       (*((volatile uint32_t *)0x4006452C))
N#define GPIO_PORTN_ADCCTL_R     (*((volatile uint32_t *)0x40064530))
N#define GPIO_PORTN_DMACTL_R     (*((volatile uint32_t *)0x40064534))
N#define GPIO_PORTN_SI_R         (*((volatile uint32_t *)0x40064538))
N#define GPIO_PORTN_DR12R_R      (*((volatile uint32_t *)0x4006453C))
N#define GPIO_PORTN_WAKEPEN_R    (*((volatile uint32_t *)0x40064540))
N#define GPIO_PORTN_WAKELVL_R    (*((volatile uint32_t *)0x40064544))
N#define GPIO_PORTN_WAKESTAT_R   (*((volatile uint32_t *)0x40064548))
N#define GPIO_PORTN_PP_R         (*((volatile uint32_t *)0x40064FC0))
N#define GPIO_PORTN_PC_R         (*((volatile uint32_t *)0x40064FC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTP)
N//
N//*****************************************************************************
N#define GPIO_PORTP_DATA_BITS_R  ((volatile uint32_t *)0x40065000)
N#define GPIO_PORTP_DATA_R       (*((volatile uint32_t *)0x400653FC))
N#define GPIO_PORTP_DIR_R        (*((volatile uint32_t *)0x40065400))
N#define GPIO_PORTP_IS_R         (*((volatile uint32_t *)0x40065404))
N#define GPIO_PORTP_IBE_R        (*((volatile uint32_t *)0x40065408))
N#define GPIO_PORTP_IEV_R        (*((volatile uint32_t *)0x4006540C))
N#define GPIO_PORTP_IM_R         (*((volatile uint32_t *)0x40065410))
N#define GPIO_PORTP_RIS_R        (*((volatile uint32_t *)0x40065414))
N#define GPIO_PORTP_MIS_R        (*((volatile uint32_t *)0x40065418))
N#define GPIO_PORTP_ICR_R        (*((volatile uint32_t *)0x4006541C))
N#define GPIO_PORTP_AFSEL_R      (*((volatile uint32_t *)0x40065420))
N#define GPIO_PORTP_DR2R_R       (*((volatile uint32_t *)0x40065500))
N#define GPIO_PORTP_DR4R_R       (*((volatile uint32_t *)0x40065504))
N#define GPIO_PORTP_DR8R_R       (*((volatile uint32_t *)0x40065508))
N#define GPIO_PORTP_ODR_R        (*((volatile uint32_t *)0x4006550C))
N#define GPIO_PORTP_PUR_R        (*((volatile uint32_t *)0x40065510))
N#define GPIO_PORTP_PDR_R        (*((volatile uint32_t *)0x40065514))
N#define GPIO_PORTP_SLR_R        (*((volatile uint32_t *)0x40065518))
N#define GPIO_PORTP_DEN_R        (*((volatile uint32_t *)0x4006551C))
N#define GPIO_PORTP_LOCK_R       (*((volatile uint32_t *)0x40065520))
N#define GPIO_PORTP_CR_R         (*((volatile uint32_t *)0x40065524))
N#define GPIO_PORTP_AMSEL_R      (*((volatile uint32_t *)0x40065528))
N#define GPIO_PORTP_PCTL_R       (*((volatile uint32_t *)0x4006552C))
N#define GPIO_PORTP_ADCCTL_R     (*((volatile uint32_t *)0x40065530))
N#define GPIO_PORTP_DMACTL_R     (*((volatile uint32_t *)0x40065534))
N#define GPIO_PORTP_SI_R         (*((volatile uint32_t *)0x40065538))
N#define GPIO_PORTP_DR12R_R      (*((volatile uint32_t *)0x4006553C))
N#define GPIO_PORTP_WAKEPEN_R    (*((volatile uint32_t *)0x40065540))
N#define GPIO_PORTP_WAKELVL_R    (*((volatile uint32_t *)0x40065544))
N#define GPIO_PORTP_WAKESTAT_R   (*((volatile uint32_t *)0x40065548))
N#define GPIO_PORTP_PP_R         (*((volatile uint32_t *)0x40065FC0))
N#define GPIO_PORTP_PC_R         (*((volatile uint32_t *)0x40065FC4))
N
N//*****************************************************************************
N//
N// GPIO registers (PORTQ)
N//
N//*****************************************************************************
N#define GPIO_PORTQ_DATA_BITS_R  ((volatile uint32_t *)0x40066000)
N#define GPIO_PORTQ_DATA_R       (*((volatile uint32_t *)0x400663FC))
N#define GPIO_PORTQ_DIR_R        (*((volatile uint32_t *)0x40066400))
N#define GPIO_PORTQ_IS_R         (*((volatile uint32_t *)0x40066404))
N#define GPIO_PORTQ_IBE_R        (*((volatile uint32_t *)0x40066408))
N#define GPIO_PORTQ_IEV_R        (*((volatile uint32_t *)0x4006640C))
N#define GPIO_PORTQ_IM_R         (*((volatile uint32_t *)0x40066410))
N#define GPIO_PORTQ_RIS_R        (*((volatile uint32_t *)0x40066414))
N#define GPIO_PORTQ_MIS_R        (*((volatile uint32_t *)0x40066418))
N#define GPIO_PORTQ_ICR_R        (*((volatile uint32_t *)0x4006641C))
N#define GPIO_PORTQ_AFSEL_R      (*((volatile uint32_t *)0x40066420))
N#define GPIO_PORTQ_DR2R_R       (*((volatile uint32_t *)0x40066500))
N#define GPIO_PORTQ_DR4R_R       (*((volatile uint32_t *)0x40066504))
N#define GPIO_PORTQ_DR8R_R       (*((volatile uint32_t *)0x40066508))
N#define GPIO_PORTQ_ODR_R        (*((volatile uint32_t *)0x4006650C))
N#define GPIO_PORTQ_PUR_R        (*((volatile uint32_t *)0x40066510))
N#define GPIO_PORTQ_PDR_R        (*((volatile uint32_t *)0x40066514))
N#define GPIO_PORTQ_SLR_R        (*((volatile uint32_t *)0x40066518))
N#define GPIO_PORTQ_DEN_R        (*((volatile uint32_t *)0x4006651C))
N#define GPIO_PORTQ_LOCK_R       (*((volatile uint32_t *)0x40066520))
N#define GPIO_PORTQ_CR_R         (*((volatile uint32_t *)0x40066524))
N#define GPIO_PORTQ_AMSEL_R      (*((volatile uint32_t *)0x40066528))
N#define GPIO_PORTQ_PCTL_R       (*((volatile uint32_t *)0x4006652C))
N#define GPIO_PORTQ_ADCCTL_R     (*((volatile uint32_t *)0x40066530))
N#define GPIO_PORTQ_DMACTL_R     (*((volatile uint32_t *)0x40066534))
N#define GPIO_PORTQ_SI_R         (*((volatile uint32_t *)0x40066538))
N#define GPIO_PORTQ_DR12R_R      (*((volatile uint32_t *)0x4006653C))
N#define GPIO_PORTQ_WAKEPEN_R    (*((volatile uint32_t *)0x40066540))
N#define GPIO_PORTQ_WAKELVL_R    (*((volatile uint32_t *)0x40066544))
N#define GPIO_PORTQ_WAKESTAT_R   (*((volatile uint32_t *)0x40066548))
N#define GPIO_PORTQ_PP_R         (*((volatile uint32_t *)0x40066FC0))
N#define GPIO_PORTQ_PC_R         (*((volatile uint32_t *)0x40066FC4))
N
N//*****************************************************************************
N//
N// EEPROM registers (EEPROM)
N//
N//*****************************************************************************
N#define EEPROM_EESIZE_R         (*((volatile uint32_t *)0x400AF000))
N#define EEPROM_EEBLOCK_R        (*((volatile uint32_t *)0x400AF004))
N#define EEPROM_EEOFFSET_R       (*((volatile uint32_t *)0x400AF008))
N#define EEPROM_EERDWR_R         (*((volatile uint32_t *)0x400AF010))
N#define EEPROM_EERDWRINC_R      (*((volatile uint32_t *)0x400AF014))
N#define EEPROM_EEDONE_R         (*((volatile uint32_t *)0x400AF018))
N#define EEPROM_EESUPP_R         (*((volatile uint32_t *)0x400AF01C))
N#define EEPROM_EEUNLOCK_R       (*((volatile uint32_t *)0x400AF020))
N#define EEPROM_EEPROT_R         (*((volatile uint32_t *)0x400AF030))
N#define EEPROM_EEPASS0_R        (*((volatile uint32_t *)0x400AF034))
N#define EEPROM_EEPASS1_R        (*((volatile uint32_t *)0x400AF038))
N#define EEPROM_EEPASS2_R        (*((volatile uint32_t *)0x400AF03C))
N#define EEPROM_EEINT_R          (*((volatile uint32_t *)0x400AF040))
N#define EEPROM_EEHIDE0_R        (*((volatile uint32_t *)0x400AF050))
N#define EEPROM_EEHIDE1_R        (*((volatile uint32_t *)0x400AF054))
N#define EEPROM_EEHIDE2_R        (*((volatile uint32_t *)0x400AF058))
N#define EEPROM_EEDBGME_R        (*((volatile uint32_t *)0x400AF080))
N#define EEPROM_PP_R             (*((volatile uint32_t *)0x400AFFC0))
N
N//*****************************************************************************
N//
N// I2C registers (I2C8)
N//
N//*****************************************************************************
N#define I2C8_MSA_R              (*((volatile uint32_t *)0x400B8000))
N#define I2C8_MCS_R              (*((volatile uint32_t *)0x400B8004))
N#define I2C8_MDR_R              (*((volatile uint32_t *)0x400B8008))
N#define I2C8_MTPR_R             (*((volatile uint32_t *)0x400B800C))
N#define I2C8_MIMR_R             (*((volatile uint32_t *)0x400B8010))
N#define I2C8_MRIS_R             (*((volatile uint32_t *)0x400B8014))
N#define I2C8_MMIS_R             (*((volatile uint32_t *)0x400B8018))
N#define I2C8_MICR_R             (*((volatile uint32_t *)0x400B801C))
N#define I2C8_MCR_R              (*((volatile uint32_t *)0x400B8020))
N#define I2C8_MCLKOCNT_R         (*((volatile uint32_t *)0x400B8024))
N#define I2C8_MBMON_R            (*((volatile uint32_t *)0x400B802C))
N#define I2C8_MBLEN_R            (*((volatile uint32_t *)0x400B8030))
N#define I2C8_MBCNT_R            (*((volatile uint32_t *)0x400B8034))
N#define I2C8_SOAR_R             (*((volatile uint32_t *)0x400B8800))
N#define I2C8_SCSR_R             (*((volatile uint32_t *)0x400B8804))
N#define I2C8_SDR_R              (*((volatile uint32_t *)0x400B8808))
N#define I2C8_SIMR_R             (*((volatile uint32_t *)0x400B880C))
N#define I2C8_SRIS_R             (*((volatile uint32_t *)0x400B8810))
N#define I2C8_SMIS_R             (*((volatile uint32_t *)0x400B8814))
N#define I2C8_SICR_R             (*((volatile uint32_t *)0x400B8818))
N#define I2C8_SOAR2_R            (*((volatile uint32_t *)0x400B881C))
N#define I2C8_SACKCTL_R          (*((volatile uint32_t *)0x400B8820))
N#define I2C8_FIFODATA_R         (*((volatile uint32_t *)0x400B8F00))
N#define I2C8_FIFOCTL_R          (*((volatile uint32_t *)0x400B8F04))
N#define I2C8_FIFOSTATUS_R       (*((volatile uint32_t *)0x400B8F08))
N#define I2C8_PP_R               (*((volatile uint32_t *)0x400B8FC0))
N#define I2C8_PC_R               (*((volatile uint32_t *)0x400B8FC4))
N
N//*****************************************************************************
N//
N// I2C registers (I2C9)
N//
N//*****************************************************************************
N#define I2C9_MSA_R              (*((volatile uint32_t *)0x400B9000))
N#define I2C9_MCS_R              (*((volatile uint32_t *)0x400B9004))
N#define I2C9_MDR_R              (*((volatile uint32_t *)0x400B9008))
N#define I2C9_MTPR_R             (*((volatile uint32_t *)0x400B900C))
N#define I2C9_MIMR_R             (*((volatile uint32_t *)0x400B9010))
N#define I2C9_MRIS_R             (*((volatile uint32_t *)0x400B9014))
N#define I2C9_MMIS_R             (*((volatile uint32_t *)0x400B9018))
N#define I2C9_MICR_R             (*((volatile uint32_t *)0x400B901C))
N#define I2C9_MCR_R              (*((volatile uint32_t *)0x400B9020))
N#define I2C9_MCLKOCNT_R         (*((volatile uint32_t *)0x400B9024))
N#define I2C9_MBMON_R            (*((volatile uint32_t *)0x400B902C))
N#define I2C9_MBLEN_R            (*((volatile uint32_t *)0x400B9030))
N#define I2C9_MBCNT_R            (*((volatile uint32_t *)0x400B9034))
N#define I2C9_SOAR_R             (*((volatile uint32_t *)0x400B9800))
N#define I2C9_SCSR_R             (*((volatile uint32_t *)0x400B9804))
N#define I2C9_SDR_R              (*((volatile uint32_t *)0x400B9808))
N#define I2C9_SIMR_R             (*((volatile uint32_t *)0x400B980C))
N#define I2C9_SRIS_R             (*((volatile uint32_t *)0x400B9810))
N#define I2C9_SMIS_R             (*((volatile uint32_t *)0x400B9814))
N#define I2C9_SICR_R             (*((volatile uint32_t *)0x400B9818))
N#define I2C9_SOAR2_R            (*((volatile uint32_t *)0x400B981C))
N#define I2C9_SACKCTL_R          (*((volatile uint32_t *)0x400B9820))
N#define I2C9_FIFODATA_R         (*((volatile uint32_t *)0x400B9F00))
N#define I2C9_FIFOCTL_R          (*((volatile uint32_t *)0x400B9F04))
N#define I2C9_FIFOSTATUS_R       (*((volatile uint32_t *)0x400B9F08))
N#define I2C9_PP_R               (*((volatile uint32_t *)0x400B9FC0))
N#define I2C9_PC_R               (*((volatile uint32_t *)0x400B9FC4))
N
N//*****************************************************************************
N//
N// I2C registers (I2C4)
N//
N//*****************************************************************************
N#define I2C4_MSA_R              (*((volatile uint32_t *)0x400C0000))
N#define I2C4_MCS_R              (*((volatile uint32_t *)0x400C0004))
N#define I2C4_MDR_R              (*((volatile uint32_t *)0x400C0008))
N#define I2C4_MTPR_R             (*((volatile uint32_t *)0x400C000C))
N#define I2C4_MIMR_R             (*((volatile uint32_t *)0x400C0010))
N#define I2C4_MRIS_R             (*((volatile uint32_t *)0x400C0014))
N#define I2C4_MMIS_R             (*((volatile uint32_t *)0x400C0018))
N#define I2C4_MICR_R             (*((volatile uint32_t *)0x400C001C))
N#define I2C4_MCR_R              (*((volatile uint32_t *)0x400C0020))
N#define I2C4_MCLKOCNT_R         (*((volatile uint32_t *)0x400C0024))
N#define I2C4_MBMON_R            (*((volatile uint32_t *)0x400C002C))
N#define I2C4_MBLEN_R            (*((volatile uint32_t *)0x400C0030))
N#define I2C4_MBCNT_R            (*((volatile uint32_t *)0x400C0034))
N#define I2C4_SOAR_R             (*((volatile uint32_t *)0x400C0800))
N#define I2C4_SCSR_R             (*((volatile uint32_t *)0x400C0804))
N#define I2C4_SDR_R              (*((volatile uint32_t *)0x400C0808))
N#define I2C4_SIMR_R             (*((volatile uint32_t *)0x400C080C))
N#define I2C4_SRIS_R             (*((volatile uint32_t *)0x400C0810))
N#define I2C4_SMIS_R             (*((volatile uint32_t *)0x400C0814))
N#define I2C4_SICR_R             (*((volatile uint32_t *)0x400C0818))
N#define I2C4_SOAR2_R            (*((volatile uint32_t *)0x400C081C))
N#define I2C4_SACKCTL_R          (*((volatile uint32_t *)0x400C0820))
N#define I2C4_FIFODATA_R         (*((volatile uint32_t *)0x400C0F00))
N#define I2C4_FIFOCTL_R          (*((volatile uint32_t *)0x400C0F04))
N#define I2C4_FIFOSTATUS_R       (*((volatile uint32_t *)0x400C0F08))
N#define I2C4_PP_R               (*((volatile uint32_t *)0x400C0FC0))
N#define I2C4_PC_R               (*((volatile uint32_t *)0x400C0FC4))
N
N//*****************************************************************************
N//
N// I2C registers (I2C5)
N//
N//*****************************************************************************
N#define I2C5_MSA_R              (*((volatile uint32_t *)0x400C1000))
N#define I2C5_MCS_R              (*((volatile uint32_t *)0x400C1004))
N#define I2C5_MDR_R              (*((volatile uint32_t *)0x400C1008))
N#define I2C5_MTPR_R             (*((volatile uint32_t *)0x400C100C))
N#define I2C5_MIMR_R             (*((volatile uint32_t *)0x400C1010))
N#define I2C5_MRIS_R             (*((volatile uint32_t *)0x400C1014))
N#define I2C5_MMIS_R             (*((volatile uint32_t *)0x400C1018))
N#define I2C5_MICR_R             (*((volatile uint32_t *)0x400C101C))
N#define I2C5_MCR_R              (*((volatile uint32_t *)0x400C1020))
N#define I2C5_MCLKOCNT_R         (*((volatile uint32_t *)0x400C1024))
N#define I2C5_MBMON_R            (*((volatile uint32_t *)0x400C102C))
N#define I2C5_MBLEN_R            (*((volatile uint32_t *)0x400C1030))
N#define I2C5_MBCNT_R            (*((volatile uint32_t *)0x400C1034))
N#define I2C5_SOAR_R             (*((volatile uint32_t *)0x400C1800))
N#define I2C5_SCSR_R             (*((volatile uint32_t *)0x400C1804))
N#define I2C5_SDR_R              (*((volatile uint32_t *)0x400C1808))
N#define I2C5_SIMR_R             (*((volatile uint32_t *)0x400C180C))
N#define I2C5_SRIS_R             (*((volatile uint32_t *)0x400C1810))
N#define I2C5_SMIS_R             (*((volatile uint32_t *)0x400C1814))
N#define I2C5_SICR_R             (*((volatile uint32_t *)0x400C1818))
N#define I2C5_SOAR2_R            (*((volatile uint32_t *)0x400C181C))
N#define I2C5_SACKCTL_R          (*((volatile uint32_t *)0x400C1820))
N#define I2C5_FIFODATA_R         (*((volatile uint32_t *)0x400C1F00))
N#define I2C5_FIFOCTL_R          (*((volatile uint32_t *)0x400C1F04))
N#define I2C5_FIFOSTATUS_R       (*((volatile uint32_t *)0x400C1F08))
N#define I2C5_PP_R               (*((volatile uint32_t *)0x400C1FC0))
N#define I2C5_PC_R               (*((volatile uint32_t *)0x400C1FC4))
N
N//*****************************************************************************
N//
N// I2C registers (I2C6)
N//
N//*****************************************************************************
N#define I2C6_MSA_R              (*((volatile uint32_t *)0x400C2000))
N#define I2C6_MCS_R              (*((volatile uint32_t *)0x400C2004))
N#define I2C6_MDR_R              (*((volatile uint32_t *)0x400C2008))
N#define I2C6_MTPR_R             (*((volatile uint32_t *)0x400C200C))
N#define I2C6_MIMR_R             (*((volatile uint32_t *)0x400C2010))
N#define I2C6_MRIS_R             (*((volatile uint32_t *)0x400C2014))
N#define I2C6_MMIS_R             (*((volatile uint32_t *)0x400C2018))
N#define I2C6_MICR_R             (*((volatile uint32_t *)0x400C201C))
N#define I2C6_MCR_R              (*((volatile uint32_t *)0x400C2020))
N#define I2C6_MCLKOCNT_R         (*((volatile uint32_t *)0x400C2024))
N#define I2C6_MBMON_R            (*((volatile uint32_t *)0x400C202C))
N#define I2C6_MBLEN_R            (*((volatile uint32_t *)0x400C2030))
N#define I2C6_MBCNT_R            (*((volatile uint32_t *)0x400C2034))
N#define I2C6_SOAR_R             (*((volatile uint32_t *)0x400C2800))
N#define I2C6_SCSR_R             (*((volatile uint32_t *)0x400C2804))
N#define I2C6_SDR_R              (*((volatile uint32_t *)0x400C2808))
N#define I2C6_SIMR_R             (*((volatile uint32_t *)0x400C280C))
N#define I2C6_SRIS_R             (*((volatile uint32_t *)0x400C2810))
N#define I2C6_SMIS_R             (*((volatile uint32_t *)0x400C2814))
N#define I2C6_SICR_R             (*((volatile uint32_t *)0x400C2818))
N#define I2C6_SOAR2_R            (*((volatile uint32_t *)0x400C281C))
N#define I2C6_SACKCTL_R          (*((volatile uint32_t *)0x400C2820))
N#define I2C6_FIFODATA_R         (*((volatile uint32_t *)0x400C2F00))
N#define I2C6_FIFOCTL_R          (*((volatile uint32_t *)0x400C2F04))
N#define I2C6_FIFOSTATUS_R       (*((volatile uint32_t *)0x400C2F08))
N#define I2C6_PP_R               (*((volatile uint32_t *)0x400C2FC0))
N#define I2C6_PC_R               (*((volatile uint32_t *)0x400C2FC4))
N
N//*****************************************************************************
N//
N// I2C registers (I2C7)
N//
N//*****************************************************************************
N#define I2C7_MSA_R              (*((volatile uint32_t *)0x400C3000))
N#define I2C7_MCS_R              (*((volatile uint32_t *)0x400C3004))
N#define I2C7_MDR_R              (*((volatile uint32_t *)0x400C3008))
N#define I2C7_MTPR_R             (*((volatile uint32_t *)0x400C300C))
N#define I2C7_MIMR_R             (*((volatile uint32_t *)0x400C3010))
N#define I2C7_MRIS_R             (*((volatile uint32_t *)0x400C3014))
N#define I2C7_MMIS_R             (*((volatile uint32_t *)0x400C3018))
N#define I2C7_MICR_R             (*((volatile uint32_t *)0x400C301C))
N#define I2C7_MCR_R              (*((volatile uint32_t *)0x400C3020))
N#define I2C7_MCLKOCNT_R         (*((volatile uint32_t *)0x400C3024))
N#define I2C7_MBMON_R            (*((volatile uint32_t *)0x400C302C))
N#define I2C7_MBLEN_R            (*((volatile uint32_t *)0x400C3030))
N#define I2C7_MBCNT_R            (*((volatile uint32_t *)0x400C3034))
N#define I2C7_SOAR_R             (*((volatile uint32_t *)0x400C3800))
N#define I2C7_SCSR_R             (*((volatile uint32_t *)0x400C3804))
N#define I2C7_SDR_R              (*((volatile uint32_t *)0x400C3808))
N#define I2C7_SIMR_R             (*((volatile uint32_t *)0x400C380C))
N#define I2C7_SRIS_R             (*((volatile uint32_t *)0x400C3810))
N#define I2C7_SMIS_R             (*((volatile uint32_t *)0x400C3814))
N#define I2C7_SICR_R             (*((volatile uint32_t *)0x400C3818))
N#define I2C7_SOAR2_R            (*((volatile uint32_t *)0x400C381C))
N#define I2C7_SACKCTL_R          (*((volatile uint32_t *)0x400C3820))
N#define I2C7_FIFODATA_R         (*((volatile uint32_t *)0x400C3F00))
N#define I2C7_FIFOCTL_R          (*((volatile uint32_t *)0x400C3F04))
N#define I2C7_FIFOSTATUS_R       (*((volatile uint32_t *)0x400C3F08))
N#define I2C7_PP_R               (*((volatile uint32_t *)0x400C3FC0))
N#define I2C7_PC_R               (*((volatile uint32_t *)0x400C3FC4))
N
N//*****************************************************************************
N//
N// External Peripheral Interface registers (EPI0)
N//
N//*****************************************************************************
N#define EPI0_CFG_R              (*((volatile uint32_t *)0x400D0000))
N#define EPI0_BAUD_R             (*((volatile uint32_t *)0x400D0004))
N#define EPI0_BAUD2_R            (*((volatile uint32_t *)0x400D0008))
N#define EPI0_HB16CFG_R          (*((volatile uint32_t *)0x400D0010))
N#define EPI0_GPCFG_R            (*((volatile uint32_t *)0x400D0010))
N#define EPI0_SDRAMCFG_R         (*((volatile uint32_t *)0x400D0010))
N#define EPI0_HB8CFG_R           (*((volatile uint32_t *)0x400D0010))
N#define EPI0_HB8CFG2_R          (*((volatile uint32_t *)0x400D0014))
N#define EPI0_HB16CFG2_R         (*((volatile uint32_t *)0x400D0014))
N#define EPI0_ADDRMAP_R          (*((volatile uint32_t *)0x400D001C))
N#define EPI0_RSIZE0_R           (*((volatile uint32_t *)0x400D0020))
N#define EPI0_RADDR0_R           (*((volatile uint32_t *)0x400D0024))
N#define EPI0_RPSTD0_R           (*((volatile uint32_t *)0x400D0028))
N#define EPI0_RSIZE1_R           (*((volatile uint32_t *)0x400D0030))
N#define EPI0_RADDR1_R           (*((volatile uint32_t *)0x400D0034))
N#define EPI0_RPSTD1_R           (*((volatile uint32_t *)0x400D0038))
N#define EPI0_STAT_R             (*((volatile uint32_t *)0x400D0060))
N#define EPI0_RFIFOCNT_R         (*((volatile uint32_t *)0x400D006C))
N#define EPI0_READFIFO0_R        (*((volatile uint32_t *)0x400D0070))
N#define EPI0_READFIFO1_R        (*((volatile uint32_t *)0x400D0074))
N#define EPI0_READFIFO2_R        (*((volatile uint32_t *)0x400D0078))
N#define EPI0_READFIFO3_R        (*((volatile uint32_t *)0x400D007C))
N#define EPI0_READFIFO4_R        (*((volatile uint32_t *)0x400D0080))
N#define EPI0_READFIFO5_R        (*((volatile uint32_t *)0x400D0084))
N#define EPI0_READFIFO6_R        (*((volatile uint32_t *)0x400D0088))
N#define EPI0_READFIFO7_R        (*((volatile uint32_t *)0x400D008C))
N#define EPI0_FIFOLVL_R          (*((volatile uint32_t *)0x400D0200))
N#define EPI0_WFIFOCNT_R         (*((volatile uint32_t *)0x400D0204))
N#define EPI0_DMATXCNT_R         (*((volatile uint32_t *)0x400D0208))
N#define EPI0_IM_R               (*((volatile uint32_t *)0x400D0210))
N#define EPI0_RIS_R              (*((volatile uint32_t *)0x400D0214))
N#define EPI0_MIS_R              (*((volatile uint32_t *)0x400D0218))
N#define EPI0_EISC_R             (*((volatile uint32_t *)0x400D021C))
N#define EPI0_HB8CFG3_R          (*((volatile uint32_t *)0x400D0308))
N#define EPI0_HB16CFG3_R         (*((volatile uint32_t *)0x400D0308))
N#define EPI0_HB16CFG4_R         (*((volatile uint32_t *)0x400D030C))
N#define EPI0_HB8CFG4_R          (*((volatile uint32_t *)0x400D030C))
N#define EPI0_HB8TIME_R          (*((volatile uint32_t *)0x400D0310))
N#define EPI0_HB16TIME_R         (*((volatile uint32_t *)0x400D0310))
N#define EPI0_HB8TIME2_R         (*((volatile uint32_t *)0x400D0314))
N#define EPI0_HB16TIME2_R        (*((volatile uint32_t *)0x400D0314))
N#define EPI0_HB16TIME3_R        (*((volatile uint32_t *)0x400D0318))
N#define EPI0_HB8TIME3_R         (*((volatile uint32_t *)0x400D0318))
N#define EPI0_HB8TIME4_R         (*((volatile uint32_t *)0x400D031C))
N#define EPI0_HB16TIME4_R        (*((volatile uint32_t *)0x400D031C))
N#define EPI0_HBPSRAM_R          (*((volatile uint32_t *)0x400D0360))
N
N//*****************************************************************************
N//
N// Timer registers (TIMER6)
N//
N//*****************************************************************************
N#define TIMER6_CFG_R            (*((volatile uint32_t *)0x400E0000))
N#define TIMER6_TAMR_R           (*((volatile uint32_t *)0x400E0004))
N#define TIMER6_TBMR_R           (*((volatile uint32_t *)0x400E0008))
N#define TIMER6_CTL_R            (*((volatile uint32_t *)0x400E000C))
N#define TIMER6_SYNC_R           (*((volatile uint32_t *)0x400E0010))
N#define TIMER6_IMR_R            (*((volatile uint32_t *)0x400E0018))
N#define TIMER6_RIS_R            (*((volatile uint32_t *)0x400E001C))
N#define TIMER6_MIS_R            (*((volatile uint32_t *)0x400E0020))
N#define TIMER6_ICR_R            (*((volatile uint32_t *)0x400E0024))
N#define TIMER6_TAILR_R          (*((volatile uint32_t *)0x400E0028))
N#define TIMER6_TBILR_R          (*((volatile uint32_t *)0x400E002C))
N#define TIMER6_TAMATCHR_R       (*((volatile uint32_t *)0x400E0030))
N#define TIMER6_TBMATCHR_R       (*((volatile uint32_t *)0x400E0034))
N#define TIMER6_TAPR_R           (*((volatile uint32_t *)0x400E0038))
N#define TIMER6_TBPR_R           (*((volatile uint32_t *)0x400E003C))
N#define TIMER6_TAPMR_R          (*((volatile uint32_t *)0x400E0040))
N#define TIMER6_TBPMR_R          (*((volatile uint32_t *)0x400E0044))
N#define TIMER6_TAR_R            (*((volatile uint32_t *)0x400E0048))
N#define TIMER6_TBR_R            (*((volatile uint32_t *)0x400E004C))
N#define TIMER6_TAV_R            (*((volatile uint32_t *)0x400E0050))
N#define TIMER6_TBV_R            (*((volatile uint32_t *)0x400E0054))
N#define TIMER6_RTCPD_R          (*((volatile uint32_t *)0x400E0058))
N#define TIMER6_TAPS_R           (*((volatile uint32_t *)0x400E005C))
N#define TIMER6_TBPS_R           (*((volatile uint32_t *)0x400E0060))
N#define TIMER6_DMAEV_R          (*((volatile uint32_t *)0x400E006C))
N#define TIMER6_ADCEV_R          (*((volatile uint32_t *)0x400E0070))
N#define TIMER6_PP_R             (*((volatile uint32_t *)0x400E0FC0))
N#define TIMER6_CC_R             (*((volatile uint32_t *)0x400E0FC8))
N
N//*****************************************************************************
N//
N// Timer registers (TIMER7)
N//
N//*****************************************************************************
N#define TIMER7_CFG_R            (*((volatile uint32_t *)0x400E1000))
N#define TIMER7_TAMR_R           (*((volatile uint32_t *)0x400E1004))
N#define TIMER7_TBMR_R           (*((volatile uint32_t *)0x400E1008))
N#define TIMER7_CTL_R            (*((volatile uint32_t *)0x400E100C))
N#define TIMER7_SYNC_R           (*((volatile uint32_t *)0x400E1010))
N#define TIMER7_IMR_R            (*((volatile uint32_t *)0x400E1018))
N#define TIMER7_RIS_R            (*((volatile uint32_t *)0x400E101C))
N#define TIMER7_MIS_R            (*((volatile uint32_t *)0x400E1020))
N#define TIMER7_ICR_R            (*((volatile uint32_t *)0x400E1024))
N#define TIMER7_TAILR_R          (*((volatile uint32_t *)0x400E1028))
N#define TIMER7_TBILR_R          (*((volatile uint32_t *)0x400E102C))
N#define TIMER7_TAMATCHR_R       (*((volatile uint32_t *)0x400E1030))
N#define TIMER7_TBMATCHR_R       (*((volatile uint32_t *)0x400E1034))
N#define TIMER7_TAPR_R           (*((volatile uint32_t *)0x400E1038))
N#define TIMER7_TBPR_R           (*((volatile uint32_t *)0x400E103C))
N#define TIMER7_TAPMR_R          (*((volatile uint32_t *)0x400E1040))
N#define TIMER7_TBPMR_R          (*((volatile uint32_t *)0x400E1044))
N#define TIMER7_TAR_R            (*((volatile uint32_t *)0x400E1048))
N#define TIMER7_TBR_R            (*((volatile uint32_t *)0x400E104C))
N#define TIMER7_TAV_R            (*((volatile uint32_t *)0x400E1050))
N#define TIMER7_TBV_R            (*((volatile uint32_t *)0x400E1054))
N#define TIMER7_RTCPD_R          (*((volatile uint32_t *)0x400E1058))
N#define TIMER7_TAPS_R           (*((volatile uint32_t *)0x400E105C))
N#define TIMER7_TBPS_R           (*((volatile uint32_t *)0x400E1060))
N#define TIMER7_DMAEV_R          (*((volatile uint32_t *)0x400E106C))
N#define TIMER7_ADCEV_R          (*((volatile uint32_t *)0x400E1070))
N#define TIMER7_PP_R             (*((volatile uint32_t *)0x400E1FC0))
N#define TIMER7_CC_R             (*((volatile uint32_t *)0x400E1FC8))
N
N//*****************************************************************************
N//
N// EMAC registers (EMAC0)
N//
N//*****************************************************************************
N#define EMAC0_CFG_R             (*((volatile uint32_t *)0x400EC000))
N#define EMAC0_FRAMEFLTR_R       (*((volatile uint32_t *)0x400EC004))
N#define EMAC0_HASHTBLH_R        (*((volatile uint32_t *)0x400EC008))
N#define EMAC0_HASHTBLL_R        (*((volatile uint32_t *)0x400EC00C))
N#define EMAC0_MIIADDR_R         (*((volatile uint32_t *)0x400EC010))
N#define EMAC0_MIIDATA_R         (*((volatile uint32_t *)0x400EC014))
N#define EMAC0_FLOWCTL_R         (*((volatile uint32_t *)0x400EC018))
N#define EMAC0_VLANTG_R          (*((volatile uint32_t *)0x400EC01C))
N#define EMAC0_STATUS_R          (*((volatile uint32_t *)0x400EC024))
N#define EMAC0_RWUFF_R           (*((volatile uint32_t *)0x400EC028))
N#define EMAC0_PMTCTLSTAT_R      (*((volatile uint32_t *)0x400EC02C))
N#define EMAC0_RIS_R             (*((volatile uint32_t *)0x400EC038))
N#define EMAC0_IM_R              (*((volatile uint32_t *)0x400EC03C))
N#define EMAC0_ADDR0H_R          (*((volatile uint32_t *)0x400EC040))
N#define EMAC0_ADDR0L_R          (*((volatile uint32_t *)0x400EC044))
N#define EMAC0_ADDR1H_R          (*((volatile uint32_t *)0x400EC048))
N#define EMAC0_ADDR1L_R          (*((volatile uint32_t *)0x400EC04C))
N#define EMAC0_ADDR2H_R          (*((volatile uint32_t *)0x400EC050))
N#define EMAC0_ADDR2L_R          (*((volatile uint32_t *)0x400EC054))
N#define EMAC0_ADDR3H_R          (*((volatile uint32_t *)0x400EC058))
N#define EMAC0_ADDR3L_R          (*((volatile uint32_t *)0x400EC05C))
N#define EMAC0_WDOGTO_R          (*((volatile uint32_t *)0x400EC0DC))
N#define EMAC0_MMCCTRL_R         (*((volatile uint32_t *)0x400EC100))
N#define EMAC0_MMCRXRIS_R        (*((volatile uint32_t *)0x400EC104))
N#define EMAC0_MMCTXRIS_R        (*((volatile uint32_t *)0x400EC108))
N#define EMAC0_MMCRXIM_R         (*((volatile uint32_t *)0x400EC10C))
N#define EMAC0_MMCTXIM_R         (*((volatile uint32_t *)0x400EC110))
N#define EMAC0_TXCNTGB_R         (*((volatile uint32_t *)0x400EC118))
N#define EMAC0_TXCNTSCOL_R       (*((volatile uint32_t *)0x400EC14C))
N#define EMAC0_TXCNTMCOL_R       (*((volatile uint32_t *)0x400EC150))
N#define EMAC0_TXOCTCNTG_R       (*((volatile uint32_t *)0x400EC164))
N#define EMAC0_RXCNTGB_R         (*((volatile uint32_t *)0x400EC180))
N#define EMAC0_RXCNTCRCERR_R     (*((volatile uint32_t *)0x400EC194))
N#define EMAC0_RXCNTALGNERR_R    (*((volatile uint32_t *)0x400EC198))
N#define EMAC0_RXCNTGUNI_R       (*((volatile uint32_t *)0x400EC1C4))
N#define EMAC0_VLNINCREP_R       (*((volatile uint32_t *)0x400EC584))
N#define EMAC0_VLANHASH_R        (*((volatile uint32_t *)0x400EC588))
N#define EMAC0_TIMSTCTRL_R       (*((volatile uint32_t *)0x400EC700))
N#define EMAC0_SUBSECINC_R       (*((volatile uint32_t *)0x400EC704))
N#define EMAC0_TIMSEC_R          (*((volatile uint32_t *)0x400EC708))
N#define EMAC0_TIMNANO_R         (*((volatile uint32_t *)0x400EC70C))
N#define EMAC0_TIMSECU_R         (*((volatile uint32_t *)0x400EC710))
N#define EMAC0_TIMNANOU_R        (*((volatile uint32_t *)0x400EC714))
N#define EMAC0_TIMADD_R          (*((volatile uint32_t *)0x400EC718))
N#define EMAC0_TARGSEC_R         (*((volatile uint32_t *)0x400EC71C))
N#define EMAC0_TARGNANO_R        (*((volatile uint32_t *)0x400EC720))
N#define EMAC0_HWORDSEC_R        (*((volatile uint32_t *)0x400EC724))
N#define EMAC0_TIMSTAT_R         (*((volatile uint32_t *)0x400EC728))
N#define EMAC0_PPSCTRL_R         (*((volatile uint32_t *)0x400EC72C))
N#define EMAC0_PPS0INTVL_R       (*((volatile uint32_t *)0x400EC760))
N#define EMAC0_PPS0WIDTH_R       (*((volatile uint32_t *)0x400EC764))
N#define EMAC0_DMABUSMOD_R       (*((volatile uint32_t *)0x400ECC00))
N#define EMAC0_TXPOLLD_R         (*((volatile uint32_t *)0x400ECC04))
N#define EMAC0_RXPOLLD_R         (*((volatile uint32_t *)0x400ECC08))
N#define EMAC0_RXDLADDR_R        (*((volatile uint32_t *)0x400ECC0C))
N#define EMAC0_TXDLADDR_R        (*((volatile uint32_t *)0x400ECC10))
N#define EMAC0_DMARIS_R          (*((volatile uint32_t *)0x400ECC14))
N#define EMAC0_DMAOPMODE_R       (*((volatile uint32_t *)0x400ECC18))
N#define EMAC0_DMAIM_R           (*((volatile uint32_t *)0x400ECC1C))
N#define EMAC0_MFBOC_R           (*((volatile uint32_t *)0x400ECC20))
N#define EMAC0_RXINTWDT_R        (*((volatile uint32_t *)0x400ECC24))
N#define EMAC0_HOSTXDESC_R       (*((volatile uint32_t *)0x400ECC48))
N#define EMAC0_HOSRXDESC_R       (*((volatile uint32_t *)0x400ECC4C))
N#define EMAC0_HOSTXBA_R         (*((volatile uint32_t *)0x400ECC50))
N#define EMAC0_HOSRXBA_R         (*((volatile uint32_t *)0x400ECC54))
N#define EMAC0_PP_R              (*((volatile uint32_t *)0x400ECFC0))
N#define EMAC0_PC_R              (*((volatile uint32_t *)0x400ECFC4))
N#define EMAC0_CC_R              (*((volatile uint32_t *)0x400ECFC8))
N#define EMAC0_EPHYRIS_R         (*((volatile uint32_t *)0x400ECFD0))
N#define EMAC0_EPHYIM_R          (*((volatile uint32_t *)0x400ECFD4))
N#define EMAC0_EPHYMISC_R        (*((volatile uint32_t *)0x400ECFD8))
N
N//*****************************************************************************
N//
N// EPHY registers (EMAC0)
N//
N//*****************************************************************************
N#define EPHY_BMCR               0x00000000  // Ethernet PHY Basic Mode Control
N#define EPHY_BMSR               0x00000001  // Ethernet PHY Basic Mode Status
N#define EPHY_ID1                0x00000002  // Ethernet PHY Identifier Register
N                                            // 1
N#define EPHY_ID2                0x00000003  // Ethernet PHY Identifier Register
N                                            // 2
N#define EPHY_ANA                0x00000004  // Ethernet PHY Auto-Negotiation
N                                            // Advertisement
N#define EPHY_ANLPA              0x00000005  // Ethernet PHY Auto-Negotiation
N                                            // Link Partner Ability
N#define EPHY_ANER               0x00000006  // Ethernet PHY Auto-Negotiation
N                                            // Expansion
N#define EPHY_ANNPTR             0x00000007  // Ethernet PHY Auto-Negotiation
N                                            // Next Page TX
N#define EPHY_ANLNPTR            0x00000008  // Ethernet PHY Auto-Negotiation
N                                            // Link Partner Ability Next Page
N#define EPHY_CFG1               0x00000009  // Ethernet PHY Configuration 1
N#define EPHY_CFG2               0x0000000A  // Ethernet PHY Configuration 2
N#define EPHY_CFG3               0x0000000B  // Ethernet PHY Configuration 3
N#define EPHY_REGCTL             0x0000000D  // Ethernet PHY Register Control
N#define EPHY_ADDAR              0x0000000E  // Ethernet PHY Address or Data
N#define EPHY_STS                0x00000010  // Ethernet PHY Status
N#define EPHY_SCR                0x00000011  // Ethernet PHY Specific Control
N#define EPHY_MISR1              0x00000012  // Ethernet PHY MII Interrupt
N                                            // Status 1
N#define EPHY_MISR2              0x00000013  // Ethernet PHY MII Interrupt
N                                            // Status 2
N#define EPHY_FCSCR              0x00000014  // Ethernet PHY False Carrier Sense
N                                            // Counter
N#define EPHY_RXERCNT            0x00000015  // Ethernet PHY Receive Error Count
N#define EPHY_BISTCR             0x00000016  // Ethernet PHY BIST Control
N#define EPHY_LEDCR              0x00000018  // Ethernet PHY LED Control
N#define EPHY_CTL                0x00000019  // Ethernet PHY Control
N#define EPHY_10BTSC             0x0000001A  // Ethernet PHY 10Base-T
N                                            // Status/Control
N#define EPHY_BICSR1             0x0000001B  // Ethernet PHY BIST Control and
N                                            // Status 1
N#define EPHY_BICSR2             0x0000001C  // Ethernet PHY BIST Control and
N                                            // Status 2
N#define EPHY_CDCR               0x0000001E  // Ethernet PHY Cable Diagnostic
N                                            // Control
N#define EPHY_RCR                0x0000001F  // Ethernet PHY Reset Control
N#define EPHY_LEDCFG             0x00000025  // Ethernet PHY LED Configuration
N#define EPHY_ALCDCR             0x00000155  // Ethernet PHY ALCD Control and
N                                            // Results
N#define EPHY_CDSCR              0x00000170  // Ethernet PHY Cable Diagnostic
N                                            // Control
N#define EPHY_CDLR1              0x00000180  // Ethernet PHY Cable Diagnostic
N                                            // Location Result 1
N#define EPHY_CDLR2              0x00000181  // Ethernet PHY Cable Diagnostic
N                                            // Location Result 2
N#define EPHY_CDLR3              0x00000182  // Ethernet PHY Cable Diagnostic
N                                            // Location Result 3
N#define EPHY_CDLR4              0x00000183  // Ethernet PHY Cable Diagnostic
N                                            // Location Result 4
N#define EPHY_CDLR5              0x00000184  // Ethernet PHY Cable Diagnostic
N                                            // Location Result 5
N#define EPHY_CDLAR1             0x00000185  // Ethernet PHY Cable Diagnostic
N                                            // Amplitude Result 1
N#define EPHY_CDLAR2             0x00000186  // Ethernet PHY Cable Diagnostic
N                                            // Amplitude Result 2
N#define EPHY_CDLAR3             0x00000187  // Ethernet PHY Cable Diagnostic
N                                            // Amplitude Result 3
N#define EPHY_CDLAR4             0x00000188  // Ethernet PHY Cable Diagnostic
N                                            // Amplitude Result 4
N#define EPHY_CDLAR5             0x00000189  // Ethernet PHY Cable Diagnostic
N                                            // Amplitude Result 5
N#define EPHY_CDGRR              0x0000018A  // Ethernet PHY Cable Diagnostic
N                                            // General Result
N#define EPHY_ALCDR2             0x00000215  // Ethernet PHY ALCD Results 2
N
N//*****************************************************************************
N//
N// System Exception Module registers (SYSEXC)
N//
N//*****************************************************************************
N#define SYSEXC_RIS_R            (*((volatile uint32_t *)0x400F9000))
N#define SYSEXC_IM_R             (*((volatile uint32_t *)0x400F9004))
N#define SYSEXC_MIS_R            (*((volatile uint32_t *)0x400F9008))
N#define SYSEXC_IC_R             (*((volatile uint32_t *)0x400F900C))
N
N//*****************************************************************************
N//
N// Hibernation module registers (HIB)
N//
N//*****************************************************************************
N#define HIB_RTCC_R              (*((volatile uint32_t *)0x400FC000))
N#define HIB_RTCM0_R             (*((volatile uint32_t *)0x400FC004))
N#define HIB_RTCLD_R             (*((volatile uint32_t *)0x400FC00C))
N#define HIB_CTL_R               (*((volatile uint32_t *)0x400FC010))
N#define HIB_IM_R                (*((volatile uint32_t *)0x400FC014))
N#define HIB_RIS_R               (*((volatile uint32_t *)0x400FC018))
N#define HIB_MIS_R               (*((volatile uint32_t *)0x400FC01C))
N#define HIB_IC_R                (*((volatile uint32_t *)0x400FC020))
N#define HIB_RTCT_R              (*((volatile uint32_t *)0x400FC024))
N#define HIB_RTCSS_R             (*((volatile uint32_t *)0x400FC028))
N#define HIB_IO_R                (*((volatile uint32_t *)0x400FC02C))
N#define HIB_DATA_R              (*((volatile uint32_t *)0x400FC030))
N#define HIB_CALCTL_R            (*((volatile uint32_t *)0x400FC300))
N#define HIB_CAL0_R              (*((volatile uint32_t *)0x400FC310))
N#define HIB_CAL1_R              (*((volatile uint32_t *)0x400FC314))
N#define HIB_CALLD0_R            (*((volatile uint32_t *)0x400FC320))
N#define HIB_CALLD1_R            (*((volatile uint32_t *)0x400FC324))
N#define HIB_CALM0_R             (*((volatile uint32_t *)0x400FC330))
N#define HIB_CALM1_R             (*((volatile uint32_t *)0x400FC334))
N#define HIB_LOCK_R              (*((volatile uint32_t *)0x400FC360))
N#define HIB_TPCTL_R             (*((volatile uint32_t *)0x400FC400))
N#define HIB_TPSTAT_R            (*((volatile uint32_t *)0x400FC404))
N#define HIB_TPIO_R              (*((volatile uint32_t *)0x400FC410))
N#define HIB_TPLOG0_R            (*((volatile uint32_t *)0x400FC4E0))
N#define HIB_TPLOG1_R            (*((volatile uint32_t *)0x400FC4E4))
N#define HIB_TPLOG2_R            (*((volatile uint32_t *)0x400FC4E8))
N#define HIB_TPLOG3_R            (*((volatile uint32_t *)0x400FC4EC))
N#define HIB_TPLOG4_R            (*((volatile uint32_t *)0x400FC4F0))
N#define HIB_TPLOG5_R            (*((volatile uint32_t *)0x400FC4F4))
N#define HIB_TPLOG6_R            (*((volatile uint32_t *)0x400FC4F8))
N#define HIB_TPLOG7_R            (*((volatile uint32_t *)0x400FC4FC))
N#define HIB_PP_R                (*((volatile uint32_t *)0x400FCFC0))
N#define HIB_CC_R                (*((volatile uint32_t *)0x400FCFC8))
N
N//*****************************************************************************
N//
N// FLASH registers (FLASH CTRL)
N//
N//*****************************************************************************
N#define FLASH_FMA_R             (*((volatile uint32_t *)0x400FD000))
N#define FLASH_FMD_R             (*((volatile uint32_t *)0x400FD004))
N#define FLASH_FMC_R             (*((volatile uint32_t *)0x400FD008))
N#define FLASH_FCRIS_R           (*((volatile uint32_t *)0x400FD00C))
N#define FLASH_FCIM_R            (*((volatile uint32_t *)0x400FD010))
N#define FLASH_FCMISC_R          (*((volatile uint32_t *)0x400FD014))
N#define FLASH_FMC2_R            (*((volatile uint32_t *)0x400FD020))
N#define FLASH_FWBVAL_R          (*((volatile uint32_t *)0x400FD030))
N#define FLASH_FLPEKEY_R         (*((volatile uint32_t *)0x400FD03C))
N#define FLASH_FWBN_R            (*((volatile uint32_t *)0x400FD100))
N#define FLASH_PP_R              (*((volatile uint32_t *)0x400FDFC0))
N#define FLASH_SSIZE_R           (*((volatile uint32_t *)0x400FDFC4))
N#define FLASH_CONF_R            (*((volatile uint32_t *)0x400FDFC8))
N#define FLASH_ROMSWMAP_R        (*((volatile uint32_t *)0x400FDFCC))
N#define FLASH_DMASZ_R           (*((volatile uint32_t *)0x400FDFD0))
N#define FLASH_DMAST_R           (*((volatile uint32_t *)0x400FDFD4))
N#define FLASH_RVP_R             (*((volatile uint32_t *)0x400FE0D4))
N#define FLASH_BOOTCFG_R         (*((volatile uint32_t *)0x400FE1D0))
N#define FLASH_USRPWRUP_R        (*((volatile uint32_t *)0x400FE1DC))
N#define FLASH_USERREG0_R        (*((volatile uint32_t *)0x400FE1E0))
N#define FLASH_USERREG1_R        (*((volatile uint32_t *)0x400FE1E4))
N#define FLASH_USERREG2_R        (*((volatile uint32_t *)0x400FE1E8))
N#define FLASH_USERREG3_R        (*((volatile uint32_t *)0x400FE1EC))
N#define FLASH_FMPRE0_R          (*((volatile uint32_t *)0x400FE200))
N#define FLASH_FMPRE1_R          (*((volatile uint32_t *)0x400FE204))
N#define FLASH_FMPRE2_R          (*((volatile uint32_t *)0x400FE208))
N#define FLASH_FMPRE3_R          (*((volatile uint32_t *)0x400FE20C))
N#define FLASH_FMPRE4_R          (*((volatile uint32_t *)0x400FE210))
N#define FLASH_FMPRE5_R          (*((volatile uint32_t *)0x400FE214))
N#define FLASH_FMPRE6_R          (*((volatile uint32_t *)0x400FE218))
N#define FLASH_FMPRE7_R          (*((volatile uint32_t *)0x400FE21C))
N#define FLASH_FMPRE8_R          (*((volatile uint32_t *)0x400FE220))
N#define FLASH_FMPRE9_R          (*((volatile uint32_t *)0x400FE224))
N#define FLASH_FMPRE10_R         (*((volatile uint32_t *)0x400FE228))
N#define FLASH_FMPRE11_R         (*((volatile uint32_t *)0x400FE22C))
N#define FLASH_FMPRE12_R         (*((volatile uint32_t *)0x400FE230))
N#define FLASH_FMPRE13_R         (*((volatile uint32_t *)0x400FE234))
N#define FLASH_FMPRE14_R         (*((volatile uint32_t *)0x400FE238))
N#define FLASH_FMPRE15_R         (*((volatile uint32_t *)0x400FE23C))
N#define FLASH_FMPPE0_R          (*((volatile uint32_t *)0x400FE400))
N#define FLASH_FMPPE1_R          (*((volatile uint32_t *)0x400FE404))
N#define FLASH_FMPPE2_R          (*((volatile uint32_t *)0x400FE408))
N#define FLASH_FMPPE3_R          (*((volatile uint32_t *)0x400FE40C))
N#define FLASH_FMPPE4_R          (*((volatile uint32_t *)0x400FE410))
N#define FLASH_FMPPE5_R          (*((volatile uint32_t *)0x400FE414))
N#define FLASH_FMPPE6_R          (*((volatile uint32_t *)0x400FE418))
N#define FLASH_FMPPE7_R          (*((volatile uint32_t *)0x400FE41C))
N#define FLASH_FMPPE8_R          (*((volatile uint32_t *)0x400FE420))
N#define FLASH_FMPPE9_R          (*((volatile uint32_t *)0x400FE424))
N#define FLASH_FMPPE10_R         (*((volatile uint32_t *)0x400FE428))
N#define FLASH_FMPPE11_R         (*((volatile uint32_t *)0x400FE42C))
N#define FLASH_FMPPE12_R         (*((volatile uint32_t *)0x400FE430))
N#define FLASH_FMPPE13_R         (*((volatile uint32_t *)0x400FE434))
N#define FLASH_FMPPE14_R         (*((volatile uint32_t *)0x400FE438))
N#define FLASH_FMPPE15_R         (*((volatile uint32_t *)0x400FE43C))
N
N//*****************************************************************************
N//
N// System Control registers (SYSCTL)
N//
N//*****************************************************************************
N#define SYSCTL_DID0_R           (*((volatile uint32_t *)0x400FE000))
N#define SYSCTL_DID1_R           (*((volatile uint32_t *)0x400FE004))
N#define SYSCTL_PTBOCTL_R        (*((volatile uint32_t *)0x400FE038))
N#define SYSCTL_RIS_R            (*((volatile uint32_t *)0x400FE050))
N#define SYSCTL_IMC_R            (*((volatile uint32_t *)0x400FE054))
N#define SYSCTL_MISC_R           (*((volatile uint32_t *)0x400FE058))
N#define SYSCTL_RESC_R           (*((volatile uint32_t *)0x400FE05C))
N#define SYSCTL_PWRTC_R          (*((volatile uint32_t *)0x400FE060))
N#define SYSCTL_NMIC_R           (*((volatile uint32_t *)0x400FE064))
N#define SYSCTL_MOSCCTL_R        (*((volatile uint32_t *)0x400FE07C))
N#define SYSCTL_RSCLKCFG_R       (*((volatile uint32_t *)0x400FE0B0))
N#define SYSCTL_MEMTIM0_R        (*((volatile uint32_t *)0x400FE0C0))
N#define SYSCTL_DSMEMTIM0_R      (*((volatile uint32_t *)0x400FE0C8))
N#define SYSCTL_ALTCLKCFG_R      (*((volatile uint32_t *)0x400FE138))
N#define SYSCTL_DSCLKCFG_R       (*((volatile uint32_t *)0x400FE144))
N#define SYSCTL_DIVSCLK_R        (*((volatile uint32_t *)0x400FE148))
N#define SYSCTL_SYSPROP_R        (*((volatile uint32_t *)0x400FE14C))
N#define SYSCTL_PIOSCCAL_R       (*((volatile uint32_t *)0x400FE150))
N#define SYSCTL_PIOSCSTAT_R      (*((volatile uint32_t *)0x400FE154))
N#define SYSCTL_PLLFREQ0_R       (*((volatile uint32_t *)0x400FE160))
N#define SYSCTL_PLLFREQ1_R       (*((volatile uint32_t *)0x400FE164))
N#define SYSCTL_PLLSTAT_R        (*((volatile uint32_t *)0x400FE168))
N#define SYSCTL_SLPPWRCFG_R      (*((volatile uint32_t *)0x400FE188))
N#define SYSCTL_DSLPPWRCFG_R     (*((volatile uint32_t *)0x400FE18C))
N#define SYSCTL_NVMSTAT_R        (*((volatile uint32_t *)0x400FE1A0))
N#define SYSCTL_LDODPCTL_R       (*((volatile uint32_t *)0x400FE1BC))
N#define SYSCTL_RESBEHAVCTL_R    (*((volatile uint32_t *)0x400FE1D8))
N#define SYSCTL_HSSR_R           (*((volatile uint32_t *)0x400FE1F4))
N#define SYSCTL_USBPDS_R         (*((volatile uint32_t *)0x400FE280))
N#define SYSCTL_USBMPC_R         (*((volatile uint32_t *)0x400FE284))
N#define SYSCTL_EMACPDS_R        (*((volatile uint32_t *)0x400FE288))
N#define SYSCTL_EMACMPC_R        (*((volatile uint32_t *)0x400FE28C))
N#define SYSCTL_PPWD_R           (*((volatile uint32_t *)0x400FE300))
N#define SYSCTL_PPTIMER_R        (*((volatile uint32_t *)0x400FE304))
N#define SYSCTL_PPGPIO_R         (*((volatile uint32_t *)0x400FE308))
N#define SYSCTL_PPDMA_R          (*((volatile uint32_t *)0x400FE30C))
N#define SYSCTL_PPEPI_R          (*((volatile uint32_t *)0x400FE310))
N#define SYSCTL_PPHIB_R          (*((volatile uint32_t *)0x400FE314))
N#define SYSCTL_PPUART_R         (*((volatile uint32_t *)0x400FE318))
N#define SYSCTL_PPSSI_R          (*((volatile uint32_t *)0x400FE31C))
N#define SYSCTL_PPI2C_R          (*((volatile uint32_t *)0x400FE320))
N#define SYSCTL_PPUSB_R          (*((volatile uint32_t *)0x400FE328))
N#define SYSCTL_PPEPHY_R         (*((volatile uint32_t *)0x400FE330))
N#define SYSCTL_PPCAN_R          (*((volatile uint32_t *)0x400FE334))
N#define SYSCTL_PPADC_R          (*((volatile uint32_t *)0x400FE338))
N#define SYSCTL_PPACMP_R         (*((volatile uint32_t *)0x400FE33C))
N#define SYSCTL_PPPWM_R          (*((volatile uint32_t *)0x400FE340))
N#define SYSCTL_PPQEI_R          (*((volatile uint32_t *)0x400FE344))
N#define SYSCTL_PPLPC_R          (*((volatile uint32_t *)0x400FE348))
N#define SYSCTL_PPPECI_R         (*((volatile uint32_t *)0x400FE350))
N#define SYSCTL_PPFAN_R          (*((volatile uint32_t *)0x400FE354))
N#define SYSCTL_PPEEPROM_R       (*((volatile uint32_t *)0x400FE358))
N#define SYSCTL_PPWTIMER_R       (*((volatile uint32_t *)0x400FE35C))
N#define SYSCTL_PPRTS_R          (*((volatile uint32_t *)0x400FE370))
N#define SYSCTL_PPCCM_R          (*((volatile uint32_t *)0x400FE374))
N#define SYSCTL_PPLCD_R          (*((volatile uint32_t *)0x400FE390))
N#define SYSCTL_PPOWIRE_R        (*((volatile uint32_t *)0x400FE398))
N#define SYSCTL_PPEMAC_R         (*((volatile uint32_t *)0x400FE39C))
N#define SYSCTL_PPHIM_R          (*((volatile uint32_t *)0x400FE3A4))
N#define SYSCTL_SRWD_R           (*((volatile uint32_t *)0x400FE500))
N#define SYSCTL_SRTIMER_R        (*((volatile uint32_t *)0x400FE504))
N#define SYSCTL_SRGPIO_R         (*((volatile uint32_t *)0x400FE508))
N#define SYSCTL_SRDMA_R          (*((volatile uint32_t *)0x400FE50C))
N#define SYSCTL_SREPI_R          (*((volatile uint32_t *)0x400FE510))
N#define SYSCTL_SRHIB_R          (*((volatile uint32_t *)0x400FE514))
N#define SYSCTL_SRUART_R         (*((volatile uint32_t *)0x400FE518))
N#define SYSCTL_SRSSI_R          (*((volatile uint32_t *)0x400FE51C))
N#define SYSCTL_SRI2C_R          (*((volatile uint32_t *)0x400FE520))
N#define SYSCTL_SRUSB_R          (*((volatile uint32_t *)0x400FE528))
N#define SYSCTL_SREPHY_R         (*((volatile uint32_t *)0x400FE530))
N#define SYSCTL_SRCAN_R          (*((volatile uint32_t *)0x400FE534))
N#define SYSCTL_SRADC_R          (*((volatile uint32_t *)0x400FE538))
N#define SYSCTL_SRACMP_R         (*((volatile uint32_t *)0x400FE53C))
N#define SYSCTL_SRPWM_R          (*((volatile uint32_t *)0x400FE540))
N#define SYSCTL_SRQEI_R          (*((volatile uint32_t *)0x400FE544))
N#define SYSCTL_SREEPROM_R       (*((volatile uint32_t *)0x400FE558))
N#define SYSCTL_SRCCM_R          (*((volatile uint32_t *)0x400FE574))
N#define SYSCTL_SREMAC_R         (*((volatile uint32_t *)0x400FE59C))
N#define SYSCTL_RCGCWD_R         (*((volatile uint32_t *)0x400FE600))
N#define SYSCTL_RCGCTIMER_R      (*((volatile uint32_t *)0x400FE604))
N#define SYSCTL_RCGCGPIO_R       (*((volatile uint32_t *)0x400FE608))
N#define SYSCTL_RCGCDMA_R        (*((volatile uint32_t *)0x400FE60C))
N#define SYSCTL_RCGCEPI_R        (*((volatile uint32_t *)0x400FE610))
N#define SYSCTL_RCGCHIB_R        (*((volatile uint32_t *)0x400FE614))
N#define SYSCTL_RCGCUART_R       (*((volatile uint32_t *)0x400FE618))
N#define SYSCTL_RCGCSSI_R        (*((volatile uint32_t *)0x400FE61C))
N#define SYSCTL_RCGCI2C_R        (*((volatile uint32_t *)0x400FE620))
N#define SYSCTL_RCGCUSB_R        (*((volatile uint32_t *)0x400FE628))
N#define SYSCTL_RCGCEPHY_R       (*((volatile uint32_t *)0x400FE630))
N#define SYSCTL_RCGCCAN_R        (*((volatile uint32_t *)0x400FE634))
N#define SYSCTL_RCGCADC_R        (*((volatile uint32_t *)0x400FE638))
N#define SYSCTL_RCGCACMP_R       (*((volatile uint32_t *)0x400FE63C))
N#define SYSCTL_RCGCPWM_R        (*((volatile uint32_t *)0x400FE640))
N#define SYSCTL_RCGCQEI_R        (*((volatile uint32_t *)0x400FE644))
N#define SYSCTL_RCGCEEPROM_R     (*((volatile uint32_t *)0x400FE658))
N#define SYSCTL_RCGCCCM_R        (*((volatile uint32_t *)0x400FE674))
N#define SYSCTL_RCGCEMAC_R       (*((volatile uint32_t *)0x400FE69C))
N#define SYSCTL_SCGCWD_R         (*((volatile uint32_t *)0x400FE700))
N#define SYSCTL_SCGCTIMER_R      (*((volatile uint32_t *)0x400FE704))
N#define SYSCTL_SCGCGPIO_R       (*((volatile uint32_t *)0x400FE708))
N#define SYSCTL_SCGCEPI_R        (*((volatile uint32_t *)0x400FE710))
N#define SYSCTL_SCGCHIB_R        (*((volatile uint32_t *)0x400FE714))
N#define SYSCTL_SCGCUART_R       (*((volatile uint32_t *)0x400FE718))
N#define SYSCTL_SCGCSSI_R        (*((volatile uint32_t *)0x400FE71C))
N#define SYSCTL_SCGCI2C_R        (*((volatile uint32_t *)0x400FE720))
N#define SYSCTL_SCGCUSB_R        (*((volatile uint32_t *)0x400FE728))
N#define SYSCTL_SCGCEPHY_R       (*((volatile uint32_t *)0x400FE730))
N#define SYSCTL_SCGCCAN_R        (*((volatile uint32_t *)0x400FE734))
N#define SYSCTL_SCGCADC_R        (*((volatile uint32_t *)0x400FE738))
N#define SYSCTL_SCGCACMP_R       (*((volatile uint32_t *)0x400FE73C))
N#define SYSCTL_SCGCPWM_R        (*((volatile uint32_t *)0x400FE740))
N#define SYSCTL_SCGCQEI_R        (*((volatile uint32_t *)0x400FE744))
N#define SYSCTL_SCGCEEPROM_R     (*((volatile uint32_t *)0x400FE758))
N#define SYSCTL_SCGCCCM_R        (*((volatile uint32_t *)0x400FE774))
N#define SYSCTL_SCGCEMAC_R       (*((volatile uint32_t *)0x400FE79C))
N#define SYSCTL_DCGCWD_R         (*((volatile uint32_t *)0x400FE800))
N#define SYSCTL_DCGCTIMER_R      (*((volatile uint32_t *)0x400FE804))
N#define SYSCTL_DCGCGPIO_R       (*((volatile uint32_t *)0x400FE808))
N#define SYSCTL_DCGCEPI_R        (*((volatile uint32_t *)0x400FE810))
N#define SYSCTL_DCGCHIB_R        (*((volatile uint32_t *)0x400FE814))
N#define SYSCTL_DCGCUART_R       (*((volatile uint32_t *)0x400FE818))
N#define SYSCTL_DCGCSSI_R        (*((volatile uint32_t *)0x400FE81C))
N#define SYSCTL_DCGCI2C_R        (*((volatile uint32_t *)0x400FE820))
N#define SYSCTL_DCGCUSB_R        (*((volatile uint32_t *)0x400FE828))
N#define SYSCTL_DCGCEPHY_R       (*((volatile uint32_t *)0x400FE830))
N#define SYSCTL_DCGCCAN_R        (*((volatile uint32_t *)0x400FE834))
N#define SYSCTL_DCGCADC_R        (*((volatile uint32_t *)0x400FE838))
N#define SYSCTL_DCGCACMP_R       (*((volatile uint32_t *)0x400FE83C))
N#define SYSCTL_DCGCPWM_R        (*((volatile uint32_t *)0x400FE840))
N#define SYSCTL_DCGCQEI_R        (*((volatile uint32_t *)0x400FE844))
N#define SYSCTL_DCGCEEPROM_R     (*((volatile uint32_t *)0x400FE858))
N#define SYSCTL_DCGCCCM_R        (*((volatile uint32_t *)0x400FE874))
N#define SYSCTL_DCGCEMAC_R       (*((volatile uint32_t *)0x400FE89C))
N#define SYSCTL_PCWD_R           (*((volatile uint32_t *)0x400FE900))
N#define SYSCTL_PCTIMER_R        (*((volatile uint32_t *)0x400FE904))
N#define SYSCTL_PCGPIO_R         (*((volatile uint32_t *)0x400FE908))
N#define SYSCTL_PCDMA_R          (*((volatile uint32_t *)0x400FE90C))
N#define SYSCTL_PCEPI_R          (*((volatile uint32_t *)0x400FE910))
N#define SYSCTL_PCHIB_R          (*((volatile uint32_t *)0x400FE914))
N#define SYSCTL_PCUART_R         (*((volatile uint32_t *)0x400FE918))
N#define SYSCTL_PCSSI_R          (*((volatile uint32_t *)0x400FE91C))
N#define SYSCTL_PCI2C_R          (*((volatile uint32_t *)0x400FE920))
N#define SYSCTL_PCUSB_R          (*((volatile uint32_t *)0x400FE928))
N#define SYSCTL_PCEPHY_R         (*((volatile uint32_t *)0x400FE930))
N#define SYSCTL_PCCAN_R          (*((volatile uint32_t *)0x400FE934))
N#define SYSCTL_PCADC_R          (*((volatile uint32_t *)0x400FE938))
N#define SYSCTL_PCACMP_R         (*((volatile uint32_t *)0x400FE93C))
N#define SYSCTL_PCPWM_R          (*((volatile uint32_t *)0x400FE940))
N#define SYSCTL_PCQEI_R          (*((volatile uint32_t *)0x400FE944))
N#define SYSCTL_PCEEPROM_R       (*((volatile uint32_t *)0x400FE958))
N#define SYSCTL_PCCCM_R          (*((volatile uint32_t *)0x400FE974))
N#define SYSCTL_PCEMAC_R         (*((volatile uint32_t *)0x400FE99C))
N#define SYSCTL_PRWD_R           (*((volatile uint32_t *)0x400FEA00))
N#define SYSCTL_PRTIMER_R        (*((volatile uint32_t *)0x400FEA04))
N#define SYSCTL_PRGPIO_R         (*((volatile uint32_t *)0x400FEA08))
N#define SYSCTL_PRDMA_R          (*((volatile uint32_t *)0x400FEA0C))
N#define SYSCTL_PREPI_R          (*((volatile uint32_t *)0x400FEA10))
N#define SYSCTL_PRHIB_R          (*((volatile uint32_t *)0x400FEA14))
N#define SYSCTL_PRUART_R         (*((volatile uint32_t *)0x400FEA18))
N#define SYSCTL_PRSSI_R          (*((volatile uint32_t *)0x400FEA1C))
N#define SYSCTL_PRI2C_R          (*((volatile uint32_t *)0x400FEA20))
N#define SYSCTL_PRUSB_R          (*((volatile uint32_t *)0x400FEA28))
N#define SYSCTL_PREPHY_R         (*((volatile uint32_t *)0x400FEA30))
N#define SYSCTL_PRCAN_R          (*((volatile uint32_t *)0x400FEA34))
N#define SYSCTL_PRADC_R          (*((volatile uint32_t *)0x400FEA38))
N#define SYSCTL_PRACMP_R         (*((volatile uint32_t *)0x400FEA3C))
N#define SYSCTL_PRPWM_R          (*((volatile uint32_t *)0x400FEA40))
N#define SYSCTL_PRQEI_R          (*((volatile uint32_t *)0x400FEA44))
N#define SYSCTL_PREEPROM_R       (*((volatile uint32_t *)0x400FEA58))
N#define SYSCTL_PRCCM_R          (*((volatile uint32_t *)0x400FEA74))
N#define SYSCTL_PREMAC_R         (*((volatile uint32_t *)0x400FEA9C))
N#define SYSCTL_CCMCGREQ_R       (*((volatile uint32_t *)0x44030204))
N
N//*****************************************************************************
N//
N// Micro Direct Memory Access registers (UDMA)
N//
N//*****************************************************************************
N#define UDMA_STAT_R             (*((volatile uint32_t *)0x400FF000))
N#define UDMA_CFG_R              (*((volatile uint32_t *)0x400FF004))
N#define UDMA_CTLBASE_R          (*((volatile uint32_t *)0x400FF008))
N#define UDMA_ALTBASE_R          (*((volatile uint32_t *)0x400FF00C))
N#define UDMA_WAITSTAT_R         (*((volatile uint32_t *)0x400FF010))
N#define UDMA_SWREQ_R            (*((volatile uint32_t *)0x400FF014))
N#define UDMA_USEBURSTSET_R      (*((volatile uint32_t *)0x400FF018))
N#define UDMA_USEBURSTCLR_R      (*((volatile uint32_t *)0x400FF01C))
N#define UDMA_REQMASKSET_R       (*((volatile uint32_t *)0x400FF020))
N#define UDMA_REQMASKCLR_R       (*((volatile uint32_t *)0x400FF024))
N#define UDMA_ENASET_R           (*((volatile uint32_t *)0x400FF028))
N#define UDMA_ENACLR_R           (*((volatile uint32_t *)0x400FF02C))
N#define UDMA_ALTSET_R           (*((volatile uint32_t *)0x400FF030))
N#define UDMA_ALTCLR_R           (*((volatile uint32_t *)0x400FF034))
N#define UDMA_PRIOSET_R          (*((volatile uint32_t *)0x400FF038))
N#define UDMA_PRIOCLR_R          (*((volatile uint32_t *)0x400FF03C))
N#define UDMA_ERRCLR_R           (*((volatile uint32_t *)0x400FF04C))
N#define UDMA_CHASGN_R           (*((volatile uint32_t *)0x400FF500))
N#define UDMA_CHMAP0_R           (*((volatile uint32_t *)0x400FF510))
N#define UDMA_CHMAP1_R           (*((volatile uint32_t *)0x400FF514))
N#define UDMA_CHMAP2_R           (*((volatile uint32_t *)0x400FF518))
N#define UDMA_CHMAP3_R           (*((volatile uint32_t *)0x400FF51C))
N
N//*****************************************************************************
N//
N// Micro Direct Memory Access (uDMA) offsets (UDMA)
N//
N//*****************************************************************************
N#define UDMA_SRCENDP            0x00000000  // DMA Channel Source Address End
N                                            // Pointer
N#define UDMA_DSTENDP            0x00000004  // DMA Channel Destination Address
N                                            // End Pointer
N#define UDMA_CHCTL              0x00000008  // DMA Channel Control Word
N
N//*****************************************************************************
N//
N// EC registers (CCM0)
N//
N//*****************************************************************************
N#define CCM0_CRCCTRL_R          (*((volatile uint32_t *)0x44030400))
N#define CCM0_CRCSEED_R          (*((volatile uint32_t *)0x44030410))
N#define CCM0_CRCDIN_R           (*((volatile uint32_t *)0x44030414))
N#define CCM0_CRCRSLTPP_R        (*((volatile uint32_t *)0x44030418))
N
N//*****************************************************************************
N//
N// SHA/MD5 registers (SHAMD5)
N//
N//*****************************************************************************
N#define SHAMD5_ODIGEST_A_R      (*((volatile uint32_t *)0x44034000))
N#define SHAMD5_ODIGEST_B_R      (*((volatile uint32_t *)0x44034004))
N#define SHAMD5_ODIGEST_C_R      (*((volatile uint32_t *)0x44034008))
N#define SHAMD5_ODIGEST_D_R      (*((volatile uint32_t *)0x4403400C))
N#define SHAMD5_ODIGEST_E_R      (*((volatile uint32_t *)0x44034010))
N#define SHAMD5_ODIGEST_F_R      (*((volatile uint32_t *)0x44034014))
N#define SHAMD5_ODIGEST_G_R      (*((volatile uint32_t *)0x44034018))
N#define SHAMD5_ODIGEST_H_R      (*((volatile uint32_t *)0x4403401C))
N#define SHAMD5_IDIGEST_A_R      (*((volatile uint32_t *)0x44034020))
N#define SHAMD5_IDIGEST_B_R      (*((volatile uint32_t *)0x44034024))
N#define SHAMD5_IDIGEST_C_R      (*((volatile uint32_t *)0x44034028))
N#define SHAMD5_IDIGEST_D_R      (*((volatile uint32_t *)0x4403402C))
N#define SHAMD5_IDIGEST_E_R      (*((volatile uint32_t *)0x44034030))
N#define SHAMD5_IDIGEST_F_R      (*((volatile uint32_t *)0x44034034))
N#define SHAMD5_IDIGEST_G_R      (*((volatile uint32_t *)0x44034038))
N#define SHAMD5_IDIGEST_H_R      (*((volatile uint32_t *)0x4403403C))
N#define SHAMD5_DIGEST_COUNT_R   (*((volatile uint32_t *)0x44034040))
N#define SHAMD5_MODE_R           (*((volatile uint32_t *)0x44034044))
N#define SHAMD5_LENGTH_R         (*((volatile uint32_t *)0x44034048))
N#define SHAMD5_DATA_0_IN_R      (*((volatile uint32_t *)0x44034080))
N#define SHAMD5_DATA_1_IN_R      (*((volatile uint32_t *)0x44034084))
N#define SHAMD5_DATA_2_IN_R      (*((volatile uint32_t *)0x44034088))
N#define SHAMD5_DATA_3_IN_R      (*((volatile uint32_t *)0x4403408C))
N#define SHAMD5_DATA_4_IN_R      (*((volatile uint32_t *)0x44034090))
N#define SHAMD5_DATA_5_IN_R      (*((volatile uint32_t *)0x44034094))
N#define SHAMD5_DATA_6_IN_R      (*((volatile uint32_t *)0x44034098))
N#define SHAMD5_DATA_7_IN_R      (*((volatile uint32_t *)0x4403409C))
N#define SHAMD5_DATA_8_IN_R      (*((volatile uint32_t *)0x440340A0))
N#define SHAMD5_DATA_9_IN_R      (*((volatile uint32_t *)0x440340A4))
N#define SHAMD5_DATA_10_IN_R     (*((volatile uint32_t *)0x440340A8))
N#define SHAMD5_DATA_11_IN_R     (*((volatile uint32_t *)0x440340AC))
N#define SHAMD5_DATA_12_IN_R     (*((volatile uint32_t *)0x440340B0))
N#define SHAMD5_DATA_13_IN_R     (*((volatile uint32_t *)0x440340B4))
N#define SHAMD5_DATA_14_IN_R     (*((volatile uint32_t *)0x440340B8))
N#define SHAMD5_DATA_15_IN_R     (*((volatile uint32_t *)0x440340BC))
N#define SHAMD5_REVISION_R       (*((volatile uint32_t *)0x44034100))
N#define SHAMD5_SYSCONFIG_R      (*((volatile uint32_t *)0x44034110))
N#define SHAMD5_SYSSTATUS_R      (*((volatile uint32_t *)0x44034114))
N#define SHAMD5_IRQSTATUS_R      (*((volatile uint32_t *)0x44034118))
N#define SHAMD5_IRQENABLE_R      (*((volatile uint32_t *)0x4403411C))
N#define SHAMD5_DMAIM_R          (*((volatile uint32_t *)0x144030010))
N#define SHAMD5_DMARIS_R         (*((volatile uint32_t *)0x144030014))
N#define SHAMD5_DMAMIS_R         (*((volatile uint32_t *)0x144030018))
N#define SHAMD5_DMAIC_R          (*((volatile uint32_t *)0x14403001C))
N
N//*****************************************************************************
N//
N// AES registers (AES)
N//
N//*****************************************************************************
N#define AES_KEY2_6_R            (*((volatile uint32_t *)0x44036000))
N#define AES_KEY2_7_R            (*((volatile uint32_t *)0x44036004))
N#define AES_KEY2_4_R            (*((volatile uint32_t *)0x44036008))
N#define AES_KEY2_5_R            (*((volatile uint32_t *)0x4403600C))
N#define AES_KEY2_2_R            (*((volatile uint32_t *)0x44036010))
N#define AES_KEY2_3_R            (*((volatile uint32_t *)0x44036014))
N#define AES_KEY2_0_R            (*((volatile uint32_t *)0x44036018))
N#define AES_KEY2_1_R            (*((volatile uint32_t *)0x4403601C))
N#define AES_KEY1_6_R            (*((volatile uint32_t *)0x44036020))
N#define AES_KEY1_7_R            (*((volatile uint32_t *)0x44036024))
N#define AES_KEY1_4_R            (*((volatile uint32_t *)0x44036028))
N#define AES_KEY1_5_R            (*((volatile uint32_t *)0x4403602C))
N#define AES_KEY1_2_R            (*((volatile uint32_t *)0x44036030))
N#define AES_KEY1_3_R            (*((volatile uint32_t *)0x44036034))
N#define AES_KEY1_0_R            (*((volatile uint32_t *)0x44036038))
N#define AES_KEY1_1_R            (*((volatile uint32_t *)0x4403603C))
N#define AES_IV_IN_0_R           (*((volatile uint32_t *)0x44036040))
N#define AES_IV_IN_1_R           (*((volatile uint32_t *)0x44036044))
N#define AES_IV_IN_2_R           (*((volatile uint32_t *)0x44036048))
N#define AES_IV_IN_3_R           (*((volatile uint32_t *)0x4403604C))
N#define AES_CTRL_R              (*((volatile uint32_t *)0x44036050))
N#define AES_C_LENGTH_0_R        (*((volatile uint32_t *)0x44036054))
N#define AES_C_LENGTH_1_R        (*((volatile uint32_t *)0x44036058))
N#define AES_AUTH_LENGTH_R       (*((volatile uint32_t *)0x4403605C))
N#define AES_DATA_IN_0_R         (*((volatile uint32_t *)0x44036060))
N#define AES_DATA_IN_1_R         (*((volatile uint32_t *)0x44036064))
N#define AES_DATA_IN_2_R         (*((volatile uint32_t *)0x44036068))
N#define AES_DATA_IN_3_R         (*((volatile uint32_t *)0x4403606C))
N#define AES_TAG_OUT_0_R         (*((volatile uint32_t *)0x44036070))
N#define AES_TAG_OUT_1_R         (*((volatile uint32_t *)0x44036074))
N#define AES_TAG_OUT_2_R         (*((volatile uint32_t *)0x44036078))
N#define AES_TAG_OUT_3_R         (*((volatile uint32_t *)0x4403607C))
N#define AES_REVISION_R          (*((volatile uint32_t *)0x44036080))
N#define AES_SYSCONFIG_R         (*((volatile uint32_t *)0x44036084))
N#define AES_SYSSTATUS_R         (*((volatile uint32_t *)0x44036088))
N#define AES_IRQSTATUS_R         (*((volatile uint32_t *)0x4403608C))
N#define AES_IRQENABLE_R         (*((volatile uint32_t *)0x44036090))
N#define AES_DIRTYBITS_R         (*((volatile uint32_t *)0x44036094))
N#define AES_DMAIM_R             (*((volatile uint32_t *)0x144030020))
N#define AES_DMARIS_R            (*((volatile uint32_t *)0x144030024))
N#define AES_DMAMIS_R            (*((volatile uint32_t *)0x144030028))
N#define AES_DMAIC_R             (*((volatile uint32_t *)0x14403002C))
N
N//*****************************************************************************
N//
N// DES registers (DES)
N//
N//*****************************************************************************
N#define DES_KEY3_L_R            (*((volatile uint32_t *)0x44038000))
N#define DES_KEY3_H_R            (*((volatile uint32_t *)0x44038004))
N#define DES_KEY2_L_R            (*((volatile uint32_t *)0x44038008))
N#define DES_KEY2_H_R            (*((volatile uint32_t *)0x4403800C))
N#define DES_KEY1_L_R            (*((volatile uint32_t *)0x44038010))
N#define DES_KEY1_H_R            (*((volatile uint32_t *)0x44038014))
N#define DES_IV_L_R              (*((volatile uint32_t *)0x44038018))
N#define DES_IV_H_R              (*((volatile uint32_t *)0x4403801C))
N#define DES_CTRL_R              (*((volatile uint32_t *)0x44038020))
N#define DES_LENGTH_R            (*((volatile uint32_t *)0x44038024))
N#define DES_DATA_L_R            (*((volatile uint32_t *)0x44038028))
N#define DES_DATA_H_R            (*((volatile uint32_t *)0x4403802C))
N#define DES_REVISION_R          (*((volatile uint32_t *)0x44038030))
N#define DES_SYSCONFIG_R         (*((volatile uint32_t *)0x44038034))
N#define DES_SYSSTATUS_R         (*((volatile uint32_t *)0x44038038))
N#define DES_IRQSTATUS_R         (*((volatile uint32_t *)0x4403803C))
N#define DES_IRQENABLE_R         (*((volatile uint32_t *)0x44038040))
N#define DES_DIRTYBITS_R         (*((volatile uint32_t *)0x44038044))
N#define DES_DMAIM_R             (*((volatile uint32_t *)0x144030030))
N#define DES_DMARIS_R            (*((volatile uint32_t *)0x144030034))
N#define DES_DMAMIS_R            (*((volatile uint32_t *)0x144030038))
N#define DES_DMAIC_R             (*((volatile uint32_t *)0x14403003C))
N
N//*****************************************************************************
N//
N// NVIC registers (NVIC)
N//
N//*****************************************************************************
N#define NVIC_ACTLR_R            (*((volatile uint32_t *)0xE000E008))
N#define NVIC_ST_CTRL_R          (*((volatile uint32_t *)0xE000E010))
N#define NVIC_ST_RELOAD_R        (*((volatile uint32_t *)0xE000E014))
N#define NVIC_ST_CURRENT_R       (*((volatile uint32_t *)0xE000E018))
N#define NVIC_EN0_R              (*((volatile uint32_t *)0xE000E100))
N#define NVIC_EN1_R              (*((volatile uint32_t *)0xE000E104))
N#define NVIC_EN2_R              (*((volatile uint32_t *)0xE000E108))
N#define NVIC_EN3_R              (*((volatile uint32_t *)0xE000E10C))
N#define NVIC_DIS0_R             (*((volatile uint32_t *)0xE000E180))
N#define NVIC_DIS1_R             (*((volatile uint32_t *)0xE000E184))
N#define NVIC_DIS2_R             (*((volatile uint32_t *)0xE000E188))
N#define NVIC_DIS3_R             (*((volatile uint32_t *)0xE000E18C))
N#define NVIC_PEND0_R            (*((volatile uint32_t *)0xE000E200))
N#define NVIC_PEND1_R            (*((volatile uint32_t *)0xE000E204))
N#define NVIC_PEND2_R            (*((volatile uint32_t *)0xE000E208))
N#define NVIC_PEND3_R            (*((volatile uint32_t *)0xE000E20C))
N#define NVIC_UNPEND0_R          (*((volatile uint32_t *)0xE000E280))
N#define NVIC_UNPEND1_R          (*((volatile uint32_t *)0xE000E284))
N#define NVIC_UNPEND2_R          (*((volatile uint32_t *)0xE000E288))
N#define NVIC_UNPEND3_R          (*((volatile uint32_t *)0xE000E28C))
N#define NVIC_ACTIVE0_R          (*((volatile uint32_t *)0xE000E300))
N#define NVIC_ACTIVE1_R          (*((volatile uint32_t *)0xE000E304))
N#define NVIC_ACTIVE2_R          (*((volatile uint32_t *)0xE000E308))
N#define NVIC_ACTIVE3_R          (*((volatile uint32_t *)0xE000E30C))
N#define NVIC_PRI0_R             (*((volatile uint32_t *)0xE000E400))
N#define NVIC_PRI1_R             (*((volatile uint32_t *)0xE000E404))
N#define NVIC_PRI2_R             (*((volatile uint32_t *)0xE000E408))
N#define NVIC_PRI3_R             (*((volatile uint32_t *)0xE000E40C))
N#define NVIC_PRI4_R             (*((volatile uint32_t *)0xE000E410))
N#define NVIC_PRI5_R             (*((volatile uint32_t *)0xE000E414))
N#define NVIC_PRI6_R             (*((volatile uint32_t *)0xE000E418))
N#define NVIC_PRI7_R             (*((volatile uint32_t *)0xE000E41C))
N#define NVIC_PRI8_R             (*((volatile uint32_t *)0xE000E420))
N#define NVIC_PRI9_R             (*((volatile uint32_t *)0xE000E424))
N#define NVIC_PRI10_R            (*((volatile uint32_t *)0xE000E428))
N#define NVIC_PRI11_R            (*((volatile uint32_t *)0xE000E42C))
N#define NVIC_PRI12_R            (*((volatile uint32_t *)0xE000E430))
N#define NVIC_PRI13_R            (*((volatile uint32_t *)0xE000E434))
N#define NVIC_PRI14_R            (*((volatile uint32_t *)0xE000E438))
N#define NVIC_PRI15_R            (*((volatile uint32_t *)0xE000E43C))
N#define NVIC_PRI16_R            (*((volatile uint32_t *)0xE000E440))
N#define NVIC_PRI17_R            (*((volatile uint32_t *)0xE000E444))
N#define NVIC_PRI18_R            (*((volatile uint32_t *)0xE000E448))
N#define NVIC_PRI19_R            (*((volatile uint32_t *)0xE000E44C))
N#define NVIC_PRI20_R            (*((volatile uint32_t *)0xE000E450))
N#define NVIC_PRI21_R            (*((volatile uint32_t *)0xE000E454))
N#define NVIC_PRI22_R            (*((volatile uint32_t *)0xE000E458))
N#define NVIC_PRI23_R            (*((volatile uint32_t *)0xE000E45C))
N#define NVIC_PRI24_R            (*((volatile uint32_t *)0xE000E460))
N#define NVIC_PRI25_R            (*((volatile uint32_t *)0xE000E464))
N#define NVIC_PRI26_R            (*((volatile uint32_t *)0xE000E468))
N#define NVIC_PRI27_R            (*((volatile uint32_t *)0xE000E46C))
N#define NVIC_PRI28_R            (*((volatile uint32_t *)0xE000E470))
N#define NVIC_CPUID_R            (*((volatile uint32_t *)0xE000ED00))
N#define NVIC_INT_CTRL_R         (*((volatile uint32_t *)0xE000ED04))
N#define NVIC_VTABLE_R           (*((volatile uint32_t *)0xE000ED08))
N#define NVIC_APINT_R            (*((volatile uint32_t *)0xE000ED0C))
N#define NVIC_SYS_CTRL_R         (*((volatile uint32_t *)0xE000ED10))
N#define NVIC_CFG_CTRL_R         (*((volatile uint32_t *)0xE000ED14))
N#define NVIC_SYS_PRI1_R         (*((volatile uint32_t *)0xE000ED18))
N#define NVIC_SYS_PRI2_R         (*((volatile uint32_t *)0xE000ED1C))
N#define NVIC_SYS_PRI3_R         (*((volatile uint32_t *)0xE000ED20))
N#define NVIC_SYS_HND_CTRL_R     (*((volatile uint32_t *)0xE000ED24))
N#define NVIC_FAULT_STAT_R       (*((volatile uint32_t *)0xE000ED28))
N#define NVIC_HFAULT_STAT_R      (*((volatile uint32_t *)0xE000ED2C))
N#define NVIC_DEBUG_STAT_R       (*((volatile uint32_t *)0xE000ED30))
N#define NVIC_MM_ADDR_R          (*((volatile uint32_t *)0xE000ED34))
N#define NVIC_FAULT_ADDR_R       (*((volatile uint32_t *)0xE000ED38))
N#define NVIC_CPAC_R             (*((volatile uint32_t *)0xE000ED88))
N#define NVIC_MPU_TYPE_R         (*((volatile uint32_t *)0xE000ED90))
N#define NVIC_MPU_CTRL_R         (*((volatile uint32_t *)0xE000ED94))
N#define NVIC_MPU_NUMBER_R       (*((volatile uint32_t *)0xE000ED98))
N#define NVIC_MPU_BASE_R         (*((volatile uint32_t *)0xE000ED9C))
N#define NVIC_MPU_ATTR_R         (*((volatile uint32_t *)0xE000EDA0))
N#define NVIC_MPU_BASE1_R        (*((volatile uint32_t *)0xE000EDA4))
N#define NVIC_MPU_ATTR1_R        (*((volatile uint32_t *)0xE000EDA8))
N#define NVIC_MPU_BASE2_R        (*((volatile uint32_t *)0xE000EDAC))
N#define NVIC_MPU_ATTR2_R        (*((volatile uint32_t *)0xE000EDB0))
N#define NVIC_MPU_BASE3_R        (*((volatile uint32_t *)0xE000EDB4))
N#define NVIC_MPU_ATTR3_R        (*((volatile uint32_t *)0xE000EDB8))
N#define NVIC_DBG_CTRL_R         (*((volatile uint32_t *)0xE000EDF0))
N#define NVIC_DBG_XFER_R         (*((volatile uint32_t *)0xE000EDF4))
N#define NVIC_DBG_DATA_R         (*((volatile uint32_t *)0xE000EDF8))
N#define NVIC_DBG_INT_R          (*((volatile uint32_t *)0xE000EDFC))
N#define NVIC_SW_TRIG_R          (*((volatile uint32_t *)0xE000EF00))
N#define NVIC_FPCC_R             (*((volatile uint32_t *)0xE000EF34))
N#define NVIC_FPCA_R             (*((volatile uint32_t *)0xE000EF38))
N#define NVIC_FPDSC_R            (*((volatile uint32_t *)0xE000EF3C))
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the WDT_O_LOAD register.
N//
N//*****************************************************************************
N#define WDT_LOAD_M              0xFFFFFFFF  // Watchdog Load Value
N#define WDT_LOAD_S              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the WDT_O_VALUE register.
N//
N//*****************************************************************************
N#define WDT_VALUE_M             0xFFFFFFFF  // Watchdog Value
N#define WDT_VALUE_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the WDT_O_CTL register.
N//
N//*****************************************************************************
N#define WDT_CTL_WRC             0x80000000  // Write Complete
N#define WDT_CTL_INTTYPE         0x00000004  // Watchdog Interrupt Type
N#define WDT_CTL_RESEN           0x00000002  // Watchdog Reset Enable
N#define WDT_CTL_INTEN           0x00000001  // Watchdog Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the WDT_O_ICR register.
N//
N//*****************************************************************************
N#define WDT_ICR_M               0xFFFFFFFF  // Watchdog Interrupt Clear
N#define WDT_ICR_S               0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the WDT_O_RIS register.
N//
N//*****************************************************************************
N#define WDT_RIS_WDTRIS          0x00000001  // Watchdog Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the WDT_O_MIS register.
N//
N//*****************************************************************************
N#define WDT_MIS_WDTMIS          0x00000001  // Watchdog Masked Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the WDT_O_TEST register.
N//
N//*****************************************************************************
N#define WDT_TEST_STALL          0x00000100  // Watchdog Stall Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the WDT_O_LOCK register.
N//
N//*****************************************************************************
N#define WDT_LOCK_M              0xFFFFFFFF  // Watchdog Lock
N#define WDT_LOCK_UNLOCKED       0x00000000  // Unlocked
N#define WDT_LOCK_LOCKED         0x00000001  // Locked
N#define WDT_LOCK_UNLOCK         0x1ACCE551  // Unlocks the watchdog timer
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_CR0 register.
N//
N//*****************************************************************************
N#define SSI_CR0_SCR_M           0x0000FF00  // SSI Serial Clock Rate
N#define SSI_CR0_SPH             0x00000080  // SSI Serial Clock Phase
N#define SSI_CR0_SPO             0x00000040  // SSI Serial Clock Polarity
N#define SSI_CR0_FRF_M           0x00000030  // SSI Frame Format Select
N#define SSI_CR0_FRF_MOTO        0x00000000  // Freescale SPI Frame Format
N#define SSI_CR0_FRF_TI          0x00000010  // Texas Instruments Synchronous
N                                            // Serial Frame Format
N#define SSI_CR0_DSS_M           0x0000000F  // SSI Data Size Select
N#define SSI_CR0_DSS_4           0x00000003  // 4-bit data
N#define SSI_CR0_DSS_5           0x00000004  // 5-bit data
N#define SSI_CR0_DSS_6           0x00000005  // 6-bit data
N#define SSI_CR0_DSS_7           0x00000006  // 7-bit data
N#define SSI_CR0_DSS_8           0x00000007  // 8-bit data
N#define SSI_CR0_DSS_9           0x00000008  // 9-bit data
N#define SSI_CR0_DSS_10          0x00000009  // 10-bit data
N#define SSI_CR0_DSS_11          0x0000000A  // 11-bit data
N#define SSI_CR0_DSS_12          0x0000000B  // 12-bit data
N#define SSI_CR0_DSS_13          0x0000000C  // 13-bit data
N#define SSI_CR0_DSS_14          0x0000000D  // 14-bit data
N#define SSI_CR0_DSS_15          0x0000000E  // 15-bit data
N#define SSI_CR0_DSS_16          0x0000000F  // 16-bit data
N#define SSI_CR0_SCR_S           8
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_CR1 register.
N//
N//*****************************************************************************
N#define SSI_CR1_EOM             0x00000800  // Stop Frame (End of Message)
N#define SSI_CR1_FSSHLDFRM       0x00000400  // FSS Hold Frame
N#define SSI_CR1_HSCLKEN         0x00000200  // High Speed Clock Enable
N#define SSI_CR1_DIR             0x00000100  // SSI Direction of Operation
N#define SSI_CR1_MODE_M          0x000000C0  // SSI Mode
N#define SSI_CR1_MODE_LEGACY     0x00000000  // Legacy SSI mode
N#define SSI_CR1_MODE_BI         0x00000040  // Bi-SSI mode
N#define SSI_CR1_MODE_QUAD       0x00000080  // Quad-SSI Mode
N#define SSI_CR1_MODE_ADVANCED   0x000000C0  // Advanced SSI Mode
N#define SSI_CR1_EOT             0x00000010  // End of Transmission
N#define SSI_CR1_SOD             0x00000008  // SSI Slave Mode Output Disable
N#define SSI_CR1_MS              0x00000004  // SSI Master/Slave Select
N#define SSI_CR1_SSE             0x00000002  // SSI Synchronous Serial Port
N                                            // Enable
N#define SSI_CR1_LBM             0x00000001  // SSI Loopback Mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_DR register.
N//
N//*****************************************************************************
N#define SSI_DR_DATA_M           0x0000FFFF  // SSI Receive/Transmit Data
N#define SSI_DR_DATA_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_SR register.
N//
N//*****************************************************************************
N#define SSI_SR_BSY              0x00000010  // SSI Busy Bit
N#define SSI_SR_RFF              0x00000008  // SSI Receive FIFO Full
N#define SSI_SR_RNE              0x00000004  // SSI Receive FIFO Not Empty
N#define SSI_SR_TNF              0x00000002  // SSI Transmit FIFO Not Full
N#define SSI_SR_TFE              0x00000001  // SSI Transmit FIFO Empty
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_CPSR register.
N//
N//*****************************************************************************
N#define SSI_CPSR_CPSDVSR_M      0x000000FF  // SSI Clock Prescale Divisor
N#define SSI_CPSR_CPSDVSR_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_IM register.
N//
N//*****************************************************************************
N#define SSI_IM_EOTIM            0x00000040  // End of Transmit Interrupt Mask
N#define SSI_IM_DMATXIM          0x00000020  // SSI Transmit DMA Interrupt Mask
N#define SSI_IM_DMARXIM          0x00000010  // SSI Receive DMA Interrupt Mask
N#define SSI_IM_TXIM             0x00000008  // SSI Transmit FIFO Interrupt Mask
N#define SSI_IM_RXIM             0x00000004  // SSI Receive FIFO Interrupt Mask
N#define SSI_IM_RTIM             0x00000002  // SSI Receive Time-Out Interrupt
N                                            // Mask
N#define SSI_IM_RORIM            0x00000001  // SSI Receive Overrun Interrupt
N                                            // Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_RIS register.
N//
N//*****************************************************************************
N#define SSI_RIS_EOTRIS          0x00000040  // End of Transmit Raw Interrupt
N                                            // Status
N#define SSI_RIS_DMATXRIS        0x00000020  // SSI Transmit DMA Raw Interrupt
N                                            // Status
N#define SSI_RIS_DMARXRIS        0x00000010  // SSI Receive DMA Raw Interrupt
N                                            // Status
N#define SSI_RIS_TXRIS           0x00000008  // SSI Transmit FIFO Raw Interrupt
N                                            // Status
N#define SSI_RIS_RXRIS           0x00000004  // SSI Receive FIFO Raw Interrupt
N                                            // Status
N#define SSI_RIS_RTRIS           0x00000002  // SSI Receive Time-Out Raw
N                                            // Interrupt Status
N#define SSI_RIS_RORRIS          0x00000001  // SSI Receive Overrun Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_MIS register.
N//
N//*****************************************************************************
N#define SSI_MIS_EOTMIS          0x00000040  // End of Transmit Masked Interrupt
N                                            // Status
N#define SSI_MIS_DMATXMIS        0x00000020  // SSI Transmit DMA Masked
N                                            // Interrupt Status
N#define SSI_MIS_DMARXMIS        0x00000010  // SSI Receive DMA Masked Interrupt
N                                            // Status
N#define SSI_MIS_TXMIS           0x00000008  // SSI Transmit FIFO Masked
N                                            // Interrupt Status
N#define SSI_MIS_RXMIS           0x00000004  // SSI Receive FIFO Masked
N                                            // Interrupt Status
N#define SSI_MIS_RTMIS           0x00000002  // SSI Receive Time-Out Masked
N                                            // Interrupt Status
N#define SSI_MIS_RORMIS          0x00000001  // SSI Receive Overrun Masked
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_ICR register.
N//
N//*****************************************************************************
N#define SSI_ICR_EOTIC           0x00000040  // End of Transmit Interrupt Clear
N#define SSI_ICR_DMATXIC         0x00000020  // SSI Transmit DMA Interrupt Clear
N#define SSI_ICR_DMARXIC         0x00000010  // SSI Receive DMA Interrupt Clear
N#define SSI_ICR_RTIC            0x00000002  // SSI Receive Time-Out Interrupt
N                                            // Clear
N#define SSI_ICR_RORIC           0x00000001  // SSI Receive Overrun Interrupt
N                                            // Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_DMACTL register.
N//
N//*****************************************************************************
N#define SSI_DMACTL_TXDMAE       0x00000002  // Transmit DMA Enable
N#define SSI_DMACTL_RXDMAE       0x00000001  // Receive DMA Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_PP register.
N//
N//*****************************************************************************
N#define SSI_PP_FSSHLDFRM        0x00000008  // FSS Hold Frame Capability
N#define SSI_PP_MODE_M           0x00000006  // Mode of Operation
N#define SSI_PP_MODE_LEGACY      0x00000000  // Legacy SSI mode
N#define SSI_PP_MODE_ADVBI       0x00000002  // Advanced SSI and Bi-SSI
N#define SSI_PP_MODE_ADVBIQUAD   0x00000004  // Advanced, Bi- and Quad-SSI
N#define SSI_PP_HSCLK            0x00000001  // High Speed Capability
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SSI_O_CC register.
N//
N//*****************************************************************************
N#define SSI_CC_CS_M             0x0000000F  // SSI Baud Clock Source
N#define SSI_CC_CS_SYSPLL        0x00000000  // Either the system clock (if the
N                                            // PLL bypass is in effect) or the
N                                            // PLL output (default)
N#define SSI_CC_CS_PIOSC         0x00000005  // PIOSC
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_DR register.
N//
N//*****************************************************************************
N#define UART_DR_OE              0x00000800  // UART Overrun Error
N#define UART_DR_BE              0x00000400  // UART Break Error
N#define UART_DR_PE              0x00000200  // UART Parity Error
N#define UART_DR_FE              0x00000100  // UART Framing Error
N#define UART_DR_DATA_M          0x000000FF  // Data Transmitted or Received
N#define UART_DR_DATA_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_RSR register.
N//
N//*****************************************************************************
N#define UART_RSR_OE             0x00000008  // UART Overrun Error
N#define UART_RSR_BE             0x00000004  // UART Break Error
N#define UART_RSR_PE             0x00000002  // UART Parity Error
N#define UART_RSR_FE             0x00000001  // UART Framing Error
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_ECR register.
N//
N//*****************************************************************************
N#define UART_ECR_DATA_M         0x000000FF  // Error Clear
N#define UART_ECR_DATA_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_FR register.
N//
N//*****************************************************************************
N#define UART_FR_RI              0x00000100  // Ring Indicator
N#define UART_FR_TXFE            0x00000080  // UART Transmit FIFO Empty
N#define UART_FR_RXFF            0x00000040  // UART Receive FIFO Full
N#define UART_FR_TXFF            0x00000020  // UART Transmit FIFO Full
N#define UART_FR_RXFE            0x00000010  // UART Receive FIFO Empty
N#define UART_FR_BUSY            0x00000008  // UART Busy
N#define UART_FR_DCD             0x00000004  // Data Carrier Detect
N#define UART_FR_DSR             0x00000002  // Data Set Ready
N#define UART_FR_CTS             0x00000001  // Clear To Send
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_ILPR register.
N//
N//*****************************************************************************
N#define UART_ILPR_ILPDVSR_M     0x000000FF  // IrDA Low-Power Divisor
N#define UART_ILPR_ILPDVSR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_IBRD register.
N//
N//*****************************************************************************
N#define UART_IBRD_DIVINT_M      0x0000FFFF  // Integer Baud-Rate Divisor
N#define UART_IBRD_DIVINT_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_FBRD register.
N//
N//*****************************************************************************
N#define UART_FBRD_DIVFRAC_M     0x0000003F  // Fractional Baud-Rate Divisor
N#define UART_FBRD_DIVFRAC_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_LCRH register.
N//
N//*****************************************************************************
N#define UART_LCRH_SPS           0x00000080  // UART Stick Parity Select
N#define UART_LCRH_WLEN_M        0x00000060  // UART Word Length
N#define UART_LCRH_WLEN_5        0x00000000  // 5 bits (default)
N#define UART_LCRH_WLEN_6        0x00000020  // 6 bits
N#define UART_LCRH_WLEN_7        0x00000040  // 7 bits
N#define UART_LCRH_WLEN_8        0x00000060  // 8 bits
N#define UART_LCRH_FEN           0x00000010  // UART Enable FIFOs
N#define UART_LCRH_STP2          0x00000008  // UART Two Stop Bits Select
N#define UART_LCRH_EPS           0x00000004  // UART Even Parity Select
N#define UART_LCRH_PEN           0x00000002  // UART Parity Enable
N#define UART_LCRH_BRK           0x00000001  // UART Send Break
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_CTL register.
N//
N//*****************************************************************************
N#define UART_CTL_CTSEN          0x00008000  // Enable Clear To Send
N#define UART_CTL_RTSEN          0x00004000  // Enable Request to Send
N#define UART_CTL_RTS            0x00000800  // Request to Send
N#define UART_CTL_DTR            0x00000400  // Data Terminal Ready
N#define UART_CTL_RXE            0x00000200  // UART Receive Enable
N#define UART_CTL_TXE            0x00000100  // UART Transmit Enable
N#define UART_CTL_LBE            0x00000080  // UART Loop Back Enable
N#define UART_CTL_HSE            0x00000020  // High-Speed Enable
N#define UART_CTL_EOT            0x00000010  // End of Transmission
N#define UART_CTL_SMART          0x00000008  // ISO 7816 Smart Card Support
N#define UART_CTL_SIRLP          0x00000004  // UART SIR Low-Power Mode
N#define UART_CTL_SIREN          0x00000002  // UART SIR Enable
N#define UART_CTL_UARTEN         0x00000001  // UART Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_IFLS register.
N//
N//*****************************************************************************
N#define UART_IFLS_RX_M          0x00000038  // UART Receive Interrupt FIFO
N                                            // Level Select
N#define UART_IFLS_RX1_8         0x00000000  // RX FIFO >= 1/8 full
N#define UART_IFLS_RX2_8         0x00000008  // RX FIFO >= 1/4 full
N#define UART_IFLS_RX4_8         0x00000010  // RX FIFO >= 1/2 full (default)
N#define UART_IFLS_RX6_8         0x00000018  // RX FIFO >= 3/4 full
N#define UART_IFLS_RX7_8         0x00000020  // RX FIFO >= 7/8 full
N#define UART_IFLS_TX_M          0x00000007  // UART Transmit Interrupt FIFO
N                                            // Level Select
N#define UART_IFLS_TX1_8         0x00000000  // TX FIFO <= 1/8 full
N#define UART_IFLS_TX2_8         0x00000001  // TX FIFO <= 1/4 full
N#define UART_IFLS_TX4_8         0x00000002  // TX FIFO <= 1/2 full (default)
N#define UART_IFLS_TX6_8         0x00000003  // TX FIFO <= 3/4 full
N#define UART_IFLS_TX7_8         0x00000004  // TX FIFO <= 7/8 full
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_IM register.
N//
N//*****************************************************************************
N#define UART_IM_DMATXIM         0x00020000  // Transmit DMA Interrupt Mask
N#define UART_IM_DMARXIM         0x00010000  // Receive DMA Interrupt Mask
N#define UART_IM_9BITIM          0x00001000  // 9-Bit Mode Interrupt Mask
N#define UART_IM_EOTIM           0x00000800  // End of Transmission Interrupt
N                                            // Mask
N#define UART_IM_OEIM            0x00000400  // UART Overrun Error Interrupt
N                                            // Mask
N#define UART_IM_BEIM            0x00000200  // UART Break Error Interrupt Mask
N#define UART_IM_PEIM            0x00000100  // UART Parity Error Interrupt Mask
N#define UART_IM_FEIM            0x00000080  // UART Framing Error Interrupt
N                                            // Mask
N#define UART_IM_RTIM            0x00000040  // UART Receive Time-Out Interrupt
N                                            // Mask
N#define UART_IM_TXIM            0x00000020  // UART Transmit Interrupt Mask
N#define UART_IM_RXIM            0x00000010  // UART Receive Interrupt Mask
N#define UART_IM_DSRMIM          0x00000008  // UART Data Set Ready Modem
N                                            // Interrupt Mask
N#define UART_IM_DCDMIM          0x00000004  // UART Data Carrier Detect Modem
N                                            // Interrupt Mask
N#define UART_IM_CTSMIM          0x00000002  // UART Clear to Send Modem
N                                            // Interrupt Mask
N#define UART_IM_RIMIM           0x00000001  // UART Ring Indicator Modem
N                                            // Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_RIS register.
N//
N//*****************************************************************************
N#define UART_RIS_DMATXRIS       0x00020000  // Transmit DMA Raw Interrupt
N                                            // Status
N#define UART_RIS_DMARXRIS       0x00010000  // Receive DMA Raw Interrupt Status
N#define UART_RIS_9BITRIS        0x00001000  // 9-Bit Mode Raw Interrupt Status
N#define UART_RIS_EOTRIS         0x00000800  // End of Transmission Raw
N                                            // Interrupt Status
N#define UART_RIS_OERIS          0x00000400  // UART Overrun Error Raw Interrupt
N                                            // Status
N#define UART_RIS_BERIS          0x00000200  // UART Break Error Raw Interrupt
N                                            // Status
N#define UART_RIS_PERIS          0x00000100  // UART Parity Error Raw Interrupt
N                                            // Status
N#define UART_RIS_FERIS          0x00000080  // UART Framing Error Raw Interrupt
N                                            // Status
N#define UART_RIS_RTRIS          0x00000040  // UART Receive Time-Out Raw
N                                            // Interrupt Status
N#define UART_RIS_TXRIS          0x00000020  // UART Transmit Raw Interrupt
N                                            // Status
N#define UART_RIS_RXRIS          0x00000010  // UART Receive Raw Interrupt
N                                            // Status
N#define UART_RIS_DSRRIS         0x00000008  // UART Data Set Ready Modem Raw
N                                            // Interrupt Status
N#define UART_RIS_DCDRIS         0x00000004  // UART Data Carrier Detect Modem
N                                            // Raw Interrupt Status
N#define UART_RIS_CTSRIS         0x00000002  // UART Clear to Send Modem Raw
N                                            // Interrupt Status
N#define UART_RIS_RIRIS          0x00000001  // UART Ring Indicator Modem Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_MIS register.
N//
N//*****************************************************************************
N#define UART_MIS_DMATXMIS       0x00020000  // Transmit DMA Masked Interrupt
N                                            // Status
N#define UART_MIS_DMARXMIS       0x00010000  // Receive DMA Masked Interrupt
N                                            // Status
N#define UART_MIS_9BITMIS        0x00001000  // 9-Bit Mode Masked Interrupt
N                                            // Status
N#define UART_MIS_EOTMIS         0x00000800  // End of Transmission Masked
N                                            // Interrupt Status
N#define UART_MIS_OEMIS          0x00000400  // UART Overrun Error Masked
N                                            // Interrupt Status
N#define UART_MIS_BEMIS          0x00000200  // UART Break Error Masked
N                                            // Interrupt Status
N#define UART_MIS_PEMIS          0x00000100  // UART Parity Error Masked
N                                            // Interrupt Status
N#define UART_MIS_FEMIS          0x00000080  // UART Framing Error Masked
N                                            // Interrupt Status
N#define UART_MIS_RTMIS          0x00000040  // UART Receive Time-Out Masked
N                                            // Interrupt Status
N#define UART_MIS_TXMIS          0x00000020  // UART Transmit Masked Interrupt
N                                            // Status
N#define UART_MIS_RXMIS          0x00000010  // UART Receive Masked Interrupt
N                                            // Status
N#define UART_MIS_DSRMIS         0x00000008  // UART Data Set Ready Modem Masked
N                                            // Interrupt Status
N#define UART_MIS_DCDMIS         0x00000004  // UART Data Carrier Detect Modem
N                                            // Masked Interrupt Status
N#define UART_MIS_CTSMIS         0x00000002  // UART Clear to Send Modem Masked
N                                            // Interrupt Status
N#define UART_MIS_RIMIS          0x00000001  // UART Ring Indicator Modem Masked
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_ICR register.
N//
N//*****************************************************************************
N#define UART_ICR_DMATXIC        0x00020000  // Transmit DMA Interrupt Clear
N#define UART_ICR_DMARXIC        0x00010000  // Receive DMA Interrupt Clear
N#define UART_ICR_9BITIC         0x00001000  // 9-Bit Mode Interrupt Clear
N#define UART_ICR_EOTIC          0x00000800  // End of Transmission Interrupt
N                                            // Clear
N#define UART_ICR_OEIC           0x00000400  // Overrun Error Interrupt Clear
N#define UART_ICR_BEIC           0x00000200  // Break Error Interrupt Clear
N#define UART_ICR_PEIC           0x00000100  // Parity Error Interrupt Clear
N#define UART_ICR_FEIC           0x00000080  // Framing Error Interrupt Clear
N#define UART_ICR_RTIC           0x00000040  // Receive Time-Out Interrupt Clear
N#define UART_ICR_TXIC           0x00000020  // Transmit Interrupt Clear
N#define UART_ICR_RXIC           0x00000010  // Receive Interrupt Clear
N#define UART_ICR_DSRMIC         0x00000008  // UART Data Set Ready Modem
N                                            // Interrupt Clear
N#define UART_ICR_DCDMIC         0x00000004  // UART Data Carrier Detect Modem
N                                            // Interrupt Clear
N#define UART_ICR_CTSMIC         0x00000002  // UART Clear to Send Modem
N                                            // Interrupt Clear
N#define UART_ICR_RIMIC          0x00000001  // UART Ring Indicator Modem
N                                            // Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_DMACTL register.
N//
N//*****************************************************************************
N#define UART_DMACTL_DMAERR      0x00000004  // DMA on Error
N#define UART_DMACTL_TXDMAE      0x00000002  // Transmit DMA Enable
N#define UART_DMACTL_RXDMAE      0x00000001  // Receive DMA Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_9BITADDR
N// register.
N//
N//*****************************************************************************
N#define UART_9BITADDR_9BITEN    0x00008000  // Enable 9-Bit Mode
N#define UART_9BITADDR_ADDR_M    0x000000FF  // Self Address for 9-Bit Mode
N#define UART_9BITADDR_ADDR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_9BITAMASK
N// register.
N//
N//*****************************************************************************
N#define UART_9BITAMASK_MASK_M   0x000000FF  // Self Address Mask for 9-Bit Mode
N#define UART_9BITAMASK_MASK_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_PP register.
N//
N//*****************************************************************************
N#define UART_PP_MSE             0x00000008  // Modem Support Extended
N#define UART_PP_MS              0x00000004  // Modem Support
N#define UART_PP_NB              0x00000002  // 9-Bit Support
N#define UART_PP_SC              0x00000001  // Smart Card Support
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UART_O_CC register.
N//
N//*****************************************************************************
N#define UART_CC_CS_M            0x0000000F  // UART Baud Clock Source
N#define UART_CC_CS_SYSCLK       0x00000000  // The system clock (default)
N#define UART_CC_CS_PIOSC        0x00000005  // PIOSC
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MSA register.
N//
N//*****************************************************************************
N#define I2C_MSA_SA_M            0x000000FE  // I2C Slave Address
N#define I2C_MSA_RS              0x00000001  // Receive not send
N#define I2C_MSA_SA_S            1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCS register.
N//
N//*****************************************************************************
N#define I2C_MCS_ACTDMARX        0x80000000  // DMA RX Active Status
N#define I2C_MCS_ACTDMATX        0x40000000  // DMA TX Active Status
N#define I2C_MCS_CLKTO           0x00000080  // Clock Timeout Error
N#define I2C_MCS_BURST           0x00000040  // Burst Enable
N#define I2C_MCS_BUSBSY          0x00000040  // Bus Busy
N#define I2C_MCS_IDLE            0x00000020  // I2C Idle
N#define I2C_MCS_QCMD            0x00000020  // Quick Command
N#define I2C_MCS_ARBLST          0x00000010  // Arbitration Lost
N#define I2C_MCS_HS              0x00000010  // High-Speed Enable
N#define I2C_MCS_ACK             0x00000008  // Data Acknowledge Enable
N#define I2C_MCS_DATACK          0x00000008  // Acknowledge Data
N#define I2C_MCS_ADRACK          0x00000004  // Acknowledge Address
N#define I2C_MCS_STOP            0x00000004  // Generate STOP
N#define I2C_MCS_ERROR           0x00000002  // Error
N#define I2C_MCS_START           0x00000002  // Generate START
N#define I2C_MCS_RUN             0x00000001  // I2C Master Enable
N#define I2C_MCS_BUSY            0x00000001  // I2C Busy
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MDR register.
N//
N//*****************************************************************************
N#define I2C_MDR_DATA_M          0x000000FF  // Data Transferred
N#define I2C_MDR_DATA_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MTPR register.
N//
N//*****************************************************************************
N#define I2C_MTPR_PULSEL_M       0x00070000  // Glitch Suppression Pulse Width
N#define I2C_MTPR_PULSEL_BYPASS  0x00000000  // Bypass
N#define I2C_MTPR_PULSEL_1       0x00010000  // 1 clock
N#define I2C_MTPR_PULSEL_2       0x00020000  // 2 clocks
N#define I2C_MTPR_PULSEL_3       0x00030000  // 3 clocks
N#define I2C_MTPR_PULSEL_4       0x00040000  // 4 clocks
N#define I2C_MTPR_PULSEL_8       0x00050000  // 8 clocks
N#define I2C_MTPR_PULSEL_16      0x00060000  // 16 clocks
N#define I2C_MTPR_PULSEL_32      0x00070000  // 32 clocks
N#define I2C_MTPR_HS             0x00000080  // High-Speed Enable
N#define I2C_MTPR_TPR_M          0x0000007F  // Timer Period
N#define I2C_MTPR_TPR_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MIMR register.
N//
N//*****************************************************************************
N#define I2C_MIMR_RXFFIM         0x00000800  // Receive FIFO Full Interrupt Mask
N#define I2C_MIMR_TXFEIM         0x00000400  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_MIMR_RXIM           0x00000200  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_MIMR_TXIM           0x00000100  // Transmit FIFO Request Interrupt
N                                            // Mask
N#define I2C_MIMR_ARBLOSTIM      0x00000080  // Arbitration Lost Interrupt Mask
N#define I2C_MIMR_STOPIM         0x00000040  // STOP Detection Interrupt Mask
N#define I2C_MIMR_STARTIM        0x00000020  // START Detection Interrupt Mask
N#define I2C_MIMR_NACKIM         0x00000010  // Address/Data NACK Interrupt Mask
N#define I2C_MIMR_DMATXIM        0x00000008  // Transmit DMA Interrupt Mask
N#define I2C_MIMR_DMARXIM        0x00000004  // Receive DMA Interrupt Mask
N#define I2C_MIMR_CLKIM          0x00000002  // Clock Timeout Interrupt Mask
N#define I2C_MIMR_IM             0x00000001  // Master Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MRIS register.
N//
N//*****************************************************************************
N#define I2C_MRIS_RXFFRIS        0x00000800  // Receive FIFO Full Raw Interrupt
N                                            // Status
N#define I2C_MRIS_TXFERIS        0x00000400  // Transmit FIFO Empty Raw
N                                            // Interrupt Status
N#define I2C_MRIS_RXRIS          0x00000200  // Receive FIFO Request Raw
N                                            // Interrupt Status
N#define I2C_MRIS_TXRIS          0x00000100  // Transmit Request Raw Interrupt
N                                            // Status
N#define I2C_MRIS_ARBLOSTRIS     0x00000080  // Arbitration Lost Raw Interrupt
N                                            // Status
N#define I2C_MRIS_STOPRIS        0x00000040  // STOP Detection Raw Interrupt
N                                            // Status
N#define I2C_MRIS_STARTRIS       0x00000020  // START Detection Raw Interrupt
N                                            // Status
N#define I2C_MRIS_NACKRIS        0x00000010  // Address/Data NACK Raw Interrupt
N                                            // Status
N#define I2C_MRIS_DMATXRIS       0x00000008  // Transmit DMA Raw Interrupt
N                                            // Status
N#define I2C_MRIS_DMARXRIS       0x00000004  // Receive DMA Raw Interrupt Status
N#define I2C_MRIS_CLKRIS         0x00000002  // Clock Timeout Raw Interrupt
N                                            // Status
N#define I2C_MRIS_RIS            0x00000001  // Master Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MMIS register.
N//
N//*****************************************************************************
N#define I2C_MMIS_RXFFMIS        0x00000800  // Receive FIFO Full Interrupt Mask
N#define I2C_MMIS_TXFEMIS        0x00000400  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_MMIS_RXMIS          0x00000200  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_MMIS_TXMIS          0x00000100  // Transmit Request Interrupt Mask
N#define I2C_MMIS_ARBLOSTMIS     0x00000080  // Arbitration Lost Interrupt Mask
N#define I2C_MMIS_STOPMIS        0x00000040  // STOP Detection Interrupt Mask
N#define I2C_MMIS_STARTMIS       0x00000020  // START Detection Interrupt Mask
N#define I2C_MMIS_NACKMIS        0x00000010  // Address/Data NACK Interrupt Mask
N#define I2C_MMIS_DMATXMIS       0x00000008  // Transmit DMA Interrupt Status
N#define I2C_MMIS_DMARXMIS       0x00000004  // Receive DMA Interrupt Status
N#define I2C_MMIS_CLKMIS         0x00000002  // Clock Timeout Masked Interrupt
N                                            // Status
N#define I2C_MMIS_MIS            0x00000001  // Masked Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MICR register.
N//
N//*****************************************************************************
N#define I2C_MICR_RXFFIC         0x00000800  // Receive FIFO Full Interrupt
N                                            // Clear
N#define I2C_MICR_TXFEIC         0x00000400  // Transmit FIFO Empty Interrupt
N                                            // Clear
N#define I2C_MICR_RXIC           0x00000200  // Receive FIFO Request Interrupt
N                                            // Clear
N#define I2C_MICR_TXIC           0x00000100  // Transmit FIFO Request Interrupt
N                                            // Clear
N#define I2C_MICR_ARBLOSTIC      0x00000080  // Arbitration Lost Interrupt Clear
N#define I2C_MICR_STOPIC         0x00000040  // STOP Detection Interrupt Clear
N#define I2C_MICR_STARTIC        0x00000020  // START Detection Interrupt Clear
N#define I2C_MICR_NACKIC         0x00000010  // Address/Data NACK Interrupt
N                                            // Clear
N#define I2C_MICR_DMATXIC        0x00000008  // Transmit DMA Interrupt Clear
N#define I2C_MICR_DMARXIC        0x00000004  // Receive DMA Interrupt Clear
N#define I2C_MICR_CLKIC          0x00000002  // Clock Timeout Interrupt Clear
N#define I2C_MICR_IC             0x00000001  // Master Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCR register.
N//
N//*****************************************************************************
N#define I2C_MCR_SFE             0x00000020  // I2C Slave Function Enable
N#define I2C_MCR_MFE             0x00000010  // I2C Master Function Enable
N#define I2C_MCR_LPBK            0x00000001  // I2C Loopback
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCLKOCNT register.
N//
N//*****************************************************************************
N#define I2C_MCLKOCNT_CNTL_M     0x000000FF  // I2C Master Count
N#define I2C_MCLKOCNT_CNTL_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MBMON register.
N//
N//*****************************************************************************
N#define I2C_MBMON_SDA           0x00000002  // I2C SDA Status
N#define I2C_MBMON_SCL           0x00000001  // I2C SCL Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MBLEN register.
N//
N//*****************************************************************************
N#define I2C_MBLEN_CNTL_M        0x000000FF  // I2C Burst Length
N#define I2C_MBLEN_CNTL_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MBCNT register.
N//
N//*****************************************************************************
N#define I2C_MBCNT_CNTL_M        0x000000FF  // I2C Master Burst Count
N#define I2C_MBCNT_CNTL_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SOAR register.
N//
N//*****************************************************************************
N#define I2C_SOAR_OAR_M          0x0000007F  // I2C Slave Own Address
N#define I2C_SOAR_OAR_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SCSR register.
N//
N//*****************************************************************************
N#define I2C_SCSR_ACTDMARX       0x80000000  // DMA RX Active Status
N#define I2C_SCSR_ACTDMATX       0x40000000  // DMA TX Active Status
N#define I2C_SCSR_QCMDRW         0x00000020  // Quick Command Read / Write
N#define I2C_SCSR_QCMDST         0x00000010  // Quick Command Status
N#define I2C_SCSR_OAR2SEL        0x00000008  // OAR2 Address Matched
N#define I2C_SCSR_FBR            0x00000004  // First Byte Received
N#define I2C_SCSR_RXFIFO         0x00000004  // RX FIFO Enable
N#define I2C_SCSR_TXFIFO         0x00000002  // TX FIFO Enable
N#define I2C_SCSR_TREQ           0x00000002  // Transmit Request
N#define I2C_SCSR_DA             0x00000001  // Device Active
N#define I2C_SCSR_RREQ           0x00000001  // Receive Request
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SDR register.
N//
N//*****************************************************************************
N#define I2C_SDR_DATA_M          0x000000FF  // Data for Transfer
N#define I2C_SDR_DATA_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SIMR register.
N//
N//*****************************************************************************
N#define I2C_SIMR_RXFFIM         0x00000100  // Receive FIFO Full Interrupt Mask
N#define I2C_SIMR_TXFEIM         0x00000080  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_SIMR_RXIM           0x00000040  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_SIMR_TXIM           0x00000020  // Transmit FIFO Request Interrupt
N                                            // Mask
N#define I2C_SIMR_DMATXIM        0x00000010  // Transmit DMA Interrupt Mask
N#define I2C_SIMR_DMARXIM        0x00000008  // Receive DMA Interrupt Mask
N#define I2C_SIMR_STOPIM         0x00000004  // Stop Condition Interrupt Mask
N#define I2C_SIMR_STARTIM        0x00000002  // Start Condition Interrupt Mask
N#define I2C_SIMR_DATAIM         0x00000001  // Data Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SRIS register.
N//
N//*****************************************************************************
N#define I2C_SRIS_RXFFRIS        0x00000100  // Receive FIFO Full Raw Interrupt
N                                            // Status
N#define I2C_SRIS_TXFERIS        0x00000080  // Transmit FIFO Empty Raw
N                                            // Interrupt Status
N#define I2C_SRIS_RXRIS          0x00000040  // Receive FIFO Request Raw
N                                            // Interrupt Status
N#define I2C_SRIS_TXRIS          0x00000020  // Transmit Request Raw Interrupt
N                                            // Status
N#define I2C_SRIS_DMATXRIS       0x00000010  // Transmit DMA Raw Interrupt
N                                            // Status
N#define I2C_SRIS_DMARXRIS       0x00000008  // Receive DMA Raw Interrupt Status
N#define I2C_SRIS_STOPRIS        0x00000004  // Stop Condition Raw Interrupt
N                                            // Status
N#define I2C_SRIS_STARTRIS       0x00000002  // Start Condition Raw Interrupt
N                                            // Status
N#define I2C_SRIS_DATARIS        0x00000001  // Data Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SMIS register.
N//
N//*****************************************************************************
N#define I2C_SMIS_RXFFMIS        0x00000100  // Receive FIFO Full Interrupt Mask
N#define I2C_SMIS_TXFEMIS        0x00000080  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_SMIS_RXMIS          0x00000040  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_SMIS_TXMIS          0x00000020  // Transmit FIFO Request Interrupt
N                                            // Mask
N#define I2C_SMIS_DMATXMIS       0x00000010  // Transmit DMA Masked Interrupt
N                                            // Status
N#define I2C_SMIS_DMARXMIS       0x00000008  // Receive DMA Masked Interrupt
N                                            // Status
N#define I2C_SMIS_STOPMIS        0x00000004  // Stop Condition Masked Interrupt
N                                            // Status
N#define I2C_SMIS_STARTMIS       0x00000002  // Start Condition Masked Interrupt
N                                            // Status
N#define I2C_SMIS_DATAMIS        0x00000001  // Data Masked Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SICR register.
N//
N//*****************************************************************************
N#define I2C_SICR_RXFFIC         0x00000100  // Receive FIFO Full Interrupt Mask
N#define I2C_SICR_TXFEIC         0x00000080  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_SICR_RXIC           0x00000040  // Receive Request Interrupt Mask
N#define I2C_SICR_TXIC           0x00000020  // Transmit Request Interrupt Mask
N#define I2C_SICR_DMATXIC        0x00000010  // Transmit DMA Interrupt Clear
N#define I2C_SICR_DMARXIC        0x00000008  // Receive DMA Interrupt Clear
N#define I2C_SICR_STOPIC         0x00000004  // Stop Condition Interrupt Clear
N#define I2C_SICR_STARTIC        0x00000002  // Start Condition Interrupt Clear
N#define I2C_SICR_DATAIC         0x00000001  // Data Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SOAR2 register.
N//
N//*****************************************************************************
N#define I2C_SOAR2_OAR2EN        0x00000080  // I2C Slave Own Address 2 Enable
N#define I2C_SOAR2_OAR2_M        0x0000007F  // I2C Slave Own Address 2
N#define I2C_SOAR2_OAR2_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SACKCTL register.
N//
N//*****************************************************************************
N#define I2C_SACKCTL_ACKOVAL     0x00000002  // I2C Slave ACK Override Value
N#define I2C_SACKCTL_ACKOEN      0x00000001  // I2C Slave ACK Override Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_FIFODATA register.
N//
N//*****************************************************************************
N#define I2C_FIFODATA_DATA_M     0x000000FF  // I2C FIFO Data Byte
N#define I2C_FIFODATA_DATA_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_FIFOCTL register.
N//
N//*****************************************************************************
N#define I2C_FIFOCTL_RXASGNMT    0x80000000  // RX Control Assignment
N#define I2C_FIFOCTL_RXFLUSH     0x40000000  // RX FIFO Flush
N#define I2C_FIFOCTL_DMARXENA    0x20000000  // DMA RX Channel Enable
N#define I2C_FIFOCTL_RXTRIG_M    0x00070000  // RX FIFO Trigger
N#define I2C_FIFOCTL_TXASGNMT    0x00008000  // TX Control Assignment
N#define I2C_FIFOCTL_TXFLUSH     0x00004000  // TX FIFO Flush
N#define I2C_FIFOCTL_DMATXENA    0x00002000  // DMA TX Channel Enable
N#define I2C_FIFOCTL_TXTRIG_M    0x00000007  // TX FIFO Trigger
N#define I2C_FIFOCTL_RXTRIG_S    16
N#define I2C_FIFOCTL_TXTRIG_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_FIFOSTATUS
N// register.
N//
N//*****************************************************************************
N#define I2C_FIFOSTATUS_RXABVTRIG                                              \
N                                0x00040000  // RX FIFO Above Trigger Level
X#define I2C_FIFOSTATUS_RXABVTRIG                                                                              0x00040000  
N#define I2C_FIFOSTATUS_RXFF     0x00020000  // RX FIFO Full
N#define I2C_FIFOSTATUS_RXFE     0x00010000  // RX FIFO Empty
N#define I2C_FIFOSTATUS_TXBLWTRIG                                              \
N                                0x00000004  // TX FIFO Below Trigger Level
X#define I2C_FIFOSTATUS_TXBLWTRIG                                                                              0x00000004  
N#define I2C_FIFOSTATUS_TXFF     0x00000002  // TX FIFO Full
N#define I2C_FIFOSTATUS_TXFE     0x00000001  // TX FIFO Empty
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_PP register.
N//
N//*****************************************************************************
N#define I2C_PP_HS               0x00000001  // High-Speed Capable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_PC register.
N//
N//*****************************************************************************
N#define I2C_PC_HS               0x00000001  // High-Speed Capable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_CTL register.
N//
N//*****************************************************************************
N#define PWM_CTL_GLOBALSYNC3     0x00000008  // Update PWM Generator 3
N#define PWM_CTL_GLOBALSYNC2     0x00000004  // Update PWM Generator 2
N#define PWM_CTL_GLOBALSYNC1     0x00000002  // Update PWM Generator 1
N#define PWM_CTL_GLOBALSYNC0     0x00000001  // Update PWM Generator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_SYNC register.
N//
N//*****************************************************************************
N#define PWM_SYNC_SYNC3          0x00000008  // Reset Generator 3 Counter
N#define PWM_SYNC_SYNC2          0x00000004  // Reset Generator 2 Counter
N#define PWM_SYNC_SYNC1          0x00000002  // Reset Generator 1 Counter
N#define PWM_SYNC_SYNC0          0x00000001  // Reset Generator 0 Counter
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_ENABLE register.
N//
N//*****************************************************************************
N#define PWM_ENABLE_PWM7EN       0x00000080  // PWM7 Output Enable
N#define PWM_ENABLE_PWM6EN       0x00000040  // PWM6 Output Enable
N#define PWM_ENABLE_PWM5EN       0x00000020  // PWM5 Output Enable
N#define PWM_ENABLE_PWM4EN       0x00000010  // PWM4 Output Enable
N#define PWM_ENABLE_PWM3EN       0x00000008  // PWM3 Output Enable
N#define PWM_ENABLE_PWM2EN       0x00000004  // PWM2 Output Enable
N#define PWM_ENABLE_PWM1EN       0x00000002  // PWM1 Output Enable
N#define PWM_ENABLE_PWM0EN       0x00000001  // PWM0 Output Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_INVERT register.
N//
N//*****************************************************************************
N#define PWM_INVERT_PWM7INV      0x00000080  // Invert PWM7 Signal
N#define PWM_INVERT_PWM6INV      0x00000040  // Invert PWM6 Signal
N#define PWM_INVERT_PWM5INV      0x00000020  // Invert PWM5 Signal
N#define PWM_INVERT_PWM4INV      0x00000010  // Invert PWM4 Signal
N#define PWM_INVERT_PWM3INV      0x00000008  // Invert PWM3 Signal
N#define PWM_INVERT_PWM2INV      0x00000004  // Invert PWM2 Signal
N#define PWM_INVERT_PWM1INV      0x00000002  // Invert PWM1 Signal
N#define PWM_INVERT_PWM0INV      0x00000001  // Invert PWM0 Signal
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_FAULT register.
N//
N//*****************************************************************************
N#define PWM_FAULT_FAULT7        0x00000080  // PWM7 Fault
N#define PWM_FAULT_FAULT6        0x00000040  // PWM6 Fault
N#define PWM_FAULT_FAULT5        0x00000020  // PWM5 Fault
N#define PWM_FAULT_FAULT4        0x00000010  // PWM4 Fault
N#define PWM_FAULT_FAULT3        0x00000008  // PWM3 Fault
N#define PWM_FAULT_FAULT2        0x00000004  // PWM2 Fault
N#define PWM_FAULT_FAULT1        0x00000002  // PWM1 Fault
N#define PWM_FAULT_FAULT0        0x00000001  // PWM0 Fault
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_INTEN register.
N//
N//*****************************************************************************
N#define PWM_INTEN_INTFAULT3     0x00080000  // Interrupt Fault 3
N#define PWM_INTEN_INTFAULT2     0x00040000  // Interrupt Fault 2
N#define PWM_INTEN_INTFAULT1     0x00020000  // Interrupt Fault 1
N#define PWM_INTEN_INTFAULT0     0x00010000  // Interrupt Fault 0
N#define PWM_INTEN_INTPWM3       0x00000008  // PWM3 Interrupt Enable
N#define PWM_INTEN_INTPWM2       0x00000004  // PWM2 Interrupt Enable
N#define PWM_INTEN_INTPWM1       0x00000002  // PWM1 Interrupt Enable
N#define PWM_INTEN_INTPWM0       0x00000001  // PWM0 Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_RIS register.
N//
N//*****************************************************************************
N#define PWM_RIS_INTFAULT3       0x00080000  // Interrupt Fault PWM 3
N#define PWM_RIS_INTFAULT2       0x00040000  // Interrupt Fault PWM 2
N#define PWM_RIS_INTFAULT1       0x00020000  // Interrupt Fault PWM 1
N#define PWM_RIS_INTFAULT0       0x00010000  // Interrupt Fault PWM 0
N#define PWM_RIS_INTPWM3         0x00000008  // PWM3 Interrupt Asserted
N#define PWM_RIS_INTPWM2         0x00000004  // PWM2 Interrupt Asserted
N#define PWM_RIS_INTPWM1         0x00000002  // PWM1 Interrupt Asserted
N#define PWM_RIS_INTPWM0         0x00000001  // PWM0 Interrupt Asserted
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_ISC register.
N//
N//*****************************************************************************
N#define PWM_ISC_INTFAULT3       0x00080000  // FAULT3 Interrupt Asserted
N#define PWM_ISC_INTFAULT2       0x00040000  // FAULT2 Interrupt Asserted
N#define PWM_ISC_INTFAULT1       0x00020000  // FAULT1 Interrupt Asserted
N#define PWM_ISC_INTFAULT0       0x00010000  // FAULT0 Interrupt Asserted
N#define PWM_ISC_INTPWM3         0x00000008  // PWM3 Interrupt Status
N#define PWM_ISC_INTPWM2         0x00000004  // PWM2 Interrupt Status
N#define PWM_ISC_INTPWM1         0x00000002  // PWM1 Interrupt Status
N#define PWM_ISC_INTPWM0         0x00000001  // PWM0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_STATUS register.
N//
N//*****************************************************************************
N#define PWM_STATUS_FAULT3       0x00000008  // Generator 3 Fault Status
N#define PWM_STATUS_FAULT2       0x00000004  // Generator 2 Fault Status
N#define PWM_STATUS_FAULT1       0x00000002  // Generator 1 Fault Status
N#define PWM_STATUS_FAULT0       0x00000001  // Generator 0 Fault Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_FAULTVAL register.
N//
N//*****************************************************************************
N#define PWM_FAULTVAL_PWM7       0x00000080  // PWM7 Fault Value
N#define PWM_FAULTVAL_PWM6       0x00000040  // PWM6 Fault Value
N#define PWM_FAULTVAL_PWM5       0x00000020  // PWM5 Fault Value
N#define PWM_FAULTVAL_PWM4       0x00000010  // PWM4 Fault Value
N#define PWM_FAULTVAL_PWM3       0x00000008  // PWM3 Fault Value
N#define PWM_FAULTVAL_PWM2       0x00000004  // PWM2 Fault Value
N#define PWM_FAULTVAL_PWM1       0x00000002  // PWM1 Fault Value
N#define PWM_FAULTVAL_PWM0       0x00000001  // PWM0 Fault Value
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_ENUPD register.
N//
N//*****************************************************************************
N#define PWM_ENUPD_ENUPD7_M      0x0000C000  // PWM7 Enable Update Mode
N#define PWM_ENUPD_ENUPD7_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD7_LSYNC  0x00008000  // Locally Synchronized
N#define PWM_ENUPD_ENUPD7_GSYNC  0x0000C000  // Globally Synchronized
N#define PWM_ENUPD_ENUPD6_M      0x00003000  // PWM6 Enable Update Mode
N#define PWM_ENUPD_ENUPD6_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD6_LSYNC  0x00002000  // Locally Synchronized
N#define PWM_ENUPD_ENUPD6_GSYNC  0x00003000  // Globally Synchronized
N#define PWM_ENUPD_ENUPD5_M      0x00000C00  // PWM5 Enable Update Mode
N#define PWM_ENUPD_ENUPD5_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD5_LSYNC  0x00000800  // Locally Synchronized
N#define PWM_ENUPD_ENUPD5_GSYNC  0x00000C00  // Globally Synchronized
N#define PWM_ENUPD_ENUPD4_M      0x00000300  // PWM4 Enable Update Mode
N#define PWM_ENUPD_ENUPD4_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD4_LSYNC  0x00000200  // Locally Synchronized
N#define PWM_ENUPD_ENUPD4_GSYNC  0x00000300  // Globally Synchronized
N#define PWM_ENUPD_ENUPD3_M      0x000000C0  // PWM3 Enable Update Mode
N#define PWM_ENUPD_ENUPD3_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD3_LSYNC  0x00000080  // Locally Synchronized
N#define PWM_ENUPD_ENUPD3_GSYNC  0x000000C0  // Globally Synchronized
N#define PWM_ENUPD_ENUPD2_M      0x00000030  // PWM2 Enable Update Mode
N#define PWM_ENUPD_ENUPD2_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD2_LSYNC  0x00000020  // Locally Synchronized
N#define PWM_ENUPD_ENUPD2_GSYNC  0x00000030  // Globally Synchronized
N#define PWM_ENUPD_ENUPD1_M      0x0000000C  // PWM1 Enable Update Mode
N#define PWM_ENUPD_ENUPD1_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD1_LSYNC  0x00000008  // Locally Synchronized
N#define PWM_ENUPD_ENUPD1_GSYNC  0x0000000C  // Globally Synchronized
N#define PWM_ENUPD_ENUPD0_M      0x00000003  // PWM0 Enable Update Mode
N#define PWM_ENUPD_ENUPD0_IMM    0x00000000  // Immediate
N#define PWM_ENUPD_ENUPD0_LSYNC  0x00000002  // Locally Synchronized
N#define PWM_ENUPD_ENUPD0_GSYNC  0x00000003  // Globally Synchronized
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_CTL register.
N//
N//*****************************************************************************
N#define PWM_0_CTL_LATCH         0x00040000  // Latch Fault Input
N#define PWM_0_CTL_MINFLTPER     0x00020000  // Minimum Fault Period
N#define PWM_0_CTL_FLTSRC        0x00010000  // Fault Condition Source
N#define PWM_0_CTL_DBFALLUPD_M   0x0000C000  // Specifies the update mode for
N                                            // the PWMnDBFALL register
N#define PWM_0_CTL_DBFALLUPD_I   0x00000000  // Immediate
N#define PWM_0_CTL_DBFALLUPD_LS  0x00008000  // Locally Synchronized
N#define PWM_0_CTL_DBFALLUPD_GS  0x0000C000  // Globally Synchronized
N#define PWM_0_CTL_DBRISEUPD_M   0x00003000  // PWMnDBRISE Update Mode
N#define PWM_0_CTL_DBRISEUPD_I   0x00000000  // Immediate
N#define PWM_0_CTL_DBRISEUPD_LS  0x00002000  // Locally Synchronized
N#define PWM_0_CTL_DBRISEUPD_GS  0x00003000  // Globally Synchronized
N#define PWM_0_CTL_DBCTLUPD_M    0x00000C00  // PWMnDBCTL Update Mode
N#define PWM_0_CTL_DBCTLUPD_I    0x00000000  // Immediate
N#define PWM_0_CTL_DBCTLUPD_LS   0x00000800  // Locally Synchronized
N#define PWM_0_CTL_DBCTLUPD_GS   0x00000C00  // Globally Synchronized
N#define PWM_0_CTL_GENBUPD_M     0x00000300  // PWMnGENB Update Mode
N#define PWM_0_CTL_GENBUPD_I     0x00000000  // Immediate
N#define PWM_0_CTL_GENBUPD_LS    0x00000200  // Locally Synchronized
N#define PWM_0_CTL_GENBUPD_GS    0x00000300  // Globally Synchronized
N#define PWM_0_CTL_GENAUPD_M     0x000000C0  // PWMnGENA Update Mode
N#define PWM_0_CTL_GENAUPD_I     0x00000000  // Immediate
N#define PWM_0_CTL_GENAUPD_LS    0x00000080  // Locally Synchronized
N#define PWM_0_CTL_GENAUPD_GS    0x000000C0  // Globally Synchronized
N#define PWM_0_CTL_CMPBUPD       0x00000020  // Comparator B Update Mode
N#define PWM_0_CTL_CMPAUPD       0x00000010  // Comparator A Update Mode
N#define PWM_0_CTL_LOADUPD       0x00000008  // Load Register Update Mode
N#define PWM_0_CTL_DEBUG         0x00000004  // Debug Mode
N#define PWM_0_CTL_MODE          0x00000002  // Counter Mode
N#define PWM_0_CTL_ENABLE        0x00000001  // PWM Block Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_INTEN register.
N//
N//*****************************************************************************
N#define PWM_0_INTEN_TRCMPBD     0x00002000  // Trigger for Counter=Comparator B
N                                            // Down
N#define PWM_0_INTEN_TRCMPBU     0x00001000  // Trigger for Counter=Comparator B
N                                            // Up
N#define PWM_0_INTEN_TRCMPAD     0x00000800  // Trigger for Counter=Comparator A
N                                            // Down
N#define PWM_0_INTEN_TRCMPAU     0x00000400  // Trigger for Counter=Comparator A
N                                            // Up
N#define PWM_0_INTEN_TRCNTLOAD   0x00000200  // Trigger for Counter=Load
N#define PWM_0_INTEN_TRCNTZERO   0x00000100  // Trigger for Counter=0
N#define PWM_0_INTEN_INTCMPBD    0x00000020  // Interrupt for Counter=Comparator
N                                            // B Down
N#define PWM_0_INTEN_INTCMPBU    0x00000010  // Interrupt for Counter=Comparator
N                                            // B Up
N#define PWM_0_INTEN_INTCMPAD    0x00000008  // Interrupt for Counter=Comparator
N                                            // A Down
N#define PWM_0_INTEN_INTCMPAU    0x00000004  // Interrupt for Counter=Comparator
N                                            // A Up
N#define PWM_0_INTEN_INTCNTLOAD  0x00000002  // Interrupt for Counter=Load
N#define PWM_0_INTEN_INTCNTZERO  0x00000001  // Interrupt for Counter=0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_RIS register.
N//
N//*****************************************************************************
N#define PWM_0_RIS_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N                                            // Status
N#define PWM_0_RIS_INTCMPBU      0x00000010  // Comparator B Up Interrupt Status
N#define PWM_0_RIS_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N                                            // Status
N#define PWM_0_RIS_INTCMPAU      0x00000004  // Comparator A Up Interrupt Status
N#define PWM_0_RIS_INTCNTLOAD    0x00000002  // Counter=Load Interrupt Status
N#define PWM_0_RIS_INTCNTZERO    0x00000001  // Counter=0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_ISC register.
N//
N//*****************************************************************************
N#define PWM_0_ISC_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N#define PWM_0_ISC_INTCMPBU      0x00000010  // Comparator B Up Interrupt
N#define PWM_0_ISC_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N#define PWM_0_ISC_INTCMPAU      0x00000004  // Comparator A Up Interrupt
N#define PWM_0_ISC_INTCNTLOAD    0x00000002  // Counter=Load Interrupt
N#define PWM_0_ISC_INTCNTZERO    0x00000001  // Counter=0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_LOAD register.
N//
N//*****************************************************************************
N#define PWM_0_LOAD_M            0x0000FFFF  // Counter Load Value
N#define PWM_0_LOAD_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_COUNT register.
N//
N//*****************************************************************************
N#define PWM_0_COUNT_M           0x0000FFFF  // Counter Value
N#define PWM_0_COUNT_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_CMPA register.
N//
N//*****************************************************************************
N#define PWM_0_CMPA_M            0x0000FFFF  // Comparator A Value
N#define PWM_0_CMPA_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_CMPB register.
N//
N//*****************************************************************************
N#define PWM_0_CMPB_M            0x0000FFFF  // Comparator B Value
N#define PWM_0_CMPB_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_GENA register.
N//
N//*****************************************************************************
N#define PWM_0_GENA_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_0_GENA_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENA_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_0_GENA_ACTCMPBD_INV 0x00000400  // Invert the output signal
N#define PWM_0_GENA_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Set the output signal to 0
X#define PWM_0_GENA_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_0_GENA_ACTCMPBD_ONE 0x00000C00  // Set the output signal to 1
N#define PWM_0_GENA_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_0_GENA_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENA_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_0_GENA_ACTCMPBU_INV 0x00000100  // Invert the output signal
N#define PWM_0_GENA_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Set the output signal to 0
X#define PWM_0_GENA_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_0_GENA_ACTCMPBU_ONE 0x00000300  // Set the output signal to 1
N#define PWM_0_GENA_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_0_GENA_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENA_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_0_GENA_ACTCMPAD_INV 0x00000040  // Invert the output signal
N#define PWM_0_GENA_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Set the output signal to 0
X#define PWM_0_GENA_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_0_GENA_ACTCMPAD_ONE 0x000000C0  // Set the output signal to 1
N#define PWM_0_GENA_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_0_GENA_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENA_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_0_GENA_ACTCMPAU_INV 0x00000010  // Invert the output signal
N#define PWM_0_GENA_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Set the output signal to 0
X#define PWM_0_GENA_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_0_GENA_ACTCMPAU_ONE 0x00000030  // Set the output signal to 1
N#define PWM_0_GENA_ACTLOAD_M    0x0000000C  // Action for Counter=Load
N#define PWM_0_GENA_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_0_GENA_ACTLOAD_INV  0x00000004  // Invert the output signal
N#define PWM_0_GENA_ACTLOAD_ZERO 0x00000008  // Set the output signal to 0
N#define PWM_0_GENA_ACTLOAD_ONE  0x0000000C  // Set the output signal to 1
N#define PWM_0_GENA_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_0_GENA_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_0_GENA_ACTZERO_INV  0x00000001  // Invert the output signal
N#define PWM_0_GENA_ACTZERO_ZERO 0x00000002  // Set the output signal to 0
N#define PWM_0_GENA_ACTZERO_ONE  0x00000003  // Set the output signal to 1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_GENB register.
N//
N//*****************************************************************************
N#define PWM_0_GENB_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_0_GENB_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENB_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_0_GENB_ACTCMPBD_INV 0x00000400  // Invert the output signal
N#define PWM_0_GENB_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Set the output signal to 0
X#define PWM_0_GENB_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_0_GENB_ACTCMPBD_ONE 0x00000C00  // Set the output signal to 1
N#define PWM_0_GENB_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_0_GENB_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENB_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_0_GENB_ACTCMPBU_INV 0x00000100  // Invert the output signal
N#define PWM_0_GENB_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Set the output signal to 0
X#define PWM_0_GENB_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_0_GENB_ACTCMPBU_ONE 0x00000300  // Set the output signal to 1
N#define PWM_0_GENB_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_0_GENB_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENB_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_0_GENB_ACTCMPAD_INV 0x00000040  // Invert the output signal
N#define PWM_0_GENB_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Set the output signal to 0
X#define PWM_0_GENB_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_0_GENB_ACTCMPAD_ONE 0x000000C0  // Set the output signal to 1
N#define PWM_0_GENB_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_0_GENB_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_0_GENB_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_0_GENB_ACTCMPAU_INV 0x00000010  // Invert the output signal
N#define PWM_0_GENB_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Set the output signal to 0
X#define PWM_0_GENB_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_0_GENB_ACTCMPAU_ONE 0x00000030  // Set the output signal to 1
N#define PWM_0_GENB_ACTLOAD_M    0x0000000C  // Action for Counter=Load
N#define PWM_0_GENB_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_0_GENB_ACTLOAD_INV  0x00000004  // Invert the output signal
N#define PWM_0_GENB_ACTLOAD_ZERO 0x00000008  // Set the output signal to 0
N#define PWM_0_GENB_ACTLOAD_ONE  0x0000000C  // Set the output signal to 1
N#define PWM_0_GENB_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_0_GENB_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_0_GENB_ACTZERO_INV  0x00000001  // Invert the output signal
N#define PWM_0_GENB_ACTZERO_ZERO 0x00000002  // Set the output signal to 0
N#define PWM_0_GENB_ACTZERO_ONE  0x00000003  // Set the output signal to 1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_DBCTL register.
N//
N//*****************************************************************************
N#define PWM_0_DBCTL_ENABLE      0x00000001  // Dead-Band Generator Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_DBRISE register.
N//
N//*****************************************************************************
N#define PWM_0_DBRISE_DELAY_M    0x00000FFF  // Dead-Band Rise Delay
N#define PWM_0_DBRISE_DELAY_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_DBFALL register.
N//
N//*****************************************************************************
N#define PWM_0_DBFALL_DELAY_M    0x00000FFF  // Dead-Band Fall Delay
N#define PWM_0_DBFALL_DELAY_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSRC0
N// register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSRC0_FAULT3    0x00000008  // Fault3 Input
N#define PWM_0_FLTSRC0_FAULT2    0x00000004  // Fault2 Input
N#define PWM_0_FLTSRC0_FAULT1    0x00000002  // Fault1 Input
N#define PWM_0_FLTSRC0_FAULT0    0x00000001  // Fault0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSRC1
N// register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSRC1_DCMP7     0x00000080  // Digital Comparator 7
N#define PWM_0_FLTSRC1_DCMP6     0x00000040  // Digital Comparator 6
N#define PWM_0_FLTSRC1_DCMP5     0x00000020  // Digital Comparator 5
N#define PWM_0_FLTSRC1_DCMP4     0x00000010  // Digital Comparator 4
N#define PWM_0_FLTSRC1_DCMP3     0x00000008  // Digital Comparator 3
N#define PWM_0_FLTSRC1_DCMP2     0x00000004  // Digital Comparator 2
N#define PWM_0_FLTSRC1_DCMP1     0x00000002  // Digital Comparator 1
N#define PWM_0_FLTSRC1_DCMP0     0x00000001  // Digital Comparator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_MINFLTPER
N// register.
N//
N//*****************************************************************************
N#define PWM_0_MINFLTPER_M       0x0000FFFF  // Minimum Fault Period
N#define PWM_0_MINFLTPER_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_CTL register.
N//
N//*****************************************************************************
N#define PWM_1_CTL_LATCH         0x00040000  // Latch Fault Input
N#define PWM_1_CTL_MINFLTPER     0x00020000  // Minimum Fault Period
N#define PWM_1_CTL_FLTSRC        0x00010000  // Fault Condition Source
N#define PWM_1_CTL_DBFALLUPD_M   0x0000C000  // Specifies the update mode for
N                                            // the PWMnDBFALL register
N#define PWM_1_CTL_DBFALLUPD_I   0x00000000  // Immediate
N#define PWM_1_CTL_DBFALLUPD_LS  0x00008000  // Locally Synchronized
N#define PWM_1_CTL_DBFALLUPD_GS  0x0000C000  // Globally Synchronized
N#define PWM_1_CTL_DBRISEUPD_M   0x00003000  // PWMnDBRISE Update Mode
N#define PWM_1_CTL_DBRISEUPD_I   0x00000000  // Immediate
N#define PWM_1_CTL_DBRISEUPD_LS  0x00002000  // Locally Synchronized
N#define PWM_1_CTL_DBRISEUPD_GS  0x00003000  // Globally Synchronized
N#define PWM_1_CTL_DBCTLUPD_M    0x00000C00  // PWMnDBCTL Update Mode
N#define PWM_1_CTL_DBCTLUPD_I    0x00000000  // Immediate
N#define PWM_1_CTL_DBCTLUPD_LS   0x00000800  // Locally Synchronized
N#define PWM_1_CTL_DBCTLUPD_GS   0x00000C00  // Globally Synchronized
N#define PWM_1_CTL_GENBUPD_M     0x00000300  // PWMnGENB Update Mode
N#define PWM_1_CTL_GENBUPD_I     0x00000000  // Immediate
N#define PWM_1_CTL_GENBUPD_LS    0x00000200  // Locally Synchronized
N#define PWM_1_CTL_GENBUPD_GS    0x00000300  // Globally Synchronized
N#define PWM_1_CTL_GENAUPD_M     0x000000C0  // PWMnGENA Update Mode
N#define PWM_1_CTL_GENAUPD_I     0x00000000  // Immediate
N#define PWM_1_CTL_GENAUPD_LS    0x00000080  // Locally Synchronized
N#define PWM_1_CTL_GENAUPD_GS    0x000000C0  // Globally Synchronized
N#define PWM_1_CTL_CMPBUPD       0x00000020  // Comparator B Update Mode
N#define PWM_1_CTL_CMPAUPD       0x00000010  // Comparator A Update Mode
N#define PWM_1_CTL_LOADUPD       0x00000008  // Load Register Update Mode
N#define PWM_1_CTL_DEBUG         0x00000004  // Debug Mode
N#define PWM_1_CTL_MODE          0x00000002  // Counter Mode
N#define PWM_1_CTL_ENABLE        0x00000001  // PWM Block Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_INTEN register.
N//
N//*****************************************************************************
N#define PWM_1_INTEN_TRCMPBD     0x00002000  // Trigger for Counter=Comparator B
N                                            // Down
N#define PWM_1_INTEN_TRCMPBU     0x00001000  // Trigger for Counter=Comparator B
N                                            // Up
N#define PWM_1_INTEN_TRCMPAD     0x00000800  // Trigger for Counter=Comparator A
N                                            // Down
N#define PWM_1_INTEN_TRCMPAU     0x00000400  // Trigger for Counter=Comparator A
N                                            // Up
N#define PWM_1_INTEN_TRCNTLOAD   0x00000200  // Trigger for Counter=Load
N#define PWM_1_INTEN_TRCNTZERO   0x00000100  // Trigger for Counter=0
N#define PWM_1_INTEN_INTCMPBD    0x00000020  // Interrupt for Counter=Comparator
N                                            // B Down
N#define PWM_1_INTEN_INTCMPBU    0x00000010  // Interrupt for Counter=Comparator
N                                            // B Up
N#define PWM_1_INTEN_INTCMPAD    0x00000008  // Interrupt for Counter=Comparator
N                                            // A Down
N#define PWM_1_INTEN_INTCMPAU    0x00000004  // Interrupt for Counter=Comparator
N                                            // A Up
N#define PWM_1_INTEN_INTCNTLOAD  0x00000002  // Interrupt for Counter=Load
N#define PWM_1_INTEN_INTCNTZERO  0x00000001  // Interrupt for Counter=0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_RIS register.
N//
N//*****************************************************************************
N#define PWM_1_RIS_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N                                            // Status
N#define PWM_1_RIS_INTCMPBU      0x00000010  // Comparator B Up Interrupt Status
N#define PWM_1_RIS_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N                                            // Status
N#define PWM_1_RIS_INTCMPAU      0x00000004  // Comparator A Up Interrupt Status
N#define PWM_1_RIS_INTCNTLOAD    0x00000002  // Counter=Load Interrupt Status
N#define PWM_1_RIS_INTCNTZERO    0x00000001  // Counter=0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_ISC register.
N//
N//*****************************************************************************
N#define PWM_1_ISC_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N#define PWM_1_ISC_INTCMPBU      0x00000010  // Comparator B Up Interrupt
N#define PWM_1_ISC_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N#define PWM_1_ISC_INTCMPAU      0x00000004  // Comparator A Up Interrupt
N#define PWM_1_ISC_INTCNTLOAD    0x00000002  // Counter=Load Interrupt
N#define PWM_1_ISC_INTCNTZERO    0x00000001  // Counter=0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_LOAD register.
N//
N//*****************************************************************************
N#define PWM_1_LOAD_LOAD_M       0x0000FFFF  // Counter Load Value
N#define PWM_1_LOAD_LOAD_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_COUNT register.
N//
N//*****************************************************************************
N#define PWM_1_COUNT_COUNT_M     0x0000FFFF  // Counter Value
N#define PWM_1_COUNT_COUNT_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_CMPA register.
N//
N//*****************************************************************************
N#define PWM_1_CMPA_COMPA_M      0x0000FFFF  // Comparator A Value
N#define PWM_1_CMPA_COMPA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_CMPB register.
N//
N//*****************************************************************************
N#define PWM_1_CMPB_COMPB_M      0x0000FFFF  // Comparator B Value
N#define PWM_1_CMPB_COMPB_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_GENA register.
N//
N//*****************************************************************************
N#define PWM_1_GENA_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_1_GENA_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENA_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_1_GENA_ACTCMPBD_INV 0x00000400  // Invert the output signal
N#define PWM_1_GENA_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Set the output signal to 0
X#define PWM_1_GENA_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_1_GENA_ACTCMPBD_ONE 0x00000C00  // Set the output signal to 1
N#define PWM_1_GENA_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_1_GENA_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENA_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_1_GENA_ACTCMPBU_INV 0x00000100  // Invert the output signal
N#define PWM_1_GENA_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Set the output signal to 0
X#define PWM_1_GENA_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_1_GENA_ACTCMPBU_ONE 0x00000300  // Set the output signal to 1
N#define PWM_1_GENA_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_1_GENA_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENA_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_1_GENA_ACTCMPAD_INV 0x00000040  // Invert the output signal
N#define PWM_1_GENA_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Set the output signal to 0
X#define PWM_1_GENA_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_1_GENA_ACTCMPAD_ONE 0x000000C0  // Set the output signal to 1
N#define PWM_1_GENA_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_1_GENA_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENA_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_1_GENA_ACTCMPAU_INV 0x00000010  // Invert the output signal
N#define PWM_1_GENA_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Set the output signal to 0
X#define PWM_1_GENA_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_1_GENA_ACTCMPAU_ONE 0x00000030  // Set the output signal to 1
N#define PWM_1_GENA_ACTLOAD_M    0x0000000C  // Action for Counter=Load
N#define PWM_1_GENA_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_1_GENA_ACTLOAD_INV  0x00000004  // Invert the output signal
N#define PWM_1_GENA_ACTLOAD_ZERO 0x00000008  // Set the output signal to 0
N#define PWM_1_GENA_ACTLOAD_ONE  0x0000000C  // Set the output signal to 1
N#define PWM_1_GENA_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_1_GENA_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_1_GENA_ACTZERO_INV  0x00000001  // Invert the output signal
N#define PWM_1_GENA_ACTZERO_ZERO 0x00000002  // Set the output signal to 0
N#define PWM_1_GENA_ACTZERO_ONE  0x00000003  // Set the output signal to 1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_GENB register.
N//
N//*****************************************************************************
N#define PWM_1_GENB_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_1_GENB_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENB_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_1_GENB_ACTCMPBD_INV 0x00000400  // Invert the output signal
N#define PWM_1_GENB_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Set the output signal to 0
X#define PWM_1_GENB_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_1_GENB_ACTCMPBD_ONE 0x00000C00  // Set the output signal to 1
N#define PWM_1_GENB_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_1_GENB_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENB_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_1_GENB_ACTCMPBU_INV 0x00000100  // Invert the output signal
N#define PWM_1_GENB_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Set the output signal to 0
X#define PWM_1_GENB_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_1_GENB_ACTCMPBU_ONE 0x00000300  // Set the output signal to 1
N#define PWM_1_GENB_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_1_GENB_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENB_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_1_GENB_ACTCMPAD_INV 0x00000040  // Invert the output signal
N#define PWM_1_GENB_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Set the output signal to 0
X#define PWM_1_GENB_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_1_GENB_ACTCMPAD_ONE 0x000000C0  // Set the output signal to 1
N#define PWM_1_GENB_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_1_GENB_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_1_GENB_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_1_GENB_ACTCMPAU_INV 0x00000010  // Invert the output signal
N#define PWM_1_GENB_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Set the output signal to 0
X#define PWM_1_GENB_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_1_GENB_ACTCMPAU_ONE 0x00000030  // Set the output signal to 1
N#define PWM_1_GENB_ACTLOAD_M    0x0000000C  // Action for Counter=Load
N#define PWM_1_GENB_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_1_GENB_ACTLOAD_INV  0x00000004  // Invert the output signal
N#define PWM_1_GENB_ACTLOAD_ZERO 0x00000008  // Set the output signal to 0
N#define PWM_1_GENB_ACTLOAD_ONE  0x0000000C  // Set the output signal to 1
N#define PWM_1_GENB_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_1_GENB_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_1_GENB_ACTZERO_INV  0x00000001  // Invert the output signal
N#define PWM_1_GENB_ACTZERO_ZERO 0x00000002  // Set the output signal to 0
N#define PWM_1_GENB_ACTZERO_ONE  0x00000003  // Set the output signal to 1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_DBCTL register.
N//
N//*****************************************************************************
N#define PWM_1_DBCTL_ENABLE      0x00000001  // Dead-Band Generator Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_DBRISE register.
N//
N//*****************************************************************************
N#define PWM_1_DBRISE_RISEDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Rise Delay
X#define PWM_1_DBRISE_RISEDELAY_M                                                                              0x00000FFF  
N#define PWM_1_DBRISE_RISEDELAY_S                                              \
N                                0
X#define PWM_1_DBRISE_RISEDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_DBFALL register.
N//
N//*****************************************************************************
N#define PWM_1_DBFALL_FALLDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Fall Delay
X#define PWM_1_DBFALL_FALLDELAY_M                                                                              0x00000FFF  
N#define PWM_1_DBFALL_FALLDELAY_S                                              \
N                                0
X#define PWM_1_DBFALL_FALLDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSRC0
N// register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSRC0_FAULT3    0x00000008  // Fault3 Input
N#define PWM_1_FLTSRC0_FAULT2    0x00000004  // Fault2 Input
N#define PWM_1_FLTSRC0_FAULT1    0x00000002  // Fault1 Input
N#define PWM_1_FLTSRC0_FAULT0    0x00000001  // Fault0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSRC1
N// register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSRC1_DCMP7     0x00000080  // Digital Comparator 7
N#define PWM_1_FLTSRC1_DCMP6     0x00000040  // Digital Comparator 6
N#define PWM_1_FLTSRC1_DCMP5     0x00000020  // Digital Comparator 5
N#define PWM_1_FLTSRC1_DCMP4     0x00000010  // Digital Comparator 4
N#define PWM_1_FLTSRC1_DCMP3     0x00000008  // Digital Comparator 3
N#define PWM_1_FLTSRC1_DCMP2     0x00000004  // Digital Comparator 2
N#define PWM_1_FLTSRC1_DCMP1     0x00000002  // Digital Comparator 1
N#define PWM_1_FLTSRC1_DCMP0     0x00000001  // Digital Comparator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_MINFLTPER
N// register.
N//
N//*****************************************************************************
N#define PWM_1_MINFLTPER_MFP_M   0x0000FFFF  // Minimum Fault Period
N#define PWM_1_MINFLTPER_MFP_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_CTL register.
N//
N//*****************************************************************************
N#define PWM_2_CTL_LATCH         0x00040000  // Latch Fault Input
N#define PWM_2_CTL_MINFLTPER     0x00020000  // Minimum Fault Period
N#define PWM_2_CTL_FLTSRC        0x00010000  // Fault Condition Source
N#define PWM_2_CTL_DBFALLUPD_M   0x0000C000  // Specifies the update mode for
N                                            // the PWMnDBFALL register
N#define PWM_2_CTL_DBFALLUPD_I   0x00000000  // Immediate
N#define PWM_2_CTL_DBFALLUPD_LS  0x00008000  // Locally Synchronized
N#define PWM_2_CTL_DBFALLUPD_GS  0x0000C000  // Globally Synchronized
N#define PWM_2_CTL_DBRISEUPD_M   0x00003000  // PWMnDBRISE Update Mode
N#define PWM_2_CTL_DBRISEUPD_I   0x00000000  // Immediate
N#define PWM_2_CTL_DBRISEUPD_LS  0x00002000  // Locally Synchronized
N#define PWM_2_CTL_DBRISEUPD_GS  0x00003000  // Globally Synchronized
N#define PWM_2_CTL_DBCTLUPD_M    0x00000C00  // PWMnDBCTL Update Mode
N#define PWM_2_CTL_DBCTLUPD_I    0x00000000  // Immediate
N#define PWM_2_CTL_DBCTLUPD_LS   0x00000800  // Locally Synchronized
N#define PWM_2_CTL_DBCTLUPD_GS   0x00000C00  // Globally Synchronized
N#define PWM_2_CTL_GENBUPD_M     0x00000300  // PWMnGENB Update Mode
N#define PWM_2_CTL_GENBUPD_I     0x00000000  // Immediate
N#define PWM_2_CTL_GENBUPD_LS    0x00000200  // Locally Synchronized
N#define PWM_2_CTL_GENBUPD_GS    0x00000300  // Globally Synchronized
N#define PWM_2_CTL_GENAUPD_M     0x000000C0  // PWMnGENA Update Mode
N#define PWM_2_CTL_GENAUPD_I     0x00000000  // Immediate
N#define PWM_2_CTL_GENAUPD_LS    0x00000080  // Locally Synchronized
N#define PWM_2_CTL_GENAUPD_GS    0x000000C0  // Globally Synchronized
N#define PWM_2_CTL_CMPBUPD       0x00000020  // Comparator B Update Mode
N#define PWM_2_CTL_CMPAUPD       0x00000010  // Comparator A Update Mode
N#define PWM_2_CTL_LOADUPD       0x00000008  // Load Register Update Mode
N#define PWM_2_CTL_DEBUG         0x00000004  // Debug Mode
N#define PWM_2_CTL_MODE          0x00000002  // Counter Mode
N#define PWM_2_CTL_ENABLE        0x00000001  // PWM Block Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_INTEN register.
N//
N//*****************************************************************************
N#define PWM_2_INTEN_TRCMPBD     0x00002000  // Trigger for Counter=Comparator B
N                                            // Down
N#define PWM_2_INTEN_TRCMPBU     0x00001000  // Trigger for Counter=Comparator B
N                                            // Up
N#define PWM_2_INTEN_TRCMPAD     0x00000800  // Trigger for Counter=Comparator A
N                                            // Down
N#define PWM_2_INTEN_TRCMPAU     0x00000400  // Trigger for Counter=Comparator A
N                                            // Up
N#define PWM_2_INTEN_TRCNTLOAD   0x00000200  // Trigger for Counter=Load
N#define PWM_2_INTEN_TRCNTZERO   0x00000100  // Trigger for Counter=0
N#define PWM_2_INTEN_INTCMPBD    0x00000020  // Interrupt for Counter=Comparator
N                                            // B Down
N#define PWM_2_INTEN_INTCMPBU    0x00000010  // Interrupt for Counter=Comparator
N                                            // B Up
N#define PWM_2_INTEN_INTCMPAD    0x00000008  // Interrupt for Counter=Comparator
N                                            // A Down
N#define PWM_2_INTEN_INTCMPAU    0x00000004  // Interrupt for Counter=Comparator
N                                            // A Up
N#define PWM_2_INTEN_INTCNTLOAD  0x00000002  // Interrupt for Counter=Load
N#define PWM_2_INTEN_INTCNTZERO  0x00000001  // Interrupt for Counter=0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_RIS register.
N//
N//*****************************************************************************
N#define PWM_2_RIS_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N                                            // Status
N#define PWM_2_RIS_INTCMPBU      0x00000010  // Comparator B Up Interrupt Status
N#define PWM_2_RIS_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N                                            // Status
N#define PWM_2_RIS_INTCMPAU      0x00000004  // Comparator A Up Interrupt Status
N#define PWM_2_RIS_INTCNTLOAD    0x00000002  // Counter=Load Interrupt Status
N#define PWM_2_RIS_INTCNTZERO    0x00000001  // Counter=0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_ISC register.
N//
N//*****************************************************************************
N#define PWM_2_ISC_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N#define PWM_2_ISC_INTCMPBU      0x00000010  // Comparator B Up Interrupt
N#define PWM_2_ISC_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N#define PWM_2_ISC_INTCMPAU      0x00000004  // Comparator A Up Interrupt
N#define PWM_2_ISC_INTCNTLOAD    0x00000002  // Counter=Load Interrupt
N#define PWM_2_ISC_INTCNTZERO    0x00000001  // Counter=0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_LOAD register.
N//
N//*****************************************************************************
N#define PWM_2_LOAD_LOAD_M       0x0000FFFF  // Counter Load Value
N#define PWM_2_LOAD_LOAD_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_COUNT register.
N//
N//*****************************************************************************
N#define PWM_2_COUNT_COUNT_M     0x0000FFFF  // Counter Value
N#define PWM_2_COUNT_COUNT_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_CMPA register.
N//
N//*****************************************************************************
N#define PWM_2_CMPA_COMPA_M      0x0000FFFF  // Comparator A Value
N#define PWM_2_CMPA_COMPA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_CMPB register.
N//
N//*****************************************************************************
N#define PWM_2_CMPB_COMPB_M      0x0000FFFF  // Comparator B Value
N#define PWM_2_CMPB_COMPB_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_GENA register.
N//
N//*****************************************************************************
N#define PWM_2_GENA_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_2_GENA_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENA_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_2_GENA_ACTCMPBD_INV 0x00000400  // Invert the output signal
N#define PWM_2_GENA_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Set the output signal to 0
X#define PWM_2_GENA_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_2_GENA_ACTCMPBD_ONE 0x00000C00  // Set the output signal to 1
N#define PWM_2_GENA_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_2_GENA_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENA_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_2_GENA_ACTCMPBU_INV 0x00000100  // Invert the output signal
N#define PWM_2_GENA_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Set the output signal to 0
X#define PWM_2_GENA_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_2_GENA_ACTCMPBU_ONE 0x00000300  // Set the output signal to 1
N#define PWM_2_GENA_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_2_GENA_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENA_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_2_GENA_ACTCMPAD_INV 0x00000040  // Invert the output signal
N#define PWM_2_GENA_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Set the output signal to 0
X#define PWM_2_GENA_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_2_GENA_ACTCMPAD_ONE 0x000000C0  // Set the output signal to 1
N#define PWM_2_GENA_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_2_GENA_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENA_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_2_GENA_ACTCMPAU_INV 0x00000010  // Invert the output signal
N#define PWM_2_GENA_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Set the output signal to 0
X#define PWM_2_GENA_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_2_GENA_ACTCMPAU_ONE 0x00000030  // Set the output signal to 1
N#define PWM_2_GENA_ACTLOAD_M    0x0000000C  // Action for Counter=Load
N#define PWM_2_GENA_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_2_GENA_ACTLOAD_INV  0x00000004  // Invert the output signal
N#define PWM_2_GENA_ACTLOAD_ZERO 0x00000008  // Set the output signal to 0
N#define PWM_2_GENA_ACTLOAD_ONE  0x0000000C  // Set the output signal to 1
N#define PWM_2_GENA_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_2_GENA_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_2_GENA_ACTZERO_INV  0x00000001  // Invert the output signal
N#define PWM_2_GENA_ACTZERO_ZERO 0x00000002  // Set the output signal to 0
N#define PWM_2_GENA_ACTZERO_ONE  0x00000003  // Set the output signal to 1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_GENB register.
N//
N//*****************************************************************************
N#define PWM_2_GENB_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_2_GENB_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENB_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_2_GENB_ACTCMPBD_INV 0x00000400  // Invert the output signal
N#define PWM_2_GENB_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Set the output signal to 0
X#define PWM_2_GENB_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_2_GENB_ACTCMPBD_ONE 0x00000C00  // Set the output signal to 1
N#define PWM_2_GENB_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_2_GENB_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENB_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_2_GENB_ACTCMPBU_INV 0x00000100  // Invert the output signal
N#define PWM_2_GENB_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Set the output signal to 0
X#define PWM_2_GENB_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_2_GENB_ACTCMPBU_ONE 0x00000300  // Set the output signal to 1
N#define PWM_2_GENB_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_2_GENB_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENB_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_2_GENB_ACTCMPAD_INV 0x00000040  // Invert the output signal
N#define PWM_2_GENB_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Set the output signal to 0
X#define PWM_2_GENB_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_2_GENB_ACTCMPAD_ONE 0x000000C0  // Set the output signal to 1
N#define PWM_2_GENB_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_2_GENB_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_2_GENB_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_2_GENB_ACTCMPAU_INV 0x00000010  // Invert the output signal
N#define PWM_2_GENB_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Set the output signal to 0
X#define PWM_2_GENB_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_2_GENB_ACTCMPAU_ONE 0x00000030  // Set the output signal to 1
N#define PWM_2_GENB_ACTLOAD_M    0x0000000C  // Action for Counter=Load
N#define PWM_2_GENB_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_2_GENB_ACTLOAD_INV  0x00000004  // Invert the output signal
N#define PWM_2_GENB_ACTLOAD_ZERO 0x00000008  // Set the output signal to 0
N#define PWM_2_GENB_ACTLOAD_ONE  0x0000000C  // Set the output signal to 1
N#define PWM_2_GENB_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_2_GENB_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_2_GENB_ACTZERO_INV  0x00000001  // Invert the output signal
N#define PWM_2_GENB_ACTZERO_ZERO 0x00000002  // Set the output signal to 0
N#define PWM_2_GENB_ACTZERO_ONE  0x00000003  // Set the output signal to 1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_DBCTL register.
N//
N//*****************************************************************************
N#define PWM_2_DBCTL_ENABLE      0x00000001  // Dead-Band Generator Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_DBRISE register.
N//
N//*****************************************************************************
N#define PWM_2_DBRISE_RISEDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Rise Delay
X#define PWM_2_DBRISE_RISEDELAY_M                                                                              0x00000FFF  
N#define PWM_2_DBRISE_RISEDELAY_S                                              \
N                                0
X#define PWM_2_DBRISE_RISEDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_DBFALL register.
N//
N//*****************************************************************************
N#define PWM_2_DBFALL_FALLDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Fall Delay
X#define PWM_2_DBFALL_FALLDELAY_M                                                                              0x00000FFF  
N#define PWM_2_DBFALL_FALLDELAY_S                                              \
N                                0
X#define PWM_2_DBFALL_FALLDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSRC0
N// register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSRC0_FAULT3    0x00000008  // Fault3 Input
N#define PWM_2_FLTSRC0_FAULT2    0x00000004  // Fault2 Input
N#define PWM_2_FLTSRC0_FAULT1    0x00000002  // Fault1 Input
N#define PWM_2_FLTSRC0_FAULT0    0x00000001  // Fault0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSRC1
N// register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSRC1_DCMP7     0x00000080  // Digital Comparator 7
N#define PWM_2_FLTSRC1_DCMP6     0x00000040  // Digital Comparator 6
N#define PWM_2_FLTSRC1_DCMP5     0x00000020  // Digital Comparator 5
N#define PWM_2_FLTSRC1_DCMP4     0x00000010  // Digital Comparator 4
N#define PWM_2_FLTSRC1_DCMP3     0x00000008  // Digital Comparator 3
N#define PWM_2_FLTSRC1_DCMP2     0x00000004  // Digital Comparator 2
N#define PWM_2_FLTSRC1_DCMP1     0x00000002  // Digital Comparator 1
N#define PWM_2_FLTSRC1_DCMP0     0x00000001  // Digital Comparator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_MINFLTPER
N// register.
N//
N//*****************************************************************************
N#define PWM_2_MINFLTPER_MFP_M   0x0000FFFF  // Minimum Fault Period
N#define PWM_2_MINFLTPER_MFP_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_CTL register.
N//
N//*****************************************************************************
N#define PWM_3_CTL_LATCH         0x00040000  // Latch Fault Input
N#define PWM_3_CTL_MINFLTPER     0x00020000  // Minimum Fault Period
N#define PWM_3_CTL_FLTSRC        0x00010000  // Fault Condition Source
N#define PWM_3_CTL_DBFALLUPD_M   0x0000C000  // Specifies the update mode for
N                                            // the PWMnDBFALL register
N#define PWM_3_CTL_DBFALLUPD_I   0x00000000  // Immediate
N#define PWM_3_CTL_DBFALLUPD_LS  0x00008000  // Locally Synchronized
N#define PWM_3_CTL_DBFALLUPD_GS  0x0000C000  // Globally Synchronized
N#define PWM_3_CTL_DBRISEUPD_M   0x00003000  // PWMnDBRISE Update Mode
N#define PWM_3_CTL_DBRISEUPD_I   0x00000000  // Immediate
N#define PWM_3_CTL_DBRISEUPD_LS  0x00002000  // Locally Synchronized
N#define PWM_3_CTL_DBRISEUPD_GS  0x00003000  // Globally Synchronized
N#define PWM_3_CTL_DBCTLUPD_M    0x00000C00  // PWMnDBCTL Update Mode
N#define PWM_3_CTL_DBCTLUPD_I    0x00000000  // Immediate
N#define PWM_3_CTL_DBCTLUPD_LS   0x00000800  // Locally Synchronized
N#define PWM_3_CTL_DBCTLUPD_GS   0x00000C00  // Globally Synchronized
N#define PWM_3_CTL_GENBUPD_M     0x00000300  // PWMnGENB Update Mode
N#define PWM_3_CTL_GENBUPD_I     0x00000000  // Immediate
N#define PWM_3_CTL_GENBUPD_LS    0x00000200  // Locally Synchronized
N#define PWM_3_CTL_GENBUPD_GS    0x00000300  // Globally Synchronized
N#define PWM_3_CTL_GENAUPD_M     0x000000C0  // PWMnGENA Update Mode
N#define PWM_3_CTL_GENAUPD_I     0x00000000  // Immediate
N#define PWM_3_CTL_GENAUPD_LS    0x00000080  // Locally Synchronized
N#define PWM_3_CTL_GENAUPD_GS    0x000000C0  // Globally Synchronized
N#define PWM_3_CTL_CMPBUPD       0x00000020  // Comparator B Update Mode
N#define PWM_3_CTL_CMPAUPD       0x00000010  // Comparator A Update Mode
N#define PWM_3_CTL_LOADUPD       0x00000008  // Load Register Update Mode
N#define PWM_3_CTL_DEBUG         0x00000004  // Debug Mode
N#define PWM_3_CTL_MODE          0x00000002  // Counter Mode
N#define PWM_3_CTL_ENABLE        0x00000001  // PWM Block Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_INTEN register.
N//
N//*****************************************************************************
N#define PWM_3_INTEN_TRCMPBD     0x00002000  // Trigger for Counter=Comparator B
N                                            // Down
N#define PWM_3_INTEN_TRCMPBU     0x00001000  // Trigger for Counter=Comparator B
N                                            // Up
N#define PWM_3_INTEN_TRCMPAD     0x00000800  // Trigger for Counter=Comparator A
N                                            // Down
N#define PWM_3_INTEN_TRCMPAU     0x00000400  // Trigger for Counter=Comparator A
N                                            // Up
N#define PWM_3_INTEN_TRCNTLOAD   0x00000200  // Trigger for Counter=Load
N#define PWM_3_INTEN_TRCNTZERO   0x00000100  // Trigger for Counter=0
N#define PWM_3_INTEN_INTCMPBD    0x00000020  // Interrupt for Counter=Comparator
N                                            // B Down
N#define PWM_3_INTEN_INTCMPBU    0x00000010  // Interrupt for Counter=Comparator
N                                            // B Up
N#define PWM_3_INTEN_INTCMPAD    0x00000008  // Interrupt for Counter=Comparator
N                                            // A Down
N#define PWM_3_INTEN_INTCMPAU    0x00000004  // Interrupt for Counter=Comparator
N                                            // A Up
N#define PWM_3_INTEN_INTCNTLOAD  0x00000002  // Interrupt for Counter=Load
N#define PWM_3_INTEN_INTCNTZERO  0x00000001  // Interrupt for Counter=0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_RIS register.
N//
N//*****************************************************************************
N#define PWM_3_RIS_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N                                            // Status
N#define PWM_3_RIS_INTCMPBU      0x00000010  // Comparator B Up Interrupt Status
N#define PWM_3_RIS_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N                                            // Status
N#define PWM_3_RIS_INTCMPAU      0x00000004  // Comparator A Up Interrupt Status
N#define PWM_3_RIS_INTCNTLOAD    0x00000002  // Counter=Load Interrupt Status
N#define PWM_3_RIS_INTCNTZERO    0x00000001  // Counter=0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_ISC register.
N//
N//*****************************************************************************
N#define PWM_3_ISC_INTCMPBD      0x00000020  // Comparator B Down Interrupt
N#define PWM_3_ISC_INTCMPBU      0x00000010  // Comparator B Up Interrupt
N#define PWM_3_ISC_INTCMPAD      0x00000008  // Comparator A Down Interrupt
N#define PWM_3_ISC_INTCMPAU      0x00000004  // Comparator A Up Interrupt
N#define PWM_3_ISC_INTCNTLOAD    0x00000002  // Counter=Load Interrupt
N#define PWM_3_ISC_INTCNTZERO    0x00000001  // Counter=0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_LOAD register.
N//
N//*****************************************************************************
N#define PWM_3_LOAD_LOAD_M       0x0000FFFF  // Counter Load Value
N#define PWM_3_LOAD_LOAD_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_COUNT register.
N//
N//*****************************************************************************
N#define PWM_3_COUNT_COUNT_M     0x0000FFFF  // Counter Value
N#define PWM_3_COUNT_COUNT_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_CMPA register.
N//
N//*****************************************************************************
N#define PWM_3_CMPA_COMPA_M      0x0000FFFF  // Comparator A Value
N#define PWM_3_CMPA_COMPA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_CMPB register.
N//
N//*****************************************************************************
N#define PWM_3_CMPB_COMPB_M      0x0000FFFF  // Comparator B Value
N#define PWM_3_CMPB_COMPB_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_GENA register.
N//
N//*****************************************************************************
N#define PWM_3_GENA_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_3_GENA_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENA_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_3_GENA_ACTCMPBD_INV 0x00000400  // Invert the output signal
N#define PWM_3_GENA_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Set the output signal to 0
X#define PWM_3_GENA_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_3_GENA_ACTCMPBD_ONE 0x00000C00  // Set the output signal to 1
N#define PWM_3_GENA_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_3_GENA_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENA_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_3_GENA_ACTCMPBU_INV 0x00000100  // Invert the output signal
N#define PWM_3_GENA_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Set the output signal to 0
X#define PWM_3_GENA_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_3_GENA_ACTCMPBU_ONE 0x00000300  // Set the output signal to 1
N#define PWM_3_GENA_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_3_GENA_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENA_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_3_GENA_ACTCMPAD_INV 0x00000040  // Invert the output signal
N#define PWM_3_GENA_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Set the output signal to 0
X#define PWM_3_GENA_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_3_GENA_ACTCMPAD_ONE 0x000000C0  // Set the output signal to 1
N#define PWM_3_GENA_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_3_GENA_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENA_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_3_GENA_ACTCMPAU_INV 0x00000010  // Invert the output signal
N#define PWM_3_GENA_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Set the output signal to 0
X#define PWM_3_GENA_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_3_GENA_ACTCMPAU_ONE 0x00000030  // Set the output signal to 1
N#define PWM_3_GENA_ACTLOAD_M    0x0000000C  // Action for Counter=Load
N#define PWM_3_GENA_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_3_GENA_ACTLOAD_INV  0x00000004  // Invert the output signal
N#define PWM_3_GENA_ACTLOAD_ZERO 0x00000008  // Set the output signal to 0
N#define PWM_3_GENA_ACTLOAD_ONE  0x0000000C  // Set the output signal to 1
N#define PWM_3_GENA_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_3_GENA_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_3_GENA_ACTZERO_INV  0x00000001  // Invert the output signal
N#define PWM_3_GENA_ACTZERO_ZERO 0x00000002  // Set the output signal to 0
N#define PWM_3_GENA_ACTZERO_ONE  0x00000003  // Set the output signal to 1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_GENB register.
N//
N//*****************************************************************************
N#define PWM_3_GENB_ACTCMPBD_M   0x00000C00  // Action for Comparator B Down
N#define PWM_3_GENB_ACTCMPBD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENB_ACTCMPBD_NONE                                                                              0x00000000  
N#define PWM_3_GENB_ACTCMPBD_INV 0x00000400  // Invert the output signal
N#define PWM_3_GENB_ACTCMPBD_ZERO                                              \
N                                0x00000800  // Set the output signal to 0
X#define PWM_3_GENB_ACTCMPBD_ZERO                                                                              0x00000800  
N#define PWM_3_GENB_ACTCMPBD_ONE 0x00000C00  // Set the output signal to 1
N#define PWM_3_GENB_ACTCMPBU_M   0x00000300  // Action for Comparator B Up
N#define PWM_3_GENB_ACTCMPBU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENB_ACTCMPBU_NONE                                                                              0x00000000  
N#define PWM_3_GENB_ACTCMPBU_INV 0x00000100  // Invert the output signal
N#define PWM_3_GENB_ACTCMPBU_ZERO                                              \
N                                0x00000200  // Set the output signal to 0
X#define PWM_3_GENB_ACTCMPBU_ZERO                                                                              0x00000200  
N#define PWM_3_GENB_ACTCMPBU_ONE 0x00000300  // Set the output signal to 1
N#define PWM_3_GENB_ACTCMPAD_M   0x000000C0  // Action for Comparator A Down
N#define PWM_3_GENB_ACTCMPAD_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENB_ACTCMPAD_NONE                                                                              0x00000000  
N#define PWM_3_GENB_ACTCMPAD_INV 0x00000040  // Invert the output signal
N#define PWM_3_GENB_ACTCMPAD_ZERO                                              \
N                                0x00000080  // Set the output signal to 0
X#define PWM_3_GENB_ACTCMPAD_ZERO                                                                              0x00000080  
N#define PWM_3_GENB_ACTCMPAD_ONE 0x000000C0  // Set the output signal to 1
N#define PWM_3_GENB_ACTCMPAU_M   0x00000030  // Action for Comparator A Up
N#define PWM_3_GENB_ACTCMPAU_NONE                                              \
N                                0x00000000  // Do nothing
X#define PWM_3_GENB_ACTCMPAU_NONE                                                                              0x00000000  
N#define PWM_3_GENB_ACTCMPAU_INV 0x00000010  // Invert the output signal
N#define PWM_3_GENB_ACTCMPAU_ZERO                                              \
N                                0x00000020  // Set the output signal to 0
X#define PWM_3_GENB_ACTCMPAU_ZERO                                                                              0x00000020  
N#define PWM_3_GENB_ACTCMPAU_ONE 0x00000030  // Set the output signal to 1
N#define PWM_3_GENB_ACTLOAD_M    0x0000000C  // Action for Counter=Load
N#define PWM_3_GENB_ACTLOAD_NONE 0x00000000  // Do nothing
N#define PWM_3_GENB_ACTLOAD_INV  0x00000004  // Invert the output signal
N#define PWM_3_GENB_ACTLOAD_ZERO 0x00000008  // Set the output signal to 0
N#define PWM_3_GENB_ACTLOAD_ONE  0x0000000C  // Set the output signal to 1
N#define PWM_3_GENB_ACTZERO_M    0x00000003  // Action for Counter=0
N#define PWM_3_GENB_ACTZERO_NONE 0x00000000  // Do nothing
N#define PWM_3_GENB_ACTZERO_INV  0x00000001  // Invert the output signal
N#define PWM_3_GENB_ACTZERO_ZERO 0x00000002  // Set the output signal to 0
N#define PWM_3_GENB_ACTZERO_ONE  0x00000003  // Set the output signal to 1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_DBCTL register.
N//
N//*****************************************************************************
N#define PWM_3_DBCTL_ENABLE      0x00000001  // Dead-Band Generator Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_DBRISE register.
N//
N//*****************************************************************************
N#define PWM_3_DBRISE_RISEDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Rise Delay
X#define PWM_3_DBRISE_RISEDELAY_M                                                                              0x00000FFF  
N#define PWM_3_DBRISE_RISEDELAY_S                                              \
N                                0
X#define PWM_3_DBRISE_RISEDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_DBFALL register.
N//
N//*****************************************************************************
N#define PWM_3_DBFALL_FALLDELAY_M                                              \
N                                0x00000FFF  // Dead-Band Fall Delay
X#define PWM_3_DBFALL_FALLDELAY_M                                                                              0x00000FFF  
N#define PWM_3_DBFALL_FALLDELAY_S                                              \
N                                0
X#define PWM_3_DBFALL_FALLDELAY_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSRC0
N// register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSRC0_FAULT3    0x00000008  // Fault3 Input
N#define PWM_3_FLTSRC0_FAULT2    0x00000004  // Fault2
N#define PWM_3_FLTSRC0_FAULT1    0x00000002  // Fault1
N#define PWM_3_FLTSRC0_FAULT0    0x00000001  // Fault0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSRC1
N// register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSRC1_DCMP7     0x00000080  // Digital Comparator 7
N#define PWM_3_FLTSRC1_DCMP6     0x00000040  // Digital Comparator 6
N#define PWM_3_FLTSRC1_DCMP5     0x00000020  // Digital Comparator 5
N#define PWM_3_FLTSRC1_DCMP4     0x00000010  // Digital Comparator 4
N#define PWM_3_FLTSRC1_DCMP3     0x00000008  // Digital Comparator 3
N#define PWM_3_FLTSRC1_DCMP2     0x00000004  // Digital Comparator 2
N#define PWM_3_FLTSRC1_DCMP1     0x00000002  // Digital Comparator 1
N#define PWM_3_FLTSRC1_DCMP0     0x00000001  // Digital Comparator 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_MINFLTPER
N// register.
N//
N//*****************************************************************************
N#define PWM_3_MINFLTPER_MFP_M   0x0000FFFF  // Minimum Fault Period
N#define PWM_3_MINFLTPER_MFP_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSEN register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSEN_FAULT3     0x00000008  // Fault3 Sense
N#define PWM_0_FLTSEN_FAULT2     0x00000004  // Fault2 Sense
N#define PWM_0_FLTSEN_FAULT1     0x00000002  // Fault1 Sense
N#define PWM_0_FLTSEN_FAULT0     0x00000001  // Fault0 Sense
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSTAT0
N// register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSTAT0_FAULT3   0x00000008  // Fault Input 3
N#define PWM_0_FLTSTAT0_FAULT2   0x00000004  // Fault Input 2
N#define PWM_0_FLTSTAT0_FAULT1   0x00000002  // Fault Input 1
N#define PWM_0_FLTSTAT0_FAULT0   0x00000001  // Fault Input 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_0_FLTSTAT1
N// register.
N//
N//*****************************************************************************
N#define PWM_0_FLTSTAT1_DCMP7    0x00000080  // Digital Comparator 7 Trigger
N#define PWM_0_FLTSTAT1_DCMP6    0x00000040  // Digital Comparator 6 Trigger
N#define PWM_0_FLTSTAT1_DCMP5    0x00000020  // Digital Comparator 5 Trigger
N#define PWM_0_FLTSTAT1_DCMP4    0x00000010  // Digital Comparator 4 Trigger
N#define PWM_0_FLTSTAT1_DCMP3    0x00000008  // Digital Comparator 3 Trigger
N#define PWM_0_FLTSTAT1_DCMP2    0x00000004  // Digital Comparator 2 Trigger
N#define PWM_0_FLTSTAT1_DCMP1    0x00000002  // Digital Comparator 1 Trigger
N#define PWM_0_FLTSTAT1_DCMP0    0x00000001  // Digital Comparator 0 Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSEN register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSEN_FAULT3     0x00000008  // Fault3 Sense
N#define PWM_1_FLTSEN_FAULT2     0x00000004  // Fault2 Sense
N#define PWM_1_FLTSEN_FAULT1     0x00000002  // Fault1 Sense
N#define PWM_1_FLTSEN_FAULT0     0x00000001  // Fault0 Sense
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSTAT0
N// register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSTAT0_FAULT3   0x00000008  // Fault Input 3
N#define PWM_1_FLTSTAT0_FAULT2   0x00000004  // Fault Input 2
N#define PWM_1_FLTSTAT0_FAULT1   0x00000002  // Fault Input 1
N#define PWM_1_FLTSTAT0_FAULT0   0x00000001  // Fault Input 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_1_FLTSTAT1
N// register.
N//
N//*****************************************************************************
N#define PWM_1_FLTSTAT1_DCMP7    0x00000080  // Digital Comparator 7 Trigger
N#define PWM_1_FLTSTAT1_DCMP6    0x00000040  // Digital Comparator 6 Trigger
N#define PWM_1_FLTSTAT1_DCMP5    0x00000020  // Digital Comparator 5 Trigger
N#define PWM_1_FLTSTAT1_DCMP4    0x00000010  // Digital Comparator 4 Trigger
N#define PWM_1_FLTSTAT1_DCMP3    0x00000008  // Digital Comparator 3 Trigger
N#define PWM_1_FLTSTAT1_DCMP2    0x00000004  // Digital Comparator 2 Trigger
N#define PWM_1_FLTSTAT1_DCMP1    0x00000002  // Digital Comparator 1 Trigger
N#define PWM_1_FLTSTAT1_DCMP0    0x00000001  // Digital Comparator 0 Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSEN register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSEN_FAULT3     0x00000008  // Fault3 Sense
N#define PWM_2_FLTSEN_FAULT2     0x00000004  // Fault2 Sense
N#define PWM_2_FLTSEN_FAULT1     0x00000002  // Fault1 Sense
N#define PWM_2_FLTSEN_FAULT0     0x00000001  // Fault0 Sense
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSTAT0
N// register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSTAT0_FAULT3   0x00000008  // Fault Input 3
N#define PWM_2_FLTSTAT0_FAULT2   0x00000004  // Fault Input 2
N#define PWM_2_FLTSTAT0_FAULT1   0x00000002  // Fault Input 1
N#define PWM_2_FLTSTAT0_FAULT0   0x00000001  // Fault Input 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_2_FLTSTAT1
N// register.
N//
N//*****************************************************************************
N#define PWM_2_FLTSTAT1_DCMP7    0x00000080  // Digital Comparator 7 Trigger
N#define PWM_2_FLTSTAT1_DCMP6    0x00000040  // Digital Comparator 6 Trigger
N#define PWM_2_FLTSTAT1_DCMP5    0x00000020  // Digital Comparator 5 Trigger
N#define PWM_2_FLTSTAT1_DCMP4    0x00000010  // Digital Comparator 4 Trigger
N#define PWM_2_FLTSTAT1_DCMP3    0x00000008  // Digital Comparator 3 Trigger
N#define PWM_2_FLTSTAT1_DCMP2    0x00000004  // Digital Comparator 2 Trigger
N#define PWM_2_FLTSTAT1_DCMP1    0x00000002  // Digital Comparator 1 Trigger
N#define PWM_2_FLTSTAT1_DCMP0    0x00000001  // Digital Comparator 0 Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSEN register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSEN_FAULT3     0x00000008  // Fault3 Sense
N#define PWM_3_FLTSEN_FAULT2     0x00000004  // Fault2 Sense
N#define PWM_3_FLTSEN_FAULT1     0x00000002  // Fault1 Sense
N#define PWM_3_FLTSEN_FAULT0     0x00000001  // Fault0 Sense
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSTAT0
N// register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSTAT0_FAULT3   0x00000008  // Fault Input 3
N#define PWM_3_FLTSTAT0_FAULT2   0x00000004  // Fault Input 2
N#define PWM_3_FLTSTAT0_FAULT1   0x00000002  // Fault Input 1
N#define PWM_3_FLTSTAT0_FAULT0   0x00000001  // Fault Input 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_3_FLTSTAT1
N// register.
N//
N//*****************************************************************************
N#define PWM_3_FLTSTAT1_DCMP7    0x00000080  // Digital Comparator 7 Trigger
N#define PWM_3_FLTSTAT1_DCMP6    0x00000040  // Digital Comparator 6 Trigger
N#define PWM_3_FLTSTAT1_DCMP5    0x00000020  // Digital Comparator 5 Trigger
N#define PWM_3_FLTSTAT1_DCMP4    0x00000010  // Digital Comparator 4 Trigger
N#define PWM_3_FLTSTAT1_DCMP3    0x00000008  // Digital Comparator 3 Trigger
N#define PWM_3_FLTSTAT1_DCMP2    0x00000004  // Digital Comparator 2 Trigger
N#define PWM_3_FLTSTAT1_DCMP1    0x00000002  // Digital Comparator 1 Trigger
N#define PWM_3_FLTSTAT1_DCMP0    0x00000001  // Digital Comparator 0 Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_PP register.
N//
N//*****************************************************************************
N#define PWM_PP_ONE              0x00000400  // One-Shot Mode
N#define PWM_PP_EFAULT           0x00000200  // Extended Fault
N#define PWM_PP_ESYNC            0x00000100  // Extended Synchronization
N#define PWM_PP_FCNT_M           0x000000F0  // Fault Inputs
N#define PWM_PP_GCNT_M           0x0000000F  // Generators
N#define PWM_PP_FCNT_S           4
N#define PWM_PP_GCNT_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the PWM_O_CC register.
N//
N//*****************************************************************************
N#define PWM_CC_USEPWM           0x00000100  // Use PWM Clock Divisor
N#define PWM_CC_PWMDIV_M         0x00000007  // PWM Clock Divider
N#define PWM_CC_PWMDIV_2         0x00000000  // /2
N#define PWM_CC_PWMDIV_4         0x00000001  // /4
N#define PWM_CC_PWMDIV_8         0x00000002  // /8
N#define PWM_CC_PWMDIV_16        0x00000003  // /16
N#define PWM_CC_PWMDIV_32        0x00000004  // /32
N#define PWM_CC_PWMDIV_64        0x00000005  // /64
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_CTL register.
N//
N//*****************************************************************************
N#define QEI_CTL_FILTCNT_M       0x000F0000  // Input Filter Prescale Count
N#define QEI_CTL_FILTEN          0x00002000  // Enable Input Filter
N#define QEI_CTL_STALLEN         0x00001000  // Stall QEI
N#define QEI_CTL_INVI            0x00000800  // Invert Index Pulse
N#define QEI_CTL_INVB            0x00000400  // Invert PhB
N#define QEI_CTL_INVA            0x00000200  // Invert PhA
N#define QEI_CTL_VELDIV_M        0x000001C0  // Predivide Velocity
N#define QEI_CTL_VELDIV_1        0x00000000  // QEI clock /1
N#define QEI_CTL_VELDIV_2        0x00000040  // QEI clock /2
N#define QEI_CTL_VELDIV_4        0x00000080  // QEI clock /4
N#define QEI_CTL_VELDIV_8        0x000000C0  // QEI clock /8
N#define QEI_CTL_VELDIV_16       0x00000100  // QEI clock /16
N#define QEI_CTL_VELDIV_32       0x00000140  // QEI clock /32
N#define QEI_CTL_VELDIV_64       0x00000180  // QEI clock /64
N#define QEI_CTL_VELDIV_128      0x000001C0  // QEI clock /128
N#define QEI_CTL_VELEN           0x00000020  // Capture Velocity
N#define QEI_CTL_RESMODE         0x00000010  // Reset Mode
N#define QEI_CTL_CAPMODE         0x00000008  // Capture Mode
N#define QEI_CTL_SIGMODE         0x00000004  // Signal Mode
N#define QEI_CTL_SWAP            0x00000002  // Swap Signals
N#define QEI_CTL_ENABLE          0x00000001  // Enable QEI
N#define QEI_CTL_FILTCNT_S       16
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_STAT register.
N//
N//*****************************************************************************
N#define QEI_STAT_DIRECTION      0x00000002  // Direction of Rotation
N#define QEI_STAT_ERROR          0x00000001  // Error Detected
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_POS register.
N//
N//*****************************************************************************
N#define QEI_POS_M               0xFFFFFFFF  // Current Position Integrator
N                                            // Value
N#define QEI_POS_S               0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_MAXPOS register.
N//
N//*****************************************************************************
N#define QEI_MAXPOS_M            0xFFFFFFFF  // Maximum Position Integrator
N                                            // Value
N#define QEI_MAXPOS_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_LOAD register.
N//
N//*****************************************************************************
N#define QEI_LOAD_M              0xFFFFFFFF  // Velocity Timer Load Value
N#define QEI_LOAD_S              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_TIME register.
N//
N//*****************************************************************************
N#define QEI_TIME_M              0xFFFFFFFF  // Velocity Timer Current Value
N#define QEI_TIME_S              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_COUNT register.
N//
N//*****************************************************************************
N#define QEI_COUNT_M             0xFFFFFFFF  // Velocity Pulse Count
N#define QEI_COUNT_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_SPEED register.
N//
N//*****************************************************************************
N#define QEI_SPEED_M             0xFFFFFFFF  // Velocity
N#define QEI_SPEED_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_INTEN register.
N//
N//*****************************************************************************
N#define QEI_INTEN_ERROR         0x00000008  // Phase Error Interrupt Enable
N#define QEI_INTEN_DIR           0x00000004  // Direction Change Interrupt
N                                            // Enable
N#define QEI_INTEN_TIMER         0x00000002  // Timer Expires Interrupt Enable
N#define QEI_INTEN_INDEX         0x00000001  // Index Pulse Detected Interrupt
N                                            // Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_RIS register.
N//
N//*****************************************************************************
N#define QEI_RIS_ERROR           0x00000008  // Phase Error Detected
N#define QEI_RIS_DIR             0x00000004  // Direction Change Detected
N#define QEI_RIS_TIMER           0x00000002  // Velocity Timer Expired
N#define QEI_RIS_INDEX           0x00000001  // Index Pulse Asserted
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the QEI_O_ISC register.
N//
N//*****************************************************************************
N#define QEI_ISC_ERROR           0x00000008  // Phase Error Interrupt
N#define QEI_ISC_DIR             0x00000004  // Direction Change Interrupt
N#define QEI_ISC_TIMER           0x00000002  // Velocity Timer Expired Interrupt
N#define QEI_ISC_INDEX           0x00000001  // Index Pulse Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_CFG register.
N//
N//*****************************************************************************
N#define TIMER_CFG_M             0x00000007  // GPTM Configuration
N#define TIMER_CFG_32_BIT_TIMER  0x00000000  // 32-bit timer configuration
N#define TIMER_CFG_32_BIT_RTC    0x00000001  // 32-bit real-time clock (RTC)
N                                            // counter configuration
N#define TIMER_CFG_16_BIT        0x00000004  // 16-bit timer configuration. The
N                                            // function is controlled by bits
N                                            // 1:0 of GPTMTAMR and GPTMTBMR
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAMR register.
N//
N//*****************************************************************************
N#define TIMER_TAMR_TCACT_M      0x0000E000  // Timer Compare Action Select
N#define TIMER_TAMR_TCACT_NONE   0x00000000  // Disable compare operations
N#define TIMER_TAMR_TCACT_TOGGLE 0x00002000  // Toggle State on Time-Out
N#define TIMER_TAMR_TCACT_CLRTO  0x00004000  // Clear CCP on Time-Out
N#define TIMER_TAMR_TCACT_SETTO  0x00006000  // Set CCP on Time-Out
N#define TIMER_TAMR_TCACT_SETTOGTO                                             \
N                                0x00008000  // Set CCP immediately and toggle
X#define TIMER_TAMR_TCACT_SETTOGTO                                                                             0x00008000  
N                                            // on Time-Out
N#define TIMER_TAMR_TCACT_CLRTOGTO                                             \
N                                0x0000A000  // Clear CCP immediately and toggle
X#define TIMER_TAMR_TCACT_CLRTOGTO                                                                             0x0000A000  
N                                            // on Time-Out
N#define TIMER_TAMR_TCACT_SETCLRTO                                             \
N                                0x0000C000  // Set CCP immediately and clear on
X#define TIMER_TAMR_TCACT_SETCLRTO                                                                             0x0000C000  
N                                            // Time-Out
N#define TIMER_TAMR_TCACT_CLRSETTO                                             \
N                                0x0000E000  // Clear CCP immediately and set on
X#define TIMER_TAMR_TCACT_CLRSETTO                                                                             0x0000E000  
N                                            // Time-Out
N#define TIMER_TAMR_TACINTD      0x00001000  // One-shot/Periodic Interrupt Mode
N#define TIMER_TAMR_TAPLO        0x00000800  // GPTM Timer A PWM Legacy
N                                            // Operation
N#define TIMER_TAMR_TAMRSU       0x00000400  // GPTM Timer A Match Register
N                                            // Update
N#define TIMER_TAMR_TAPWMIE      0x00000200  // GPTM Timer A PWM Interrupt
N                                            // Enable
N#define TIMER_TAMR_TAILD        0x00000100  // GPTM Timer A Interval Load Write
N#define TIMER_TAMR_TASNAPS      0x00000080  // GPTM Timer A Snap-Shot Mode
N#define TIMER_TAMR_TAWOT        0x00000040  // GPTM Timer A Wait-on-Trigger
N#define TIMER_TAMR_TAMIE        0x00000020  // GPTM Timer A Match Interrupt
N                                            // Enable
N#define TIMER_TAMR_TACDIR       0x00000010  // GPTM Timer A Count Direction
N#define TIMER_TAMR_TAAMS        0x00000008  // GPTM Timer A Alternate Mode
N                                            // Select
N#define TIMER_TAMR_TACMR        0x00000004  // GPTM Timer A Capture Mode
N#define TIMER_TAMR_TAMR_M       0x00000003  // GPTM Timer A Mode
N#define TIMER_TAMR_TAMR_1_SHOT  0x00000001  // One-Shot Timer mode
N#define TIMER_TAMR_TAMR_PERIOD  0x00000002  // Periodic Timer mode
N#define TIMER_TAMR_TAMR_CAP     0x00000003  // Capture mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBMR register.
N//
N//*****************************************************************************
N#define TIMER_TBMR_TCACT_M      0x0000E000  // Timer Compare Action Select
N#define TIMER_TBMR_TCACT_NONE   0x00000000  // Disable compare operations
N#define TIMER_TBMR_TCACT_TOGGLE 0x00002000  // Toggle State on Time-Out
N#define TIMER_TBMR_TCACT_CLRTO  0x00004000  // Clear CCP on Time-Out
N#define TIMER_TBMR_TCACT_SETTO  0x00006000  // Set CCP on Time-Out
N#define TIMER_TBMR_TCACT_SETTOGTO                                             \
N                                0x00008000  // Set CCP immediately and toggle
X#define TIMER_TBMR_TCACT_SETTOGTO                                                                             0x00008000  
N                                            // on Time-Out
N#define TIMER_TBMR_TCACT_CLRTOGTO                                             \
N                                0x0000A000  // Clear CCP immediately and toggle
X#define TIMER_TBMR_TCACT_CLRTOGTO                                                                             0x0000A000  
N                                            // on Time-Out
N#define TIMER_TBMR_TCACT_SETCLRTO                                             \
N                                0x0000C000  // Set CCP immediately and clear on
X#define TIMER_TBMR_TCACT_SETCLRTO                                                                             0x0000C000  
N                                            // Time-Out
N#define TIMER_TBMR_TCACT_CLRSETTO                                             \
N                                0x0000E000  // Clear CCP immediately and set on
X#define TIMER_TBMR_TCACT_CLRSETTO                                                                             0x0000E000  
N                                            // Time-Out
N#define TIMER_TBMR_TBCINTD      0x00001000  // One-Shot/Periodic Interrupt Mode
N#define TIMER_TBMR_TBPLO        0x00000800  // GPTM Timer B PWM Legacy
N                                            // Operation
N#define TIMER_TBMR_TBMRSU       0x00000400  // GPTM Timer B Match Register
N                                            // Update
N#define TIMER_TBMR_TBPWMIE      0x00000200  // GPTM Timer B PWM Interrupt
N                                            // Enable
N#define TIMER_TBMR_TBILD        0x00000100  // GPTM Timer B Interval Load Write
N#define TIMER_TBMR_TBSNAPS      0x00000080  // GPTM Timer B Snap-Shot Mode
N#define TIMER_TBMR_TBWOT        0x00000040  // GPTM Timer B Wait-on-Trigger
N#define TIMER_TBMR_TBMIE        0x00000020  // GPTM Timer B Match Interrupt
N                                            // Enable
N#define TIMER_TBMR_TBCDIR       0x00000010  // GPTM Timer B Count Direction
N#define TIMER_TBMR_TBAMS        0x00000008  // GPTM Timer B Alternate Mode
N                                            // Select
N#define TIMER_TBMR_TBCMR        0x00000004  // GPTM Timer B Capture Mode
N#define TIMER_TBMR_TBMR_M       0x00000003  // GPTM Timer B Mode
N#define TIMER_TBMR_TBMR_1_SHOT  0x00000001  // One-Shot Timer mode
N#define TIMER_TBMR_TBMR_PERIOD  0x00000002  // Periodic Timer mode
N#define TIMER_TBMR_TBMR_CAP     0x00000003  // Capture mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_CTL register.
N//
N//*****************************************************************************
N#define TIMER_CTL_TBPWML        0x00004000  // GPTM Timer B PWM Output Level
N#define TIMER_CTL_TBOTE         0x00002000  // GPTM Timer B Output Trigger
N                                            // Enable
N#define TIMER_CTL_TBEVENT_M     0x00000C00  // GPTM Timer B Event Mode
N#define TIMER_CTL_TBEVENT_POS   0x00000000  // Positive edge
N#define TIMER_CTL_TBEVENT_NEG   0x00000400  // Negative edge
N#define TIMER_CTL_TBEVENT_BOTH  0x00000C00  // Both edges
N#define TIMER_CTL_TBSTALL       0x00000200  // GPTM Timer B Stall Enable
N#define TIMER_CTL_TBEN          0x00000100  // GPTM Timer B Enable
N#define TIMER_CTL_TAPWML        0x00000040  // GPTM Timer A PWM Output Level
N#define TIMER_CTL_TAOTE         0x00000020  // GPTM Timer A Output Trigger
N                                            // Enable
N#define TIMER_CTL_RTCEN         0x00000010  // GPTM RTC Stall Enable
N#define TIMER_CTL_TAEVENT_M     0x0000000C  // GPTM Timer A Event Mode
N#define TIMER_CTL_TAEVENT_POS   0x00000000  // Positive edge
N#define TIMER_CTL_TAEVENT_NEG   0x00000004  // Negative edge
N#define TIMER_CTL_TAEVENT_BOTH  0x0000000C  // Both edges
N#define TIMER_CTL_TASTALL       0x00000002  // GPTM Timer A Stall Enable
N#define TIMER_CTL_TAEN          0x00000001  // GPTM Timer A Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_SYNC register.
N//
N//*****************************************************************************
N#define TIMER_SYNC_SYNCT7_M     0x0000C000  // Synchronize GPTM Timer 7
N#define TIMER_SYNC_SYNCT7_NONE  0x00000000  // GPT7 is not affected
N#define TIMER_SYNC_SYNCT7_TA    0x00004000  // A timeout event for Timer A of
N                                            // GPTM7 is triggered
N#define TIMER_SYNC_SYNCT7_TB    0x00008000  // A timeout event for Timer B of
N                                            // GPTM7 is triggered
N#define TIMER_SYNC_SYNCT7_TATB  0x0000C000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM7 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT6_M     0x00003000  // Synchronize GPTM Timer 6
N#define TIMER_SYNC_SYNCT6_NONE  0x00000000  // GPTM6 is not affected
N#define TIMER_SYNC_SYNCT6_TA    0x00001000  // A timeout event for Timer A of
N                                            // GPTM6 is triggered
N#define TIMER_SYNC_SYNCT6_TB    0x00002000  // A timeout event for Timer B of
N                                            // GPTM6 is triggered
N#define TIMER_SYNC_SYNCT6_TATB  0x00003000  // A timeout event for both Timer A
N                                            // and Timer B of GPTM6 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT5_M     0x00000C00  // Synchronize GPTM 16/32-Bit Timer
N                                            // 5
N#define TIMER_SYNC_SYNCT5_NONE  0x00000000  // GPTM 16/32-Bit Timer 5 is not
N                                            // affected
N#define TIMER_SYNC_SYNCT5_TA    0x00000400  // A timeout event for Timer A of
N                                            // GPTM 16/32-Bit Timer 5 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT5_TB    0x00000800  // A timeout event for Timer B of
N                                            // GPTM 16/32-Bit Timer 5 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT5_TATB  0x00000C00  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 16/32-Bit
N                                            // Timer 5 is triggered
N#define TIMER_SYNC_SYNCT4_M     0x00000300  // Synchronize GPTM 16/32-Bit Timer
N                                            // 4
N#define TIMER_SYNC_SYNCT4_NONE  0x00000000  // GPTM 16/32-Bit Timer 4 is not
N                                            // affected
N#define TIMER_SYNC_SYNCT4_TA    0x00000100  // A timeout event for Timer A of
N                                            // GPTM 16/32-Bit Timer 4 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT4_TB    0x00000200  // A timeout event for Timer B of
N                                            // GPTM 16/32-Bit Timer 4 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT4_TATB  0x00000300  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 16/32-Bit
N                                            // Timer 4 is triggered
N#define TIMER_SYNC_SYNCT3_M     0x000000C0  // Synchronize GPTM 16/32-Bit Timer
N                                            // 3
N#define TIMER_SYNC_SYNCT3_NONE  0x00000000  // GPTM 16/32-Bit Timer 3 is not
N                                            // affected
N#define TIMER_SYNC_SYNCT3_TA    0x00000040  // A timeout event for Timer A of
N                                            // GPTM 16/32-Bit Timer 3 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT3_TB    0x00000080  // A timeout event for Timer B of
N                                            // GPTM 16/32-Bit Timer 3 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT3_TATB  0x000000C0  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 16/32-Bit
N                                            // Timer 3 is triggered
N#define TIMER_SYNC_SYNCT2_M     0x00000030  // Synchronize GPTM 16/32-Bit Timer
N                                            // 2
N#define TIMER_SYNC_SYNCT2_NONE  0x00000000  // GPTM 16/32-Bit Timer 2 is not
N                                            // affected
N#define TIMER_SYNC_SYNCT2_TA    0x00000010  // A timeout event for Timer A of
N                                            // GPTM 16/32-Bit Timer 2 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT2_TB    0x00000020  // A timeout event for Timer B of
N                                            // GPTM 16/32-Bit Timer 2 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT2_TATB  0x00000030  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 16/32-Bit
N                                            // Timer 2 is triggered
N#define TIMER_SYNC_SYNCT1_M     0x0000000C  // Synchronize GPTM 16/32-Bit Timer
N                                            // 1
N#define TIMER_SYNC_SYNCT1_NONE  0x00000000  // GPTM 16/32-Bit Timer 1 is not
N                                            // affected
N#define TIMER_SYNC_SYNCT1_TA    0x00000004  // A timeout event for Timer A of
N                                            // GPTM 16/32-Bit Timer 1 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT1_TB    0x00000008  // A timeout event for Timer B of
N                                            // GPTM 16/32-Bit Timer 1 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT1_TATB  0x0000000C  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 16/32-Bit
N                                            // Timer 1 is triggered
N#define TIMER_SYNC_SYNCT0_M     0x00000003  // Synchronize GPTM 16/32-Bit Timer
N                                            // 0
N#define TIMER_SYNC_SYNCT0_NONE  0x00000000  // GPTM 16/32-Bit Timer 0 is not
N                                            // affected
N#define TIMER_SYNC_SYNCT0_TA    0x00000001  // A timeout event for Timer A of
N                                            // GPTM 16/32-Bit Timer 0 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT0_TB    0x00000002  // A timeout event for Timer B of
N                                            // GPTM 16/32-Bit Timer 0 is
N                                            // triggered
N#define TIMER_SYNC_SYNCT0_TATB  0x00000003  // A timeout event for both Timer A
N                                            // and Timer B of GPTM 16/32-Bit
N                                            // Timer 0 is triggered
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_IMR register.
N//
N//*****************************************************************************
N#define TIMER_IMR_DMABIM        0x00002000  // GPTM Timer B DMA Done Interrupt
N                                            // Mask
N#define TIMER_IMR_TBMIM         0x00000800  // GPTM Timer B Match Interrupt
N                                            // Mask
N#define TIMER_IMR_CBEIM         0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Interrupt Mask
N#define TIMER_IMR_CBMIM         0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Interrupt Mask
N#define TIMER_IMR_TBTOIM        0x00000100  // GPTM Timer B Time-Out Interrupt
N                                            // Mask
N#define TIMER_IMR_DMAAIM        0x00000020  // GPTM Timer A DMA Done Interrupt
N                                            // Mask
N#define TIMER_IMR_TAMIM         0x00000010  // GPTM Timer A Match Interrupt
N                                            // Mask
N#define TIMER_IMR_RTCIM         0x00000008  // GPTM RTC Interrupt Mask
N#define TIMER_IMR_CAEIM         0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Interrupt Mask
N#define TIMER_IMR_CAMIM         0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Interrupt Mask
N#define TIMER_IMR_TATOIM        0x00000001  // GPTM Timer A Time-Out Interrupt
N                                            // Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_RIS register.
N//
N//*****************************************************************************
N#define TIMER_RIS_DMABRIS       0x00002000  // GPTM Timer B DMA Done Raw
N                                            // Interrupt Status
N#define TIMER_RIS_TBMRIS        0x00000800  // GPTM Timer B Match Raw Interrupt
N#define TIMER_RIS_CBERIS        0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Raw Interrupt
N#define TIMER_RIS_CBMRIS        0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Raw Interrupt
N#define TIMER_RIS_TBTORIS       0x00000100  // GPTM Timer B Time-Out Raw
N                                            // Interrupt
N#define TIMER_RIS_DMAARIS       0x00000020  // GPTM Timer A DMA Done Raw
N                                            // Interrupt Status
N#define TIMER_RIS_TAMRIS        0x00000010  // GPTM Timer A Match Raw Interrupt
N#define TIMER_RIS_RTCRIS        0x00000008  // GPTM RTC Raw Interrupt
N#define TIMER_RIS_CAERIS        0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Raw Interrupt
N#define TIMER_RIS_CAMRIS        0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Raw Interrupt
N#define TIMER_RIS_TATORIS       0x00000001  // GPTM Timer A Time-Out Raw
N                                            // Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_MIS register.
N//
N//*****************************************************************************
N#define TIMER_MIS_DMABMIS       0x00002000  // GPTM Timer B DMA Done Masked
N                                            // Interrupt
N#define TIMER_MIS_TBMMIS        0x00000800  // GPTM Timer B Match Masked
N                                            // Interrupt
N#define TIMER_MIS_CBEMIS        0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Masked Interrupt
N#define TIMER_MIS_CBMMIS        0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Masked Interrupt
N#define TIMER_MIS_TBTOMIS       0x00000100  // GPTM Timer B Time-Out Masked
N                                            // Interrupt
N#define TIMER_MIS_DMAAMIS       0x00000020  // GPTM Timer A DMA Done Masked
N                                            // Interrupt
N#define TIMER_MIS_TAMMIS        0x00000010  // GPTM Timer A Match Masked
N                                            // Interrupt
N#define TIMER_MIS_RTCMIS        0x00000008  // GPTM RTC Masked Interrupt
N#define TIMER_MIS_CAEMIS        0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Masked Interrupt
N#define TIMER_MIS_CAMMIS        0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Masked Interrupt
N#define TIMER_MIS_TATOMIS       0x00000001  // GPTM Timer A Time-Out Masked
N                                            // Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_ICR register.
N//
N//*****************************************************************************
N#define TIMER_ICR_DMABINT       0x00002000  // GPTM Timer B DMA Done Interrupt
N                                            // Clear
N#define TIMER_ICR_TBMCINT       0x00000800  // GPTM Timer B Match Interrupt
N                                            // Clear
N#define TIMER_ICR_CBECINT       0x00000400  // GPTM Timer B Capture Mode Event
N                                            // Interrupt Clear
N#define TIMER_ICR_CBMCINT       0x00000200  // GPTM Timer B Capture Mode Match
N                                            // Interrupt Clear
N#define TIMER_ICR_TBTOCINT      0x00000100  // GPTM Timer B Time-Out Interrupt
N                                            // Clear
N#define TIMER_ICR_DMAAINT       0x00000020  // GPTM Timer A DMA Done Interrupt
N                                            // Clear
N#define TIMER_ICR_TAMCINT       0x00000010  // GPTM Timer A Match Interrupt
N                                            // Clear
N#define TIMER_ICR_RTCCINT       0x00000008  // GPTM RTC Interrupt Clear
N#define TIMER_ICR_CAECINT       0x00000004  // GPTM Timer A Capture Mode Event
N                                            // Interrupt Clear
N#define TIMER_ICR_CAMCINT       0x00000002  // GPTM Timer A Capture Mode Match
N                                            // Interrupt Clear
N#define TIMER_ICR_TATOCINT      0x00000001  // GPTM Timer A Time-Out Raw
N                                            // Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAILR register.
N//
N//*****************************************************************************
N#define TIMER_TAILR_M           0xFFFFFFFF  // GPTM Timer A Interval Load
N                                            // Register
N#define TIMER_TAILR_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBILR register.
N//
N//*****************************************************************************
N#define TIMER_TBILR_M           0xFFFFFFFF  // GPTM Timer B Interval Load
N                                            // Register
N#define TIMER_TBILR_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAMATCHR
N// register.
N//
N//*****************************************************************************
N#define TIMER_TAMATCHR_TAMR_M   0xFFFFFFFF  // GPTM Timer A Match Register
N#define TIMER_TAMATCHR_TAMR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBMATCHR
N// register.
N//
N//*****************************************************************************
N#define TIMER_TBMATCHR_TBMR_M   0xFFFFFFFF  // GPTM Timer B Match Register
N#define TIMER_TBMATCHR_TBMR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPR register.
N//
N//*****************************************************************************
N#define TIMER_TAPR_TAPSR_M      0x000000FF  // GPTM Timer A Prescale
N#define TIMER_TAPR_TAPSR_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPR register.
N//
N//*****************************************************************************
N#define TIMER_TBPR_TBPSR_M      0x000000FF  // GPTM Timer B Prescale
N#define TIMER_TBPR_TBPSR_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPMR register.
N//
N//*****************************************************************************
N#define TIMER_TAPMR_TAPSMR_M    0x000000FF  // GPTM TimerA Prescale Match
N#define TIMER_TAPMR_TAPSMR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPMR register.
N//
N//*****************************************************************************
N#define TIMER_TBPMR_TBPSMR_M    0x000000FF  // GPTM TimerB Prescale Match
N#define TIMER_TBPMR_TBPSMR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAR register.
N//
N//*****************************************************************************
N#define TIMER_TAR_M             0xFFFFFFFF  // GPTM Timer A Register
N#define TIMER_TAR_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBR register.
N//
N//*****************************************************************************
N#define TIMER_TBR_M             0xFFFFFFFF  // GPTM Timer B Register
N#define TIMER_TBR_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAV register.
N//
N//*****************************************************************************
N#define TIMER_TAV_M             0xFFFFFFFF  // GPTM Timer A Value
N#define TIMER_TAV_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBV register.
N//
N//*****************************************************************************
N#define TIMER_TBV_M             0xFFFFFFFF  // GPTM Timer B Value
N#define TIMER_TBV_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_RTCPD register.
N//
N//*****************************************************************************
N#define TIMER_RTCPD_RTCPD_M     0x0000FFFF  // RTC Predivide Counter Value
N#define TIMER_RTCPD_RTCPD_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TAPS register.
N//
N//*****************************************************************************
N#define TIMER_TAPS_PSS_M        0x0000FFFF  // GPTM Timer A Prescaler Snapshot
N#define TIMER_TAPS_PSS_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_TBPS register.
N//
N//*****************************************************************************
N#define TIMER_TBPS_PSS_M        0x0000FFFF  // GPTM Timer A Prescaler Value
N#define TIMER_TBPS_PSS_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_DMAEV register.
N//
N//*****************************************************************************
N#define TIMER_DMAEV_TBMDMAEN    0x00000800  // GPTM Timer B Mode Match DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_CBEDMAEN    0x00000400  // GPTM Capture B Event DMA Trigger
N                                            // Enable
N#define TIMER_DMAEV_CBMDMAEN    0x00000200  // GPTM Capture B Match DMA Trigger
N                                            // Enable
N#define TIMER_DMAEV_TBTODMAEN   0x00000100  // GPTM Timer B Time-Out DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_TAMDMAEN    0x00000010  // GPTM Timer A Mode Match DMA
N                                            // Trigger Enable
N#define TIMER_DMAEV_RTCDMAEN    0x00000008  // GPTM RTC DMA Trigger Enable
N#define TIMER_DMAEV_CAEDMAEN    0x00000004  // GPTM Capture A Event DMA Trigger
N                                            // Enable
N#define TIMER_DMAEV_CAMDMAEN    0x00000002  // GPTM Capture A Match DMA Trigger
N                                            // Enable
N#define TIMER_DMAEV_TATODMAEN   0x00000001  // GPTM Timer A Time-Out DMA
N                                            // Trigger Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_ADCEV register.
N//
N//*****************************************************************************
N#define TIMER_ADCEV_TBMADCEN    0x00000800  // GPTM Timer B Mode Match ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_CBEADCEN    0x00000400  // GPTM Capture B Event ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_CBMADCEN    0x00000200  // GPTM Capture B Match ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_TBTOADCEN   0x00000100  // GPTM Timer B Time-Out ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_TAMADCEN    0x00000010  // GPTM Timer A Mode Match ADC
N                                            // Trigger Enable
N#define TIMER_ADCEV_RTCADCEN    0x00000008  // GPTM RTC ADC Trigger Enable
N#define TIMER_ADCEV_CAEADCEN    0x00000004  // GPTM Capture A Event ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_CAMADCEN    0x00000002  // GPTM Capture A Match ADC Trigger
N                                            // Enable
N#define TIMER_ADCEV_TATOADCEN   0x00000001  // GPTM Timer A Time-Out ADC
N                                            // Trigger Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_PP register.
N//
N//*****************************************************************************
N#define TIMER_PP_ALTCLK         0x00000040  // Alternate Clock Source
N#define TIMER_PP_SYNCCNT        0x00000020  // Synchronize Start
N#define TIMER_PP_CHAIN          0x00000010  // Chain with Other Timers
N#define TIMER_PP_SIZE_M         0x0000000F  // Count Size
N#define TIMER_PP_SIZE_16        0x00000000  // Timer A and Timer B counters are
N                                            // 16 bits each with an 8-bit
N                                            // prescale counter
N#define TIMER_PP_SIZE_32        0x00000001  // Timer A and Timer B counters are
N                                            // 32 bits each with a 16-bit
N                                            // prescale counter
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the TIMER_O_CC register.
N//
N//*****************************************************************************
N#define TIMER_CC_ALTCLK         0x00000001  // Alternate Clock Source
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_ACTSS register.
N//
N//*****************************************************************************
N#define ADC_ACTSS_BUSY          0x00010000  // ADC Busy
N#define ADC_ACTSS_ADEN3         0x00000800  // ADC SS3 DMA Enable
N#define ADC_ACTSS_ADEN2         0x00000400  // ADC SS2 DMA Enable
N#define ADC_ACTSS_ADEN1         0x00000200  // ADC SS1 DMA Enable
N#define ADC_ACTSS_ADEN0         0x00000100  // ADC SS1 DMA Enable
N#define ADC_ACTSS_ASEN3         0x00000008  // ADC SS3 Enable
N#define ADC_ACTSS_ASEN2         0x00000004  // ADC SS2 Enable
N#define ADC_ACTSS_ASEN1         0x00000002  // ADC SS1 Enable
N#define ADC_ACTSS_ASEN0         0x00000001  // ADC SS0 Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_RIS register.
N//
N//*****************************************************************************
N#define ADC_RIS_INRDC           0x00010000  // Digital Comparator Raw Interrupt
N                                            // Status
N#define ADC_RIS_DMAINR3         0x00000800  // SS3 DMA Raw Interrupt Status
N#define ADC_RIS_DMAINR2         0x00000400  // SS2 DMA Raw Interrupt Status
N#define ADC_RIS_DMAINR1         0x00000200  // SS1 DMA Raw Interrupt Status
N#define ADC_RIS_DMAINR0         0x00000100  // SS0 DMA Raw Interrupt Status
N#define ADC_RIS_INR3            0x00000008  // SS3 Raw Interrupt Status
N#define ADC_RIS_INR2            0x00000004  // SS2 Raw Interrupt Status
N#define ADC_RIS_INR1            0x00000002  // SS1 Raw Interrupt Status
N#define ADC_RIS_INR0            0x00000001  // SS0 Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_IM register.
N//
N//*****************************************************************************
N#define ADC_IM_DCONSS3          0x00080000  // Digital Comparator Interrupt on
N                                            // SS3
N#define ADC_IM_DCONSS2          0x00040000  // Digital Comparator Interrupt on
N                                            // SS2
N#define ADC_IM_DCONSS1          0x00020000  // Digital Comparator Interrupt on
N                                            // SS1
N#define ADC_IM_DCONSS0          0x00010000  // Digital Comparator Interrupt on
N                                            // SS0
N#define ADC_IM_DMAMASK3         0x00000800  // SS3 DMA Interrupt Mask
N#define ADC_IM_DMAMASK2         0x00000400  // SS2 DMA Interrupt Mask
N#define ADC_IM_DMAMASK1         0x00000200  // SS1 DMA Interrupt Mask
N#define ADC_IM_DMAMASK0         0x00000100  // SS0 DMA Interrupt Mask
N#define ADC_IM_MASK3            0x00000008  // SS3 Interrupt Mask
N#define ADC_IM_MASK2            0x00000004  // SS2 Interrupt Mask
N#define ADC_IM_MASK1            0x00000002  // SS1 Interrupt Mask
N#define ADC_IM_MASK0            0x00000001  // SS0 Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_ISC register.
N//
N//*****************************************************************************
N#define ADC_ISC_DCINSS3         0x00080000  // Digital Comparator Interrupt
N                                            // Status on SS3
N#define ADC_ISC_DCINSS2         0x00040000  // Digital Comparator Interrupt
N                                            // Status on SS2
N#define ADC_ISC_DCINSS1         0x00020000  // Digital Comparator Interrupt
N                                            // Status on SS1
N#define ADC_ISC_DCINSS0         0x00010000  // Digital Comparator Interrupt
N                                            // Status on SS0
N#define ADC_ISC_DMAIN3          0x00000800  // SS3 DMA Interrupt Status and
N                                            // Clear
N#define ADC_ISC_DMAIN2          0x00000400  // SS2 DMA Interrupt Status and
N                                            // Clear
N#define ADC_ISC_DMAIN1          0x00000200  // SS1 DMA Interrupt Status and
N                                            // Clear
N#define ADC_ISC_DMAIN0          0x00000100  // SS0 DMA Interrupt Status and
N                                            // Clear
N#define ADC_ISC_IN3             0x00000008  // SS3 Interrupt Status and Clear
N#define ADC_ISC_IN2             0x00000004  // SS2 Interrupt Status and Clear
N#define ADC_ISC_IN1             0x00000002  // SS1 Interrupt Status and Clear
N#define ADC_ISC_IN0             0x00000001  // SS0 Interrupt Status and Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_OSTAT register.
N//
N//*****************************************************************************
N#define ADC_OSTAT_OV3           0x00000008  // SS3 FIFO Overflow
N#define ADC_OSTAT_OV2           0x00000004  // SS2 FIFO Overflow
N#define ADC_OSTAT_OV1           0x00000002  // SS1 FIFO Overflow
N#define ADC_OSTAT_OV0           0x00000001  // SS0 FIFO Overflow
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_EMUX register.
N//
N//*****************************************************************************
N#define ADC_EMUX_EM3_M          0x0000F000  // SS3 Trigger Select
N#define ADC_EMUX_EM3_PROCESSOR  0x00000000  // Processor (default)
N#define ADC_EMUX_EM3_COMP0      0x00001000  // Analog Comparator 0
N#define ADC_EMUX_EM3_COMP1      0x00002000  // Analog Comparator 1
N#define ADC_EMUX_EM3_COMP2      0x00003000  // Analog Comparator 2
N#define ADC_EMUX_EM3_EXTERNAL   0x00004000  // External (GPIO PB4)
N#define ADC_EMUX_EM3_TIMER      0x00005000  // Timer
N#define ADC_EMUX_EM3_PWM0       0x00006000  // PWM0
N#define ADC_EMUX_EM3_PWM1       0x00007000  // PWM1
N#define ADC_EMUX_EM3_PWM2       0x00008000  // PWM2
N#define ADC_EMUX_EM3_PWM3       0x00009000  // PWM3
N#define ADC_EMUX_EM3_NEVER      0x0000E000  // Never Trigger
N#define ADC_EMUX_EM3_ALWAYS     0x0000F000  // Always (continuously sample)
N#define ADC_EMUX_EM2_M          0x00000F00  // SS2 Trigger Select
N#define ADC_EMUX_EM2_PROCESSOR  0x00000000  // Processor (default)
N#define ADC_EMUX_EM2_COMP0      0x00000100  // Analog Comparator 0
N#define ADC_EMUX_EM2_COMP1      0x00000200  // Analog Comparator 1
N#define ADC_EMUX_EM2_COMP2      0x00000300  // Analog Comparator 2
N#define ADC_EMUX_EM2_EXTERNAL   0x00000400  // External (GPIO PB4)
N#define ADC_EMUX_EM2_TIMER      0x00000500  // Timer
N#define ADC_EMUX_EM2_PWM0       0x00000600  // PWM0
N#define ADC_EMUX_EM2_PWM1       0x00000700  // PWM1
N#define ADC_EMUX_EM2_PWM2       0x00000800  // PWM2
N#define ADC_EMUX_EM2_PWM3       0x00000900  // PWM3
N#define ADC_EMUX_EM2_NEVER      0x00000E00  // Never Trigger
N#define ADC_EMUX_EM2_ALWAYS     0x00000F00  // Always (continuously sample)
N#define ADC_EMUX_EM1_M          0x000000F0  // SS1 Trigger Select
N#define ADC_EMUX_EM1_PROCESSOR  0x00000000  // Processor (default)
N#define ADC_EMUX_EM1_COMP0      0x00000010  // Analog Comparator 0
N#define ADC_EMUX_EM1_COMP1      0x00000020  // Analog Comparator 1
N#define ADC_EMUX_EM1_COMP2      0x00000030  // Analog Comparator 2
N#define ADC_EMUX_EM1_EXTERNAL   0x00000040  // External (GPIO PB4)
N#define ADC_EMUX_EM1_TIMER      0x00000050  // Timer
N#define ADC_EMUX_EM1_PWM0       0x00000060  // PWM0
N#define ADC_EMUX_EM1_PWM1       0x00000070  // PWM1
N#define ADC_EMUX_EM1_PWM2       0x00000080  // PWM2
N#define ADC_EMUX_EM1_PWM3       0x00000090  // PWM3
N#define ADC_EMUX_EM1_NEVER      0x000000E0  // Never Trigger
N#define ADC_EMUX_EM1_ALWAYS     0x000000F0  // Always (continuously sample)
N#define ADC_EMUX_EM0_M          0x0000000F  // SS0 Trigger Select
N#define ADC_EMUX_EM0_PROCESSOR  0x00000000  // Processor (default)
N#define ADC_EMUX_EM0_COMP0      0x00000001  // Analog Comparator 0
N#define ADC_EMUX_EM0_COMP1      0x00000002  // Analog Comparator 1
N#define ADC_EMUX_EM0_COMP2      0x00000003  // Analog Comparator 2
N#define ADC_EMUX_EM0_EXTERNAL   0x00000004  // External (GPIO PB4)
N#define ADC_EMUX_EM0_TIMER      0x00000005  // Timer
N#define ADC_EMUX_EM0_PWM0       0x00000006  // PWM0
N#define ADC_EMUX_EM0_PWM1       0x00000007  // PWM1
N#define ADC_EMUX_EM0_PWM2       0x00000008  // PWM2
N#define ADC_EMUX_EM0_PWM3       0x00000009  // PWM3
N#define ADC_EMUX_EM0_NEVER      0x0000000E  // Never Trigger
N#define ADC_EMUX_EM0_ALWAYS     0x0000000F  // Always (continuously sample)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_USTAT register.
N//
N//*****************************************************************************
N#define ADC_USTAT_UV3           0x00000008  // SS3 FIFO Underflow
N#define ADC_USTAT_UV2           0x00000004  // SS2 FIFO Underflow
N#define ADC_USTAT_UV1           0x00000002  // SS1 FIFO Underflow
N#define ADC_USTAT_UV0           0x00000001  // SS0 FIFO Underflow
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_TSSEL register.
N//
N//*****************************************************************************
N#define ADC_TSSEL_PS3_M         0x30000000  // PWM Unit Select
N#define ADC_TSSEL_PS3_0         0x00000000  // PWM Unit 0
N#define ADC_TSSEL_PS2_M         0x00300000  // PWM Unit Select
N#define ADC_TSSEL_PS2_0         0x00000000  // PWM Unit 0
N#define ADC_TSSEL_PS1_M         0x00003000  // PWM Unit Select
N#define ADC_TSSEL_PS1_0         0x00000000  // PWM Unit 0
N#define ADC_TSSEL_PS0_M         0x00000030  // PWM Unit Select
N#define ADC_TSSEL_PS0_0         0x00000000  // PWM Unit 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSPRI register.
N//
N//*****************************************************************************
N#define ADC_SSPRI_SS3_M         0x00003000  // SS3 Priority
N#define ADC_SSPRI_SS2_M         0x00000300  // SS2 Priority
N#define ADC_SSPRI_SS1_M         0x00000030  // SS1 Priority
N#define ADC_SSPRI_SS0_M         0x00000003  // SS0 Priority
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SPC register.
N//
N//*****************************************************************************
N#define ADC_SPC_PHASE_M         0x0000000F  // Phase Difference
N#define ADC_SPC_PHASE_0         0x00000000  // ADC sample lags by 0.0
N#define ADC_SPC_PHASE_22_5      0x00000001  // ADC sample lags by 22.5
N#define ADC_SPC_PHASE_45        0x00000002  // ADC sample lags by 45.0
N#define ADC_SPC_PHASE_67_5      0x00000003  // ADC sample lags by 67.5
N#define ADC_SPC_PHASE_90        0x00000004  // ADC sample lags by 90.0
N#define ADC_SPC_PHASE_112_5     0x00000005  // ADC sample lags by 112.5
N#define ADC_SPC_PHASE_135       0x00000006  // ADC sample lags by 135.0
N#define ADC_SPC_PHASE_157_5     0x00000007  // ADC sample lags by 157.5
N#define ADC_SPC_PHASE_180       0x00000008  // ADC sample lags by 180.0
N#define ADC_SPC_PHASE_202_5     0x00000009  // ADC sample lags by 202.5
N#define ADC_SPC_PHASE_225       0x0000000A  // ADC sample lags by 225.0
N#define ADC_SPC_PHASE_247_5     0x0000000B  // ADC sample lags by 247.5
N#define ADC_SPC_PHASE_270       0x0000000C  // ADC sample lags by 270.0
N#define ADC_SPC_PHASE_292_5     0x0000000D  // ADC sample lags by 292.5
N#define ADC_SPC_PHASE_315       0x0000000E  // ADC sample lags by 315.0
N#define ADC_SPC_PHASE_337_5     0x0000000F  // ADC sample lags by 337.5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_PSSI register.
N//
N//*****************************************************************************
N#define ADC_PSSI_GSYNC          0x80000000  // Global Synchronize
N#define ADC_PSSI_SYNCWAIT       0x08000000  // Synchronize Wait
N#define ADC_PSSI_SS3            0x00000008  // SS3 Initiate
N#define ADC_PSSI_SS2            0x00000004  // SS2 Initiate
N#define ADC_PSSI_SS1            0x00000002  // SS1 Initiate
N#define ADC_PSSI_SS0            0x00000001  // SS0 Initiate
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SAC register.
N//
N//*****************************************************************************
N#define ADC_SAC_AVG_M           0x00000007  // Hardware Averaging Control
N#define ADC_SAC_AVG_OFF         0x00000000  // No hardware oversampling
N#define ADC_SAC_AVG_2X          0x00000001  // 2x hardware oversampling
N#define ADC_SAC_AVG_4X          0x00000002  // 4x hardware oversampling
N#define ADC_SAC_AVG_8X          0x00000003  // 8x hardware oversampling
N#define ADC_SAC_AVG_16X         0x00000004  // 16x hardware oversampling
N#define ADC_SAC_AVG_32X         0x00000005  // 32x hardware oversampling
N#define ADC_SAC_AVG_64X         0x00000006  // 64x hardware oversampling
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCISC register.
N//
N//*****************************************************************************
N#define ADC_DCISC_DCINT7        0x00000080  // Digital Comparator 7 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT6        0x00000040  // Digital Comparator 6 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT5        0x00000020  // Digital Comparator 5 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT4        0x00000010  // Digital Comparator 4 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT3        0x00000008  // Digital Comparator 3 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT2        0x00000004  // Digital Comparator 2 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT1        0x00000002  // Digital Comparator 1 Interrupt
N                                            // Status and Clear
N#define ADC_DCISC_DCINT0        0x00000001  // Digital Comparator 0 Interrupt
N                                            // Status and Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_CTL register.
N//
N//*****************************************************************************
N#define ADC_CTL_DITHER          0x00000040  // Dither Mode Enable
N#define ADC_CTL_VREF_M          0x00000003  // Voltage Reference Select
N#define ADC_CTL_VREF_INTERNAL   0x00000000  // The internal reference as the
N                                            // voltage reference
N#define ADC_CTL_VREF_EXT_3V     0x00000001  // A 3.0 V external VREFA input is
N                                            // the voltage reference. The ADC
N                                            // conversion range is 0.0 V to the
N                                            // external reference value
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSMUX0 register.
N//
N//*****************************************************************************
N#define ADC_SSMUX0_MUX7_M       0xF0000000  // 8th Sample Input Select
N#define ADC_SSMUX0_MUX6_M       0x0F000000  // 7th Sample Input Select
N#define ADC_SSMUX0_MUX5_M       0x00F00000  // 6th Sample Input Select
N#define ADC_SSMUX0_MUX4_M       0x000F0000  // 5th Sample Input Select
N#define ADC_SSMUX0_MUX3_M       0x0000F000  // 4th Sample Input Select
N#define ADC_SSMUX0_MUX2_M       0x00000F00  // 3rd Sample Input Select
N#define ADC_SSMUX0_MUX1_M       0x000000F0  // 2nd Sample Input Select
N#define ADC_SSMUX0_MUX0_M       0x0000000F  // 1st Sample Input Select
N#define ADC_SSMUX0_MUX7_S       28
N#define ADC_SSMUX0_MUX6_S       24
N#define ADC_SSMUX0_MUX5_S       20
N#define ADC_SSMUX0_MUX4_S       16
N#define ADC_SSMUX0_MUX3_S       12
N#define ADC_SSMUX0_MUX2_S       8
N#define ADC_SSMUX0_MUX1_S       4
N#define ADC_SSMUX0_MUX0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSCTL0 register.
N//
N//*****************************************************************************
N#define ADC_SSCTL0_TS7          0x80000000  // 8th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE7          0x40000000  // 8th Sample Interrupt Enable
N#define ADC_SSCTL0_END7         0x20000000  // 8th Sample is End of Sequence
N#define ADC_SSCTL0_D7           0x10000000  // 8th Sample Diff Input Select
N#define ADC_SSCTL0_TS6          0x08000000  // 7th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE6          0x04000000  // 7th Sample Interrupt Enable
N#define ADC_SSCTL0_END6         0x02000000  // 7th Sample is End of Sequence
N#define ADC_SSCTL0_D6           0x01000000  // 7th Sample Diff Input Select
N#define ADC_SSCTL0_TS5          0x00800000  // 6th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE5          0x00400000  // 6th Sample Interrupt Enable
N#define ADC_SSCTL0_END5         0x00200000  // 6th Sample is End of Sequence
N#define ADC_SSCTL0_D5           0x00100000  // 6th Sample Diff Input Select
N#define ADC_SSCTL0_TS4          0x00080000  // 5th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE4          0x00040000  // 5th Sample Interrupt Enable
N#define ADC_SSCTL0_END4         0x00020000  // 5th Sample is End of Sequence
N#define ADC_SSCTL0_D4           0x00010000  // 5th Sample Diff Input Select
N#define ADC_SSCTL0_TS3          0x00008000  // 4th Sample Temp Sensor Select
N#define ADC_SSCTL0_IE3          0x00004000  // 4th Sample Interrupt Enable
N#define ADC_SSCTL0_END3         0x00002000  // 4th Sample is End of Sequence
N#define ADC_SSCTL0_D3           0x00001000  // 4th Sample Diff Input Select
N#define ADC_SSCTL0_TS2          0x00000800  // 3rd Sample Temp Sensor Select
N#define ADC_SSCTL0_IE2          0x00000400  // 3rd Sample Interrupt Enable
N#define ADC_SSCTL0_END2         0x00000200  // 3rd Sample is End of Sequence
N#define ADC_SSCTL0_D2           0x00000100  // 3rd Sample Diff Input Select
N#define ADC_SSCTL0_TS1          0x00000080  // 2nd Sample Temp Sensor Select
N#define ADC_SSCTL0_IE1          0x00000040  // 2nd Sample Interrupt Enable
N#define ADC_SSCTL0_END1         0x00000020  // 2nd Sample is End of Sequence
N#define ADC_SSCTL0_D1           0x00000010  // 2nd Sample Diff Input Select
N#define ADC_SSCTL0_TS0          0x00000008  // 1st Sample Temp Sensor Select
N#define ADC_SSCTL0_IE0          0x00000004  // 1st Sample Interrupt Enable
N#define ADC_SSCTL0_END0         0x00000002  // 1st Sample is End of Sequence
N#define ADC_SSCTL0_D0           0x00000001  // 1st Sample Diff Input Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFIFO0 register.
N//
N//*****************************************************************************
N#define ADC_SSFIFO0_DATA_M      0x00000FFF  // Conversion Result Data
N#define ADC_SSFIFO0_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFSTAT0 register.
N//
N//*****************************************************************************
N#define ADC_SSFSTAT0_FULL       0x00001000  // FIFO Full
N#define ADC_SSFSTAT0_EMPTY      0x00000100  // FIFO Empty
N#define ADC_SSFSTAT0_HPTR_M     0x000000F0  // FIFO Head Pointer
N#define ADC_SSFSTAT0_TPTR_M     0x0000000F  // FIFO Tail Pointer
N#define ADC_SSFSTAT0_HPTR_S     4
N#define ADC_SSFSTAT0_TPTR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSOP0 register.
N//
N//*****************************************************************************
N#define ADC_SSOP0_S7DCOP        0x10000000  // Sample 7 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S6DCOP        0x01000000  // Sample 6 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S5DCOP        0x00100000  // Sample 5 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S4DCOP        0x00010000  // Sample 4 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S3DCOP        0x00001000  // Sample 3 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S2DCOP        0x00000100  // Sample 2 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S1DCOP        0x00000010  // Sample 1 Digital Comparator
N                                            // Operation
N#define ADC_SSOP0_S0DCOP        0x00000001  // Sample 0 Digital Comparator
N                                            // Operation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSDC0 register.
N//
N//*****************************************************************************
N#define ADC_SSDC0_S7DCSEL_M     0xF0000000  // Sample 7 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S6DCSEL_M     0x0F000000  // Sample 6 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S5DCSEL_M     0x00F00000  // Sample 5 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S4DCSEL_M     0x000F0000  // Sample 4 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S3DCSEL_M     0x0000F000  // Sample 3 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S2DCSEL_M     0x00000F00  // Sample 2 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S1DCSEL_M     0x000000F0  // Sample 1 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S0DCSEL_M     0x0000000F  // Sample 0 Digital Comparator
N                                            // Select
N#define ADC_SSDC0_S6DCSEL_S     24
N#define ADC_SSDC0_S5DCSEL_S     20
N#define ADC_SSDC0_S4DCSEL_S     16
N#define ADC_SSDC0_S3DCSEL_S     12
N#define ADC_SSDC0_S2DCSEL_S     8
N#define ADC_SSDC0_S1DCSEL_S     4
N#define ADC_SSDC0_S0DCSEL_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSEMUX0 register.
N//
N//*****************************************************************************
N#define ADC_SSEMUX0_EMUX7       0x10000000  // 8th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX6       0x01000000  // 7th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX5       0x00100000  // 6th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX4       0x00010000  // 5th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX3       0x00001000  // 4th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX2       0x00000100  // 3rd Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX1       0x00000010  // 2th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX0_EMUX0       0x00000001  // 1st Sample Input Select (Upper
N                                            // Bit)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSTSH0 register.
N//
N//*****************************************************************************
N#define ADC_SSTSH0_TSH7_M       0xF0000000  // 8th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH6_M       0x0F000000  // 7th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH5_M       0x00F00000  // 6th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH4_M       0x000F0000  // 5th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH3_M       0x0000F000  // 4th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH2_M       0x00000F00  // 3rd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH1_M       0x000000F0  // 2nd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH0_M       0x0000000F  // 1st Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH0_TSH7_S       28
N#define ADC_SSTSH0_TSH6_S       24
N#define ADC_SSTSH0_TSH5_S       20
N#define ADC_SSTSH0_TSH4_S       16
N#define ADC_SSTSH0_TSH3_S       12
N#define ADC_SSTSH0_TSH2_S       8
N#define ADC_SSTSH0_TSH1_S       4
N#define ADC_SSTSH0_TSH0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSMUX1 register.
N//
N//*****************************************************************************
N#define ADC_SSMUX1_MUX3_M       0x0000F000  // 4th Sample Input Select
N#define ADC_SSMUX1_MUX2_M       0x00000F00  // 3rd Sample Input Select
N#define ADC_SSMUX1_MUX1_M       0x000000F0  // 2nd Sample Input Select
N#define ADC_SSMUX1_MUX0_M       0x0000000F  // 1st Sample Input Select
N#define ADC_SSMUX1_MUX3_S       12
N#define ADC_SSMUX1_MUX2_S       8
N#define ADC_SSMUX1_MUX1_S       4
N#define ADC_SSMUX1_MUX0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSCTL1 register.
N//
N//*****************************************************************************
N#define ADC_SSCTL1_TS3          0x00008000  // 4th Sample Temp Sensor Select
N#define ADC_SSCTL1_IE3          0x00004000  // 4th Sample Interrupt Enable
N#define ADC_SSCTL1_END3         0x00002000  // 4th Sample is End of Sequence
N#define ADC_SSCTL1_D3           0x00001000  // 4th Sample Diff Input Select
N#define ADC_SSCTL1_TS2          0x00000800  // 3rd Sample Temp Sensor Select
N#define ADC_SSCTL1_IE2          0x00000400  // 3rd Sample Interrupt Enable
N#define ADC_SSCTL1_END2         0x00000200  // 3rd Sample is End of Sequence
N#define ADC_SSCTL1_D2           0x00000100  // 3rd Sample Diff Input Select
N#define ADC_SSCTL1_TS1          0x00000080  // 2nd Sample Temp Sensor Select
N#define ADC_SSCTL1_IE1          0x00000040  // 2nd Sample Interrupt Enable
N#define ADC_SSCTL1_END1         0x00000020  // 2nd Sample is End of Sequence
N#define ADC_SSCTL1_D1           0x00000010  // 2nd Sample Diff Input Select
N#define ADC_SSCTL1_TS0          0x00000008  // 1st Sample Temp Sensor Select
N#define ADC_SSCTL1_IE0          0x00000004  // 1st Sample Interrupt Enable
N#define ADC_SSCTL1_END0         0x00000002  // 1st Sample is End of Sequence
N#define ADC_SSCTL1_D0           0x00000001  // 1st Sample Diff Input Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFIFO1 register.
N//
N//*****************************************************************************
N#define ADC_SSFIFO1_DATA_M      0x00000FFF  // Conversion Result Data
N#define ADC_SSFIFO1_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFSTAT1 register.
N//
N//*****************************************************************************
N#define ADC_SSFSTAT1_FULL       0x00001000  // FIFO Full
N#define ADC_SSFSTAT1_EMPTY      0x00000100  // FIFO Empty
N#define ADC_SSFSTAT1_HPTR_M     0x000000F0  // FIFO Head Pointer
N#define ADC_SSFSTAT1_TPTR_M     0x0000000F  // FIFO Tail Pointer
N#define ADC_SSFSTAT1_HPTR_S     4
N#define ADC_SSFSTAT1_TPTR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSOP1 register.
N//
N//*****************************************************************************
N#define ADC_SSOP1_S3DCOP        0x00001000  // Sample 3 Digital Comparator
N                                            // Operation
N#define ADC_SSOP1_S2DCOP        0x00000100  // Sample 2 Digital Comparator
N                                            // Operation
N#define ADC_SSOP1_S1DCOP        0x00000010  // Sample 1 Digital Comparator
N                                            // Operation
N#define ADC_SSOP1_S0DCOP        0x00000001  // Sample 0 Digital Comparator
N                                            // Operation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSDC1 register.
N//
N//*****************************************************************************
N#define ADC_SSDC1_S3DCSEL_M     0x0000F000  // Sample 3 Digital Comparator
N                                            // Select
N#define ADC_SSDC1_S2DCSEL_M     0x00000F00  // Sample 2 Digital Comparator
N                                            // Select
N#define ADC_SSDC1_S1DCSEL_M     0x000000F0  // Sample 1 Digital Comparator
N                                            // Select
N#define ADC_SSDC1_S0DCSEL_M     0x0000000F  // Sample 0 Digital Comparator
N                                            // Select
N#define ADC_SSDC1_S2DCSEL_S     8
N#define ADC_SSDC1_S1DCSEL_S     4
N#define ADC_SSDC1_S0DCSEL_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSEMUX1 register.
N//
N//*****************************************************************************
N#define ADC_SSEMUX1_EMUX3       0x00001000  // 4th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX1_EMUX2       0x00000100  // 3rd Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX1_EMUX1       0x00000010  // 2th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX1_EMUX0       0x00000001  // 1st Sample Input Select (Upper
N                                            // Bit)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSTSH1 register.
N//
N//*****************************************************************************
N#define ADC_SSTSH1_TSH3_M       0x0000F000  // 4th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH1_TSH2_M       0x00000F00  // 3rd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH1_TSH1_M       0x000000F0  // 2nd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH1_TSH0_M       0x0000000F  // 1st Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH1_TSH3_S       12
N#define ADC_SSTSH1_TSH2_S       8
N#define ADC_SSTSH1_TSH1_S       4
N#define ADC_SSTSH1_TSH0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSMUX2 register.
N//
N//*****************************************************************************
N#define ADC_SSMUX2_MUX3_M       0x0000F000  // 4th Sample Input Select
N#define ADC_SSMUX2_MUX2_M       0x00000F00  // 3rd Sample Input Select
N#define ADC_SSMUX2_MUX1_M       0x000000F0  // 2nd Sample Input Select
N#define ADC_SSMUX2_MUX0_M       0x0000000F  // 1st Sample Input Select
N#define ADC_SSMUX2_MUX3_S       12
N#define ADC_SSMUX2_MUX2_S       8
N#define ADC_SSMUX2_MUX1_S       4
N#define ADC_SSMUX2_MUX0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSCTL2 register.
N//
N//*****************************************************************************
N#define ADC_SSCTL2_TS3          0x00008000  // 4th Sample Temp Sensor Select
N#define ADC_SSCTL2_IE3          0x00004000  // 4th Sample Interrupt Enable
N#define ADC_SSCTL2_END3         0x00002000  // 4th Sample is End of Sequence
N#define ADC_SSCTL2_D3           0x00001000  // 4th Sample Diff Input Select
N#define ADC_SSCTL2_TS2          0x00000800  // 3rd Sample Temp Sensor Select
N#define ADC_SSCTL2_IE2          0x00000400  // 3rd Sample Interrupt Enable
N#define ADC_SSCTL2_END2         0x00000200  // 3rd Sample is End of Sequence
N#define ADC_SSCTL2_D2           0x00000100  // 3rd Sample Diff Input Select
N#define ADC_SSCTL2_TS1          0x00000080  // 2nd Sample Temp Sensor Select
N#define ADC_SSCTL2_IE1          0x00000040  // 2nd Sample Interrupt Enable
N#define ADC_SSCTL2_END1         0x00000020  // 2nd Sample is End of Sequence
N#define ADC_SSCTL2_D1           0x00000010  // 2nd Sample Diff Input Select
N#define ADC_SSCTL2_TS0          0x00000008  // 1st Sample Temp Sensor Select
N#define ADC_SSCTL2_IE0          0x00000004  // 1st Sample Interrupt Enable
N#define ADC_SSCTL2_END0         0x00000002  // 1st Sample is End of Sequence
N#define ADC_SSCTL2_D0           0x00000001  // 1st Sample Diff Input Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFIFO2 register.
N//
N//*****************************************************************************
N#define ADC_SSFIFO2_DATA_M      0x00000FFF  // Conversion Result Data
N#define ADC_SSFIFO2_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFSTAT2 register.
N//
N//*****************************************************************************
N#define ADC_SSFSTAT2_FULL       0x00001000  // FIFO Full
N#define ADC_SSFSTAT2_EMPTY      0x00000100  // FIFO Empty
N#define ADC_SSFSTAT2_HPTR_M     0x000000F0  // FIFO Head Pointer
N#define ADC_SSFSTAT2_TPTR_M     0x0000000F  // FIFO Tail Pointer
N#define ADC_SSFSTAT2_HPTR_S     4
N#define ADC_SSFSTAT2_TPTR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSOP2 register.
N//
N//*****************************************************************************
N#define ADC_SSOP2_S3DCOP        0x00001000  // Sample 3 Digital Comparator
N                                            // Operation
N#define ADC_SSOP2_S2DCOP        0x00000100  // Sample 2 Digital Comparator
N                                            // Operation
N#define ADC_SSOP2_S1DCOP        0x00000010  // Sample 1 Digital Comparator
N                                            // Operation
N#define ADC_SSOP2_S0DCOP        0x00000001  // Sample 0 Digital Comparator
N                                            // Operation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSDC2 register.
N//
N//*****************************************************************************
N#define ADC_SSDC2_S3DCSEL_M     0x0000F000  // Sample 3 Digital Comparator
N                                            // Select
N#define ADC_SSDC2_S2DCSEL_M     0x00000F00  // Sample 2 Digital Comparator
N                                            // Select
N#define ADC_SSDC2_S1DCSEL_M     0x000000F0  // Sample 1 Digital Comparator
N                                            // Select
N#define ADC_SSDC2_S0DCSEL_M     0x0000000F  // Sample 0 Digital Comparator
N                                            // Select
N#define ADC_SSDC2_S2DCSEL_S     8
N#define ADC_SSDC2_S1DCSEL_S     4
N#define ADC_SSDC2_S0DCSEL_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSEMUX2 register.
N//
N//*****************************************************************************
N#define ADC_SSEMUX2_EMUX3       0x00001000  // 4th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX2_EMUX2       0x00000100  // 3rd Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX2_EMUX1       0x00000010  // 2th Sample Input Select (Upper
N                                            // Bit)
N#define ADC_SSEMUX2_EMUX0       0x00000001  // 1st Sample Input Select (Upper
N                                            // Bit)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSTSH2 register.
N//
N//*****************************************************************************
N#define ADC_SSTSH2_TSH3_M       0x0000F000  // 4th Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH2_TSH2_M       0x00000F00  // 3rd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH2_TSH1_M       0x000000F0  // 2nd Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH2_TSH0_M       0x0000000F  // 1st Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH2_TSH3_S       12
N#define ADC_SSTSH2_TSH2_S       8
N#define ADC_SSTSH2_TSH1_S       4
N#define ADC_SSTSH2_TSH0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSMUX3 register.
N//
N//*****************************************************************************
N#define ADC_SSMUX3_MUX0_M       0x0000000F  // 1st Sample Input Select
N#define ADC_SSMUX3_MUX0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSCTL3 register.
N//
N//*****************************************************************************
N#define ADC_SSCTL3_TS0          0x00000008  // 1st Sample Temp Sensor Select
N#define ADC_SSCTL3_IE0          0x00000004  // 1st Sample Interrupt Enable
N#define ADC_SSCTL3_END0         0x00000002  // 1st Sample is End of Sequence
N#define ADC_SSCTL3_D0           0x00000001  // 1st Sample Diff Input Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFIFO3 register.
N//
N//*****************************************************************************
N#define ADC_SSFIFO3_DATA_M      0x00000FFF  // Conversion Result Data
N#define ADC_SSFIFO3_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSFSTAT3 register.
N//
N//*****************************************************************************
N#define ADC_SSFSTAT3_FULL       0x00001000  // FIFO Full
N#define ADC_SSFSTAT3_EMPTY      0x00000100  // FIFO Empty
N#define ADC_SSFSTAT3_HPTR_M     0x000000F0  // FIFO Head Pointer
N#define ADC_SSFSTAT3_TPTR_M     0x0000000F  // FIFO Tail Pointer
N#define ADC_SSFSTAT3_HPTR_S     4
N#define ADC_SSFSTAT3_TPTR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSOP3 register.
N//
N//*****************************************************************************
N#define ADC_SSOP3_S0DCOP        0x00000001  // Sample 0 Digital Comparator
N                                            // Operation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSDC3 register.
N//
N//*****************************************************************************
N#define ADC_SSDC3_S0DCSEL_M     0x0000000F  // Sample 0 Digital Comparator
N                                            // Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSEMUX3 register.
N//
N//*****************************************************************************
N#define ADC_SSEMUX3_EMUX0       0x00000001  // 1st Sample Input Select (Upper
N                                            // Bit)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_SSTSH3 register.
N//
N//*****************************************************************************
N#define ADC_SSTSH3_TSH0_M       0x0000000F  // 1st Sample and Hold Period
N                                            // Select
N#define ADC_SSTSH3_TSH0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCRIC register.
N//
N//*****************************************************************************
N#define ADC_DCRIC_DCTRIG7       0x00800000  // Digital Comparator Trigger 7
N#define ADC_DCRIC_DCTRIG6       0x00400000  // Digital Comparator Trigger 6
N#define ADC_DCRIC_DCTRIG5       0x00200000  // Digital Comparator Trigger 5
N#define ADC_DCRIC_DCTRIG4       0x00100000  // Digital Comparator Trigger 4
N#define ADC_DCRIC_DCTRIG3       0x00080000  // Digital Comparator Trigger 3
N#define ADC_DCRIC_DCTRIG2       0x00040000  // Digital Comparator Trigger 2
N#define ADC_DCRIC_DCTRIG1       0x00020000  // Digital Comparator Trigger 1
N#define ADC_DCRIC_DCTRIG0       0x00010000  // Digital Comparator Trigger 0
N#define ADC_DCRIC_DCINT7        0x00000080  // Digital Comparator Interrupt 7
N#define ADC_DCRIC_DCINT6        0x00000040  // Digital Comparator Interrupt 6
N#define ADC_DCRIC_DCINT5        0x00000020  // Digital Comparator Interrupt 5
N#define ADC_DCRIC_DCINT4        0x00000010  // Digital Comparator Interrupt 4
N#define ADC_DCRIC_DCINT3        0x00000008  // Digital Comparator Interrupt 3
N#define ADC_DCRIC_DCINT2        0x00000004  // Digital Comparator Interrupt 2
N#define ADC_DCRIC_DCINT1        0x00000002  // Digital Comparator Interrupt 1
N#define ADC_DCRIC_DCINT0        0x00000001  // Digital Comparator Interrupt 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL0 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL0_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL0_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL0_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL0_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL0_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL0_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL0_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL0_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL0_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL0_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL0_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL0_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL0_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL0_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL0_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL0_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL0_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL0_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL0_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL0_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL1 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL1_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL1_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL1_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL1_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL1_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL1_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL1_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL1_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL1_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL1_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL1_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL1_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL1_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL1_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL1_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL1_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL1_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL1_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL1_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL1_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL2 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL2_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL2_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL2_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL2_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL2_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL2_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL2_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL2_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL2_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL2_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL2_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL2_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL2_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL2_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL2_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL2_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL2_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL2_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL2_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL2_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL3 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL3_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL3_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL3_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL3_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL3_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL3_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL3_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL3_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL3_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL3_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL3_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL3_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL3_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL3_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL3_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL3_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL3_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL3_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL3_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL3_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL4 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL4_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL4_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL4_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL4_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL4_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL4_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL4_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL4_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL4_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL4_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL4_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL4_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL4_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL4_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL4_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL4_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL4_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL4_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL4_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL4_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL5 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL5_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL5_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL5_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL5_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL5_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL5_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL5_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL5_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL5_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL5_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL5_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL5_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL5_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL5_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL5_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL5_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL5_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL5_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL5_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL5_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL6 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL6_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL6_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL6_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL6_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL6_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL6_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL6_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL6_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL6_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL6_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL6_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL6_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL6_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL6_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL6_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL6_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL6_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL6_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL6_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL6_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCTL7 register.
N//
N//*****************************************************************************
N#define ADC_DCCTL7_CTE          0x00001000  // Comparison Trigger Enable
N#define ADC_DCCTL7_CTC_M        0x00000C00  // Comparison Trigger Condition
N#define ADC_DCCTL7_CTC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL7_CTC_MID      0x00000400  // Mid Band
N#define ADC_DCCTL7_CTC_HIGH     0x00000C00  // High Band
N#define ADC_DCCTL7_CTM_M        0x00000300  // Comparison Trigger Mode
N#define ADC_DCCTL7_CTM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL7_CTM_ONCE     0x00000100  // Once
N#define ADC_DCCTL7_CTM_HALWAYS  0x00000200  // Hysteresis Always
N#define ADC_DCCTL7_CTM_HONCE    0x00000300  // Hysteresis Once
N#define ADC_DCCTL7_CIE          0x00000010  // Comparison Interrupt Enable
N#define ADC_DCCTL7_CIC_M        0x0000000C  // Comparison Interrupt Condition
N#define ADC_DCCTL7_CIC_LOW      0x00000000  // Low Band
N#define ADC_DCCTL7_CIC_MID      0x00000004  // Mid Band
N#define ADC_DCCTL7_CIC_HIGH     0x0000000C  // High Band
N#define ADC_DCCTL7_CIM_M        0x00000003  // Comparison Interrupt Mode
N#define ADC_DCCTL7_CIM_ALWAYS   0x00000000  // Always
N#define ADC_DCCTL7_CIM_ONCE     0x00000001  // Once
N#define ADC_DCCTL7_CIM_HALWAYS  0x00000002  // Hysteresis Always
N#define ADC_DCCTL7_CIM_HONCE    0x00000003  // Hysteresis Once
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP0 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP0_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP0_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP0_COMP1_S      16
N#define ADC_DCCMP0_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP1 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP1_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP1_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP1_COMP1_S      16
N#define ADC_DCCMP1_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP2 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP2_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP2_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP2_COMP1_S      16
N#define ADC_DCCMP2_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP3 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP3_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP3_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP3_COMP1_S      16
N#define ADC_DCCMP3_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP4 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP4_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP4_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP4_COMP1_S      16
N#define ADC_DCCMP4_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP5 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP5_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP5_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP5_COMP1_S      16
N#define ADC_DCCMP5_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP6 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP6_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP6_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP6_COMP1_S      16
N#define ADC_DCCMP6_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_DCCMP7 register.
N//
N//*****************************************************************************
N#define ADC_DCCMP7_COMP1_M      0x0FFF0000  // Compare 1
N#define ADC_DCCMP7_COMP0_M      0x00000FFF  // Compare 0
N#define ADC_DCCMP7_COMP1_S      16
N#define ADC_DCCMP7_COMP0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_PP register.
N//
N//*****************************************************************************
N#define ADC_PP_APSHT            0x01000000  // Application-Programmable
N                                            // Sample-and-Hold Time
N#define ADC_PP_TS               0x00800000  // Temperature Sensor
N#define ADC_PP_RSL_M            0x007C0000  // Resolution
N#define ADC_PP_TYPE_M           0x00030000  // ADC Architecture
N#define ADC_PP_TYPE_SAR         0x00000000  // SAR
N#define ADC_PP_DC_M             0x0000FC00  // Digital Comparator Count
N#define ADC_PP_CH_M             0x000003F0  // ADC Channel Count
N#define ADC_PP_MCR_M            0x0000000F  // Maximum Conversion Rate
N#define ADC_PP_MCR_FULL         0x00000007  // Full conversion rate (FCONV) as
N                                            // defined by TADC and NSH
N#define ADC_PP_RSL_S            18
N#define ADC_PP_DC_S             10
N#define ADC_PP_CH_S             4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_PC register.
N//
N//*****************************************************************************
N#define ADC_PC_MCR_M            0x0000000F  // Conversion Rate
N#define ADC_PC_MCR_1_8          0x00000001  // Eighth conversion rate. After a
N                                            // conversion completes, the logic
N                                            // pauses for 112 TADC periods
N                                            // before starting the next
N                                            // conversion
N#define ADC_PC_MCR_1_4          0x00000003  // Quarter conversion rate. After a
N                                            // conversion completes, the logic
N                                            // pauses for 48 TADC periods
N                                            // before starting the next
N                                            // conversion
N#define ADC_PC_MCR_1_2          0x00000005  // Half conversion rate. After a
N                                            // conversion completes, the logic
N                                            // pauses for 16 TADC periods
N                                            // before starting the next
N                                            // conversion
N#define ADC_PC_MCR_FULL         0x00000007  // Full conversion rate (FCONV) as
N                                            // defined by TADC and NSH
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the ADC_O_CC register.
N//
N//*****************************************************************************
N#define ADC_CC_CLKDIV_M         0x000003F0  // PLL VCO Clock Divisor
N#define ADC_CC_CS_M             0x0000000F  // ADC Clock Source
N#define ADC_CC_CS_SYSPLL        0x00000000  // Either the system clock (if the
N                                            // PLL bypass is in effect) or the
N                                            // 16 MHz clock derived from PLL /
N                                            // 25 (default)
N#define ADC_CC_CS_PIOSC         0x00000001  // PIOSC
N#define ADC_CC_CS_MOSC          0x00000002  // MOSC
N#define ADC_CC_CLKDIV_S         4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACMIS register.
N//
N//*****************************************************************************
N#define COMP_ACMIS_IN2          0x00000004  // Comparator 2 Masked Interrupt
N                                            // Status
N#define COMP_ACMIS_IN1          0x00000002  // Comparator 1 Masked Interrupt
N                                            // Status
N#define COMP_ACMIS_IN0          0x00000001  // Comparator 0 Masked Interrupt
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACRIS register.
N//
N//*****************************************************************************
N#define COMP_ACRIS_IN2          0x00000004  // Comparator 2 Interrupt Status
N#define COMP_ACRIS_IN1          0x00000002  // Comparator 1 Interrupt Status
N#define COMP_ACRIS_IN0          0x00000001  // Comparator 0 Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACINTEN register.
N//
N//*****************************************************************************
N#define COMP_ACINTEN_IN2        0x00000004  // Comparator 2 Interrupt Enable
N#define COMP_ACINTEN_IN1        0x00000002  // Comparator 1 Interrupt Enable
N#define COMP_ACINTEN_IN0        0x00000001  // Comparator 0 Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACREFCTL
N// register.
N//
N//*****************************************************************************
N#define COMP_ACREFCTL_EN        0x00000200  // Resistor Ladder Enable
N#define COMP_ACREFCTL_RNG       0x00000100  // Resistor Ladder Range
N#define COMP_ACREFCTL_VREF_M    0x0000000F  // Resistor Ladder Voltage Ref
N#define COMP_ACREFCTL_VREF_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACSTAT0 register.
N//
N//*****************************************************************************
N#define COMP_ACSTAT0_OVAL       0x00000002  // Comparator Output Value
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACCTL0 register.
N//
N//*****************************************************************************
N#define COMP_ACCTL0_TOEN        0x00000800  // Trigger Output Enable
N#define COMP_ACCTL0_ASRCP_M     0x00000600  // Analog Source Positive
N#define COMP_ACCTL0_ASRCP_PIN   0x00000000  // Pin value of Cn+
N#define COMP_ACCTL0_ASRCP_PIN0  0x00000200  // Pin value of C0+
N#define COMP_ACCTL0_ASRCP_REF   0x00000400  // Internal voltage reference
N#define COMP_ACCTL0_TSLVAL      0x00000080  // Trigger Sense Level Value
N#define COMP_ACCTL0_TSEN_M      0x00000060  // Trigger Sense
N#define COMP_ACCTL0_TSEN_LEVEL  0x00000000  // Level sense, see TSLVAL
N#define COMP_ACCTL0_TSEN_FALL   0x00000020  // Falling edge
N#define COMP_ACCTL0_TSEN_RISE   0x00000040  // Rising edge
N#define COMP_ACCTL0_TSEN_BOTH   0x00000060  // Either edge
N#define COMP_ACCTL0_ISLVAL      0x00000010  // Interrupt Sense Level Value
N#define COMP_ACCTL0_ISEN_M      0x0000000C  // Interrupt Sense
N#define COMP_ACCTL0_ISEN_LEVEL  0x00000000  // Level sense, see ISLVAL
N#define COMP_ACCTL0_ISEN_FALL   0x00000004  // Falling edge
N#define COMP_ACCTL0_ISEN_RISE   0x00000008  // Rising edge
N#define COMP_ACCTL0_ISEN_BOTH   0x0000000C  // Either edge
N#define COMP_ACCTL0_CINV        0x00000002  // Comparator Output Invert
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACSTAT1 register.
N//
N//*****************************************************************************
N#define COMP_ACSTAT1_OVAL       0x00000002  // Comparator Output Value
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACCTL1 register.
N//
N//*****************************************************************************
N#define COMP_ACCTL1_TOEN        0x00000800  // Trigger Output Enable
N#define COMP_ACCTL1_ASRCP_M     0x00000600  // Analog Source Positive
N#define COMP_ACCTL1_ASRCP_PIN   0x00000000  // Pin value of Cn+
N#define COMP_ACCTL1_ASRCP_PIN0  0x00000200  // Pin value of C0+
N#define COMP_ACCTL1_ASRCP_REF   0x00000400  // Internal voltage reference
N                                            // (VIREF)
N#define COMP_ACCTL1_TSLVAL      0x00000080  // Trigger Sense Level Value
N#define COMP_ACCTL1_TSEN_M      0x00000060  // Trigger Sense
N#define COMP_ACCTL1_TSEN_LEVEL  0x00000000  // Level sense, see TSLVAL
N#define COMP_ACCTL1_TSEN_FALL   0x00000020  // Falling edge
N#define COMP_ACCTL1_TSEN_RISE   0x00000040  // Rising edge
N#define COMP_ACCTL1_TSEN_BOTH   0x00000060  // Either edge
N#define COMP_ACCTL1_ISLVAL      0x00000010  // Interrupt Sense Level Value
N#define COMP_ACCTL1_ISEN_M      0x0000000C  // Interrupt Sense
N#define COMP_ACCTL1_ISEN_LEVEL  0x00000000  // Level sense, see ISLVAL
N#define COMP_ACCTL1_ISEN_FALL   0x00000004  // Falling edge
N#define COMP_ACCTL1_ISEN_RISE   0x00000008  // Rising edge
N#define COMP_ACCTL1_ISEN_BOTH   0x0000000C  // Either edge
N#define COMP_ACCTL1_CINV        0x00000002  // Comparator Output Invert
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACSTAT2 register.
N//
N//*****************************************************************************
N#define COMP_ACSTAT2_OVAL       0x00000002  // Comparator Output Value
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_ACCTL2 register.
N//
N//*****************************************************************************
N#define COMP_ACCTL2_TOEN        0x00000800  // Trigger Output Enable
N#define COMP_ACCTL2_ASRCP_M     0x00000600  // Analog Source Positive
N#define COMP_ACCTL2_ASRCP_PIN   0x00000000  // Pin value of Cn+
N#define COMP_ACCTL2_ASRCP_PIN0  0x00000200  // Pin value of C0+
N#define COMP_ACCTL2_ASRCP_REF   0x00000400  // Internal voltage reference
N                                            // (VIREF)
N#define COMP_ACCTL2_TSLVAL      0x00000080  // Trigger Sense Level Value
N#define COMP_ACCTL2_TSEN_M      0x00000060  // Trigger Sense
N#define COMP_ACCTL2_TSEN_LEVEL  0x00000000  // Level sense, see TSLVAL
N#define COMP_ACCTL2_TSEN_FALL   0x00000020  // Falling edge
N#define COMP_ACCTL2_TSEN_RISE   0x00000040  // Rising edge
N#define COMP_ACCTL2_TSEN_BOTH   0x00000060  // Either edge
N#define COMP_ACCTL2_ISLVAL      0x00000010  // Interrupt Sense Level Value
N#define COMP_ACCTL2_ISEN_M      0x0000000C  // Interrupt Sense
N#define COMP_ACCTL2_ISEN_LEVEL  0x00000000  // Level sense, see ISLVAL
N#define COMP_ACCTL2_ISEN_FALL   0x00000004  // Falling edge
N#define COMP_ACCTL2_ISEN_RISE   0x00000008  // Rising edge
N#define COMP_ACCTL2_ISEN_BOTH   0x0000000C  // Either edge
N#define COMP_ACCTL2_CINV        0x00000002  // Comparator Output Invert
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the COMP_O_PP register.
N//
N//*****************************************************************************
N#define COMP_PP_C2O             0x00040000  // Comparator Output 2 Present
N#define COMP_PP_C1O             0x00020000  // Comparator Output 1 Present
N#define COMP_PP_C0O             0x00010000  // Comparator Output 0 Present
N#define COMP_PP_CMP2            0x00000004  // Comparator 2 Present
N#define COMP_PP_CMP1            0x00000002  // Comparator 1 Present
N#define COMP_PP_CMP0            0x00000001  // Comparator 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_CTL register.
N//
N//*****************************************************************************
N#define CAN_CTL_TEST            0x00000080  // Test Mode Enable
N#define CAN_CTL_CCE             0x00000040  // Configuration Change Enable
N#define CAN_CTL_DAR             0x00000020  // Disable Automatic-Retransmission
N#define CAN_CTL_EIE             0x00000008  // Error Interrupt Enable
N#define CAN_CTL_SIE             0x00000004  // Status Interrupt Enable
N#define CAN_CTL_IE              0x00000002  // CAN Interrupt Enable
N#define CAN_CTL_INIT            0x00000001  // Initialization
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_STS register.
N//
N//*****************************************************************************
N#define CAN_STS_BOFF            0x00000080  // Bus-Off Status
N#define CAN_STS_EWARN           0x00000040  // Warning Status
N#define CAN_STS_EPASS           0x00000020  // Error Passive
N#define CAN_STS_RXOK            0x00000010  // Received a Message Successfully
N#define CAN_STS_TXOK            0x00000008  // Transmitted a Message
N                                            // Successfully
N#define CAN_STS_LEC_M           0x00000007  // Last Error Code
N#define CAN_STS_LEC_NONE        0x00000000  // No Error
N#define CAN_STS_LEC_STUFF       0x00000001  // Stuff Error
N#define CAN_STS_LEC_FORM        0x00000002  // Format Error
N#define CAN_STS_LEC_ACK         0x00000003  // ACK Error
N#define CAN_STS_LEC_BIT1        0x00000004  // Bit 1 Error
N#define CAN_STS_LEC_BIT0        0x00000005  // Bit 0 Error
N#define CAN_STS_LEC_CRC         0x00000006  // CRC Error
N#define CAN_STS_LEC_NOEVENT     0x00000007  // No Event
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_ERR register.
N//
N//*****************************************************************************
N#define CAN_ERR_RP              0x00008000  // Received Error Passive
N#define CAN_ERR_REC_M           0x00007F00  // Receive Error Counter
N#define CAN_ERR_TEC_M           0x000000FF  // Transmit Error Counter
N#define CAN_ERR_REC_S           8
N#define CAN_ERR_TEC_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_BIT register.
N//
N//*****************************************************************************
N#define CAN_BIT_TSEG2_M         0x00007000  // Time Segment after Sample Point
N#define CAN_BIT_TSEG1_M         0x00000F00  // Time Segment Before Sample Point
N#define CAN_BIT_SJW_M           0x000000C0  // (Re)Synchronization Jump Width
N#define CAN_BIT_BRP_M           0x0000003F  // Baud Rate Prescaler
N#define CAN_BIT_TSEG2_S         12
N#define CAN_BIT_TSEG1_S         8
N#define CAN_BIT_SJW_S           6
N#define CAN_BIT_BRP_S           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_INT register.
N//
N//*****************************************************************************
N#define CAN_INT_INTID_M         0x0000FFFF  // Interrupt Identifier
N#define CAN_INT_INTID_NONE      0x00000000  // No interrupt pending
N#define CAN_INT_INTID_STATUS    0x00008000  // Status Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_TST register.
N//
N//*****************************************************************************
N#define CAN_TST_RX              0x00000080  // Receive Observation
N#define CAN_TST_TX_M            0x00000060  // Transmit Control
N#define CAN_TST_TX_CANCTL       0x00000000  // CAN Module Control
N#define CAN_TST_TX_SAMPLE       0x00000020  // Sample Point
N#define CAN_TST_TX_DOMINANT     0x00000040  // Driven Low
N#define CAN_TST_TX_RECESSIVE    0x00000060  // Driven High
N#define CAN_TST_LBACK           0x00000010  // Loopback Mode
N#define CAN_TST_SILENT          0x00000008  // Silent Mode
N#define CAN_TST_BASIC           0x00000004  // Basic Mode
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_BRPE register.
N//
N//*****************************************************************************
N#define CAN_BRPE_BRPE_M         0x0000000F  // Baud Rate Prescaler Extension
N#define CAN_BRPE_BRPE_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1CRQ register.
N//
N//*****************************************************************************
N#define CAN_IF1CRQ_BUSY         0x00008000  // Busy Flag
N#define CAN_IF1CRQ_MNUM_M       0x0000003F  // Message Number
N#define CAN_IF1CRQ_MNUM_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1CMSK register.
N//
N//*****************************************************************************
N#define CAN_IF1CMSK_WRNRD       0x00000080  // Write, Not Read
N#define CAN_IF1CMSK_MASK        0x00000040  // Access Mask Bits
N#define CAN_IF1CMSK_ARB         0x00000020  // Access Arbitration Bits
N#define CAN_IF1CMSK_CONTROL     0x00000010  // Access Control Bits
N#define CAN_IF1CMSK_CLRINTPND   0x00000008  // Clear Interrupt Pending Bit
N#define CAN_IF1CMSK_NEWDAT      0x00000004  // Access New Data
N#define CAN_IF1CMSK_TXRQST      0x00000004  // Access Transmission Request
N#define CAN_IF1CMSK_DATAA       0x00000002  // Access Data Byte 0 to 3
N#define CAN_IF1CMSK_DATAB       0x00000001  // Access Data Byte 4 to 7
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1MSK1 register.
N//
N//*****************************************************************************
N#define CAN_IF1MSK1_IDMSK_M     0x0000FFFF  // Identifier Mask
N#define CAN_IF1MSK1_IDMSK_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1MSK2 register.
N//
N//*****************************************************************************
N#define CAN_IF1MSK2_MXTD        0x00008000  // Mask Extended Identifier
N#define CAN_IF1MSK2_MDIR        0x00004000  // Mask Message Direction
N#define CAN_IF1MSK2_IDMSK_M     0x00001FFF  // Identifier Mask
N#define CAN_IF1MSK2_IDMSK_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1ARB1 register.
N//
N//*****************************************************************************
N#define CAN_IF1ARB1_ID_M        0x0000FFFF  // Message Identifier
N#define CAN_IF1ARB1_ID_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1ARB2 register.
N//
N//*****************************************************************************
N#define CAN_IF1ARB2_MSGVAL      0x00008000  // Message Valid
N#define CAN_IF1ARB2_XTD         0x00004000  // Extended Identifier
N#define CAN_IF1ARB2_DIR         0x00002000  // Message Direction
N#define CAN_IF1ARB2_ID_M        0x00001FFF  // Message Identifier
N#define CAN_IF1ARB2_ID_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1MCTL register.
N//
N//*****************************************************************************
N#define CAN_IF1MCTL_NEWDAT      0x00008000  // New Data
N#define CAN_IF1MCTL_MSGLST      0x00004000  // Message Lost
N#define CAN_IF1MCTL_INTPND      0x00002000  // Interrupt Pending
N#define CAN_IF1MCTL_UMASK       0x00001000  // Use Acceptance Mask
N#define CAN_IF1MCTL_TXIE        0x00000800  // Transmit Interrupt Enable
N#define CAN_IF1MCTL_RXIE        0x00000400  // Receive Interrupt Enable
N#define CAN_IF1MCTL_RMTEN       0x00000200  // Remote Enable
N#define CAN_IF1MCTL_TXRQST      0x00000100  // Transmit Request
N#define CAN_IF1MCTL_EOB         0x00000080  // End of Buffer
N#define CAN_IF1MCTL_DLC_M       0x0000000F  // Data Length Code
N#define CAN_IF1MCTL_DLC_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1DA1 register.
N//
N//*****************************************************************************
N#define CAN_IF1DA1_DATA_M       0x0000FFFF  // Data
N#define CAN_IF1DA1_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1DA2 register.
N//
N//*****************************************************************************
N#define CAN_IF1DA2_DATA_M       0x0000FFFF  // Data
N#define CAN_IF1DA2_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1DB1 register.
N//
N//*****************************************************************************
N#define CAN_IF1DB1_DATA_M       0x0000FFFF  // Data
N#define CAN_IF1DB1_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF1DB2 register.
N//
N//*****************************************************************************
N#define CAN_IF1DB2_DATA_M       0x0000FFFF  // Data
N#define CAN_IF1DB2_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2CRQ register.
N//
N//*****************************************************************************
N#define CAN_IF2CRQ_BUSY         0x00008000  // Busy Flag
N#define CAN_IF2CRQ_MNUM_M       0x0000003F  // Message Number
N#define CAN_IF2CRQ_MNUM_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2CMSK register.
N//
N//*****************************************************************************
N#define CAN_IF2CMSK_WRNRD       0x00000080  // Write, Not Read
N#define CAN_IF2CMSK_MASK        0x00000040  // Access Mask Bits
N#define CAN_IF2CMSK_ARB         0x00000020  // Access Arbitration Bits
N#define CAN_IF2CMSK_CONTROL     0x00000010  // Access Control Bits
N#define CAN_IF2CMSK_CLRINTPND   0x00000008  // Clear Interrupt Pending Bit
N#define CAN_IF2CMSK_NEWDAT      0x00000004  // Access New Data
N#define CAN_IF2CMSK_TXRQST      0x00000004  // Access Transmission Request
N#define CAN_IF2CMSK_DATAA       0x00000002  // Access Data Byte 0 to 3
N#define CAN_IF2CMSK_DATAB       0x00000001  // Access Data Byte 4 to 7
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2MSK1 register.
N//
N//*****************************************************************************
N#define CAN_IF2MSK1_IDMSK_M     0x0000FFFF  // Identifier Mask
N#define CAN_IF2MSK1_IDMSK_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2MSK2 register.
N//
N//*****************************************************************************
N#define CAN_IF2MSK2_MXTD        0x00008000  // Mask Extended Identifier
N#define CAN_IF2MSK2_MDIR        0x00004000  // Mask Message Direction
N#define CAN_IF2MSK2_IDMSK_M     0x00001FFF  // Identifier Mask
N#define CAN_IF2MSK2_IDMSK_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2ARB1 register.
N//
N//*****************************************************************************
N#define CAN_IF2ARB1_ID_M        0x0000FFFF  // Message Identifier
N#define CAN_IF2ARB1_ID_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2ARB2 register.
N//
N//*****************************************************************************
N#define CAN_IF2ARB2_MSGVAL      0x00008000  // Message Valid
N#define CAN_IF2ARB2_XTD         0x00004000  // Extended Identifier
N#define CAN_IF2ARB2_DIR         0x00002000  // Message Direction
N#define CAN_IF2ARB2_ID_M        0x00001FFF  // Message Identifier
N#define CAN_IF2ARB2_ID_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2MCTL register.
N//
N//*****************************************************************************
N#define CAN_IF2MCTL_NEWDAT      0x00008000  // New Data
N#define CAN_IF2MCTL_MSGLST      0x00004000  // Message Lost
N#define CAN_IF2MCTL_INTPND      0x00002000  // Interrupt Pending
N#define CAN_IF2MCTL_UMASK       0x00001000  // Use Acceptance Mask
N#define CAN_IF2MCTL_TXIE        0x00000800  // Transmit Interrupt Enable
N#define CAN_IF2MCTL_RXIE        0x00000400  // Receive Interrupt Enable
N#define CAN_IF2MCTL_RMTEN       0x00000200  // Remote Enable
N#define CAN_IF2MCTL_TXRQST      0x00000100  // Transmit Request
N#define CAN_IF2MCTL_EOB         0x00000080  // End of Buffer
N#define CAN_IF2MCTL_DLC_M       0x0000000F  // Data Length Code
N#define CAN_IF2MCTL_DLC_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2DA1 register.
N//
N//*****************************************************************************
N#define CAN_IF2DA1_DATA_M       0x0000FFFF  // Data
N#define CAN_IF2DA1_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2DA2 register.
N//
N//*****************************************************************************
N#define CAN_IF2DA2_DATA_M       0x0000FFFF  // Data
N#define CAN_IF2DA2_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2DB1 register.
N//
N//*****************************************************************************
N#define CAN_IF2DB1_DATA_M       0x0000FFFF  // Data
N#define CAN_IF2DB1_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_IF2DB2 register.
N//
N//*****************************************************************************
N#define CAN_IF2DB2_DATA_M       0x0000FFFF  // Data
N#define CAN_IF2DB2_DATA_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_TXRQ1 register.
N//
N//*****************************************************************************
N#define CAN_TXRQ1_TXRQST_M      0x0000FFFF  // Transmission Request Bits
N#define CAN_TXRQ1_TXRQST_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_TXRQ2 register.
N//
N//*****************************************************************************
N#define CAN_TXRQ2_TXRQST_M      0x0000FFFF  // Transmission Request Bits
N#define CAN_TXRQ2_TXRQST_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_NWDA1 register.
N//
N//*****************************************************************************
N#define CAN_NWDA1_NEWDAT_M      0x0000FFFF  // New Data Bits
N#define CAN_NWDA1_NEWDAT_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_NWDA2 register.
N//
N//*****************************************************************************
N#define CAN_NWDA2_NEWDAT_M      0x0000FFFF  // New Data Bits
N#define CAN_NWDA2_NEWDAT_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_MSG1INT register.
N//
N//*****************************************************************************
N#define CAN_MSG1INT_INTPND_M    0x0000FFFF  // Interrupt Pending Bits
N#define CAN_MSG1INT_INTPND_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_MSG2INT register.
N//
N//*****************************************************************************
N#define CAN_MSG2INT_INTPND_M    0x0000FFFF  // Interrupt Pending Bits
N#define CAN_MSG2INT_INTPND_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_MSG1VAL register.
N//
N//*****************************************************************************
N#define CAN_MSG1VAL_MSGVAL_M    0x0000FFFF  // Message Valid Bits
N#define CAN_MSG1VAL_MSGVAL_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CAN_O_MSG2VAL register.
N//
N//*****************************************************************************
N#define CAN_MSG2VAL_MSGVAL_M    0x0000FFFF  // Message Valid Bits
N#define CAN_MSG2VAL_MSGVAL_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FADDR register.
N//
N//*****************************************************************************
N#define USB_FADDR_M             0x0000007F  // Function Address
N#define USB_FADDR_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_POWER register.
N//
N//*****************************************************************************
N#define USB_POWER_ISOUP         0x00000080  // Isochronous Update
N#define USB_POWER_SOFTCONN      0x00000040  // Soft Connect/Disconnect
N#define USB_POWER_HSENAB        0x00000020  // High Speed Enable
N#define USB_POWER_HSMODE        0x00000010  // High Speed Enable
N#define USB_POWER_RESET         0x00000008  // RESET Signaling
N#define USB_POWER_RESUME        0x00000004  // RESUME Signaling
N#define USB_POWER_SUSPEND       0x00000002  // SUSPEND Mode
N#define USB_POWER_PWRDNPHY      0x00000001  // Power Down PHY
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXIS register.
N//
N//*****************************************************************************
N#define USB_TXIS_EP7            0x00000080  // TX Endpoint 7 Interrupt
N#define USB_TXIS_EP6            0x00000040  // TX Endpoint 6 Interrupt
N#define USB_TXIS_EP5            0x00000020  // TX Endpoint 5 Interrupt
N#define USB_TXIS_EP4            0x00000010  // TX Endpoint 4 Interrupt
N#define USB_TXIS_EP3            0x00000008  // TX Endpoint 3 Interrupt
N#define USB_TXIS_EP2            0x00000004  // TX Endpoint 2 Interrupt
N#define USB_TXIS_EP1            0x00000002  // TX Endpoint 1 Interrupt
N#define USB_TXIS_EP0            0x00000001  // TX and RX Endpoint 0 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXIS register.
N//
N//*****************************************************************************
N#define USB_RXIS_EP7            0x00000080  // RX Endpoint 7 Interrupt
N#define USB_RXIS_EP6            0x00000040  // RX Endpoint 6 Interrupt
N#define USB_RXIS_EP5            0x00000020  // RX Endpoint 5 Interrupt
N#define USB_RXIS_EP4            0x00000010  // RX Endpoint 4 Interrupt
N#define USB_RXIS_EP3            0x00000008  // RX Endpoint 3 Interrupt
N#define USB_RXIS_EP2            0x00000004  // RX Endpoint 2 Interrupt
N#define USB_RXIS_EP1            0x00000002  // RX Endpoint 1 Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXIE register.
N//
N//*****************************************************************************
N#define USB_TXIE_EP7            0x00000080  // TX Endpoint 7 Interrupt Enable
N#define USB_TXIE_EP6            0x00000040  // TX Endpoint 6 Interrupt Enable
N#define USB_TXIE_EP5            0x00000020  // TX Endpoint 5 Interrupt Enable
N#define USB_TXIE_EP4            0x00000010  // TX Endpoint 4 Interrupt Enable
N#define USB_TXIE_EP3            0x00000008  // TX Endpoint 3 Interrupt Enable
N#define USB_TXIE_EP2            0x00000004  // TX Endpoint 2 Interrupt Enable
N#define USB_TXIE_EP1            0x00000002  // TX Endpoint 1 Interrupt Enable
N#define USB_TXIE_EP0            0x00000001  // TX and RX Endpoint 0 Interrupt
N                                            // Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXIE register.
N//
N//*****************************************************************************
N#define USB_RXIE_EP7            0x00000080  // RX Endpoint 7 Interrupt Enable
N#define USB_RXIE_EP6            0x00000040  // RX Endpoint 6 Interrupt Enable
N#define USB_RXIE_EP5            0x00000020  // RX Endpoint 5 Interrupt Enable
N#define USB_RXIE_EP4            0x00000010  // RX Endpoint 4 Interrupt Enable
N#define USB_RXIE_EP3            0x00000008  // RX Endpoint 3 Interrupt Enable
N#define USB_RXIE_EP2            0x00000004  // RX Endpoint 2 Interrupt Enable
N#define USB_RXIE_EP1            0x00000002  // RX Endpoint 1 Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_IS register.
N//
N//*****************************************************************************
N#define USB_IS_VBUSERR          0x00000080  // VBUS Error
N#define USB_IS_SESREQ           0x00000040  // SESSION REQUEST
N#define USB_IS_DISCON           0x00000020  // Session Disconnect
N#define USB_IS_CONN             0x00000010  // Session Connect
N#define USB_IS_SOF              0x00000008  // Start of Frame
N#define USB_IS_BABBLE           0x00000004  // Babble Detected
N#define USB_IS_RESET            0x00000004  // RESET Signaling Detected
N#define USB_IS_RESUME           0x00000002  // RESUME Signaling Detected
N#define USB_IS_SUSPEND          0x00000001  // SUSPEND Signaling Detected
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_IE register.
N//
N//*****************************************************************************
N#define USB_IE_VBUSERR          0x00000080  // Enable VBUS Error Interrupt
N#define USB_IE_SESREQ           0x00000040  // Enable Session Request
N#define USB_IE_DISCON           0x00000020  // Enable Disconnect Interrupt
N#define USB_IE_CONN             0x00000010  // Enable Connect Interrupt
N#define USB_IE_SOF              0x00000008  // Enable Start-of-Frame Interrupt
N#define USB_IE_BABBLE           0x00000004  // Enable Babble Interrupt
N#define USB_IE_RESET            0x00000004  // Enable RESET Interrupt
N#define USB_IE_RESUME           0x00000002  // Enable RESUME Interrupt
N#define USB_IE_SUSPND           0x00000001  // Enable SUSPEND Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FRAME register.
N//
N//*****************************************************************************
N#define USB_FRAME_M             0x000007FF  // Frame Number
N#define USB_FRAME_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_EPIDX register.
N//
N//*****************************************************************************
N#define USB_EPIDX_EPIDX_M       0x0000000F  // Endpoint Index
N#define USB_EPIDX_EPIDX_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TEST register.
N//
N//*****************************************************************************
N#define USB_TEST_FORCEH         0x00000080  // Force Host Mode
N#define USB_TEST_FIFOACC        0x00000040  // FIFO Access
N#define USB_TEST_FORCEFS        0x00000020  // Force Full-Speed Mode
N#define USB_TEST_FORCEHS        0x00000010  // Force High-Speed Mode
N#define USB_TEST_TESTPKT        0x00000008  // Test Packet Mode Enable
N#define USB_TEST_TESTK          0x00000004  // Test_K Mode Enable
N#define USB_TEST_TESTJ          0x00000002  // Test_J Mode Enable
N#define USB_TEST_TESTSE0NAK     0x00000001  // Test_SE0_NAK Test Mode Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FIFO0 register.
N//
N//*****************************************************************************
N#define USB_FIFO0_EPDATA_M      0xFFFFFFFF  // Endpoint Data
N#define USB_FIFO0_EPDATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FIFO1 register.
N//
N//*****************************************************************************
N#define USB_FIFO1_EPDATA_M      0xFFFFFFFF  // Endpoint Data
N#define USB_FIFO1_EPDATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FIFO2 register.
N//
N//*****************************************************************************
N#define USB_FIFO2_EPDATA_M      0xFFFFFFFF  // Endpoint Data
N#define USB_FIFO2_EPDATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FIFO3 register.
N//
N//*****************************************************************************
N#define USB_FIFO3_EPDATA_M      0xFFFFFFFF  // Endpoint Data
N#define USB_FIFO3_EPDATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FIFO4 register.
N//
N//*****************************************************************************
N#define USB_FIFO4_EPDATA_M      0xFFFFFFFF  // Endpoint Data
N#define USB_FIFO4_EPDATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FIFO5 register.
N//
N//*****************************************************************************
N#define USB_FIFO5_EPDATA_M      0xFFFFFFFF  // Endpoint Data
N#define USB_FIFO5_EPDATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FIFO6 register.
N//
N//*****************************************************************************
N#define USB_FIFO6_EPDATA_M      0xFFFFFFFF  // Endpoint Data
N#define USB_FIFO6_EPDATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FIFO7 register.
N//
N//*****************************************************************************
N#define USB_FIFO7_EPDATA_M      0xFFFFFFFF  // Endpoint Data
N#define USB_FIFO7_EPDATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DEVCTL register.
N//
N//*****************************************************************************
N#define USB_DEVCTL_DEV          0x00000080  // Device Mode
N#define USB_DEVCTL_FSDEV        0x00000040  // Full-Speed Device Detected
N#define USB_DEVCTL_LSDEV        0x00000020  // Low-Speed Device Detected
N#define USB_DEVCTL_VBUS_M       0x00000018  // VBUS Level
N#define USB_DEVCTL_VBUS_NONE    0x00000000  // Below SessionEnd
N#define USB_DEVCTL_VBUS_SEND    0x00000008  // Above SessionEnd, below AValid
N#define USB_DEVCTL_VBUS_AVALID  0x00000010  // Above AValid, below VBUSValid
N#define USB_DEVCTL_VBUS_VALID   0x00000018  // Above VBUSValid
N#define USB_DEVCTL_HOST         0x00000004  // Host Mode
N#define USB_DEVCTL_HOSTREQ      0x00000002  // Host Request
N#define USB_DEVCTL_SESSION      0x00000001  // Session Start/End
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_CCONF register.
N//
N//*****************************************************************************
N#define USB_CCONF_TXEDMA        0x00000002  // TX Early DMA Enable
N#define USB_CCONF_RXEDMA        0x00000001  // TX Early DMA Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFIFOSZ register.
N//
N//*****************************************************************************
N#define USB_TXFIFOSZ_DPB        0x00000010  // Double Packet Buffer Support
N#define USB_TXFIFOSZ_SIZE_M     0x0000000F  // Max Packet Size
N#define USB_TXFIFOSZ_SIZE_8     0x00000000  // 8
N#define USB_TXFIFOSZ_SIZE_16    0x00000001  // 16
N#define USB_TXFIFOSZ_SIZE_32    0x00000002  // 32
N#define USB_TXFIFOSZ_SIZE_64    0x00000003  // 64
N#define USB_TXFIFOSZ_SIZE_128   0x00000004  // 128
N#define USB_TXFIFOSZ_SIZE_256   0x00000005  // 256
N#define USB_TXFIFOSZ_SIZE_512   0x00000006  // 512
N#define USB_TXFIFOSZ_SIZE_1024  0x00000007  // 1024
N#define USB_TXFIFOSZ_SIZE_2048  0x00000008  // 2048
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXFIFOSZ register.
N//
N//*****************************************************************************
N#define USB_RXFIFOSZ_DPB        0x00000010  // Double Packet Buffer Support
N#define USB_RXFIFOSZ_SIZE_M     0x0000000F  // Max Packet Size
N#define USB_RXFIFOSZ_SIZE_8     0x00000000  // 8
N#define USB_RXFIFOSZ_SIZE_16    0x00000001  // 16
N#define USB_RXFIFOSZ_SIZE_32    0x00000002  // 32
N#define USB_RXFIFOSZ_SIZE_64    0x00000003  // 64
N#define USB_RXFIFOSZ_SIZE_128   0x00000004  // 128
N#define USB_RXFIFOSZ_SIZE_256   0x00000005  // 256
N#define USB_RXFIFOSZ_SIZE_512   0x00000006  // 512
N#define USB_RXFIFOSZ_SIZE_1024  0x00000007  // 1024
N#define USB_RXFIFOSZ_SIZE_2048  0x00000008  // 2048
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFIFOADD
N// register.
N//
N//*****************************************************************************
N#define USB_TXFIFOADD_ADDR_M    0x000001FF  // Transmit/Receive Start Address
N#define USB_TXFIFOADD_ADDR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXFIFOADD
N// register.
N//
N//*****************************************************************************
N#define USB_RXFIFOADD_ADDR_M    0x000001FF  // Transmit/Receive Start Address
N#define USB_RXFIFOADD_ADDR_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_ULPIVBUSCTL
N// register.
N//
N//*****************************************************************************
N#define USB_ULPIVBUSCTL_USEEXTVBUSIND                                         \
N                                0x00000002  // Use External VBUS Indicator
X#define USB_ULPIVBUSCTL_USEEXTVBUSIND                                                                         0x00000002  
N#define USB_ULPIVBUSCTL_USEEXTVBUS                                            \
N                                0x00000001  // Use External VBUS
X#define USB_ULPIVBUSCTL_USEEXTVBUS                                                                            0x00000001  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_ULPIREGDATA
N// register.
N//
N//*****************************************************************************
N#define USB_ULPIREGDATA_REGDATA_M                                             \
N                                0x000000FF  // Register Data
X#define USB_ULPIREGDATA_REGDATA_M                                                                             0x000000FF  
N#define USB_ULPIREGDATA_REGDATA_S                                             \
N                                0
X#define USB_ULPIREGDATA_REGDATA_S                                                                             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_ULPIREGADDR
N// register.
N//
N//*****************************************************************************
N#define USB_ULPIREGADDR_ADDR_M  0x000000FF  // Register Address
N#define USB_ULPIREGADDR_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_ULPIREGCTL
N// register.
N//
N//*****************************************************************************
N#define USB_ULPIREGCTL_RDWR     0x00000004  // Read/Write Control
N#define USB_ULPIREGCTL_REGCMPLT 0x00000002  // Register Access Complete
N#define USB_ULPIREGCTL_REGACC   0x00000001  // Initiate Register Access
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_ULPIRAWDATA
N// register.
N//
N//*****************************************************************************
N#define USB_ULPIRAWDATA_WTCON_M 0x000000F0  // Connect Wait
N#define USB_ULPIRAWDATA_WTID_M  0x0000000F  // Wait ID
N#define USB_ULPIRAWDATA_WTCON_S 4
N#define USB_ULPIRAWDATA_WTID_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_EPINFO register.
N//
N//*****************************************************************************
N#define USB_EPINFO_RXEP_M       0x000000F0  // RX Endpoints
N#define USB_EPINFO_TXEP_M       0x0000000F  // TX Endpoints
N#define USB_EPINFO_RXEP_S       4
N#define USB_EPINFO_TXEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RAMINFO register.
N//
N//*****************************************************************************
N#define USB_RAMINFO_DMACHAN_M   0x000000F0  // DMA Channels
N#define USB_RAMINFO_RAMBITS_M   0x0000000F  // RAM Address Bus Width
N#define USB_RAMINFO_DMACHAN_S   4
N#define USB_RAMINFO_RAMBITS_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_CONTIM register.
N//
N//*****************************************************************************
N#define USB_CONTIM_WTCON_M      0x000000F0  // Connect Wait
N#define USB_CONTIM_WTID_M       0x0000000F  // Wait ID
N#define USB_CONTIM_WTCON_S      4
N#define USB_CONTIM_WTID_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_VPLEN register.
N//
N//*****************************************************************************
N#define USB_VPLEN_VPLEN_M       0x000000FF  // VBUS Pulse Length
N#define USB_VPLEN_VPLEN_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_HSEOF register.
N//
N//*****************************************************************************
N#define USB_HSEOF_HSEOFG_M      0x000000FF  // HIgh-Speed End-of-Frame Gap
N#define USB_HSEOF_HSEOFG_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_FSEOF register.
N//
N//*****************************************************************************
N#define USB_FSEOF_FSEOFG_M      0x000000FF  // Full-Speed End-of-Frame Gap
N#define USB_FSEOF_FSEOFG_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_LSEOF register.
N//
N//*****************************************************************************
N#define USB_LSEOF_LSEOFG_M      0x000000FF  // Low-Speed End-of-Frame Gap
N#define USB_LSEOF_LSEOFG_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFUNCADDR0
N// register.
N//
N//*****************************************************************************
N#define USB_TXFUNCADDR0_ADDR_M  0x0000007F  // Device Address
N#define USB_TXFUNCADDR0_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBADDR0
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBADDR0_ADDR_M   0x0000007F  // Hub Address
N#define USB_TXHUBADDR0_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBPORT0
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBPORT0_PORT_M   0x0000007F  // Hub Port
N#define USB_TXHUBPORT0_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFUNCADDR1
N// register.
N//
N//*****************************************************************************
N#define USB_TXFUNCADDR1_ADDR_M  0x0000007F  // Device Address
N#define USB_TXFUNCADDR1_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBADDR1
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBADDR1_ADDR_M   0x0000007F  // Hub Address
N#define USB_TXHUBADDR1_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBPORT1
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBPORT1_PORT_M   0x0000007F  // Hub Port
N#define USB_TXHUBPORT1_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXFUNCADDR1
N// register.
N//
N//*****************************************************************************
N#define USB_RXFUNCADDR1_ADDR_M  0x0000007F  // Device Address
N#define USB_RXFUNCADDR1_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBADDR1
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBADDR1_ADDR_M   0x0000007F  // Hub Address
N#define USB_RXHUBADDR1_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBPORT1
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBPORT1_PORT_M   0x0000007F  // Hub Port
N#define USB_RXHUBPORT1_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFUNCADDR2
N// register.
N//
N//*****************************************************************************
N#define USB_TXFUNCADDR2_ADDR_M  0x0000007F  // Device Address
N#define USB_TXFUNCADDR2_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBADDR2
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBADDR2_ADDR_M   0x0000007F  // Hub Address
N#define USB_TXHUBADDR2_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBPORT2
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBPORT2_PORT_M   0x0000007F  // Hub Port
N#define USB_TXHUBPORT2_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXFUNCADDR2
N// register.
N//
N//*****************************************************************************
N#define USB_RXFUNCADDR2_ADDR_M  0x0000007F  // Device Address
N#define USB_RXFUNCADDR2_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBADDR2
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBADDR2_ADDR_M   0x0000007F  // Hub Address
N#define USB_RXHUBADDR2_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBPORT2
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBPORT2_PORT_M   0x0000007F  // Hub Port
N#define USB_RXHUBPORT2_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFUNCADDR3
N// register.
N//
N//*****************************************************************************
N#define USB_TXFUNCADDR3_ADDR_M  0x0000007F  // Device Address
N#define USB_TXFUNCADDR3_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBADDR3
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBADDR3_ADDR_M   0x0000007F  // Hub Address
N#define USB_TXHUBADDR3_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBPORT3
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBPORT3_PORT_M   0x0000007F  // Hub Port
N#define USB_TXHUBPORT3_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXFUNCADDR3
N// register.
N//
N//*****************************************************************************
N#define USB_RXFUNCADDR3_ADDR_M  0x0000007F  // Device Address
N#define USB_RXFUNCADDR3_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBADDR3
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBADDR3_ADDR_M   0x0000007F  // Hub Address
N#define USB_RXHUBADDR3_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBPORT3
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBPORT3_PORT_M   0x0000007F  // Hub Port
N#define USB_RXHUBPORT3_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFUNCADDR4
N// register.
N//
N//*****************************************************************************
N#define USB_TXFUNCADDR4_ADDR_M  0x0000007F  // Device Address
N#define USB_TXFUNCADDR4_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBADDR4
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBADDR4_ADDR_M   0x0000007F  // Hub Address
N#define USB_TXHUBADDR4_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBPORT4
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBPORT4_PORT_M   0x0000007F  // Hub Port
N#define USB_TXHUBPORT4_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXFUNCADDR4
N// register.
N//
N//*****************************************************************************
N#define USB_RXFUNCADDR4_ADDR_M  0x0000007F  // Device Address
N#define USB_RXFUNCADDR4_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBADDR4
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBADDR4_ADDR_M   0x0000007F  // Hub Address
N#define USB_RXHUBADDR4_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBPORT4
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBPORT4_PORT_M   0x0000007F  // Hub Port
N#define USB_RXHUBPORT4_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFUNCADDR5
N// register.
N//
N//*****************************************************************************
N#define USB_TXFUNCADDR5_ADDR_M  0x0000007F  // Device Address
N#define USB_TXFUNCADDR5_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBADDR5
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBADDR5_ADDR_M   0x0000007F  // Hub Address
N#define USB_TXHUBADDR5_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBPORT5
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBPORT5_PORT_M   0x0000007F  // Hub Port
N#define USB_TXHUBPORT5_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXFUNCADDR5
N// register.
N//
N//*****************************************************************************
N#define USB_RXFUNCADDR5_ADDR_M  0x0000007F  // Device Address
N#define USB_RXFUNCADDR5_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBADDR5
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBADDR5_ADDR_M   0x0000007F  // Hub Address
N#define USB_RXHUBADDR5_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBPORT5
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBPORT5_PORT_M   0x0000007F  // Hub Port
N#define USB_RXHUBPORT5_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFUNCADDR6
N// register.
N//
N//*****************************************************************************
N#define USB_TXFUNCADDR6_ADDR_M  0x0000007F  // Device Address
N#define USB_TXFUNCADDR6_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBADDR6
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBADDR6_ADDR_M   0x0000007F  // Hub Address
N#define USB_TXHUBADDR6_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBPORT6
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBPORT6_PORT_M   0x0000007F  // Hub Port
N#define USB_TXHUBPORT6_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXFUNCADDR6
N// register.
N//
N//*****************************************************************************
N#define USB_RXFUNCADDR6_ADDR_M  0x0000007F  // Device Address
N#define USB_RXFUNCADDR6_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBADDR6
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBADDR6_ADDR_M   0x0000007F  // Hub Address
N#define USB_RXHUBADDR6_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBPORT6
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBPORT6_PORT_M   0x0000007F  // Hub Port
N#define USB_RXHUBPORT6_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXFUNCADDR7
N// register.
N//
N//*****************************************************************************
N#define USB_TXFUNCADDR7_ADDR_M  0x0000007F  // Device Address
N#define USB_TXFUNCADDR7_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBADDR7
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBADDR7_ADDR_M   0x0000007F  // Hub Address
N#define USB_TXHUBADDR7_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXHUBPORT7
N// register.
N//
N//*****************************************************************************
N#define USB_TXHUBPORT7_PORT_M   0x0000007F  // Hub Port
N#define USB_TXHUBPORT7_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXFUNCADDR7
N// register.
N//
N//*****************************************************************************
N#define USB_RXFUNCADDR7_ADDR_M  0x0000007F  // Device Address
N#define USB_RXFUNCADDR7_ADDR_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBADDR7
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBADDR7_ADDR_M   0x0000007F  // Hub Address
N#define USB_RXHUBADDR7_ADDR_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXHUBPORT7
N// register.
N//
N//*****************************************************************************
N#define USB_RXHUBPORT7_PORT_M   0x0000007F  // Hub Port
N#define USB_RXHUBPORT7_PORT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_CSRL0 register.
N//
N//*****************************************************************************
N#define USB_CSRL0_NAKTO         0x00000080  // NAK Timeout
N#define USB_CSRL0_SETENDC       0x00000080  // Setup End Clear
N#define USB_CSRL0_STATUS        0x00000040  // STATUS Packet
N#define USB_CSRL0_RXRDYC        0x00000040  // RXRDY Clear
N#define USB_CSRL0_REQPKT        0x00000020  // Request Packet
N#define USB_CSRL0_STALL         0x00000020  // Send Stall
N#define USB_CSRL0_SETEND        0x00000010  // Setup End
N#define USB_CSRL0_ERROR         0x00000010  // Error
N#define USB_CSRL0_DATAEND       0x00000008  // Data End
N#define USB_CSRL0_SETUP         0x00000008  // Setup Packet
N#define USB_CSRL0_STALLED       0x00000004  // Endpoint Stalled
N#define USB_CSRL0_TXRDY         0x00000002  // Transmit Packet Ready
N#define USB_CSRL0_RXRDY         0x00000001  // Receive Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_CSRH0 register.
N//
N//*****************************************************************************
N#define USB_CSRH0_DISPING       0x00000008  // PING Disable
N#define USB_CSRH0_DTWE          0x00000004  // Data Toggle Write Enable
N#define USB_CSRH0_DT            0x00000002  // Data Toggle
N#define USB_CSRH0_FLUSH         0x00000001  // Flush FIFO
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_COUNT0 register.
N//
N//*****************************************************************************
N#define USB_COUNT0_COUNT_M      0x0000007F  // FIFO Count
N#define USB_COUNT0_COUNT_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TYPE0 register.
N//
N//*****************************************************************************
N#define USB_TYPE0_SPEED_M       0x000000C0  // Operating Speed
N#define USB_TYPE0_SPEED_HIGH    0x00000040  // High
N#define USB_TYPE0_SPEED_FULL    0x00000080  // Full
N#define USB_TYPE0_SPEED_LOW     0x000000C0  // Low
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_NAKLMT register.
N//
N//*****************************************************************************
N#define USB_NAKLMT_NAKLMT_M     0x0000001F  // EP0 NAK Limit
N#define USB_NAKLMT_NAKLMT_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXMAXP1 register.
N//
N//*****************************************************************************
N#define USB_TXMAXP1_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_TXMAXP1_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRL1 register.
N//
N//*****************************************************************************
N#define USB_TXCSRL1_NAKTO       0x00000080  // NAK Timeout
N#define USB_TXCSRL1_CLRDT       0x00000040  // Clear Data Toggle
N#define USB_TXCSRL1_STALLED     0x00000020  // Endpoint Stalled
N#define USB_TXCSRL1_STALL       0x00000010  // Send STALL
N#define USB_TXCSRL1_SETUP       0x00000010  // Setup Packet
N#define USB_TXCSRL1_FLUSH       0x00000008  // Flush FIFO
N#define USB_TXCSRL1_ERROR       0x00000004  // Error
N#define USB_TXCSRL1_UNDRN       0x00000004  // Underrun
N#define USB_TXCSRL1_FIFONE      0x00000002  // FIFO Not Empty
N#define USB_TXCSRL1_TXRDY       0x00000001  // Transmit Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRH1 register.
N//
N//*****************************************************************************
N#define USB_TXCSRH1_AUTOSET     0x00000080  // Auto Set
N#define USB_TXCSRH1_ISO         0x00000040  // Isochronous Transfers
N#define USB_TXCSRH1_MODE        0x00000020  // Mode
N#define USB_TXCSRH1_DMAEN       0x00000010  // DMA Request Enable
N#define USB_TXCSRH1_FDT         0x00000008  // Force Data Toggle
N#define USB_TXCSRH1_DMAMOD      0x00000004  // DMA Request Mode
N#define USB_TXCSRH1_DTWE        0x00000002  // Data Toggle Write Enable
N#define USB_TXCSRH1_DT          0x00000001  // Data Toggle
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXMAXP1 register.
N//
N//*****************************************************************************
N#define USB_RXMAXP1_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_RXMAXP1_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRL1 register.
N//
N//*****************************************************************************
N#define USB_RXCSRL1_CLRDT       0x00000080  // Clear Data Toggle
N#define USB_RXCSRL1_STALLED     0x00000040  // Endpoint Stalled
N#define USB_RXCSRL1_STALL       0x00000020  // Send STALL
N#define USB_RXCSRL1_REQPKT      0x00000020  // Request Packet
N#define USB_RXCSRL1_FLUSH       0x00000010  // Flush FIFO
N#define USB_RXCSRL1_DATAERR     0x00000008  // Data Error
N#define USB_RXCSRL1_NAKTO       0x00000008  // NAK Timeout
N#define USB_RXCSRL1_OVER        0x00000004  // Overrun
N#define USB_RXCSRL1_ERROR       0x00000004  // Error
N#define USB_RXCSRL1_FULL        0x00000002  // FIFO Full
N#define USB_RXCSRL1_RXRDY       0x00000001  // Receive Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRH1 register.
N//
N//*****************************************************************************
N#define USB_RXCSRH1_AUTOCL      0x00000080  // Auto Clear
N#define USB_RXCSRH1_AUTORQ      0x00000040  // Auto Request
N#define USB_RXCSRH1_ISO         0x00000040  // Isochronous Transfers
N#define USB_RXCSRH1_DMAEN       0x00000020  // DMA Request Enable
N#define USB_RXCSRH1_DISNYET     0x00000010  // Disable NYET
N#define USB_RXCSRH1_PIDERR      0x00000010  // PID Error
N#define USB_RXCSRH1_DMAMOD      0x00000008  // DMA Request Mode
N#define USB_RXCSRH1_DTWE        0x00000004  // Data Toggle Write Enable
N#define USB_RXCSRH1_DT          0x00000002  // Data Toggle
N#define USB_RXCSRH1_INCOMPRX    0x00000001  // Incomplete RX Transmission
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCOUNT1 register.
N//
N//*****************************************************************************
N#define USB_RXCOUNT1_COUNT_M    0x00001FFF  // Receive Packet Count
N#define USB_RXCOUNT1_COUNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXTYPE1 register.
N//
N//*****************************************************************************
N#define USB_TXTYPE1_SPEED_M     0x000000C0  // Operating Speed
N#define USB_TXTYPE1_SPEED_DFLT  0x00000000  // Default
N#define USB_TXTYPE1_SPEED_HIGH  0x00000040  // High
N#define USB_TXTYPE1_SPEED_FULL  0x00000080  // Full
N#define USB_TXTYPE1_SPEED_LOW   0x000000C0  // Low
N#define USB_TXTYPE1_PROTO_M     0x00000030  // Protocol
N#define USB_TXTYPE1_PROTO_CTRL  0x00000000  // Control
N#define USB_TXTYPE1_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_TXTYPE1_PROTO_BULK  0x00000020  // Bulk
N#define USB_TXTYPE1_PROTO_INT   0x00000030  // Interrupt
N#define USB_TXTYPE1_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_TXTYPE1_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXINTERVAL1
N// register.
N//
N//*****************************************************************************
N#define USB_TXINTERVAL1_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_TXINTERVAL1_NAKLMT_M                                                                              0x000000FF  
N#define USB_TXINTERVAL1_TXPOLL_M                                              \
N                                0x000000FF  // TX Polling
X#define USB_TXINTERVAL1_TXPOLL_M                                                                              0x000000FF  
N#define USB_TXINTERVAL1_TXPOLL_S                                              \
N                                0
X#define USB_TXINTERVAL1_TXPOLL_S                                                                              0
N#define USB_TXINTERVAL1_NAKLMT_S                                              \
N                                0
X#define USB_TXINTERVAL1_NAKLMT_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXTYPE1 register.
N//
N//*****************************************************************************
N#define USB_RXTYPE1_SPEED_M     0x000000C0  // Operating Speed
N#define USB_RXTYPE1_SPEED_DFLT  0x00000000  // Default
N#define USB_RXTYPE1_SPEED_HIGH  0x00000040  // High
N#define USB_RXTYPE1_SPEED_FULL  0x00000080  // Full
N#define USB_RXTYPE1_SPEED_LOW   0x000000C0  // Low
N#define USB_RXTYPE1_PROTO_M     0x00000030  // Protocol
N#define USB_RXTYPE1_PROTO_CTRL  0x00000000  // Control
N#define USB_RXTYPE1_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_RXTYPE1_PROTO_BULK  0x00000020  // Bulk
N#define USB_RXTYPE1_PROTO_INT   0x00000030  // Interrupt
N#define USB_RXTYPE1_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_RXTYPE1_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXINTERVAL1
N// register.
N//
N//*****************************************************************************
N#define USB_RXINTERVAL1_TXPOLL_M                                              \
N                                0x000000FF  // RX Polling
X#define USB_RXINTERVAL1_TXPOLL_M                                                                              0x000000FF  
N#define USB_RXINTERVAL1_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_RXINTERVAL1_NAKLMT_M                                                                              0x000000FF  
N#define USB_RXINTERVAL1_TXPOLL_S                                              \
N                                0
X#define USB_RXINTERVAL1_TXPOLL_S                                                                              0
N#define USB_RXINTERVAL1_NAKLMT_S                                              \
N                                0
X#define USB_RXINTERVAL1_NAKLMT_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXMAXP2 register.
N//
N//*****************************************************************************
N#define USB_TXMAXP2_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_TXMAXP2_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRL2 register.
N//
N//*****************************************************************************
N#define USB_TXCSRL2_NAKTO       0x00000080  // NAK Timeout
N#define USB_TXCSRL2_CLRDT       0x00000040  // Clear Data Toggle
N#define USB_TXCSRL2_STALLED     0x00000020  // Endpoint Stalled
N#define USB_TXCSRL2_SETUP       0x00000010  // Setup Packet
N#define USB_TXCSRL2_STALL       0x00000010  // Send STALL
N#define USB_TXCSRL2_FLUSH       0x00000008  // Flush FIFO
N#define USB_TXCSRL2_ERROR       0x00000004  // Error
N#define USB_TXCSRL2_UNDRN       0x00000004  // Underrun
N#define USB_TXCSRL2_FIFONE      0x00000002  // FIFO Not Empty
N#define USB_TXCSRL2_TXRDY       0x00000001  // Transmit Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRH2 register.
N//
N//*****************************************************************************
N#define USB_TXCSRH2_AUTOSET     0x00000080  // Auto Set
N#define USB_TXCSRH2_ISO         0x00000040  // Isochronous Transfers
N#define USB_TXCSRH2_MODE        0x00000020  // Mode
N#define USB_TXCSRH2_DMAEN       0x00000010  // DMA Request Enable
N#define USB_TXCSRH2_FDT         0x00000008  // Force Data Toggle
N#define USB_TXCSRH2_DMAMOD      0x00000004  // DMA Request Mode
N#define USB_TXCSRH2_DTWE        0x00000002  // Data Toggle Write Enable
N#define USB_TXCSRH2_DT          0x00000001  // Data Toggle
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXMAXP2 register.
N//
N//*****************************************************************************
N#define USB_RXMAXP2_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_RXMAXP2_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRL2 register.
N//
N//*****************************************************************************
N#define USB_RXCSRL2_CLRDT       0x00000080  // Clear Data Toggle
N#define USB_RXCSRL2_STALLED     0x00000040  // Endpoint Stalled
N#define USB_RXCSRL2_REQPKT      0x00000020  // Request Packet
N#define USB_RXCSRL2_STALL       0x00000020  // Send STALL
N#define USB_RXCSRL2_FLUSH       0x00000010  // Flush FIFO
N#define USB_RXCSRL2_DATAERR     0x00000008  // Data Error
N#define USB_RXCSRL2_NAKTO       0x00000008  // NAK Timeout
N#define USB_RXCSRL2_ERROR       0x00000004  // Error
N#define USB_RXCSRL2_OVER        0x00000004  // Overrun
N#define USB_RXCSRL2_FULL        0x00000002  // FIFO Full
N#define USB_RXCSRL2_RXRDY       0x00000001  // Receive Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRH2 register.
N//
N//*****************************************************************************
N#define USB_RXCSRH2_AUTOCL      0x00000080  // Auto Clear
N#define USB_RXCSRH2_AUTORQ      0x00000040  // Auto Request
N#define USB_RXCSRH2_ISO         0x00000040  // Isochronous Transfers
N#define USB_RXCSRH2_DMAEN       0x00000020  // DMA Request Enable
N#define USB_RXCSRH2_DISNYET     0x00000010  // Disable NYET
N#define USB_RXCSRH2_PIDERR      0x00000010  // PID Error
N#define USB_RXCSRH2_DMAMOD      0x00000008  // DMA Request Mode
N#define USB_RXCSRH2_DTWE        0x00000004  // Data Toggle Write Enable
N#define USB_RXCSRH2_DT          0x00000002  // Data Toggle
N#define USB_RXCSRH2_INCOMPRX    0x00000001  // Incomplete RX Transmission
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCOUNT2 register.
N//
N//*****************************************************************************
N#define USB_RXCOUNT2_COUNT_M    0x00001FFF  // Receive Packet Count
N#define USB_RXCOUNT2_COUNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXTYPE2 register.
N//
N//*****************************************************************************
N#define USB_TXTYPE2_SPEED_M     0x000000C0  // Operating Speed
N#define USB_TXTYPE2_SPEED_DFLT  0x00000000  // Default
N#define USB_TXTYPE2_SPEED_HIGH  0x00000040  // High
N#define USB_TXTYPE2_SPEED_FULL  0x00000080  // Full
N#define USB_TXTYPE2_SPEED_LOW   0x000000C0  // Low
N#define USB_TXTYPE2_PROTO_M     0x00000030  // Protocol
N#define USB_TXTYPE2_PROTO_CTRL  0x00000000  // Control
N#define USB_TXTYPE2_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_TXTYPE2_PROTO_BULK  0x00000020  // Bulk
N#define USB_TXTYPE2_PROTO_INT   0x00000030  // Interrupt
N#define USB_TXTYPE2_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_TXTYPE2_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXINTERVAL2
N// register.
N//
N//*****************************************************************************
N#define USB_TXINTERVAL2_TXPOLL_M                                              \
N                                0x000000FF  // TX Polling
X#define USB_TXINTERVAL2_TXPOLL_M                                                                              0x000000FF  
N#define USB_TXINTERVAL2_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_TXINTERVAL2_NAKLMT_M                                                                              0x000000FF  
N#define USB_TXINTERVAL2_NAKLMT_S                                              \
N                                0
X#define USB_TXINTERVAL2_NAKLMT_S                                                                              0
N#define USB_TXINTERVAL2_TXPOLL_S                                              \
N                                0
X#define USB_TXINTERVAL2_TXPOLL_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXTYPE2 register.
N//
N//*****************************************************************************
N#define USB_RXTYPE2_SPEED_M     0x000000C0  // Operating Speed
N#define USB_RXTYPE2_SPEED_DFLT  0x00000000  // Default
N#define USB_RXTYPE2_SPEED_HIGH  0x00000040  // High
N#define USB_RXTYPE2_SPEED_FULL  0x00000080  // Full
N#define USB_RXTYPE2_SPEED_LOW   0x000000C0  // Low
N#define USB_RXTYPE2_PROTO_M     0x00000030  // Protocol
N#define USB_RXTYPE2_PROTO_CTRL  0x00000000  // Control
N#define USB_RXTYPE2_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_RXTYPE2_PROTO_BULK  0x00000020  // Bulk
N#define USB_RXTYPE2_PROTO_INT   0x00000030  // Interrupt
N#define USB_RXTYPE2_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_RXTYPE2_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXINTERVAL2
N// register.
N//
N//*****************************************************************************
N#define USB_RXINTERVAL2_TXPOLL_M                                              \
N                                0x000000FF  // RX Polling
X#define USB_RXINTERVAL2_TXPOLL_M                                                                              0x000000FF  
N#define USB_RXINTERVAL2_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_RXINTERVAL2_NAKLMT_M                                                                              0x000000FF  
N#define USB_RXINTERVAL2_TXPOLL_S                                              \
N                                0
X#define USB_RXINTERVAL2_TXPOLL_S                                                                              0
N#define USB_RXINTERVAL2_NAKLMT_S                                              \
N                                0
X#define USB_RXINTERVAL2_NAKLMT_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXMAXP3 register.
N//
N//*****************************************************************************
N#define USB_TXMAXP3_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_TXMAXP3_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRL3 register.
N//
N//*****************************************************************************
N#define USB_TXCSRL3_NAKTO       0x00000080  // NAK Timeout
N#define USB_TXCSRL3_CLRDT       0x00000040  // Clear Data Toggle
N#define USB_TXCSRL3_STALLED     0x00000020  // Endpoint Stalled
N#define USB_TXCSRL3_SETUP       0x00000010  // Setup Packet
N#define USB_TXCSRL3_STALL       0x00000010  // Send STALL
N#define USB_TXCSRL3_FLUSH       0x00000008  // Flush FIFO
N#define USB_TXCSRL3_ERROR       0x00000004  // Error
N#define USB_TXCSRL3_UNDRN       0x00000004  // Underrun
N#define USB_TXCSRL3_FIFONE      0x00000002  // FIFO Not Empty
N#define USB_TXCSRL3_TXRDY       0x00000001  // Transmit Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRH3 register.
N//
N//*****************************************************************************
N#define USB_TXCSRH3_AUTOSET     0x00000080  // Auto Set
N#define USB_TXCSRH3_ISO         0x00000040  // Isochronous Transfers
N#define USB_TXCSRH3_MODE        0x00000020  // Mode
N#define USB_TXCSRH3_DMAEN       0x00000010  // DMA Request Enable
N#define USB_TXCSRH3_FDT         0x00000008  // Force Data Toggle
N#define USB_TXCSRH3_DMAMOD      0x00000004  // DMA Request Mode
N#define USB_TXCSRH3_DTWE        0x00000002  // Data Toggle Write Enable
N#define USB_TXCSRH3_DT          0x00000001  // Data Toggle
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXMAXP3 register.
N//
N//*****************************************************************************
N#define USB_RXMAXP3_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_RXMAXP3_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRL3 register.
N//
N//*****************************************************************************
N#define USB_RXCSRL3_CLRDT       0x00000080  // Clear Data Toggle
N#define USB_RXCSRL3_STALLED     0x00000040  // Endpoint Stalled
N#define USB_RXCSRL3_STALL       0x00000020  // Send STALL
N#define USB_RXCSRL3_REQPKT      0x00000020  // Request Packet
N#define USB_RXCSRL3_FLUSH       0x00000010  // Flush FIFO
N#define USB_RXCSRL3_DATAERR     0x00000008  // Data Error
N#define USB_RXCSRL3_NAKTO       0x00000008  // NAK Timeout
N#define USB_RXCSRL3_ERROR       0x00000004  // Error
N#define USB_RXCSRL3_OVER        0x00000004  // Overrun
N#define USB_RXCSRL3_FULL        0x00000002  // FIFO Full
N#define USB_RXCSRL3_RXRDY       0x00000001  // Receive Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRH3 register.
N//
N//*****************************************************************************
N#define USB_RXCSRH3_AUTOCL      0x00000080  // Auto Clear
N#define USB_RXCSRH3_AUTORQ      0x00000040  // Auto Request
N#define USB_RXCSRH3_ISO         0x00000040  // Isochronous Transfers
N#define USB_RXCSRH3_DMAEN       0x00000020  // DMA Request Enable
N#define USB_RXCSRH3_DISNYET     0x00000010  // Disable NYET
N#define USB_RXCSRH3_PIDERR      0x00000010  // PID Error
N#define USB_RXCSRH3_DMAMOD      0x00000008  // DMA Request Mode
N#define USB_RXCSRH3_DTWE        0x00000004  // Data Toggle Write Enable
N#define USB_RXCSRH3_DT          0x00000002  // Data Toggle
N#define USB_RXCSRH3_INCOMPRX    0x00000001  // Incomplete RX Transmission
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCOUNT3 register.
N//
N//*****************************************************************************
N#define USB_RXCOUNT3_COUNT_M    0x00001FFF  // Receive Packet Count
N#define USB_RXCOUNT3_COUNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXTYPE3 register.
N//
N//*****************************************************************************
N#define USB_TXTYPE3_SPEED_M     0x000000C0  // Operating Speed
N#define USB_TXTYPE3_SPEED_DFLT  0x00000000  // Default
N#define USB_TXTYPE3_SPEED_HIGH  0x00000040  // High
N#define USB_TXTYPE3_SPEED_FULL  0x00000080  // Full
N#define USB_TXTYPE3_SPEED_LOW   0x000000C0  // Low
N#define USB_TXTYPE3_PROTO_M     0x00000030  // Protocol
N#define USB_TXTYPE3_PROTO_CTRL  0x00000000  // Control
N#define USB_TXTYPE3_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_TXTYPE3_PROTO_BULK  0x00000020  // Bulk
N#define USB_TXTYPE3_PROTO_INT   0x00000030  // Interrupt
N#define USB_TXTYPE3_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_TXTYPE3_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXINTERVAL3
N// register.
N//
N//*****************************************************************************
N#define USB_TXINTERVAL3_TXPOLL_M                                              \
N                                0x000000FF  // TX Polling
X#define USB_TXINTERVAL3_TXPOLL_M                                                                              0x000000FF  
N#define USB_TXINTERVAL3_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_TXINTERVAL3_NAKLMT_M                                                                              0x000000FF  
N#define USB_TXINTERVAL3_TXPOLL_S                                              \
N                                0
X#define USB_TXINTERVAL3_TXPOLL_S                                                                              0
N#define USB_TXINTERVAL3_NAKLMT_S                                              \
N                                0
X#define USB_TXINTERVAL3_NAKLMT_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXTYPE3 register.
N//
N//*****************************************************************************
N#define USB_RXTYPE3_SPEED_M     0x000000C0  // Operating Speed
N#define USB_RXTYPE3_SPEED_DFLT  0x00000000  // Default
N#define USB_RXTYPE3_SPEED_HIGH  0x00000040  // High
N#define USB_RXTYPE3_SPEED_FULL  0x00000080  // Full
N#define USB_RXTYPE3_SPEED_LOW   0x000000C0  // Low
N#define USB_RXTYPE3_PROTO_M     0x00000030  // Protocol
N#define USB_RXTYPE3_PROTO_CTRL  0x00000000  // Control
N#define USB_RXTYPE3_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_RXTYPE3_PROTO_BULK  0x00000020  // Bulk
N#define USB_RXTYPE3_PROTO_INT   0x00000030  // Interrupt
N#define USB_RXTYPE3_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_RXTYPE3_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXINTERVAL3
N// register.
N//
N//*****************************************************************************
N#define USB_RXINTERVAL3_TXPOLL_M                                              \
N                                0x000000FF  // RX Polling
X#define USB_RXINTERVAL3_TXPOLL_M                                                                              0x000000FF  
N#define USB_RXINTERVAL3_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_RXINTERVAL3_NAKLMT_M                                                                              0x000000FF  
N#define USB_RXINTERVAL3_TXPOLL_S                                              \
N                                0
X#define USB_RXINTERVAL3_TXPOLL_S                                                                              0
N#define USB_RXINTERVAL3_NAKLMT_S                                              \
N                                0
X#define USB_RXINTERVAL3_NAKLMT_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXMAXP4 register.
N//
N//*****************************************************************************
N#define USB_TXMAXP4_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_TXMAXP4_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRL4 register.
N//
N//*****************************************************************************
N#define USB_TXCSRL4_NAKTO       0x00000080  // NAK Timeout
N#define USB_TXCSRL4_CLRDT       0x00000040  // Clear Data Toggle
N#define USB_TXCSRL4_STALLED     0x00000020  // Endpoint Stalled
N#define USB_TXCSRL4_SETUP       0x00000010  // Setup Packet
N#define USB_TXCSRL4_STALL       0x00000010  // Send STALL
N#define USB_TXCSRL4_FLUSH       0x00000008  // Flush FIFO
N#define USB_TXCSRL4_ERROR       0x00000004  // Error
N#define USB_TXCSRL4_UNDRN       0x00000004  // Underrun
N#define USB_TXCSRL4_FIFONE      0x00000002  // FIFO Not Empty
N#define USB_TXCSRL4_TXRDY       0x00000001  // Transmit Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRH4 register.
N//
N//*****************************************************************************
N#define USB_TXCSRH4_AUTOSET     0x00000080  // Auto Set
N#define USB_TXCSRH4_ISO         0x00000040  // Isochronous Transfers
N#define USB_TXCSRH4_MODE        0x00000020  // Mode
N#define USB_TXCSRH4_DMAEN       0x00000010  // DMA Request Enable
N#define USB_TXCSRH4_FDT         0x00000008  // Force Data Toggle
N#define USB_TXCSRH4_DMAMOD      0x00000004  // DMA Request Mode
N#define USB_TXCSRH4_DTWE        0x00000002  // Data Toggle Write Enable
N#define USB_TXCSRH4_DT          0x00000001  // Data Toggle
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXMAXP4 register.
N//
N//*****************************************************************************
N#define USB_RXMAXP4_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_RXMAXP4_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRL4 register.
N//
N//*****************************************************************************
N#define USB_RXCSRL4_CLRDT       0x00000080  // Clear Data Toggle
N#define USB_RXCSRL4_STALLED     0x00000040  // Endpoint Stalled
N#define USB_RXCSRL4_STALL       0x00000020  // Send STALL
N#define USB_RXCSRL4_REQPKT      0x00000020  // Request Packet
N#define USB_RXCSRL4_FLUSH       0x00000010  // Flush FIFO
N#define USB_RXCSRL4_NAKTO       0x00000008  // NAK Timeout
N#define USB_RXCSRL4_DATAERR     0x00000008  // Data Error
N#define USB_RXCSRL4_OVER        0x00000004  // Overrun
N#define USB_RXCSRL4_ERROR       0x00000004  // Error
N#define USB_RXCSRL4_FULL        0x00000002  // FIFO Full
N#define USB_RXCSRL4_RXRDY       0x00000001  // Receive Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRH4 register.
N//
N//*****************************************************************************
N#define USB_RXCSRH4_AUTOCL      0x00000080  // Auto Clear
N#define USB_RXCSRH4_AUTORQ      0x00000040  // Auto Request
N#define USB_RXCSRH4_ISO         0x00000040  // Isochronous Transfers
N#define USB_RXCSRH4_DMAEN       0x00000020  // DMA Request Enable
N#define USB_RXCSRH4_DISNYET     0x00000010  // Disable NYET
N#define USB_RXCSRH4_PIDERR      0x00000010  // PID Error
N#define USB_RXCSRH4_DMAMOD      0x00000008  // DMA Request Mode
N#define USB_RXCSRH4_DTWE        0x00000004  // Data Toggle Write Enable
N#define USB_RXCSRH4_DT          0x00000002  // Data Toggle
N#define USB_RXCSRH4_INCOMPRX    0x00000001  // Incomplete RX Transmission
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCOUNT4 register.
N//
N//*****************************************************************************
N#define USB_RXCOUNT4_COUNT_M    0x00001FFF  // Receive Packet Count
N#define USB_RXCOUNT4_COUNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXTYPE4 register.
N//
N//*****************************************************************************
N#define USB_TXTYPE4_SPEED_M     0x000000C0  // Operating Speed
N#define USB_TXTYPE4_SPEED_DFLT  0x00000000  // Default
N#define USB_TXTYPE4_SPEED_HIGH  0x00000040  // High
N#define USB_TXTYPE4_SPEED_FULL  0x00000080  // Full
N#define USB_TXTYPE4_SPEED_LOW   0x000000C0  // Low
N#define USB_TXTYPE4_PROTO_M     0x00000030  // Protocol
N#define USB_TXTYPE4_PROTO_CTRL  0x00000000  // Control
N#define USB_TXTYPE4_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_TXTYPE4_PROTO_BULK  0x00000020  // Bulk
N#define USB_TXTYPE4_PROTO_INT   0x00000030  // Interrupt
N#define USB_TXTYPE4_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_TXTYPE4_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXINTERVAL4
N// register.
N//
N//*****************************************************************************
N#define USB_TXINTERVAL4_TXPOLL_M                                              \
N                                0x000000FF  // TX Polling
X#define USB_TXINTERVAL4_TXPOLL_M                                                                              0x000000FF  
N#define USB_TXINTERVAL4_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_TXINTERVAL4_NAKLMT_M                                                                              0x000000FF  
N#define USB_TXINTERVAL4_NAKLMT_S                                              \
N                                0
X#define USB_TXINTERVAL4_NAKLMT_S                                                                              0
N#define USB_TXINTERVAL4_TXPOLL_S                                              \
N                                0
X#define USB_TXINTERVAL4_TXPOLL_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXTYPE4 register.
N//
N//*****************************************************************************
N#define USB_RXTYPE4_SPEED_M     0x000000C0  // Operating Speed
N#define USB_RXTYPE4_SPEED_DFLT  0x00000000  // Default
N#define USB_RXTYPE4_SPEED_HIGH  0x00000040  // High
N#define USB_RXTYPE4_SPEED_FULL  0x00000080  // Full
N#define USB_RXTYPE4_SPEED_LOW   0x000000C0  // Low
N#define USB_RXTYPE4_PROTO_M     0x00000030  // Protocol
N#define USB_RXTYPE4_PROTO_CTRL  0x00000000  // Control
N#define USB_RXTYPE4_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_RXTYPE4_PROTO_BULK  0x00000020  // Bulk
N#define USB_RXTYPE4_PROTO_INT   0x00000030  // Interrupt
N#define USB_RXTYPE4_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_RXTYPE4_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXINTERVAL4
N// register.
N//
N//*****************************************************************************
N#define USB_RXINTERVAL4_TXPOLL_M                                              \
N                                0x000000FF  // RX Polling
X#define USB_RXINTERVAL4_TXPOLL_M                                                                              0x000000FF  
N#define USB_RXINTERVAL4_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_RXINTERVAL4_NAKLMT_M                                                                              0x000000FF  
N#define USB_RXINTERVAL4_NAKLMT_S                                              \
N                                0
X#define USB_RXINTERVAL4_NAKLMT_S                                                                              0
N#define USB_RXINTERVAL4_TXPOLL_S                                              \
N                                0
X#define USB_RXINTERVAL4_TXPOLL_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXMAXP5 register.
N//
N//*****************************************************************************
N#define USB_TXMAXP5_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_TXMAXP5_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRL5 register.
N//
N//*****************************************************************************
N#define USB_TXCSRL5_NAKTO       0x00000080  // NAK Timeout
N#define USB_TXCSRL5_CLRDT       0x00000040  // Clear Data Toggle
N#define USB_TXCSRL5_STALLED     0x00000020  // Endpoint Stalled
N#define USB_TXCSRL5_SETUP       0x00000010  // Setup Packet
N#define USB_TXCSRL5_STALL       0x00000010  // Send STALL
N#define USB_TXCSRL5_FLUSH       0x00000008  // Flush FIFO
N#define USB_TXCSRL5_ERROR       0x00000004  // Error
N#define USB_TXCSRL5_UNDRN       0x00000004  // Underrun
N#define USB_TXCSRL5_FIFONE      0x00000002  // FIFO Not Empty
N#define USB_TXCSRL5_TXRDY       0x00000001  // Transmit Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRH5 register.
N//
N//*****************************************************************************
N#define USB_TXCSRH5_AUTOSET     0x00000080  // Auto Set
N#define USB_TXCSRH5_ISO         0x00000040  // Isochronous Transfers
N#define USB_TXCSRH5_MODE        0x00000020  // Mode
N#define USB_TXCSRH5_DMAEN       0x00000010  // DMA Request Enable
N#define USB_TXCSRH5_FDT         0x00000008  // Force Data Toggle
N#define USB_TXCSRH5_DMAMOD      0x00000004  // DMA Request Mode
N#define USB_TXCSRH5_DTWE        0x00000002  // Data Toggle Write Enable
N#define USB_TXCSRH5_DT          0x00000001  // Data Toggle
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXMAXP5 register.
N//
N//*****************************************************************************
N#define USB_RXMAXP5_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_RXMAXP5_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRL5 register.
N//
N//*****************************************************************************
N#define USB_RXCSRL5_CLRDT       0x00000080  // Clear Data Toggle
N#define USB_RXCSRL5_STALLED     0x00000040  // Endpoint Stalled
N#define USB_RXCSRL5_STALL       0x00000020  // Send STALL
N#define USB_RXCSRL5_REQPKT      0x00000020  // Request Packet
N#define USB_RXCSRL5_FLUSH       0x00000010  // Flush FIFO
N#define USB_RXCSRL5_NAKTO       0x00000008  // NAK Timeout
N#define USB_RXCSRL5_DATAERR     0x00000008  // Data Error
N#define USB_RXCSRL5_ERROR       0x00000004  // Error
N#define USB_RXCSRL5_OVER        0x00000004  // Overrun
N#define USB_RXCSRL5_FULL        0x00000002  // FIFO Full
N#define USB_RXCSRL5_RXRDY       0x00000001  // Receive Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRH5 register.
N//
N//*****************************************************************************
N#define USB_RXCSRH5_AUTOCL      0x00000080  // Auto Clear
N#define USB_RXCSRH5_AUTORQ      0x00000040  // Auto Request
N#define USB_RXCSRH5_ISO         0x00000040  // Isochronous Transfers
N#define USB_RXCSRH5_DMAEN       0x00000020  // DMA Request Enable
N#define USB_RXCSRH5_DISNYET     0x00000010  // Disable NYET
N#define USB_RXCSRH5_PIDERR      0x00000010  // PID Error
N#define USB_RXCSRH5_DMAMOD      0x00000008  // DMA Request Mode
N#define USB_RXCSRH5_DTWE        0x00000004  // Data Toggle Write Enable
N#define USB_RXCSRH5_DT          0x00000002  // Data Toggle
N#define USB_RXCSRH5_INCOMPRX    0x00000001  // Incomplete RX Transmission
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCOUNT5 register.
N//
N//*****************************************************************************
N#define USB_RXCOUNT5_COUNT_M    0x00001FFF  // Receive Packet Count
N#define USB_RXCOUNT5_COUNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXTYPE5 register.
N//
N//*****************************************************************************
N#define USB_TXTYPE5_SPEED_M     0x000000C0  // Operating Speed
N#define USB_TXTYPE5_SPEED_DFLT  0x00000000  // Default
N#define USB_TXTYPE5_SPEED_HIGH  0x00000040  // High
N#define USB_TXTYPE5_SPEED_FULL  0x00000080  // Full
N#define USB_TXTYPE5_SPEED_LOW   0x000000C0  // Low
N#define USB_TXTYPE5_PROTO_M     0x00000030  // Protocol
N#define USB_TXTYPE5_PROTO_CTRL  0x00000000  // Control
N#define USB_TXTYPE5_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_TXTYPE5_PROTO_BULK  0x00000020  // Bulk
N#define USB_TXTYPE5_PROTO_INT   0x00000030  // Interrupt
N#define USB_TXTYPE5_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_TXTYPE5_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXINTERVAL5
N// register.
N//
N//*****************************************************************************
N#define USB_TXINTERVAL5_TXPOLL_M                                              \
N                                0x000000FF  // TX Polling
X#define USB_TXINTERVAL5_TXPOLL_M                                                                              0x000000FF  
N#define USB_TXINTERVAL5_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_TXINTERVAL5_NAKLMT_M                                                                              0x000000FF  
N#define USB_TXINTERVAL5_NAKLMT_S                                              \
N                                0
X#define USB_TXINTERVAL5_NAKLMT_S                                                                              0
N#define USB_TXINTERVAL5_TXPOLL_S                                              \
N                                0
X#define USB_TXINTERVAL5_TXPOLL_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXTYPE5 register.
N//
N//*****************************************************************************
N#define USB_RXTYPE5_SPEED_M     0x000000C0  // Operating Speed
N#define USB_RXTYPE5_SPEED_DFLT  0x00000000  // Default
N#define USB_RXTYPE5_SPEED_HIGH  0x00000040  // High
N#define USB_RXTYPE5_SPEED_FULL  0x00000080  // Full
N#define USB_RXTYPE5_SPEED_LOW   0x000000C0  // Low
N#define USB_RXTYPE5_PROTO_M     0x00000030  // Protocol
N#define USB_RXTYPE5_PROTO_CTRL  0x00000000  // Control
N#define USB_RXTYPE5_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_RXTYPE5_PROTO_BULK  0x00000020  // Bulk
N#define USB_RXTYPE5_PROTO_INT   0x00000030  // Interrupt
N#define USB_RXTYPE5_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_RXTYPE5_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXINTERVAL5
N// register.
N//
N//*****************************************************************************
N#define USB_RXINTERVAL5_TXPOLL_M                                              \
N                                0x000000FF  // RX Polling
X#define USB_RXINTERVAL5_TXPOLL_M                                                                              0x000000FF  
N#define USB_RXINTERVAL5_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_RXINTERVAL5_NAKLMT_M                                                                              0x000000FF  
N#define USB_RXINTERVAL5_TXPOLL_S                                              \
N                                0
X#define USB_RXINTERVAL5_TXPOLL_S                                                                              0
N#define USB_RXINTERVAL5_NAKLMT_S                                              \
N                                0
X#define USB_RXINTERVAL5_NAKLMT_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXMAXP6 register.
N//
N//*****************************************************************************
N#define USB_TXMAXP6_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_TXMAXP6_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRL6 register.
N//
N//*****************************************************************************
N#define USB_TXCSRL6_NAKTO       0x00000080  // NAK Timeout
N#define USB_TXCSRL6_CLRDT       0x00000040  // Clear Data Toggle
N#define USB_TXCSRL6_STALLED     0x00000020  // Endpoint Stalled
N#define USB_TXCSRL6_STALL       0x00000010  // Send STALL
N#define USB_TXCSRL6_SETUP       0x00000010  // Setup Packet
N#define USB_TXCSRL6_FLUSH       0x00000008  // Flush FIFO
N#define USB_TXCSRL6_ERROR       0x00000004  // Error
N#define USB_TXCSRL6_UNDRN       0x00000004  // Underrun
N#define USB_TXCSRL6_FIFONE      0x00000002  // FIFO Not Empty
N#define USB_TXCSRL6_TXRDY       0x00000001  // Transmit Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRH6 register.
N//
N//*****************************************************************************
N#define USB_TXCSRH6_AUTOSET     0x00000080  // Auto Set
N#define USB_TXCSRH6_ISO         0x00000040  // Isochronous Transfers
N#define USB_TXCSRH6_MODE        0x00000020  // Mode
N#define USB_TXCSRH6_DMAEN       0x00000010  // DMA Request Enable
N#define USB_TXCSRH6_FDT         0x00000008  // Force Data Toggle
N#define USB_TXCSRH6_DMAMOD      0x00000004  // DMA Request Mode
N#define USB_TXCSRH6_DTWE        0x00000002  // Data Toggle Write Enable
N#define USB_TXCSRH6_DT          0x00000001  // Data Toggle
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXMAXP6 register.
N//
N//*****************************************************************************
N#define USB_RXMAXP6_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_RXMAXP6_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRL6 register.
N//
N//*****************************************************************************
N#define USB_RXCSRL6_CLRDT       0x00000080  // Clear Data Toggle
N#define USB_RXCSRL6_STALLED     0x00000040  // Endpoint Stalled
N#define USB_RXCSRL6_REQPKT      0x00000020  // Request Packet
N#define USB_RXCSRL6_STALL       0x00000020  // Send STALL
N#define USB_RXCSRL6_FLUSH       0x00000010  // Flush FIFO
N#define USB_RXCSRL6_NAKTO       0x00000008  // NAK Timeout
N#define USB_RXCSRL6_DATAERR     0x00000008  // Data Error
N#define USB_RXCSRL6_ERROR       0x00000004  // Error
N#define USB_RXCSRL6_OVER        0x00000004  // Overrun
N#define USB_RXCSRL6_FULL        0x00000002  // FIFO Full
N#define USB_RXCSRL6_RXRDY       0x00000001  // Receive Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRH6 register.
N//
N//*****************************************************************************
N#define USB_RXCSRH6_AUTOCL      0x00000080  // Auto Clear
N#define USB_RXCSRH6_AUTORQ      0x00000040  // Auto Request
N#define USB_RXCSRH6_ISO         0x00000040  // Isochronous Transfers
N#define USB_RXCSRH6_DMAEN       0x00000020  // DMA Request Enable
N#define USB_RXCSRH6_DISNYET     0x00000010  // Disable NYET
N#define USB_RXCSRH6_PIDERR      0x00000010  // PID Error
N#define USB_RXCSRH6_DMAMOD      0x00000008  // DMA Request Mode
N#define USB_RXCSRH6_DTWE        0x00000004  // Data Toggle Write Enable
N#define USB_RXCSRH6_DT          0x00000002  // Data Toggle
N#define USB_RXCSRH6_INCOMPRX    0x00000001  // Incomplete RX Transmission
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCOUNT6 register.
N//
N//*****************************************************************************
N#define USB_RXCOUNT6_COUNT_M    0x00001FFF  // Receive Packet Count
N#define USB_RXCOUNT6_COUNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXTYPE6 register.
N//
N//*****************************************************************************
N#define USB_TXTYPE6_SPEED_M     0x000000C0  // Operating Speed
N#define USB_TXTYPE6_SPEED_DFLT  0x00000000  // Default
N#define USB_TXTYPE6_SPEED_HIGH  0x00000040  // High
N#define USB_TXTYPE6_SPEED_FULL  0x00000080  // Full
N#define USB_TXTYPE6_SPEED_LOW   0x000000C0  // Low
N#define USB_TXTYPE6_PROTO_M     0x00000030  // Protocol
N#define USB_TXTYPE6_PROTO_CTRL  0x00000000  // Control
N#define USB_TXTYPE6_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_TXTYPE6_PROTO_BULK  0x00000020  // Bulk
N#define USB_TXTYPE6_PROTO_INT   0x00000030  // Interrupt
N#define USB_TXTYPE6_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_TXTYPE6_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXINTERVAL6
N// register.
N//
N//*****************************************************************************
N#define USB_TXINTERVAL6_TXPOLL_M                                              \
N                                0x000000FF  // TX Polling
X#define USB_TXINTERVAL6_TXPOLL_M                                                                              0x000000FF  
N#define USB_TXINTERVAL6_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_TXINTERVAL6_NAKLMT_M                                                                              0x000000FF  
N#define USB_TXINTERVAL6_TXPOLL_S                                              \
N                                0
X#define USB_TXINTERVAL6_TXPOLL_S                                                                              0
N#define USB_TXINTERVAL6_NAKLMT_S                                              \
N                                0
X#define USB_TXINTERVAL6_NAKLMT_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXTYPE6 register.
N//
N//*****************************************************************************
N#define USB_RXTYPE6_SPEED_M     0x000000C0  // Operating Speed
N#define USB_RXTYPE6_SPEED_DFLT  0x00000000  // Default
N#define USB_RXTYPE6_SPEED_HIGH  0x00000040  // High
N#define USB_RXTYPE6_SPEED_FULL  0x00000080  // Full
N#define USB_RXTYPE6_SPEED_LOW   0x000000C0  // Low
N#define USB_RXTYPE6_PROTO_M     0x00000030  // Protocol
N#define USB_RXTYPE6_PROTO_CTRL  0x00000000  // Control
N#define USB_RXTYPE6_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_RXTYPE6_PROTO_BULK  0x00000020  // Bulk
N#define USB_RXTYPE6_PROTO_INT   0x00000030  // Interrupt
N#define USB_RXTYPE6_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_RXTYPE6_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXINTERVAL6
N// register.
N//
N//*****************************************************************************
N#define USB_RXINTERVAL6_TXPOLL_M                                              \
N                                0x000000FF  // RX Polling
X#define USB_RXINTERVAL6_TXPOLL_M                                                                              0x000000FF  
N#define USB_RXINTERVAL6_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_RXINTERVAL6_NAKLMT_M                                                                              0x000000FF  
N#define USB_RXINTERVAL6_NAKLMT_S                                              \
N                                0
X#define USB_RXINTERVAL6_NAKLMT_S                                                                              0
N#define USB_RXINTERVAL6_TXPOLL_S                                              \
N                                0
X#define USB_RXINTERVAL6_TXPOLL_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXMAXP7 register.
N//
N//*****************************************************************************
N#define USB_TXMAXP7_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_TXMAXP7_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRL7 register.
N//
N//*****************************************************************************
N#define USB_TXCSRL7_NAKTO       0x00000080  // NAK Timeout
N#define USB_TXCSRL7_CLRDT       0x00000040  // Clear Data Toggle
N#define USB_TXCSRL7_STALLED     0x00000020  // Endpoint Stalled
N#define USB_TXCSRL7_STALL       0x00000010  // Send STALL
N#define USB_TXCSRL7_SETUP       0x00000010  // Setup Packet
N#define USB_TXCSRL7_FLUSH       0x00000008  // Flush FIFO
N#define USB_TXCSRL7_ERROR       0x00000004  // Error
N#define USB_TXCSRL7_UNDRN       0x00000004  // Underrun
N#define USB_TXCSRL7_FIFONE      0x00000002  // FIFO Not Empty
N#define USB_TXCSRL7_TXRDY       0x00000001  // Transmit Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXCSRH7 register.
N//
N//*****************************************************************************
N#define USB_TXCSRH7_AUTOSET     0x00000080  // Auto Set
N#define USB_TXCSRH7_ISO         0x00000040  // Isochronous Transfers
N#define USB_TXCSRH7_MODE        0x00000020  // Mode
N#define USB_TXCSRH7_DMAEN       0x00000010  // DMA Request Enable
N#define USB_TXCSRH7_FDT         0x00000008  // Force Data Toggle
N#define USB_TXCSRH7_DMAMOD      0x00000004  // DMA Request Mode
N#define USB_TXCSRH7_DTWE        0x00000002  // Data Toggle Write Enable
N#define USB_TXCSRH7_DT          0x00000001  // Data Toggle
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXMAXP7 register.
N//
N//*****************************************************************************
N#define USB_RXMAXP7_MAXLOAD_M   0x000007FF  // Maximum Payload
N#define USB_RXMAXP7_MAXLOAD_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRL7 register.
N//
N//*****************************************************************************
N#define USB_RXCSRL7_CLRDT       0x00000080  // Clear Data Toggle
N#define USB_RXCSRL7_STALLED     0x00000040  // Endpoint Stalled
N#define USB_RXCSRL7_REQPKT      0x00000020  // Request Packet
N#define USB_RXCSRL7_STALL       0x00000020  // Send STALL
N#define USB_RXCSRL7_FLUSH       0x00000010  // Flush FIFO
N#define USB_RXCSRL7_DATAERR     0x00000008  // Data Error
N#define USB_RXCSRL7_NAKTO       0x00000008  // NAK Timeout
N#define USB_RXCSRL7_ERROR       0x00000004  // Error
N#define USB_RXCSRL7_OVER        0x00000004  // Overrun
N#define USB_RXCSRL7_FULL        0x00000002  // FIFO Full
N#define USB_RXCSRL7_RXRDY       0x00000001  // Receive Packet Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCSRH7 register.
N//
N//*****************************************************************************
N#define USB_RXCSRH7_AUTOCL      0x00000080  // Auto Clear
N#define USB_RXCSRH7_ISO         0x00000040  // Isochronous Transfers
N#define USB_RXCSRH7_AUTORQ      0x00000040  // Auto Request
N#define USB_RXCSRH7_DMAEN       0x00000020  // DMA Request Enable
N#define USB_RXCSRH7_PIDERR      0x00000010  // PID Error
N#define USB_RXCSRH7_DISNYET     0x00000010  // Disable NYET
N#define USB_RXCSRH7_DMAMOD      0x00000008  // DMA Request Mode
N#define USB_RXCSRH7_DTWE        0x00000004  // Data Toggle Write Enable
N#define USB_RXCSRH7_DT          0x00000002  // Data Toggle
N#define USB_RXCSRH7_INCOMPRX    0x00000001  // Incomplete RX Transmission
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXCOUNT7 register.
N//
N//*****************************************************************************
N#define USB_RXCOUNT7_COUNT_M    0x00001FFF  // Receive Packet Count
N#define USB_RXCOUNT7_COUNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXTYPE7 register.
N//
N//*****************************************************************************
N#define USB_TXTYPE7_SPEED_M     0x000000C0  // Operating Speed
N#define USB_TXTYPE7_SPEED_DFLT  0x00000000  // Default
N#define USB_TXTYPE7_SPEED_HIGH  0x00000040  // High
N#define USB_TXTYPE7_SPEED_FULL  0x00000080  // Full
N#define USB_TXTYPE7_SPEED_LOW   0x000000C0  // Low
N#define USB_TXTYPE7_PROTO_M     0x00000030  // Protocol
N#define USB_TXTYPE7_PROTO_CTRL  0x00000000  // Control
N#define USB_TXTYPE7_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_TXTYPE7_PROTO_BULK  0x00000020  // Bulk
N#define USB_TXTYPE7_PROTO_INT   0x00000030  // Interrupt
N#define USB_TXTYPE7_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_TXTYPE7_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXINTERVAL7
N// register.
N//
N//*****************************************************************************
N#define USB_TXINTERVAL7_TXPOLL_M                                              \
N                                0x000000FF  // TX Polling
X#define USB_TXINTERVAL7_TXPOLL_M                                                                              0x000000FF  
N#define USB_TXINTERVAL7_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_TXINTERVAL7_NAKLMT_M                                                                              0x000000FF  
N#define USB_TXINTERVAL7_NAKLMT_S                                              \
N                                0
X#define USB_TXINTERVAL7_NAKLMT_S                                                                              0
N#define USB_TXINTERVAL7_TXPOLL_S                                              \
N                                0
X#define USB_TXINTERVAL7_TXPOLL_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXTYPE7 register.
N//
N//*****************************************************************************
N#define USB_RXTYPE7_SPEED_M     0x000000C0  // Operating Speed
N#define USB_RXTYPE7_SPEED_DFLT  0x00000000  // Default
N#define USB_RXTYPE7_SPEED_HIGH  0x00000040  // High
N#define USB_RXTYPE7_SPEED_FULL  0x00000080  // Full
N#define USB_RXTYPE7_SPEED_LOW   0x000000C0  // Low
N#define USB_RXTYPE7_PROTO_M     0x00000030  // Protocol
N#define USB_RXTYPE7_PROTO_CTRL  0x00000000  // Control
N#define USB_RXTYPE7_PROTO_ISOC  0x00000010  // Isochronous
N#define USB_RXTYPE7_PROTO_BULK  0x00000020  // Bulk
N#define USB_RXTYPE7_PROTO_INT   0x00000030  // Interrupt
N#define USB_RXTYPE7_TEP_M       0x0000000F  // Target Endpoint Number
N#define USB_RXTYPE7_TEP_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXINTERVAL7
N// register.
N//
N//*****************************************************************************
N#define USB_RXINTERVAL7_TXPOLL_M                                              \
N                                0x000000FF  // RX Polling
X#define USB_RXINTERVAL7_TXPOLL_M                                                                              0x000000FF  
N#define USB_RXINTERVAL7_NAKLMT_M                                              \
N                                0x000000FF  // NAK Limit
X#define USB_RXINTERVAL7_NAKLMT_M                                                                              0x000000FF  
N#define USB_RXINTERVAL7_NAKLMT_S                                              \
N                                0
X#define USB_RXINTERVAL7_NAKLMT_S                                                                              0
N#define USB_RXINTERVAL7_TXPOLL_S                                              \
N                                0
X#define USB_RXINTERVAL7_TXPOLL_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMAINTR register.
N//
N//*****************************************************************************
N#define USB_DMAINTR_CH7         0x00000080  // Channel 8 DMA Interrupt
N#define USB_DMAINTR_CH6         0x00000040  // Channel 7 DMA Interrupt
N#define USB_DMAINTR_CH5         0x00000020  // Channel 6 DMA Interrupt
N#define USB_DMAINTR_CH4         0x00000010  // Channel 5 DMA Interrupt
N#define USB_DMAINTR_CH3         0x00000008  // Channel 4 DMA Interrupt
N#define USB_DMAINTR_CH2         0x00000004  // Channel 3 DMA Interrupt
N#define USB_DMAINTR_CH1         0x00000002  // Channel 2 DMA Interrupt
N#define USB_DMAINTR_CH0         0x00000001  // Channel 1 DMA Interrupt
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACTL0 register.
N//
N//*****************************************************************************
N#define USB_DMACTL0_BRSTM_M     0x00000600  // Burst Mode
N#define USB_DMACTL0_BRSTM_ANY   0x00000000  // Bursts of unspecified length
N#define USB_DMACTL0_BRSTM_INC4  0x00000200  // INCR4 or unspecified length
N#define USB_DMACTL0_BRSTM_INC8  0x00000400  // INCR8, INCR4 or unspecified
N                                            // length
N#define USB_DMACTL0_BRSTM_INC16 0x00000600  // INCR16, INCR8, INCR4 or
N                                            // unspecified length
N#define USB_DMACTL0_ERR         0x00000100  // Bus Error Bit
N#define USB_DMACTL0_EP_M        0x000000F0  // Endpoint number
N#define USB_DMACTL0_IE          0x00000008  // DMA Interrupt Enable
N#define USB_DMACTL0_MODE        0x00000004  // DMA Transfer Mode
N#define USB_DMACTL0_DIR         0x00000002  // DMA Direction
N#define USB_DMACTL0_ENABLE      0x00000001  // DMA Transfer Enable
N#define USB_DMACTL0_EP_S        4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMAADDR0 register.
N//
N//*****************************************************************************
N#define USB_DMAADDR0_ADDR_M     0xFFFFFFFC  // DMA Address
N#define USB_DMAADDR0_ADDR_S     2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACOUNT0
N// register.
N//
N//*****************************************************************************
N#define USB_DMACOUNT0_COUNT_M   0xFFFFFFFC  // DMA Count
N#define USB_DMACOUNT0_COUNT_S   2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACTL1 register.
N//
N//*****************************************************************************
N#define USB_DMACTL1_BRSTM_M     0x00000600  // Burst Mode
N#define USB_DMACTL1_BRSTM_ANY   0x00000000  // Bursts of unspecified length
N#define USB_DMACTL1_BRSTM_INC4  0x00000200  // INCR4 or unspecified length
N#define USB_DMACTL1_BRSTM_INC8  0x00000400  // INCR8, INCR4 or unspecified
N                                            // length
N#define USB_DMACTL1_BRSTM_INC16 0x00000600  // INCR16, INCR8, INCR4 or
N                                            // unspecified length
N#define USB_DMACTL1_ERR         0x00000100  // Bus Error Bit
N#define USB_DMACTL1_EP_M        0x000000F0  // Endpoint number
N#define USB_DMACTL1_IE          0x00000008  // DMA Interrupt Enable
N#define USB_DMACTL1_MODE        0x00000004  // DMA Transfer Mode
N#define USB_DMACTL1_DIR         0x00000002  // DMA Direction
N#define USB_DMACTL1_ENABLE      0x00000001  // DMA Transfer Enable
N#define USB_DMACTL1_EP_S        4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMAADDR1 register.
N//
N//*****************************************************************************
N#define USB_DMAADDR1_ADDR_M     0xFFFFFFFC  // DMA Address
N#define USB_DMAADDR1_ADDR_S     2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACOUNT1
N// register.
N//
N//*****************************************************************************
N#define USB_DMACOUNT1_COUNT_M   0xFFFFFFFC  // DMA Count
N#define USB_DMACOUNT1_COUNT_S   2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACTL2 register.
N//
N//*****************************************************************************
N#define USB_DMACTL2_BRSTM_M     0x00000600  // Burst Mode
N#define USB_DMACTL2_BRSTM_ANY   0x00000000  // Bursts of unspecified length
N#define USB_DMACTL2_BRSTM_INC4  0x00000200  // INCR4 or unspecified length
N#define USB_DMACTL2_BRSTM_INC8  0x00000400  // INCR8, INCR4 or unspecified
N                                            // length
N#define USB_DMACTL2_BRSTM_INC16 0x00000600  // INCR16, INCR8, INCR4 or
N                                            // unspecified length
N#define USB_DMACTL2_ERR         0x00000100  // Bus Error Bit
N#define USB_DMACTL2_EP_M        0x000000F0  // Endpoint number
N#define USB_DMACTL2_IE          0x00000008  // DMA Interrupt Enable
N#define USB_DMACTL2_MODE        0x00000004  // DMA Transfer Mode
N#define USB_DMACTL2_DIR         0x00000002  // DMA Direction
N#define USB_DMACTL2_ENABLE      0x00000001  // DMA Transfer Enable
N#define USB_DMACTL2_EP_S        4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMAADDR2 register.
N//
N//*****************************************************************************
N#define USB_DMAADDR2_ADDR_M     0xFFFFFFFC  // DMA Address
N#define USB_DMAADDR2_ADDR_S     2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACOUNT2
N// register.
N//
N//*****************************************************************************
N#define USB_DMACOUNT2_COUNT_M   0xFFFFFFFC  // DMA Count
N#define USB_DMACOUNT2_COUNT_S   2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACTL3 register.
N//
N//*****************************************************************************
N#define USB_DMACTL3_BRSTM_M     0x00000600  // Burst Mode
N#define USB_DMACTL3_BRSTM_ANY   0x00000000  // Bursts of unspecified length
N#define USB_DMACTL3_BRSTM_INC4  0x00000200  // INCR4 or unspecified length
N#define USB_DMACTL3_BRSTM_INC8  0x00000400  // INCR8, INCR4 or unspecified
N                                            // length
N#define USB_DMACTL3_BRSTM_INC16 0x00000600  // INCR16, INCR8, INCR4 or
N                                            // unspecified length
N#define USB_DMACTL3_ERR         0x00000100  // Bus Error Bit
N#define USB_DMACTL3_EP_M        0x000000F0  // Endpoint number
N#define USB_DMACTL3_IE          0x00000008  // DMA Interrupt Enable
N#define USB_DMACTL3_MODE        0x00000004  // DMA Transfer Mode
N#define USB_DMACTL3_DIR         0x00000002  // DMA Direction
N#define USB_DMACTL3_ENABLE      0x00000001  // DMA Transfer Enable
N#define USB_DMACTL3_EP_S        4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMAADDR3 register.
N//
N//*****************************************************************************
N#define USB_DMAADDR3_ADDR_M     0xFFFFFFFC  // DMA Address
N#define USB_DMAADDR3_ADDR_S     2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACOUNT3
N// register.
N//
N//*****************************************************************************
N#define USB_DMACOUNT3_COUNT_M   0xFFFFFFFC  // DMA Count
N#define USB_DMACOUNT3_COUNT_S   2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACTL4 register.
N//
N//*****************************************************************************
N#define USB_DMACTL4_BRSTM_M     0x00000600  // Burst Mode
N#define USB_DMACTL4_BRSTM_ANY   0x00000000  // Bursts of unspecified length
N#define USB_DMACTL4_BRSTM_INC4  0x00000200  // INCR4 or unspecified length
N#define USB_DMACTL4_BRSTM_INC8  0x00000400  // INCR8, INCR4 or unspecified
N                                            // length
N#define USB_DMACTL4_BRSTM_INC16 0x00000600  // INCR16, INCR8, INCR4 or
N                                            // unspecified length
N#define USB_DMACTL4_ERR         0x00000100  // Bus Error Bit
N#define USB_DMACTL4_EP_M        0x000000F0  // Endpoint number
N#define USB_DMACTL4_IE          0x00000008  // DMA Interrupt Enable
N#define USB_DMACTL4_MODE        0x00000004  // DMA Transfer Mode
N#define USB_DMACTL4_DIR         0x00000002  // DMA Direction
N#define USB_DMACTL4_ENABLE      0x00000001  // DMA Transfer Enable
N#define USB_DMACTL4_EP_S        4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMAADDR4 register.
N//
N//*****************************************************************************
N#define USB_DMAADDR4_ADDR_M     0xFFFFFFFC  // DMA Address
N#define USB_DMAADDR4_ADDR_S     2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACOUNT4
N// register.
N//
N//*****************************************************************************
N#define USB_DMACOUNT4_COUNT_M   0xFFFFFFFC  // DMA Count
N#define USB_DMACOUNT4_COUNT_S   2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACTL5 register.
N//
N//*****************************************************************************
N#define USB_DMACTL5_BRSTM_M     0x00000600  // Burst Mode
N#define USB_DMACTL5_BRSTM_ANY   0x00000000  // Bursts of unspecified length
N#define USB_DMACTL5_BRSTM_INC4  0x00000200  // INCR4 or unspecified length
N#define USB_DMACTL5_BRSTM_INC8  0x00000400  // INCR8, INCR4 or unspecified
N                                            // length
N#define USB_DMACTL5_BRSTM_INC16 0x00000600  // INCR16, INCR8, INCR4 or
N                                            // unspecified length
N#define USB_DMACTL5_ERR         0x00000100  // Bus Error Bit
N#define USB_DMACTL5_EP_M        0x000000F0  // Endpoint number
N#define USB_DMACTL5_IE          0x00000008  // DMA Interrupt Enable
N#define USB_DMACTL5_MODE        0x00000004  // DMA Transfer Mode
N#define USB_DMACTL5_DIR         0x00000002  // DMA Direction
N#define USB_DMACTL5_ENABLE      0x00000001  // DMA Transfer Enable
N#define USB_DMACTL5_EP_S        4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMAADDR5 register.
N//
N//*****************************************************************************
N#define USB_DMAADDR5_ADDR_M     0xFFFFFFFC  // DMA Address
N#define USB_DMAADDR5_ADDR_S     2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACOUNT5
N// register.
N//
N//*****************************************************************************
N#define USB_DMACOUNT5_COUNT_M   0xFFFFFFFC  // DMA Count
N#define USB_DMACOUNT5_COUNT_S   2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACTL6 register.
N//
N//*****************************************************************************
N#define USB_DMACTL6_BRSTM_M     0x00000600  // Burst Mode
N#define USB_DMACTL6_BRSTM_ANY   0x00000000  // Bursts of unspecified length
N#define USB_DMACTL6_BRSTM_INC4  0x00000200  // INCR4 or unspecified length
N#define USB_DMACTL6_BRSTM_INC8  0x00000400  // INCR8, INCR4 or unspecified
N                                            // length
N#define USB_DMACTL6_BRSTM_INC16 0x00000600  // INCR16, INCR8, INCR4 or
N                                            // unspecified length
N#define USB_DMACTL6_ERR         0x00000100  // Bus Error Bit
N#define USB_DMACTL6_EP_M        0x000000F0  // Endpoint number
N#define USB_DMACTL6_IE          0x00000008  // DMA Interrupt Enable
N#define USB_DMACTL6_MODE        0x00000004  // DMA Transfer Mode
N#define USB_DMACTL6_DIR         0x00000002  // DMA Direction
N#define USB_DMACTL6_ENABLE      0x00000001  // DMA Transfer Enable
N#define USB_DMACTL6_EP_S        4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMAADDR6 register.
N//
N//*****************************************************************************
N#define USB_DMAADDR6_ADDR_M     0xFFFFFFFC  // DMA Address
N#define USB_DMAADDR6_ADDR_S     2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACOUNT6
N// register.
N//
N//*****************************************************************************
N#define USB_DMACOUNT6_COUNT_M   0xFFFFFFFC  // DMA Count
N#define USB_DMACOUNT6_COUNT_S   2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACTL7 register.
N//
N//*****************************************************************************
N#define USB_DMACTL7_BRSTM_M     0x00000600  // Burst Mode
N#define USB_DMACTL7_BRSTM_ANY   0x00000000  // Bursts of unspecified length
N#define USB_DMACTL7_BRSTM_INC4  0x00000200  // INCR4 or unspecified length
N#define USB_DMACTL7_BRSTM_INC8  0x00000400  // INCR8, INCR4 or unspecified
N                                            // length
N#define USB_DMACTL7_BRSTM_INC16 0x00000600  // INCR16, INCR8, INCR4 or
N                                            // unspecified length
N#define USB_DMACTL7_ERR         0x00000100  // Bus Error Bit
N#define USB_DMACTL7_EP_M        0x000000F0  // Endpoint number
N#define USB_DMACTL7_IE          0x00000008  // DMA Interrupt Enable
N#define USB_DMACTL7_MODE        0x00000004  // DMA Transfer Mode
N#define USB_DMACTL7_DIR         0x00000002  // DMA Direction
N#define USB_DMACTL7_ENABLE      0x00000001  // DMA Transfer Enable
N#define USB_DMACTL7_EP_S        4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMAADDR7 register.
N//
N//*****************************************************************************
N#define USB_DMAADDR7_ADDR_M     0xFFFFFFFC  // DMA Address
N#define USB_DMAADDR7_ADDR_S     2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DMACOUNT7
N// register.
N//
N//*****************************************************************************
N#define USB_DMACOUNT7_COUNT_M   0xFFFFFFFC  // DMA Count
N#define USB_DMACOUNT7_COUNT_S   2
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RQPKTCOUNT1
N// register.
N//
N//*****************************************************************************
N#define USB_RQPKTCOUNT1_M       0x0000FFFF  // Block Transfer Packet Count
N#define USB_RQPKTCOUNT1_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RQPKTCOUNT2
N// register.
N//
N//*****************************************************************************
N#define USB_RQPKTCOUNT2_M       0x0000FFFF  // Block Transfer Packet Count
N#define USB_RQPKTCOUNT2_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RQPKTCOUNT3
N// register.
N//
N//*****************************************************************************
N#define USB_RQPKTCOUNT3_M       0x0000FFFF  // Block Transfer Packet Count
N#define USB_RQPKTCOUNT3_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RQPKTCOUNT4
N// register.
N//
N//*****************************************************************************
N#define USB_RQPKTCOUNT4_COUNT_M 0x0000FFFF  // Block Transfer Packet Count
N#define USB_RQPKTCOUNT4_COUNT_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RQPKTCOUNT5
N// register.
N//
N//*****************************************************************************
N#define USB_RQPKTCOUNT5_COUNT_M 0x0000FFFF  // Block Transfer Packet Count
N#define USB_RQPKTCOUNT5_COUNT_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RQPKTCOUNT6
N// register.
N//
N//*****************************************************************************
N#define USB_RQPKTCOUNT6_COUNT_M 0x0000FFFF  // Block Transfer Packet Count
N#define USB_RQPKTCOUNT6_COUNT_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RQPKTCOUNT7
N// register.
N//
N//*****************************************************************************
N#define USB_RQPKTCOUNT7_COUNT_M 0x0000FFFF  // Block Transfer Packet Count
N#define USB_RQPKTCOUNT7_COUNT_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_RXDPKTBUFDIS
N// register.
N//
N//*****************************************************************************
N#define USB_RXDPKTBUFDIS_EP7    0x00000080  // EP7 RX Double-Packet Buffer
N                                            // Disable
N#define USB_RXDPKTBUFDIS_EP6    0x00000040  // EP6 RX Double-Packet Buffer
N                                            // Disable
N#define USB_RXDPKTBUFDIS_EP5    0x00000020  // EP5 RX Double-Packet Buffer
N                                            // Disable
N#define USB_RXDPKTBUFDIS_EP4    0x00000010  // EP4 RX Double-Packet Buffer
N                                            // Disable
N#define USB_RXDPKTBUFDIS_EP3    0x00000008  // EP3 RX Double-Packet Buffer
N                                            // Disable
N#define USB_RXDPKTBUFDIS_EP2    0x00000004  // EP2 RX Double-Packet Buffer
N                                            // Disable
N#define USB_RXDPKTBUFDIS_EP1    0x00000002  // EP1 RX Double-Packet Buffer
N                                            // Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_TXDPKTBUFDIS
N// register.
N//
N//*****************************************************************************
N#define USB_TXDPKTBUFDIS_EP7    0x00000080  // EP7 TX Double-Packet Buffer
N                                            // Disable
N#define USB_TXDPKTBUFDIS_EP6    0x00000040  // EP6 TX Double-Packet Buffer
N                                            // Disable
N#define USB_TXDPKTBUFDIS_EP5    0x00000020  // EP5 TX Double-Packet Buffer
N                                            // Disable
N#define USB_TXDPKTBUFDIS_EP4    0x00000010  // EP4 TX Double-Packet Buffer
N                                            // Disable
N#define USB_TXDPKTBUFDIS_EP3    0x00000008  // EP3 TX Double-Packet Buffer
N                                            // Disable
N#define USB_TXDPKTBUFDIS_EP2    0x00000004  // EP2 TX Double-Packet Buffer
N                                            // Disable
N#define USB_TXDPKTBUFDIS_EP1    0x00000002  // EP1 TX Double-Packet Buffer
N                                            // Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_CTO register.
N//
N//*****************************************************************************
N#define USB_CTO_CCTV_M          0x0000FFFF  // Configurable Chirp Timeout Value
N#define USB_CTO_CCTV_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_HHSRTN register.
N//
N//*****************************************************************************
N#define USB_HHSRTN_HHSRTN_M     0x0000FFFF  // High Speed to UTM Operating
N                                            // Delay
N#define USB_HHSRTN_HHSRTN_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_HSBT register.
N//
N//*****************************************************************************
N#define USB_HSBT_HSBT_M         0x0000000F  // High Speed Timeout Adder
N#define USB_HSBT_HSBT_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_LPMATTR register.
N//
N//*****************************************************************************
N#define USB_LPMATTR_ENDPT_M     0x0000F000  // Endpoint
N#define USB_LPMATTR_RMTWAK      0x00000100  // Remote Wake
N#define USB_LPMATTR_HIRD_M      0x000000F0  // Host Initiated Resume Duration
N#define USB_LPMATTR_LS_M        0x0000000F  // Link State
N#define USB_LPMATTR_LS_L1       0x00000001  // Sleep State (L1)
N#define USB_LPMATTR_ENDPT_S     12
N#define USB_LPMATTR_HIRD_S      4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_LPMCNTRL register.
N//
N//*****************************************************************************
N#define USB_LPMCNTRL_NAK        0x00000010  // LPM NAK
N#define USB_LPMCNTRL_EN_M       0x0000000C  // LPM Enable
N#define USB_LPMCNTRL_EN_NONE    0x00000000  // LPM and Extended transactions
N                                            // are not supported. In this case,
N                                            // the USB does not respond to LPM
N                                            // transactions and LPM
N                                            // transactions cause a timeout
N#define USB_LPMCNTRL_EN_EXT     0x00000004  // LPM is not supported but
N                                            // extended transactions are
N                                            // supported. In this case, the USB
N                                            // does respond to an LPM
N                                            // transaction with a STALL
N#define USB_LPMCNTRL_EN_LPMEXT  0x0000000C  // The USB supports LPM extended
N                                            // transactions. In this case, the
N                                            // USB responds with a NYET or an
N                                            // ACK as determined by the value
N                                            // of TXLPM and other conditions
N#define USB_LPMCNTRL_RES        0x00000002  // LPM Resume
N#define USB_LPMCNTRL_TXLPM      0x00000001  // Transmit LPM Transaction Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_LPMIM register.
N//
N//*****************************************************************************
N#define USB_LPMIM_ERR           0x00000020  // LPM Error Interrupt Mask
N#define USB_LPMIM_RES           0x00000010  // LPM Resume Interrupt Mask
N#define USB_LPMIM_NC            0x00000008  // LPM NC Interrupt Mask
N#define USB_LPMIM_ACK           0x00000004  // LPM ACK Interrupt Mask
N#define USB_LPMIM_NY            0x00000002  // LPM NY Interrupt Mask
N#define USB_LPMIM_STALL         0x00000001  // LPM STALL Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_LPMRIS register.
N//
N//*****************************************************************************
N#define USB_LPMRIS_ERR          0x00000020  // LPM Error Interrupt Status
N#define USB_LPMRIS_RES          0x00000010  // LPM Resume Interrupt Status
N#define USB_LPMRIS_NC           0x00000008  // LPM No Completion Interrupt
N                                            // Status
N#define USB_LPMRIS_ACK          0x00000004  // LPM ACK Interrupt Status
N#define USB_LPMRIS_NY           0x00000002  // LPM NY Interrupt Status
N#define USB_LPMRIS_LPMST        0x00000001  // LPM STALL Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_LPMFADDR register.
N//
N//*****************************************************************************
N#define USB_LPMFADDR_ADDR_M     0x0000007F  // LPM Function Address
N#define USB_LPMFADDR_ADDR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_EPC register.
N//
N//*****************************************************************************
N#define USB_EPC_PFLTACT_M       0x00000300  // Power Fault Action
N#define USB_EPC_PFLTACT_UNCHG   0x00000000  // Unchanged
N#define USB_EPC_PFLTACT_TRIS    0x00000100  // Tristate
N#define USB_EPC_PFLTACT_LOW     0x00000200  // Low
N#define USB_EPC_PFLTACT_HIGH    0x00000300  // High
N#define USB_EPC_PFLTAEN         0x00000040  // Power Fault Action Enable
N#define USB_EPC_PFLTSEN_HIGH    0x00000020  // Power Fault Sense
N#define USB_EPC_PFLTEN          0x00000010  // Power Fault Input Enable
N#define USB_EPC_EPENDE          0x00000004  // EPEN Drive Enable
N#define USB_EPC_EPEN_M          0x00000003  // External Power Supply Enable
N                                            // Configuration
N#define USB_EPC_EPEN_LOW        0x00000000  // Power Enable Active Low
N#define USB_EPC_EPEN_HIGH       0x00000001  // Power Enable Active High
N#define USB_EPC_EPEN_VBLOW      0x00000002  // Power Enable High if VBUS Low
N#define USB_EPC_EPEN_VBHIGH     0x00000003  // Power Enable High if VBUS High
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_EPCRIS register.
N//
N//*****************************************************************************
N#define USB_EPCRIS_PF           0x00000001  // USB Power Fault Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_EPCIM register.
N//
N//*****************************************************************************
N#define USB_EPCIM_PF            0x00000001  // USB Power Fault Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_EPCISC register.
N//
N//*****************************************************************************
N#define USB_EPCISC_PF           0x00000001  // USB Power Fault Interrupt Status
N                                            // and Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DRRIS register.
N//
N//*****************************************************************************
N#define USB_DRRIS_RESUME        0x00000001  // RESUME Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DRIM register.
N//
N//*****************************************************************************
N#define USB_DRIM_RESUME         0x00000001  // RESUME Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_DRISC register.
N//
N//*****************************************************************************
N#define USB_DRISC_RESUME        0x00000001  // RESUME Interrupt Status and
N                                            // Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_GPCS register.
N//
N//*****************************************************************************
N#define USB_GPCS_DEVMOD_M       0x00000007  // Device Mode
N#define USB_GPCS_DEVMOD_OTG     0x00000000  // Use USB0VBUS and USB0ID pin
N#define USB_GPCS_DEVMOD_HOST    0x00000002  // Force USB0VBUS and USB0ID low
N#define USB_GPCS_DEVMOD_DEV     0x00000003  // Force USB0VBUS and USB0ID high
N#define USB_GPCS_DEVMOD_HOSTVBUS                                              \
N                                0x00000004  // Use USB0VBUS and force USB0ID
X#define USB_GPCS_DEVMOD_HOSTVBUS                                                                              0x00000004  
N                                            // low
N#define USB_GPCS_DEVMOD_DEVVBUS 0x00000005  // Use USB0VBUS and force USB0ID
N                                            // high
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_VDC register.
N//
N//*****************************************************************************
N#define USB_VDC_VBDEN           0x00000001  // VBUS Droop Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_VDCRIS register.
N//
N//*****************************************************************************
N#define USB_VDCRIS_VD           0x00000001  // VBUS Droop Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_VDCIM register.
N//
N//*****************************************************************************
N#define USB_VDCIM_VD            0x00000001  // VBUS Droop Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_VDCISC register.
N//
N//*****************************************************************************
N#define USB_VDCISC_VD           0x00000001  // VBUS Droop Interrupt Status and
N                                            // Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_PP register.
N//
N//*****************************************************************************
N#define USB_PP_ECNT_M           0x0000FF00  // Endpoint Count
N#define USB_PP_USB_M            0x000000C0  // USB Capability
N#define USB_PP_USB_DEVICE       0x00000040  // DEVICE
N#define USB_PP_USB_HOSTDEVICE   0x00000080  // HOST
N#define USB_PP_USB_OTG          0x000000C0  // OTG
N#define USB_PP_ULPI             0x00000020  // ULPI Present
N#define USB_PP_PHY              0x00000010  // PHY Present
N#define USB_PP_TYPE_M           0x0000000F  // Controller Type
N#define USB_PP_TYPE_0           0x00000000  // The first-generation USB
N                                            // controller
N#define USB_PP_TYPE_1           0x00000001  // Second-generation USB
N                                            // controller.The controller
N                                            // implemented in post Icestorm
N                                            // devices that use the 3.0 version
N                                            // of the Mentor controller
N#define USB_PP_ECNT_S           8
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_PC register.
N//
N//*****************************************************************************
N#define USB_PC_ULPIEN           0x00010000  // ULPI Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the USB_O_CC register.
N//
N//*****************************************************************************
N#define USB_CC_CLKEN            0x00000200  // USB Clock Enable
N#define USB_CC_CSD              0x00000100  // Clock Source/Direction
N#define USB_CC_CLKDIV_M         0x0000000F  // PLL Clock Divisor
N#define USB_CC_CLKDIV_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EESIZE register.
N//
N//*****************************************************************************
N#define EEPROM_EESIZE_BLKCNT_M  0x07FF0000  // Number of 16-Word Blocks
N#define EEPROM_EESIZE_WORDCNT_M 0x0000FFFF  // Number of 32-Bit Words
N#define EEPROM_EESIZE_BLKCNT_S  16
N#define EEPROM_EESIZE_WORDCNT_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEBLOCK register.
N//
N//*****************************************************************************
N#define EEPROM_EEBLOCK_BLOCK_M  0x0000FFFF  // Current Block
N#define EEPROM_EEBLOCK_BLOCK_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEOFFSET
N// register.
N//
N//*****************************************************************************
N#define EEPROM_EEOFFSET_OFFSET_M                                              \
N                                0x0000000F  // Current Address Offset
X#define EEPROM_EEOFFSET_OFFSET_M                                                                              0x0000000F  
N#define EEPROM_EEOFFSET_OFFSET_S                                              \
N                                0
X#define EEPROM_EEOFFSET_OFFSET_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EERDWR register.
N//
N//*****************************************************************************
N#define EEPROM_EERDWR_VALUE_M   0xFFFFFFFF  // EEPROM Read or Write Data
N#define EEPROM_EERDWR_VALUE_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EERDWRINC
N// register.
N//
N//*****************************************************************************
N#define EEPROM_EERDWRINC_VALUE_M                                              \
N                                0xFFFFFFFF  // EEPROM Read or Write Data with
X#define EEPROM_EERDWRINC_VALUE_M                                                                              0xFFFFFFFF  
N                                            // Increment
N#define EEPROM_EERDWRINC_VALUE_S                                              \
N                                0
X#define EEPROM_EERDWRINC_VALUE_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEDONE register.
N//
N//*****************************************************************************
N#define EEPROM_EEDONE_INVPL     0x00000100  // Invalid Program Voltage Level
N#define EEPROM_EEDONE_WRBUSY    0x00000020  // Write Busy
N#define EEPROM_EEDONE_NOPERM    0x00000010  // Write Without Permission
N#define EEPROM_EEDONE_WKCOPY    0x00000008  // Working on a Copy
N#define EEPROM_EEDONE_WKERASE   0x00000004  // Working on an Erase
N#define EEPROM_EEDONE_WORKING   0x00000001  // EEPROM Working
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EESUPP register.
N//
N//*****************************************************************************
N#define EEPROM_EESUPP_PRETRY    0x00000008  // Programming Must Be Retried
N#define EEPROM_EESUPP_ERETRY    0x00000004  // Erase Must Be Retried
N#define EEPROM_EESUPP_EREQ      0x00000002  // Erase Required
N#define EEPROM_EESUPP_START     0x00000001  // Start Erase
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEUNLOCK
N// register.
N//
N//*****************************************************************************
N#define EEPROM_EEUNLOCK_UNLOCK_M                                              \
N                                0xFFFFFFFF  // EEPROM Unlock
X#define EEPROM_EEUNLOCK_UNLOCK_M                                                                              0xFFFFFFFF  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEPROT register.
N//
N//*****************************************************************************
N#define EEPROM_EEPROT_ACC       0x00000008  // Access Control
N#define EEPROM_EEPROT_PROT_M    0x00000007  // Protection Control
N#define EEPROM_EEPROT_PROT_RWNPW                                              \
N                                0x00000000  // This setting is the default. If
X#define EEPROM_EEPROT_PROT_RWNPW                                                                              0x00000000  
N                                            // there is no password, the block
N                                            // is not protected and is readable
N                                            // and writable
N#define EEPROM_EEPROT_PROT_RWPW 0x00000001  // If there is a password, the
N                                            // block is readable or writable
N                                            // only when unlocked
N#define EEPROM_EEPROT_PROT_RONPW                                              \
N                                0x00000002  // If there is no password, the
X#define EEPROM_EEPROT_PROT_RONPW                                                                              0x00000002  
N                                            // block is readable, not writable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEPASS0 register.
N//
N//*****************************************************************************
N#define EEPROM_EEPASS0_PASS_M   0xFFFFFFFF  // Password
N#define EEPROM_EEPASS0_PASS_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEPASS1 register.
N//
N//*****************************************************************************
N#define EEPROM_EEPASS1_PASS_M   0xFFFFFFFF  // Password
N#define EEPROM_EEPASS1_PASS_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEPASS2 register.
N//
N//*****************************************************************************
N#define EEPROM_EEPASS2_PASS_M   0xFFFFFFFF  // Password
N#define EEPROM_EEPASS2_PASS_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEINT register.
N//
N//*****************************************************************************
N#define EEPROM_EEINT_INT        0x00000001  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEHIDE0 register.
N//
N//*****************************************************************************
N#define EEPROM_EEHIDE0_HN_M     0xFFFFFFFE  // Hide Block
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEHIDE1 register.
N//
N//*****************************************************************************
N#define EEPROM_EEHIDE1_HN_M     0xFFFFFFFF  // Hide Block
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEHIDE2 register.
N//
N//*****************************************************************************
N#define EEPROM_EEHIDE2_HN_M     0xFFFFFFFF  // Hide Block
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_EEDBGME register.
N//
N//*****************************************************************************
N#define EEPROM_EEDBGME_KEY_M    0xFFFF0000  // Erase Key
N#define EEPROM_EEDBGME_ME       0x00000001  // Mass Erase
N#define EEPROM_EEDBGME_KEY_S    16
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EEPROM_PP register.
N//
N//*****************************************************************************
N#define EEPROM_PP_SIZE_M        0x0000FFFF  // EEPROM Size
N#define EEPROM_PP_SIZE_64       0x00000000  // 64 bytes of EEPROM
N#define EEPROM_PP_SIZE_128      0x00000001  // 128 bytes of EEPROM
N#define EEPROM_PP_SIZE_256      0x00000003  // 256 bytes of EEPROM
N#define EEPROM_PP_SIZE_512      0x00000007  // 512 bytes of EEPROM
N#define EEPROM_PP_SIZE_1K       0x0000000F  // 1 KB of EEPROM
N#define EEPROM_PP_SIZE_2K       0x0000001F  // 2 KB of EEPROM
N#define EEPROM_PP_SIZE_3K       0x0000003F  // 3 KB of EEPROM
N#define EEPROM_PP_SIZE_4K       0x0000007F  // 4 KB of EEPROM
N#define EEPROM_PP_SIZE_5K       0x000000FF  // 5 KB of EEPROM
N#define EEPROM_PP_SIZE_6K       0x000001FF  // 6 KB of EEPROM
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_CFG register.
N//
N//*****************************************************************************
N#define EPI_CFG_INTDIV          0x00000100  // Integer Clock Divider Enable
N#define EPI_CFG_BLKEN           0x00000010  // Block Enable
N#define EPI_CFG_MODE_M          0x0000000F  // Mode Select
N#define EPI_CFG_MODE_NONE       0x00000000  // General Purpose
N#define EPI_CFG_MODE_SDRAM      0x00000001  // SDRAM
N#define EPI_CFG_MODE_HB8        0x00000002  // 8-Bit Host-Bus (HB8)
N#define EPI_CFG_MODE_HB16       0x00000003  // 16-Bit Host-Bus (HB16)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_BAUD register.
N//
N//*****************************************************************************
N#define EPI_BAUD_COUNT1_M       0xFFFF0000  // Baud Rate Counter 1
N#define EPI_BAUD_COUNT0_M       0x0000FFFF  // Baud Rate Counter 0
N#define EPI_BAUD_COUNT1_S       16
N#define EPI_BAUD_COUNT0_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_BAUD2 register.
N//
N//*****************************************************************************
N#define EPI_BAUD2_COUNT1_M      0xFFFF0000  // CS3n Baud Rate Counter 1
N#define EPI_BAUD2_COUNT0_M      0x0000FFFF  // CS2n Baud Rate Counter 0
N#define EPI_BAUD2_COUNT1_S      16
N#define EPI_BAUD2_COUNT0_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB16CFG register.
N//
N//*****************************************************************************
N#define EPI_HB16CFG_CLKGATE     0x80000000  // Clock Gated
N#define EPI_HB16CFG_CLKGATEI    0x40000000  // Clock Gated Idle
N#define EPI_HB16CFG_CLKINV      0x20000000  // Invert Output Clock Enable
N#define EPI_HB16CFG_RDYEN       0x10000000  // Input Ready Enable
N#define EPI_HB16CFG_IRDYINV     0x08000000  // Input Ready Invert
N#define EPI_HB16CFG_XFFEN       0x00800000  // External FIFO FULL Enable
N#define EPI_HB16CFG_XFEEN       0x00400000  // External FIFO EMPTY Enable
N#define EPI_HB16CFG_WRHIGH      0x00200000  // WRITE Strobe Polarity
N#define EPI_HB16CFG_RDHIGH      0x00100000  // READ Strobe Polarity
N#define EPI_HB16CFG_ALEHIGH     0x00080000  // ALE Strobe Polarity
N#define EPI_HB16CFG_WRCRE       0x00040000  // PSRAM Configuration Register
N                                            // Write
N#define EPI_HB16CFG_RDCRE       0x00020000  // PSRAM Configuration Register
N                                            // Read
N#define EPI_HB16CFG_BURST       0x00010000  // Burst Mode
N#define EPI_HB16CFG_MAXWAIT_M   0x0000FF00  // Maximum Wait
N#define EPI_HB16CFG_WRWS_M      0x000000C0  // Write Wait States
N#define EPI_HB16CFG_WRWS_0      0x00000000  // No wait states
N#define EPI_HB16CFG_WRWS_1      0x00000040  // 1 wait state
N#define EPI_HB16CFG_WRWS_2      0x00000080  // 2 wait states
N#define EPI_HB16CFG_WRWS_3      0x000000C0  // 3 wait states
N#define EPI_HB16CFG_RDWS_M      0x00000030  // Read Wait States
N#define EPI_HB16CFG_RDWS_0      0x00000000  // No wait states
N#define EPI_HB16CFG_RDWS_1      0x00000010  // 1 wait state
N#define EPI_HB16CFG_RDWS_2      0x00000020  // 2 wait states
N#define EPI_HB16CFG_RDWS_3      0x00000030  // 3 wait states
N#define EPI_HB16CFG_BSEL        0x00000004  // Byte Select Configuration
N#define EPI_HB16CFG_MODE_M      0x00000003  // Host Bus Sub-Mode
N#define EPI_HB16CFG_MODE_ADMUX  0x00000000  // ADMUX - AD[15:0]
N#define EPI_HB16CFG_MODE_ADNMUX 0x00000001  // ADNONMUX - D[15:0]
N#define EPI_HB16CFG_MODE_SRAM   0x00000002  // Continuous Read - D[15:0]
N#define EPI_HB16CFG_MODE_XFIFO  0x00000003  // XFIFO - D[15:0]
N#define EPI_HB16CFG_MAXWAIT_S   8
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_GPCFG register.
N//
N//*****************************************************************************
N#define EPI_GPCFG_CLKPIN        0x80000000  // Clock Pin
N#define EPI_GPCFG_CLKGATE       0x40000000  // Clock Gated
N#define EPI_GPCFG_RDYEN         0x10000000  // Ready Enable
N#define EPI_GPCFG_FRM50         0x04000000  // 50/50 Frame
N#define EPI_GPCFG_FRMCNT_M      0x03C00000  // Frame Count
N#define EPI_GPCFG_WR2CYC        0x00080000  // 2-Cycle Writes
N#define EPI_GPCFG_MAXWAIT_M     0x0000FF00  // Maximum Wait
N#define EPI_GPCFG_ASIZE_M       0x00000030  // Address Bus Size
N#define EPI_GPCFG_ASIZE_NONE    0x00000000  // No address
N#define EPI_GPCFG_ASIZE_4BIT    0x00000010  // Up to 4 bits wide
N#define EPI_GPCFG_ASIZE_12BIT   0x00000020  // Up to 12 bits wide. This size
N                                            // cannot be used with 24-bit data
N#define EPI_GPCFG_ASIZE_20BIT   0x00000030  // Up to 20 bits wide. This size
N                                            // cannot be used with data sizes
N                                            // other than 8
N#define EPI_GPCFG_DSIZE_M       0x00000003  // Size of Data Bus
N#define EPI_GPCFG_DSIZE_4BIT    0x00000000  // 8 Bits Wide (EPI0S0 to EPI0S7)
N#define EPI_GPCFG_DSIZE_16BIT   0x00000001  // 16 Bits Wide (EPI0S0 to EPI0S15)
N#define EPI_GPCFG_DSIZE_24BIT   0x00000002  // 24 Bits Wide (EPI0S0 to EPI0S23)
N#define EPI_GPCFG_DSIZE_32BIT   0x00000003  // 32 Bits Wide (EPI0S0 to EPI0S31)
N#define EPI_GPCFG_FRMCNT_S      22
N#define EPI_GPCFG_MAXWAIT_S     8
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_SDRAMCFG register.
N//
N//*****************************************************************************
N#define EPI_SDRAMCFG_FREQ_M     0xC0000000  // EPI Frequency Range
N#define EPI_SDRAMCFG_FREQ_NONE  0x00000000  // 0 - 15 MHz
N#define EPI_SDRAMCFG_FREQ_15MHZ 0x40000000  // 15 - 30 MHz
N#define EPI_SDRAMCFG_FREQ_30MHZ 0x80000000  // 30 - 50 MHz
N#define EPI_SDRAMCFG_RFSH_M     0x07FF0000  // Refresh Counter
N#define EPI_SDRAMCFG_SLEEP      0x00000200  // Sleep Mode
N#define EPI_SDRAMCFG_SIZE_M     0x00000003  // Size of SDRAM
N#define EPI_SDRAMCFG_SIZE_8MB   0x00000000  // 64 megabits (8MB)
N#define EPI_SDRAMCFG_SIZE_16MB  0x00000001  // 128 megabits (16MB)
N#define EPI_SDRAMCFG_SIZE_32MB  0x00000002  // 256 megabits (32MB)
N#define EPI_SDRAMCFG_SIZE_64MB  0x00000003  // 512 megabits (64MB)
N#define EPI_SDRAMCFG_RFSH_S     16
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB8CFG register.
N//
N//*****************************************************************************
N#define EPI_HB8CFG_CLKGATE      0x80000000  // Clock Gated
N#define EPI_HB8CFG_CLKGATEI     0x40000000  // Clock Gated when Idle
N#define EPI_HB8CFG_CLKINV       0x20000000  // Invert Output Clock Enable
N#define EPI_HB8CFG_RDYEN        0x10000000  // Input Ready Enable
N#define EPI_HB8CFG_IRDYINV      0x08000000  // Input Ready Invert
N#define EPI_HB8CFG_XFFEN        0x00800000  // External FIFO FULL Enable
N#define EPI_HB8CFG_XFEEN        0x00400000  // External FIFO EMPTY Enable
N#define EPI_HB8CFG_WRHIGH       0x00200000  // WRITE Strobe Polarity
N#define EPI_HB8CFG_RDHIGH       0x00100000  // READ Strobe Polarity
N#define EPI_HB8CFG_ALEHIGH      0x00080000  // ALE Strobe Polarity
N#define EPI_HB8CFG_MAXWAIT_M    0x0000FF00  // Maximum Wait
N#define EPI_HB8CFG_WRWS_M       0x000000C0  // Write Wait States
N#define EPI_HB8CFG_WRWS_0       0x00000000  // No wait states
N#define EPI_HB8CFG_WRWS_1       0x00000040  // 1 wait state
N#define EPI_HB8CFG_WRWS_2       0x00000080  // 2 wait states
N#define EPI_HB8CFG_WRWS_3       0x000000C0  // 3 wait states
N#define EPI_HB8CFG_RDWS_M       0x00000030  // Read Wait States
N#define EPI_HB8CFG_RDWS_0       0x00000000  // No wait states
N#define EPI_HB8CFG_RDWS_1       0x00000010  // 1 wait state
N#define EPI_HB8CFG_RDWS_2       0x00000020  // 2 wait states
N#define EPI_HB8CFG_RDWS_3       0x00000030  // 3 wait states
N#define EPI_HB8CFG_MODE_M       0x00000003  // Host Bus Sub-Mode
N#define EPI_HB8CFG_MODE_MUX     0x00000000  // ADMUX - AD[7:0]
N#define EPI_HB8CFG_MODE_NMUX    0x00000001  // ADNONMUX - D[7:0]
N#define EPI_HB8CFG_MODE_SRAM    0x00000002  // Continuous Read - D[7:0]
N#define EPI_HB8CFG_MODE_FIFO    0x00000003  // XFIFO - D[7:0]
N#define EPI_HB8CFG_MAXWAIT_S    8
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB8CFG2 register.
N//
N//*****************************************************************************
N#define EPI_HB8CFG2_CSCFGEXT    0x08000000  // Chip Select Extended
N                                            // Configuration
N#define EPI_HB8CFG2_CSBAUD      0x04000000  // Chip Select Baud Rate
N#define EPI_HB8CFG2_CSCFG_M     0x03000000  // Chip Select Configuration
N#define EPI_HB8CFG2_CSCFG_ALE   0x00000000  // ALE Configuration
N#define EPI_HB8CFG2_CSCFG_CS    0x01000000  // CSn Configuration
N#define EPI_HB8CFG2_CSCFG_DCS   0x02000000  // Dual CSn Configuration
N#define EPI_HB8CFG2_CSCFG_ADCS  0x03000000  // ALE with Dual CSn Configuration
N#define EPI_HB8CFG2_WRHIGH      0x00200000  // CS1n WRITE Strobe Polarity
N#define EPI_HB8CFG2_RDHIGH      0x00100000  // CS1n READ Strobe Polarity
N#define EPI_HB8CFG2_ALEHIGH     0x00080000  // CS1n ALE Strobe Polarity
N#define EPI_HB8CFG2_WRWS_M      0x000000C0  // CS1n Write Wait States
N#define EPI_HB8CFG2_WRWS_0      0x00000000  // No wait states
N#define EPI_HB8CFG2_WRWS_1      0x00000040  // 1 wait state
N#define EPI_HB8CFG2_WRWS_2      0x00000080  // 2 wait states
N#define EPI_HB8CFG2_WRWS_3      0x000000C0  // 3 wait states
N#define EPI_HB8CFG2_RDWS_M      0x00000030  // CS1n Read Wait States
N#define EPI_HB8CFG2_RDWS_0      0x00000000  // No wait states
N#define EPI_HB8CFG2_RDWS_1      0x00000010  // 1 wait state
N#define EPI_HB8CFG2_RDWS_2      0x00000020  // 2 wait states
N#define EPI_HB8CFG2_RDWS_3      0x00000030  // 3 wait states
N#define EPI_HB8CFG2_MODE_M      0x00000003  // CS1n Host Bus Sub-Mode
N#define EPI_HB8CFG2_MODE_ADMUX  0x00000000  // ADMUX - AD[7:0]
N#define EPI_HB8CFG2_MODE_AD     0x00000001  // ADNONMUX - D[7:0]
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB16CFG2 register.
N//
N//*****************************************************************************
N#define EPI_HB16CFG2_CSCFGEXT   0x08000000  // Chip Select Extended
N                                            // Configuration
N#define EPI_HB16CFG2_CSBAUD     0x04000000  // Chip Select Baud Rate
N#define EPI_HB16CFG2_CSCFG_M    0x03000000  // Chip Select Configuration
N#define EPI_HB16CFG2_CSCFG_ALE  0x00000000  // ALE Configuration
N#define EPI_HB16CFG2_CSCFG_CS   0x01000000  // CSn Configuration
N#define EPI_HB16CFG2_CSCFG_DCS  0x02000000  // Dual CSn Configuration
N#define EPI_HB16CFG2_CSCFG_ADCS 0x03000000  // ALE with Dual CSn Configuration
N#define EPI_HB16CFG2_WRHIGH     0x00200000  // CS1n WRITE Strobe Polarity
N#define EPI_HB16CFG2_RDHIGH     0x00100000  // CS1n READ Strobe Polarity
N#define EPI_HB16CFG2_ALEHIGH    0x00080000  // CS1n ALE Strobe Polarity
N#define EPI_HB16CFG2_WRCRE      0x00040000  // CS1n PSRAM Configuration
N                                            // Register Write
N#define EPI_HB16CFG2_RDCRE      0x00020000  // CS1n PSRAM Configuration
N                                            // Register Read
N#define EPI_HB16CFG2_BURST      0x00010000  // CS1n Burst Mode
N#define EPI_HB16CFG2_WRWS_M     0x000000C0  // CS1n Write Wait States
N#define EPI_HB16CFG2_WRWS_0     0x00000000  // No wait states
N#define EPI_HB16CFG2_WRWS_1     0x00000040  // 1 wait state
N#define EPI_HB16CFG2_WRWS_2     0x00000080  // 2 wait states
N#define EPI_HB16CFG2_WRWS_3     0x000000C0  // 3 wait states
N#define EPI_HB16CFG2_RDWS_M     0x00000030  // CS1n Read Wait States
N#define EPI_HB16CFG2_RDWS_0     0x00000000  // No wait states
N#define EPI_HB16CFG2_RDWS_1     0x00000010  // 1 wait state
N#define EPI_HB16CFG2_RDWS_2     0x00000020  // 2 wait states
N#define EPI_HB16CFG2_RDWS_3     0x00000030  // 3 wait states
N#define EPI_HB16CFG2_MODE_M     0x00000003  // CS1n Host Bus Sub-Mode
N#define EPI_HB16CFG2_MODE_ADMUX 0x00000000  // ADMUX - AD[15:0]
N#define EPI_HB16CFG2_MODE_AD    0x00000001  // ADNONMUX - D[15:0]
N#define EPI_HB16CFG2_MODE_CR    0x00000002  // Continuous Read - D[15:0]
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_ADDRMAP register.
N//
N//*****************************************************************************
N#define EPI_ADDRMAP_ECSZ_M      0x00000C00  // External Code Size
N#define EPI_ADDRMAP_ECSZ_256B   0x00000000  // 256 bytes; lower address range:
N                                            // 0x00 to 0xFF
N#define EPI_ADDRMAP_ECSZ_64KB   0x00000400  // 64 KB; lower address range:
N                                            // 0x0000 to 0xFFFF
N#define EPI_ADDRMAP_ECSZ_16MB   0x00000800  // 16 MB; lower address range:
N                                            // 0x00.0000 to 0xFF.FFFF
N#define EPI_ADDRMAP_ECSZ_256MB  0x00000C00  // 256MB; lower address range:
N                                            // 0x000.0000 to 0x0FFF.FFFF
N#define EPI_ADDRMAP_ECADR_M     0x00000300  // External Code Address
N#define EPI_ADDRMAP_ECADR_NONE  0x00000000  // Not mapped
N#define EPI_ADDRMAP_ECADR_1000  0x00000100  // At 0x1000.0000
N#define EPI_ADDRMAP_EPSZ_M      0x000000C0  // External Peripheral Size
N#define EPI_ADDRMAP_EPSZ_256B   0x00000000  // 256 bytes; lower address range:
N                                            // 0x00 to 0xFF
N#define EPI_ADDRMAP_EPSZ_64KB   0x00000040  // 64 KB; lower address range:
N                                            // 0x0000 to 0xFFFF
N#define EPI_ADDRMAP_EPSZ_16MB   0x00000080  // 16 MB; lower address range:
N                                            // 0x00.0000 to 0xFF.FFFF
N#define EPI_ADDRMAP_EPSZ_256MB  0x000000C0  // 256 MB; lower address range:
N                                            // 0x000.0000 to 0xFFF.FFFF
N#define EPI_ADDRMAP_EPADR_M     0x00000030  // External Peripheral Address
N#define EPI_ADDRMAP_EPADR_NONE  0x00000000  // Not mapped
N#define EPI_ADDRMAP_EPADR_A000  0x00000010  // At 0xA000.0000
N#define EPI_ADDRMAP_EPADR_C000  0x00000020  // At 0xC000.0000
N#define EPI_ADDRMAP_EPADR_HBQS  0x00000030  // Only to be used with Host Bus
N                                            // quad chip select. In quad chip
N                                            // select mode, CS2n maps to
N                                            // 0xA000.0000 and CS3n maps to
N                                            // 0xC000.0000
N#define EPI_ADDRMAP_ERSZ_M      0x0000000C  // External RAM Size
N#define EPI_ADDRMAP_ERSZ_256B   0x00000000  // 256 bytes; lower address range:
N                                            // 0x00 to 0xFF
N#define EPI_ADDRMAP_ERSZ_64KB   0x00000004  // 64 KB; lower address range:
N                                            // 0x0000 to 0xFFFF
N#define EPI_ADDRMAP_ERSZ_16MB   0x00000008  // 16 MB; lower address range:
N                                            // 0x00.0000 to 0xFF.FFFF
N#define EPI_ADDRMAP_ERSZ_256MB  0x0000000C  // 256 MB; lower address range:
N                                            // 0x000.0000 to 0xFFF.FFFF
N#define EPI_ADDRMAP_ERADR_M     0x00000003  // External RAM Address
N#define EPI_ADDRMAP_ERADR_NONE  0x00000000  // Not mapped
N#define EPI_ADDRMAP_ERADR_6000  0x00000001  // At 0x6000.0000
N#define EPI_ADDRMAP_ERADR_8000  0x00000002  // At 0x8000.0000
N#define EPI_ADDRMAP_ERADR_HBQS  0x00000003  // Only to be used with Host Bus
N                                            // quad chip select. In quad chip
N                                            // select mode, CS0n maps to
N                                            // 0x6000.0000 and CS1n maps to
N                                            // 0x8000.0000
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_RSIZE0 register.
N//
N//*****************************************************************************
N#define EPI_RSIZE0_SIZE_M       0x00000003  // Current Size
N#define EPI_RSIZE0_SIZE_8BIT    0x00000001  // Byte (8 bits)
N#define EPI_RSIZE0_SIZE_16BIT   0x00000002  // Half-word (16 bits)
N#define EPI_RSIZE0_SIZE_32BIT   0x00000003  // Word (32 bits)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_RADDR0 register.
N//
N//*****************************************************************************
N#define EPI_RADDR0_ADDR_M       0xFFFFFFFF  // Current Address
N#define EPI_RADDR0_ADDR_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_RPSTD0 register.
N//
N//*****************************************************************************
N#define EPI_RPSTD0_POSTCNT_M    0x00001FFF  // Post Count
N#define EPI_RPSTD0_POSTCNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_RSIZE1 register.
N//
N//*****************************************************************************
N#define EPI_RSIZE1_SIZE_M       0x00000003  // Current Size
N#define EPI_RSIZE1_SIZE_8BIT    0x00000001  // Byte (8 bits)
N#define EPI_RSIZE1_SIZE_16BIT   0x00000002  // Half-word (16 bits)
N#define EPI_RSIZE1_SIZE_32BIT   0x00000003  // Word (32 bits)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_RADDR1 register.
N//
N//*****************************************************************************
N#define EPI_RADDR1_ADDR_M       0xFFFFFFFF  // Current Address
N#define EPI_RADDR1_ADDR_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_RPSTD1 register.
N//
N//*****************************************************************************
N#define EPI_RPSTD1_POSTCNT_M    0x00001FFF  // Post Count
N#define EPI_RPSTD1_POSTCNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_STAT register.
N//
N//*****************************************************************************
N#define EPI_STAT_CELOW          0x00000200  // Clock Enable Low
N#define EPI_STAT_XFFULL         0x00000100  // External FIFO Full
N#define EPI_STAT_XFEMPTY        0x00000080  // External FIFO Empty
N#define EPI_STAT_INITSEQ        0x00000040  // Initialization Sequence
N#define EPI_STAT_WBUSY          0x00000020  // Write Busy
N#define EPI_STAT_NBRBUSY        0x00000010  // Non-Blocking Read Busy
N#define EPI_STAT_ACTIVE         0x00000001  // Register Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_RFIFOCNT register.
N//
N//*****************************************************************************
N#define EPI_RFIFOCNT_COUNT_M    0x0000000F  // FIFO Count
N#define EPI_RFIFOCNT_COUNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_READFIFO0
N// register.
N//
N//*****************************************************************************
N#define EPI_READFIFO0_DATA_M    0xFFFFFFFF  // Reads Data
N#define EPI_READFIFO0_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_READFIFO1
N// register.
N//
N//*****************************************************************************
N#define EPI_READFIFO1_DATA_M    0xFFFFFFFF  // Reads Data
N#define EPI_READFIFO1_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_READFIFO2
N// register.
N//
N//*****************************************************************************
N#define EPI_READFIFO2_DATA_M    0xFFFFFFFF  // Reads Data
N#define EPI_READFIFO2_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_READFIFO3
N// register.
N//
N//*****************************************************************************
N#define EPI_READFIFO3_DATA_M    0xFFFFFFFF  // Reads Data
N#define EPI_READFIFO3_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_READFIFO4
N// register.
N//
N//*****************************************************************************
N#define EPI_READFIFO4_DATA_M    0xFFFFFFFF  // Reads Data
N#define EPI_READFIFO4_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_READFIFO5
N// register.
N//
N//*****************************************************************************
N#define EPI_READFIFO5_DATA_M    0xFFFFFFFF  // Reads Data
N#define EPI_READFIFO5_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_READFIFO6
N// register.
N//
N//*****************************************************************************
N#define EPI_READFIFO6_DATA_M    0xFFFFFFFF  // Reads Data
N#define EPI_READFIFO6_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_READFIFO7
N// register.
N//
N//*****************************************************************************
N#define EPI_READFIFO7_DATA_M    0xFFFFFFFF  // Reads Data
N#define EPI_READFIFO7_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_FIFOLVL register.
N//
N//*****************************************************************************
N#define EPI_FIFOLVL_WFERR       0x00020000  // Write Full Error
N#define EPI_FIFOLVL_RSERR       0x00010000  // Read Stall Error
N#define EPI_FIFOLVL_WRFIFO_M    0x00000070  // Write FIFO
N#define EPI_FIFOLVL_WRFIFO_EMPT 0x00000000  // Trigger when there are any
N                                            // spaces available in the WFIFO
N#define EPI_FIFOLVL_WRFIFO_1_4  0x00000020  // Trigger when there are up to 3
N                                            // spaces available in the WFIFO
N#define EPI_FIFOLVL_WRFIFO_1_2  0x00000030  // Trigger when there are up to 2
N                                            // spaces available in the WFIFO
N#define EPI_FIFOLVL_WRFIFO_3_4  0x00000040  // Trigger when there is 1 space
N                                            // available in the WFIFO
N#define EPI_FIFOLVL_RDFIFO_M    0x00000007  // Read FIFO
N#define EPI_FIFOLVL_RDFIFO_1_8  0x00000001  // Trigger when there are 1 or more
N                                            // entries in the NBRFIFO
N#define EPI_FIFOLVL_RDFIFO_1_4  0x00000002  // Trigger when there are 2 or more
N                                            // entries in the NBRFIFO
N#define EPI_FIFOLVL_RDFIFO_1_2  0x00000003  // Trigger when there are 4 or more
N                                            // entries in the NBRFIFO
N#define EPI_FIFOLVL_RDFIFO_3_4  0x00000004  // Trigger when there are 6 or more
N                                            // entries in the NBRFIFO
N#define EPI_FIFOLVL_RDFIFO_7_8  0x00000005  // Trigger when there are 7 or more
N                                            // entries in the NBRFIFO
N#define EPI_FIFOLVL_RDFIFO_FULL 0x00000006  // Trigger when there are 8 entries
N                                            // in the NBRFIFO
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_WFIFOCNT register.
N//
N//*****************************************************************************
N#define EPI_WFIFOCNT_WTAV_M     0x00000007  // Available Write Transactions
N#define EPI_WFIFOCNT_WTAV_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_DMATXCNT register.
N//
N//*****************************************************************************
N#define EPI_DMATXCNT_TXCNT_M    0x0000FFFF  // DMA Count
N#define EPI_DMATXCNT_TXCNT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_IM register.
N//
N//*****************************************************************************
N#define EPI_IM_DMAWRIM          0x00000010  // Write uDMA Interrupt Mask
N#define EPI_IM_DMARDIM          0x00000008  // Read uDMA Interrupt Mask
N#define EPI_IM_WRIM             0x00000004  // Write FIFO Empty Interrupt Mask
N#define EPI_IM_RDIM             0x00000002  // Read FIFO Full Interrupt Mask
N#define EPI_IM_ERRIM            0x00000001  // Error Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_RIS register.
N//
N//*****************************************************************************
N#define EPI_RIS_DMAWRRIS        0x00000010  // Write uDMA Raw Interrupt Status
N#define EPI_RIS_DMARDRIS        0x00000008  // Read uDMA Raw Interrupt Status
N#define EPI_RIS_WRRIS           0x00000004  // Write Raw Interrupt Status
N#define EPI_RIS_RDRIS           0x00000002  // Read Raw Interrupt Status
N#define EPI_RIS_ERRRIS          0x00000001  // Error Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_MIS register.
N//
N//*****************************************************************************
N#define EPI_MIS_DMAWRMIS        0x00000010  // Write uDMA Masked Interrupt
N                                            // Status
N#define EPI_MIS_DMARDMIS        0x00000008  // Read uDMA Masked Interrupt
N                                            // Status
N#define EPI_MIS_WRMIS           0x00000004  // Write Masked Interrupt Status
N#define EPI_MIS_RDMIS           0x00000002  // Read Masked Interrupt Status
N#define EPI_MIS_ERRMIS          0x00000001  // Error Masked Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_EISC register.
N//
N//*****************************************************************************
N#define EPI_EISC_DMAWRIC        0x00000010  // Write uDMA Interrupt Clear
N#define EPI_EISC_DMARDIC        0x00000008  // Read uDMA Interrupt Clear
N#define EPI_EISC_WTFULL         0x00000004  // Write FIFO Full Error
N#define EPI_EISC_RSTALL         0x00000002  // Read Stalled Error
N#define EPI_EISC_TOUT           0x00000001  // Timeout Error
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB8CFG3 register.
N//
N//*****************************************************************************
N#define EPI_HB8CFG3_WRHIGH      0x00200000  // CS2n WRITE Strobe Polarity
N#define EPI_HB8CFG3_RDHIGH      0x00100000  // CS2n READ Strobe Polarity
N#define EPI_HB8CFG3_ALEHIGH     0x00080000  // CS2n ALE Strobe Polarity
N#define EPI_HB8CFG3_WRWS_M      0x000000C0  // CS2n Write Wait States
N#define EPI_HB8CFG3_WRWS_2      0x00000000  // Active WRn is 2 EPI clocks
N#define EPI_HB8CFG3_WRWS_4      0x00000040  // Active WRn is 4 EPI clocks
N#define EPI_HB8CFG3_WRWS_6      0x00000080  // Active WRn is 6 EPI clocks
N#define EPI_HB8CFG3_WRWS_8      0x000000C0  // Active WRn is 8 EPI clocks
N#define EPI_HB8CFG3_RDWS_M      0x00000030  // CS2n Read Wait States
N#define EPI_HB8CFG3_RDWS_2      0x00000000  // Active RDn is 2 EPI clocks
N#define EPI_HB8CFG3_RDWS_4      0x00000010  // Active RDn is 4 EPI clocks
N#define EPI_HB8CFG3_RDWS_6      0x00000020  // Active RDn is 6 EPI clocks
N#define EPI_HB8CFG3_RDWS_8      0x00000030  // Active RDn is 8 EPI clocks
N#define EPI_HB8CFG3_MODE_M      0x00000003  // CS2n Host Bus Sub-Mode
N#define EPI_HB8CFG3_MODE_ADMUX  0x00000000  // ADMUX - AD[7:0]
N#define EPI_HB8CFG3_MODE_AD     0x00000001  // ADNONMUX - D[7:0]
N#define EPI_HB8CFG3_MODE_CR     0x00000002  // Continuous Read - D[7:0]
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB16CFG3 register.
N//
N//*****************************************************************************
N#define EPI_HB16CFG3_WRHIGH     0x00200000  // CS2n WRITE Strobe Polarity
N#define EPI_HB16CFG3_RDHIGH     0x00100000  // CS2n READ Strobe Polarity
N#define EPI_HB16CFG3_ALEHIGH    0x00080000  // CS2n ALE Strobe Polarity
N#define EPI_HB16CFG3_WRCRE      0x00040000  // CS2n PSRAM Configuration
N                                            // Register Write
N#define EPI_HB16CFG3_RDCRE      0x00020000  // CS2n PSRAM Configuration
N                                            // Register Read
N#define EPI_HB16CFG3_BURST      0x00010000  // CS2n Burst Mode
N#define EPI_HB16CFG3_WRWS_M     0x000000C0  // CS2n Write Wait States
N#define EPI_HB16CFG3_WRWS_2     0x00000000  // Active WRn is 2 EPI clocks
N#define EPI_HB16CFG3_WRWS_4     0x00000040  // Active WRn is 4 EPI clocks
N#define EPI_HB16CFG3_WRWS_6     0x00000080  // Active WRn is 6 EPI clocks
N#define EPI_HB16CFG3_WRWS_8     0x000000C0  // Active WRn is 8 EPI clocks
N#define EPI_HB16CFG3_RDWS_M     0x00000030  // CS2n Read Wait States
N#define EPI_HB16CFG3_RDWS_2     0x00000000  // Active RDn is 2 EPI clocks
N#define EPI_HB16CFG3_RDWS_4     0x00000010  // Active RDn is 4 EPI clocks
N#define EPI_HB16CFG3_RDWS_6     0x00000020  // Active RDn is 6 EPI clocks
N#define EPI_HB16CFG3_RDWS_8     0x00000030  // Active RDn is 8 EPI clocks
N#define EPI_HB16CFG3_MODE_M     0x00000003  // CS2n Host Bus Sub-Mode
N#define EPI_HB16CFG3_MODE_ADMUX 0x00000000  // ADMUX - AD[15:0]
N#define EPI_HB16CFG3_MODE_AD    0x00000001  // ADNONMUX - D[15:0]
N#define EPI_HB16CFG3_MODE_CR    0x00000002  // Continuous Read - D[15:0]
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB16CFG4 register.
N//
N//*****************************************************************************
N#define EPI_HB16CFG4_WRHIGH     0x00200000  // CS3n WRITE Strobe Polarity
N#define EPI_HB16CFG4_RDHIGH     0x00100000  // CS3n READ Strobe Polarity
N#define EPI_HB16CFG4_ALEHIGH    0x00080000  // CS3n ALE Strobe Polarity
N#define EPI_HB16CFG4_WRCRE      0x00040000  // CS3n PSRAM Configuration
N                                            // Register Write
N#define EPI_HB16CFG4_RDCRE      0x00020000  // CS3n PSRAM Configuration
N                                            // Register Read
N#define EPI_HB16CFG4_BURST      0x00010000  // CS3n Burst Mode
N#define EPI_HB16CFG4_WRWS_M     0x000000C0  // CS3n Write Wait States
N#define EPI_HB16CFG4_WRWS_2     0x00000000  // Active WRn is 2 EPI clocks
N#define EPI_HB16CFG4_WRWS_4     0x00000040  // Active WRn is 4 EPI clocks
N#define EPI_HB16CFG4_WRWS_6     0x00000080  // Active WRn is 6 EPI clocks
N#define EPI_HB16CFG4_WRWS_8     0x000000C0  // Active WRn is 8 EPI clocks
N#define EPI_HB16CFG4_RDWS_M     0x00000030  // CS3n Read Wait States
N#define EPI_HB16CFG4_RDWS_2     0x00000000  // Active RDn is 2 EPI clocks
N#define EPI_HB16CFG4_RDWS_4     0x00000010  // Active RDn is 4 EPI clocks
N#define EPI_HB16CFG4_RDWS_6     0x00000020  // Active RDn is 6 EPI clocks
N#define EPI_HB16CFG4_RDWS_8     0x00000030  // Active RDn is 8 EPI clocks
N#define EPI_HB16CFG4_MODE_M     0x00000003  // CS3n Host Bus Sub-Mode
N#define EPI_HB16CFG4_MODE_ADMUX 0x00000000  // ADMUX - AD[15:0]
N#define EPI_HB16CFG4_MODE_AD    0x00000001  // ADNONMUX - D[15:0]
N#define EPI_HB16CFG4_MODE_CR    0x00000002  // Continuous Read - D[15:0]
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB8CFG4 register.
N//
N//*****************************************************************************
N#define EPI_HB8CFG4_WRHIGH      0x00200000  // CS3n WRITE Strobe Polarity
N#define EPI_HB8CFG4_RDHIGH      0x00100000  // CS2n READ Strobe Polarity
N#define EPI_HB8CFG4_ALEHIGH     0x00080000  // CS3n ALE Strobe Polarity
N#define EPI_HB8CFG4_WRWS_M      0x000000C0  // CS3n Write Wait States
N#define EPI_HB8CFG4_WRWS_2      0x00000000  // Active WRn is 2 EPI clocks
N#define EPI_HB8CFG4_WRWS_4      0x00000040  // Active WRn is 4 EPI clocks
N#define EPI_HB8CFG4_WRWS_6      0x00000080  // Active WRn is 6 EPI clocks
N#define EPI_HB8CFG4_WRWS_8      0x000000C0  // Active WRn is 8 EPI clocks
N#define EPI_HB8CFG4_RDWS_M      0x00000030  // CS3n Read Wait States
N#define EPI_HB8CFG4_RDWS_2      0x00000000  // Active RDn is 2 EPI clocks
N#define EPI_HB8CFG4_RDWS_4      0x00000010  // Active RDn is 4 EPI clocks
N#define EPI_HB8CFG4_RDWS_6      0x00000020  // Active RDn is 6 EPI clocks
N#define EPI_HB8CFG4_RDWS_8      0x00000030  // Active RDn is 8 EPI clocks
N#define EPI_HB8CFG4_MODE_M      0x00000003  // CS3n Host Bus Sub-Mode
N#define EPI_HB8CFG4_MODE_ADMUX  0x00000000  // ADMUX - AD[7:0]
N#define EPI_HB8CFG4_MODE_AD     0x00000001  // ADNONMUX - D[7:0]
N#define EPI_HB8CFG4_MODE_CR     0x00000002  // Continuous Read - D[7:0]
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB8TIME register.
N//
N//*****************************************************************************
N#define EPI_HB8TIME_IRDYDLY_M   0x03000000  // CS0n Input Ready Delay
N#define EPI_HB8TIME_CAPWIDTH_M  0x00003000  // CS0n Inter-transfer Capture
N                                            // Width
N#define EPI_HB8TIME_WRWSM       0x00000010  // Write Wait State Minus One
N#define EPI_HB8TIME_RDWSM       0x00000001  // Read Wait State Minus One
N#define EPI_HB8TIME_IRDYDLY_S   24
N#define EPI_HB8TIME_CAPWIDTH_S  12
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB16TIME register.
N//
N//*****************************************************************************
N#define EPI_HB16TIME_IRDYDLY_M  0x03000000  // CS0n Input Ready Delay
N#define EPI_HB16TIME_PSRAMSZ_M  0x00070000  // PSRAM Row Size
N#define EPI_HB16TIME_PSRAMSZ_0  0x00000000  // No PSRAM
N#define EPI_HB16TIME_PSRAMSZ_128B                                             \
N                                0x00010000  // 128 B
X#define EPI_HB16TIME_PSRAMSZ_128B                                                                             0x00010000  
N#define EPI_HB16TIME_PSRAMSZ_256B                                             \
N                                0x00020000  // 256 B
X#define EPI_HB16TIME_PSRAMSZ_256B                                                                             0x00020000  
N#define EPI_HB16TIME_PSRAMSZ_512B                                             \
N                                0x00030000  // 512 B
X#define EPI_HB16TIME_PSRAMSZ_512B                                                                             0x00030000  
N#define EPI_HB16TIME_PSRAMSZ_1KB                                              \
N                                0x00040000  // 1024 B
X#define EPI_HB16TIME_PSRAMSZ_1KB                                                                              0x00040000  
N#define EPI_HB16TIME_PSRAMSZ_2KB                                              \
N                                0x00050000  // 2048 B
X#define EPI_HB16TIME_PSRAMSZ_2KB                                                                              0x00050000  
N#define EPI_HB16TIME_PSRAMSZ_4KB                                              \
N                                0x00060000  // 4096 B
X#define EPI_HB16TIME_PSRAMSZ_4KB                                                                              0x00060000  
N#define EPI_HB16TIME_PSRAMSZ_8KB                                              \
N                                0x00070000  // 8192 B
X#define EPI_HB16TIME_PSRAMSZ_8KB                                                                              0x00070000  
N#define EPI_HB16TIME_CAPWIDTH_M 0x00003000  // CS0n Inter-transfer Capture
N                                            // Width
N#define EPI_HB16TIME_WRWSM      0x00000010  // Write Wait State Minus One
N#define EPI_HB16TIME_RDWSM      0x00000001  // Read Wait State Minus One
N#define EPI_HB16TIME_IRDYDLY_S  24
N#define EPI_HB16TIME_CAPWIDTH_S 12
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB8TIME2 register.
N//
N//*****************************************************************************
N#define EPI_HB8TIME2_IRDYDLY_M  0x03000000  // CS1n Input Ready Delay
N#define EPI_HB8TIME2_CAPWIDTH_M 0x00003000  // CS1n Inter-transfer Capture
N                                            // Width
N#define EPI_HB8TIME2_WRWSM      0x00000010  // CS1n Write Wait State Minus One
N#define EPI_HB8TIME2_RDWSM      0x00000001  // CS1n Read Wait State Minus One
N#define EPI_HB8TIME2_IRDYDLY_S  24
N#define EPI_HB8TIME2_CAPWIDTH_S 12
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB16TIME2
N// register.
N//
N//*****************************************************************************
N#define EPI_HB16TIME2_IRDYDLY_M 0x03000000  // CS1n Input Ready Delay
N#define EPI_HB16TIME2_PSRAMSZ_M 0x00070000  // PSRAM Row Size
N#define EPI_HB16TIME2_PSRAMSZ_0 0x00000000  // No PSRAM
N#define EPI_HB16TIME2_PSRAMSZ_128B                                            \
N                                0x00010000  // 128 B
X#define EPI_HB16TIME2_PSRAMSZ_128B                                                                            0x00010000  
N#define EPI_HB16TIME2_PSRAMSZ_256B                                            \
N                                0x00020000  // 256 B
X#define EPI_HB16TIME2_PSRAMSZ_256B                                                                            0x00020000  
N#define EPI_HB16TIME2_PSRAMSZ_512B                                            \
N                                0x00030000  // 512 B
X#define EPI_HB16TIME2_PSRAMSZ_512B                                                                            0x00030000  
N#define EPI_HB16TIME2_PSRAMSZ_1KB                                             \
N                                0x00040000  // 1024 B
X#define EPI_HB16TIME2_PSRAMSZ_1KB                                                                             0x00040000  
N#define EPI_HB16TIME2_PSRAMSZ_2KB                                             \
N                                0x00050000  // 2048 B
X#define EPI_HB16TIME2_PSRAMSZ_2KB                                                                             0x00050000  
N#define EPI_HB16TIME2_PSRAMSZ_4KB                                             \
N                                0x00060000  // 4096 B
X#define EPI_HB16TIME2_PSRAMSZ_4KB                                                                             0x00060000  
N#define EPI_HB16TIME2_PSRAMSZ_8KB                                             \
N                                0x00070000  // 8192 B
X#define EPI_HB16TIME2_PSRAMSZ_8KB                                                                             0x00070000  
N#define EPI_HB16TIME2_CAPWIDTH_M                                              \
N                                0x00003000  // CS1n Inter-transfer Capture
X#define EPI_HB16TIME2_CAPWIDTH_M                                                                              0x00003000  
N                                            // Width
N#define EPI_HB16TIME2_WRWSM     0x00000010  // CS1n Write Wait State Minus One
N#define EPI_HB16TIME2_RDWSM     0x00000001  // CS1n Read Wait State Minus One
N#define EPI_HB16TIME2_IRDYDLY_S 24
N#define EPI_HB16TIME2_CAPWIDTH_S                                              \
N                                12
X#define EPI_HB16TIME2_CAPWIDTH_S                                                                              12
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB16TIME3
N// register.
N//
N//*****************************************************************************
N#define EPI_HB16TIME3_IRDYDLY_M 0x03000000  // CS2n Input Ready Delay
N#define EPI_HB16TIME3_PSRAMSZ_M 0x00070000  // PSRAM Row Size
N#define EPI_HB16TIME3_PSRAMSZ_0 0x00000000  // No PSRAM
N#define EPI_HB16TIME3_PSRAMSZ_128B                                            \
N                                0x00010000  // 128 B
X#define EPI_HB16TIME3_PSRAMSZ_128B                                                                            0x00010000  
N#define EPI_HB16TIME3_PSRAMSZ_256B                                            \
N                                0x00020000  // 256 B
X#define EPI_HB16TIME3_PSRAMSZ_256B                                                                            0x00020000  
N#define EPI_HB16TIME3_PSRAMSZ_512B                                            \
N                                0x00030000  // 512 B
X#define EPI_HB16TIME3_PSRAMSZ_512B                                                                            0x00030000  
N#define EPI_HB16TIME3_PSRAMSZ_1KB                                             \
N                                0x00040000  // 1024 B
X#define EPI_HB16TIME3_PSRAMSZ_1KB                                                                             0x00040000  
N#define EPI_HB16TIME3_PSRAMSZ_2KB                                             \
N                                0x00050000  // 2048 B
X#define EPI_HB16TIME3_PSRAMSZ_2KB                                                                             0x00050000  
N#define EPI_HB16TIME3_PSRAMSZ_4KB                                             \
N                                0x00060000  // 4096 B
X#define EPI_HB16TIME3_PSRAMSZ_4KB                                                                             0x00060000  
N#define EPI_HB16TIME3_PSRAMSZ_8KB                                             \
N                                0x00070000  // 8192 B
X#define EPI_HB16TIME3_PSRAMSZ_8KB                                                                             0x00070000  
N#define EPI_HB16TIME3_CAPWIDTH_M                                              \
N                                0x00003000  // CS2n Inter-transfer Capture
X#define EPI_HB16TIME3_CAPWIDTH_M                                                                              0x00003000  
N                                            // Width
N#define EPI_HB16TIME3_WRWSM     0x00000010  // CS2n Write Wait State Minus One
N#define EPI_HB16TIME3_RDWSM     0x00000001  // CS2n Read Wait State Minus One
N#define EPI_HB16TIME3_IRDYDLY_S 24
N#define EPI_HB16TIME3_CAPWIDTH_S                                              \
N                                12
X#define EPI_HB16TIME3_CAPWIDTH_S                                                                              12
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB8TIME3 register.
N//
N//*****************************************************************************
N#define EPI_HB8TIME3_IRDYDLY_M  0x03000000  // CS2n Input Ready Delay
N#define EPI_HB8TIME3_CAPWIDTH_M 0x00003000  // CS2n Inter-transfer Capture
N                                            // Width
N#define EPI_HB8TIME3_WRWSM      0x00000010  // CS2n Write Wait State Minus One
N#define EPI_HB8TIME3_RDWSM      0x00000001  // CS2n Read Wait State Minus One
N#define EPI_HB8TIME3_IRDYDLY_S  24
N#define EPI_HB8TIME3_CAPWIDTH_S 12
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB8TIME4 register.
N//
N//*****************************************************************************
N#define EPI_HB8TIME4_IRDYDLY_M  0x03000000  // CS3n Input Ready Delay
N#define EPI_HB8TIME4_CAPWIDTH_M 0x00003000  // CS3n Inter-transfer Capture
N                                            // Width
N#define EPI_HB8TIME4_WRWSM      0x00000010  // CS3n Write Wait State Minus One
N#define EPI_HB8TIME4_RDWSM      0x00000001  // CS3n Read Wait State Minus One
N#define EPI_HB8TIME4_IRDYDLY_S  24
N#define EPI_HB8TIME4_CAPWIDTH_S 12
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HB16TIME4
N// register.
N//
N//*****************************************************************************
N#define EPI_HB16TIME4_IRDYDLY_M 0x03000000  // CS3n Input Ready Delay
N#define EPI_HB16TIME4_PSRAMSZ_M 0x00070000  // PSRAM Row Size
N#define EPI_HB16TIME4_PSRAMSZ_0 0x00000000  // No PSRAM
N#define EPI_HB16TIME4_PSRAMSZ_128B                                            \
N                                0x00010000  // 128 B
X#define EPI_HB16TIME4_PSRAMSZ_128B                                                                            0x00010000  
N#define EPI_HB16TIME4_PSRAMSZ_256B                                            \
N                                0x00020000  // 256 B
X#define EPI_HB16TIME4_PSRAMSZ_256B                                                                            0x00020000  
N#define EPI_HB16TIME4_PSRAMSZ_512B                                            \
N                                0x00030000  // 512 B
X#define EPI_HB16TIME4_PSRAMSZ_512B                                                                            0x00030000  
N#define EPI_HB16TIME4_PSRAMSZ_1KB                                             \
N                                0x00040000  // 1024 B
X#define EPI_HB16TIME4_PSRAMSZ_1KB                                                                             0x00040000  
N#define EPI_HB16TIME4_PSRAMSZ_2KB                                             \
N                                0x00050000  // 2048 B
X#define EPI_HB16TIME4_PSRAMSZ_2KB                                                                             0x00050000  
N#define EPI_HB16TIME4_PSRAMSZ_4KB                                             \
N                                0x00060000  // 4096 B
X#define EPI_HB16TIME4_PSRAMSZ_4KB                                                                             0x00060000  
N#define EPI_HB16TIME4_PSRAMSZ_8KB                                             \
N                                0x00070000  // 8192 B
X#define EPI_HB16TIME4_PSRAMSZ_8KB                                                                             0x00070000  
N#define EPI_HB16TIME4_CAPWIDTH_M                                              \
N                                0x00003000  // CS3n Inter-transfer Capture
X#define EPI_HB16TIME4_CAPWIDTH_M                                                                              0x00003000  
N                                            // Width
N#define EPI_HB16TIME4_WRWSM     0x00000010  // CS3n Write Wait State Minus One
N#define EPI_HB16TIME4_RDWSM     0x00000001  // CS3n Read Wait State Minus One
N#define EPI_HB16TIME4_IRDYDLY_S 24
N#define EPI_HB16TIME4_CAPWIDTH_S                                              \
N                                12
X#define EPI_HB16TIME4_CAPWIDTH_S                                                                              12
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the EPI_O_HBPSRAM register.
N//
N//*****************************************************************************
N#define EPI_HBPSRAM_CR_M        0x001FFFFF  // PSRAM Config Register
N#define EPI_HBPSRAM_CR_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSEXC_RIS register.
N//
N//*****************************************************************************
N#define SYSEXC_RIS_FPIXCRIS     0x00000020  // Floating-Point Inexact Exception
N                                            // Raw Interrupt Status
N#define SYSEXC_RIS_FPOFCRIS     0x00000010  // Floating-Point Overflow
N                                            // Exception Raw Interrupt Status
N#define SYSEXC_RIS_FPUFCRIS     0x00000008  // Floating-Point Underflow
N                                            // Exception Raw Interrupt Status
N#define SYSEXC_RIS_FPIOCRIS     0x00000004  // Floating-Point Invalid Operation
N                                            // Raw Interrupt Status
N#define SYSEXC_RIS_FPDZCRIS     0x00000002  // Floating-Point Divide By 0
N                                            // Exception Raw Interrupt Status
N#define SYSEXC_RIS_FPIDCRIS     0x00000001  // Floating-Point Input Denormal
N                                            // Exception Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSEXC_IM register.
N//
N//*****************************************************************************
N#define SYSEXC_IM_FPIXCIM       0x00000020  // Floating-Point Inexact Exception
N                                            // Interrupt Mask
N#define SYSEXC_IM_FPOFCIM       0x00000010  // Floating-Point Overflow
N                                            // Exception Interrupt Mask
N#define SYSEXC_IM_FPUFCIM       0x00000008  // Floating-Point Underflow
N                                            // Exception Interrupt Mask
N#define SYSEXC_IM_FPIOCIM       0x00000004  // Floating-Point Invalid Operation
N                                            // Interrupt Mask
N#define SYSEXC_IM_FPDZCIM       0x00000002  // Floating-Point Divide By 0
N                                            // Exception Interrupt Mask
N#define SYSEXC_IM_FPIDCIM       0x00000001  // Floating-Point Input Denormal
N                                            // Exception Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSEXC_MIS register.
N//
N//*****************************************************************************
N#define SYSEXC_MIS_FPIXCMIS     0x00000020  // Floating-Point Inexact Exception
N                                            // Masked Interrupt Status
N#define SYSEXC_MIS_FPOFCMIS     0x00000010  // Floating-Point Overflow
N                                            // Exception Masked Interrupt
N                                            // Status
N#define SYSEXC_MIS_FPUFCMIS     0x00000008  // Floating-Point Underflow
N                                            // Exception Masked Interrupt
N                                            // Status
N#define SYSEXC_MIS_FPIOCMIS     0x00000004  // Floating-Point Invalid Operation
N                                            // Masked Interrupt Status
N#define SYSEXC_MIS_FPDZCMIS     0x00000002  // Floating-Point Divide By 0
N                                            // Exception Masked Interrupt
N                                            // Status
N#define SYSEXC_MIS_FPIDCMIS     0x00000001  // Floating-Point Input Denormal
N                                            // Exception Masked Interrupt
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSEXC_IC register.
N//
N//*****************************************************************************
N#define SYSEXC_IC_FPIXCIC       0x00000020  // Floating-Point Inexact Exception
N                                            // Interrupt Clear
N#define SYSEXC_IC_FPOFCIC       0x00000010  // Floating-Point Overflow
N                                            // Exception Interrupt Clear
N#define SYSEXC_IC_FPUFCIC       0x00000008  // Floating-Point Underflow
N                                            // Exception Interrupt Clear
N#define SYSEXC_IC_FPIOCIC       0x00000004  // Floating-Point Invalid Operation
N                                            // Interrupt Clear
N#define SYSEXC_IC_FPDZCIC       0x00000002  // Floating-Point Divide By 0
N                                            // Exception Interrupt Clear
N#define SYSEXC_IC_FPIDCIC       0x00000001  // Floating-Point Input Denormal
N                                            // Exception Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_RTCC register.
N//
N//*****************************************************************************
N#define HIB_RTCC_M              0xFFFFFFFF  // RTC Counter
N#define HIB_RTCC_S              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_RTCM0 register.
N//
N//*****************************************************************************
N#define HIB_RTCM0_M             0xFFFFFFFF  // RTC Match 0
N#define HIB_RTCM0_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_RTCLD register.
N//
N//*****************************************************************************
N#define HIB_RTCLD_M             0xFFFFFFFF  // RTC Load
N#define HIB_RTCLD_S             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_CTL register.
N//
N//*****************************************************************************
N#define HIB_CTL_WRC             0x80000000  // Write Complete/Capable
N#define HIB_CTL_RETCLR          0x40000000  // GPIO Retention/Clear
N#define HIB_CTL_OSCSEL          0x00080000  // Oscillator Select
N#define HIB_CTL_OSCDRV          0x00020000  // Oscillator Drive Capability
N#define HIB_CTL_OSCBYP          0x00010000  // Oscillator Bypass
N#define HIB_CTL_VBATSEL_M       0x00006000  // Select for Low-Battery
N                                            // Comparator
N#define HIB_CTL_VBATSEL_1_9V    0x00000000  // 1.9 Volts
N#define HIB_CTL_VBATSEL_2_1V    0x00002000  // 2.1 Volts (default)
N#define HIB_CTL_VBATSEL_2_3V    0x00004000  // 2.3 Volts
N#define HIB_CTL_VBATSEL_2_5V    0x00006000  // 2.5 Volts
N#define HIB_CTL_BATCHK          0x00000400  // Check Battery Status
N#define HIB_CTL_BATWKEN         0x00000200  // Wake on Low Battery
N#define HIB_CTL_VDD3ON          0x00000100  // VDD Powered
N#define HIB_CTL_VABORT          0x00000080  // Power Cut Abort Enable
N#define HIB_CTL_CLK32EN         0x00000040  // Clocking Enable
N#define HIB_CTL_PINWEN          0x00000010  // External WAKE Pin Enable
N#define HIB_CTL_RTCWEN          0x00000008  // RTC Wake-up Enable
N#define HIB_CTL_HIBREQ          0x00000002  // Hibernation Request
N#define HIB_CTL_RTCEN           0x00000001  // RTC Timer Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_IM register.
N//
N//*****************************************************************************
N#define HIB_IM_VDDFAIL          0x00000080  // VDD Fail Interrupt Mask
N#define HIB_IM_RSTWK            0x00000040  // Reset Pad I/O Wake-Up Interrupt
N                                            // Mask
N#define HIB_IM_PADIOWK          0x00000020  // Pad I/O Wake-Up Interrupt Mask
N#define HIB_IM_WC               0x00000010  // External Write Complete/Capable
N                                            // Interrupt Mask
N#define HIB_IM_EXTW             0x00000008  // External Wake-Up Interrupt Mask
N#define HIB_IM_LOWBAT           0x00000004  // Low Battery Voltage Interrupt
N                                            // Mask
N#define HIB_IM_RTCALT0          0x00000001  // RTC Alert 0 Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_RIS register.
N//
N//*****************************************************************************
N#define HIB_RIS_VDDFAIL         0x00000080  // VDD Fail Raw Interrupt Status
N#define HIB_RIS_RSTWK           0x00000040  // Reset Pad I/O Wake-Up Interrupt
N                                            // Mask
N#define HIB_RIS_PADIOWK         0x00000020  // Pad I/O Wake-Up Interrupt Mask
N#define HIB_RIS_WC              0x00000010  // Write Complete/Capable Raw
N                                            // Interrupt Status
N#define HIB_RIS_EXTW            0x00000008  // External Wake-Up Raw Interrupt
N                                            // Status
N#define HIB_RIS_LOWBAT          0x00000004  // Low Battery Voltage Raw
N                                            // Interrupt Status
N#define HIB_RIS_RTCALT0         0x00000001  // RTC Alert 0 Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_MIS register.
N//
N//*****************************************************************************
N#define HIB_MIS_VDDFAIL         0x00000080  // VDD Fail Interrupt Mask
N#define HIB_MIS_RSTWK           0x00000040  // Reset Pad I/O Wake-Up Interrupt
N                                            // Mask
N#define HIB_MIS_PADIOWK         0x00000020  // Pad I/O Wake-Up Interrupt Mask
N#define HIB_MIS_WC              0x00000010  // Write Complete/Capable Masked
N                                            // Interrupt Status
N#define HIB_MIS_EXTW            0x00000008  // External Wake-Up Masked
N                                            // Interrupt Status
N#define HIB_MIS_LOWBAT          0x00000004  // Low Battery Voltage Masked
N                                            // Interrupt Status
N#define HIB_MIS_RTCALT0         0x00000001  // RTC Alert 0 Masked Interrupt
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_IC register.
N//
N//*****************************************************************************
N#define HIB_IC_VDDFAIL          0x00000080  // VDD Fail Interrupt Clear
N#define HIB_IC_RSTWK            0x00000040  // Reset Pad I/O Wake-Up Interrupt
N                                            // Mask
N#define HIB_IC_PADIOWK          0x00000020  // Pad I/O Wake-Up Interrupt Mask
N#define HIB_IC_WC               0x00000010  // Write Complete/Capable Masked
N                                            // Interrupt Clear
N#define HIB_IC_EXTW             0x00000008  // External Wake-Up Masked
N                                            // Interrupt Clear
N#define HIB_IC_LOWBAT           0x00000004  // Low Battery Voltage Masked
N                                            // Interrupt Clear
N#define HIB_IC_RTCALT0          0x00000001  // RTC Alert0 Masked Interrupt
N                                            // Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_RTCT register.
N//
N//*****************************************************************************
N#define HIB_RTCT_TRIM_M         0x0000FFFF  // RTC Trim Value
N#define HIB_RTCT_TRIM_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_RTCSS register.
N//
N//*****************************************************************************
N#define HIB_RTCSS_RTCSSM_M      0x7FFF0000  // RTC Sub Seconds Match
N#define HIB_RTCSS_RTCSSC_M      0x00007FFF  // RTC Sub Seconds Count
N#define HIB_RTCSS_RTCSSM_S      16
N#define HIB_RTCSS_RTCSSC_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_IO register.
N//
N//*****************************************************************************
N#define HIB_IO_IOWRC            0x80000000  // I/O Write Complete
N#define HIB_IO_WURSTEN          0x00000010  // Reset Wake Source Enable
N#define HIB_IO_WUUNLK           0x00000001  // I/O Wake Pad Configuration
N                                            // Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_DATA register.
N//
N//*****************************************************************************
N#define HIB_DATA_RTD_M          0xFFFFFFFF  // Hibernation Module NV Data
N#define HIB_DATA_RTD_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_CALCTL register.
N//
N//*****************************************************************************
N#define HIB_CALCTL_CAL24        0x00000004  // Calendar Mode
N#define HIB_CALCTL_CALEN        0x00000001  // RTC Calendar/Counter Mode Select
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_CAL0 register.
N//
N//*****************************************************************************
N#define HIB_CAL0_VALID          0x80000000  // Valid Calendar Load
N#define HIB_CAL0_AMPM           0x00400000  // AM/PM Designation
N#define HIB_CAL0_HR_M           0x001F0000  // Hours
N#define HIB_CAL0_MIN_M          0x00003F00  // Minutes
N#define HIB_CAL0_SEC_M          0x0000003F  // Seconds
N#define HIB_CAL0_HR_S           16
N#define HIB_CAL0_MIN_S          8
N#define HIB_CAL0_SEC_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_CAL1 register.
N//
N//*****************************************************************************
N#define HIB_CAL1_VALID          0x80000000  // Valid Calendar Load
N#define HIB_CAL1_DOW_M          0x07000000  // Day of Week
N#define HIB_CAL1_YEAR_M         0x007F0000  // Year Value
N#define HIB_CAL1_MON_M          0x00000F00  // Month
N#define HIB_CAL1_DOM_M          0x0000001F  // Day of Month
N#define HIB_CAL1_DOW_S          24
N#define HIB_CAL1_YEAR_S         16
N#define HIB_CAL1_MON_S          8
N#define HIB_CAL1_DOM_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_CALLD0 register.
N//
N//*****************************************************************************
N#define HIB_CALLD0_AMPM         0x00400000  // AM/PM Designation
N#define HIB_CALLD0_HR_M         0x001F0000  // Hours
N#define HIB_CALLD0_MIN_M        0x00003F00  // Minutes
N#define HIB_CALLD0_SEC_M        0x0000003F  // Seconds
N#define HIB_CALLD0_HR_S         16
N#define HIB_CALLD0_MIN_S        8
N#define HIB_CALLD0_SEC_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_CALLD1 register.
N//
N//*****************************************************************************
N#define HIB_CALLD1_DOW_M        0x07000000  // Day of Week
N#define HIB_CALLD1_YEAR_M       0x007F0000  // Year Value
N#define HIB_CALLD1_MON_M        0x00000F00  // Month
N#define HIB_CALLD1_DOM_M        0x0000001F  // Day of Month
N#define HIB_CALLD1_DOW_S        24
N#define HIB_CALLD1_YEAR_S       16
N#define HIB_CALLD1_MON_S        8
N#define HIB_CALLD1_DOM_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_CALM0 register.
N//
N//*****************************************************************************
N#define HIB_CALM0_AMPM          0x00400000  // AM/PM Designation
N#define HIB_CALM0_HR_M          0x001F0000  // Hours
N#define HIB_CALM0_MIN_M         0x00003F00  // Minutes
N#define HIB_CALM0_SEC_M         0x0000003F  // Seconds
N#define HIB_CALM0_HR_S          16
N#define HIB_CALM0_MIN_S         8
N#define HIB_CALM0_SEC_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_CALM1 register.
N//
N//*****************************************************************************
N#define HIB_CALM1_DOM_M         0x0000001F  // Day of Month
N#define HIB_CALM1_DOM_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_LOCK register.
N//
N//*****************************************************************************
N#define HIB_LOCK_HIBLOCK_M      0xFFFFFFFF  // Hibernate Lock
N#define HIB_LOCK_HIBLOCK_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPCTL register.
N//
N//*****************************************************************************
N#define HIB_TPCTL_WAKE          0x00000800  // Wake from Hibernate on a Tamper
N                                            // Event
N#define HIB_TPCTL_MEMCLR_M      0x00000300  // HIB Memory Clear on Tamper Event
N#define HIB_TPCTL_MEMCLR_NONE   0x00000000  // Do not Clear HIB memory on
N                                            // tamper event
N#define HIB_TPCTL_MEMCLR_LOW32  0x00000100  // Clear Lower 32 Bytes of HIB
N                                            // memory on tamper event
N#define HIB_TPCTL_MEMCLR_HIGH32 0x00000200  // Clear upper 32 Bytes of HIB
N                                            // memory on tamper event
N#define HIB_TPCTL_MEMCLR_ALL    0x00000300  // Clear all HIB memory on tamper
N                                            // event
N#define HIB_TPCTL_TPCLR         0x00000010  // Tamper Event Clear
N#define HIB_TPCTL_TPEN          0x00000001  // Tamper Module Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPSTAT register.
N//
N//*****************************************************************************
N#define HIB_TPSTAT_STATE_M      0x0000000C  // Tamper Module Status
N#define HIB_TPSTAT_STATE_DISABLED                                             \
N                                0x00000000  // Tamper disabled
X#define HIB_TPSTAT_STATE_DISABLED                                                                             0x00000000  
N#define HIB_TPSTAT_STATE_CONFIGED                                             \
N                                0x00000004  // Tamper configured
X#define HIB_TPSTAT_STATE_CONFIGED                                                                             0x00000004  
N#define HIB_TPSTAT_STATE_ERROR  0x00000008  // Tamper event occurred
N#define HIB_TPSTAT_XOSCST       0x00000002  // External Oscillator Status
N#define HIB_TPSTAT_XOSCFAIL     0x00000001  // External Oscillator Failure
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPIO register.
N//
N//*****************************************************************************
N#define HIB_TPIO_GFLTR3         0x08000000  // TPIO3 Glitch Filtering
N#define HIB_TPIO_PUEN3          0x04000000  // TPIO3 Internal Weak Pull-up
N                                            // Enable
N#define HIB_TPIO_LEV3           0x02000000  // TPIO3 Trigger Level
N#define HIB_TPIO_EN3            0x01000000  // TPIO3 Enable
N#define HIB_TPIO_GFLTR2         0x00080000  // TPIO2 Glitch Filtering
N#define HIB_TPIO_PUEN2          0x00040000  // TPIO2 Internal Weak Pull-up
N                                            // Enable
N#define HIB_TPIO_LEV2           0x00020000  // TPIO2 Trigger Level
N#define HIB_TPIO_EN2            0x00010000  // TPIO2 Enable
N#define HIB_TPIO_GFLTR1         0x00000800  // TPIO1 Glitch Filtering
N#define HIB_TPIO_PUEN1          0x00000400  // TPIO1 Internal Weak Pull-up
N                                            // Enable
N#define HIB_TPIO_LEV1           0x00000200  // TPIO1 Trigger Level
N#define HIB_TPIO_EN1            0x00000100  // TPIO1Enable
N#define HIB_TPIO_GFLTR0         0x00000008  // TPIO0 Glitch Filtering
N#define HIB_TPIO_PUEN0          0x00000004  // TPIO0 Internal Weak Pull-up
N                                            // Enable
N#define HIB_TPIO_LEV0           0x00000002  // TPIO0 Trigger Level
N#define HIB_TPIO_EN0            0x00000001  // TPIO0 Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPLOG0 register.
N//
N//*****************************************************************************
N#define HIB_TPLOG0_TIME_M       0xFFFFFFFF  // Tamper Log Calendar Information
N#define HIB_TPLOG0_TIME_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPLOG1 register.
N//
N//*****************************************************************************
N#define HIB_TPLOG1_XOSC         0x00010000  // Status of external 32
N#define HIB_TPLOG1_TRIG3        0x00000008  // Status of TPIO[3] Trigger
N#define HIB_TPLOG1_TRIG2        0x00000004  // Status of TPIO[2] Trigger
N#define HIB_TPLOG1_TRIG1        0x00000002  // Status of TPIO[1] Trigger
N#define HIB_TPLOG1_TRIG0        0x00000001  // Status of TPIO[0] Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPLOG2 register.
N//
N//*****************************************************************************
N#define HIB_TPLOG2_TIME_M       0xFFFFFFFF  // Tamper Log Calendar Information
N#define HIB_TPLOG2_TIME_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPLOG3 register.
N//
N//*****************************************************************************
N#define HIB_TPLOG3_XOSC         0x00010000  // Status of external 32
N#define HIB_TPLOG3_TRIG3        0x00000008  // Status of TPIO[3] Trigger
N#define HIB_TPLOG3_TRIG2        0x00000004  // Status of TPIO[2] Trigger
N#define HIB_TPLOG3_TRIG1        0x00000002  // Status of TPIO[1] Trigger
N#define HIB_TPLOG3_TRIG0        0x00000001  // Status of TPIO[0] Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPLOG4 register.
N//
N//*****************************************************************************
N#define HIB_TPLOG4_TIME_M       0xFFFFFFFF  // Tamper Log Calendar Information
N#define HIB_TPLOG4_TIME_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPLOG5 register.
N//
N//*****************************************************************************
N#define HIB_TPLOG5_XOSC         0x00010000  // Status of external 32
N#define HIB_TPLOG5_TRIG3        0x00000008  // Status of TPIO[3] Trigger
N#define HIB_TPLOG5_TRIG2        0x00000004  // Status of TPIO[2] Trigger
N#define HIB_TPLOG5_TRIG1        0x00000002  // Status of TPIO[1] Trigger
N#define HIB_TPLOG5_TRIG0        0x00000001  // Status of TPIO[0] Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPLOG6 register.
N//
N//*****************************************************************************
N#define HIB_TPLOG6_TIME_M       0xFFFFFFFF  // Tamper Log Calendar Information
N#define HIB_TPLOG6_TIME_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_TPLOG7 register.
N//
N//*****************************************************************************
N#define HIB_TPLOG7_XOSC         0x00010000  // Status of external 32
N#define HIB_TPLOG7_TRIG3        0x00000008  // Status of TPIO[3] Trigger
N#define HIB_TPLOG7_TRIG2        0x00000004  // Status of TPIO[2] Trigger
N#define HIB_TPLOG7_TRIG1        0x00000002  // Status of TPIO[1] Trigger
N#define HIB_TPLOG7_TRIG0        0x00000001  // Status of TPIO[0] Trigger
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_PP register.
N//
N//*****************************************************************************
N#define HIB_PP_TAMPER           0x00000002  // Tamper Pin Presence
N#define HIB_PP_WAKENC           0x00000001  // Wake Pin Presence
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the HIB_CC register.
N//
N//*****************************************************************************
N#define HIB_CC_SYSCLKEN         0x00000001  // System Clock Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMA register.
N//
N//*****************************************************************************
N#define FLASH_FMA_OFFSET_M      0x000FFFFF  // Address Offset
N#define FLASH_FMA_OFFSET_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMD register.
N//
N//*****************************************************************************
N#define FLASH_FMD_DATA_M        0xFFFFFFFF  // Data Value
N#define FLASH_FMD_DATA_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMC register.
N//
N//*****************************************************************************
N#define FLASH_FMC_WRKEY         0xA4420000  // FLASH write key
N#define FLASH_FMC_COMT          0x00000008  // Commit Register Value
N#define FLASH_FMC_MERASE        0x00000004  // Mass Erase Flash Memory
N#define FLASH_FMC_ERASE         0x00000002  // Erase a Page of Flash Memory
N#define FLASH_FMC_WRITE         0x00000001  // Write a Word into Flash Memory
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FCRIS register.
N//
N//*****************************************************************************
N#define FLASH_FCRIS_PROGRIS     0x00002000  // PROGVER Raw Interrupt Status
N#define FLASH_FCRIS_ERRIS       0x00000800  // ERVER Raw Interrupt Status
N#define FLASH_FCRIS_INVDRIS     0x00000400  // Invalid Data Raw Interrupt
N                                            // Status
N#define FLASH_FCRIS_VOLTRIS     0x00000200  // VOLTSTAT Raw Interrupt Status
N#define FLASH_FCRIS_ERIS        0x00000004  // EEPROM Raw Interrupt Status
N#define FLASH_FCRIS_PRIS        0x00000002  // Programming Raw Interrupt Status
N#define FLASH_FCRIS_ARIS        0x00000001  // Access Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FCIM register.
N//
N//*****************************************************************************
N#define FLASH_FCIM_PROGMASK     0x00002000  // PROGVER Interrupt Mask
N#define FLASH_FCIM_ERMASK       0x00000800  // ERVER Interrupt Mask
N#define FLASH_FCIM_INVDMASK     0x00000400  // Invalid Data Interrupt Mask
N#define FLASH_FCIM_VOLTMASK     0x00000200  // VOLT Interrupt Mask
N#define FLASH_FCIM_EMASK        0x00000004  // EEPROM Interrupt Mask
N#define FLASH_FCIM_PMASK        0x00000002  // Programming Interrupt Mask
N#define FLASH_FCIM_AMASK        0x00000001  // Access Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FCMISC register.
N//
N//*****************************************************************************
N#define FLASH_FCMISC_PROGMISC   0x00002000  // PROGVER Masked Interrupt Status
N                                            // and Clear
N#define FLASH_FCMISC_ERMISC     0x00000800  // ERVER Masked Interrupt Status
N                                            // and Clear
N#define FLASH_FCMISC_INVDMISC   0x00000400  // Invalid Data Masked Interrupt
N                                            // Status and Clear
N#define FLASH_FCMISC_VOLTMISC   0x00000200  // VOLT Masked Interrupt Status and
N                                            // Clear
N#define FLASH_FCMISC_EMISC      0x00000004  // EEPROM Masked Interrupt Status
N                                            // and Clear
N#define FLASH_FCMISC_PMISC      0x00000002  // Programming Masked Interrupt
N                                            // Status and Clear
N#define FLASH_FCMISC_AMISC      0x00000001  // Access Masked Interrupt Status
N                                            // and Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMC2 register.
N//
N//*****************************************************************************
N#define FLASH_FMC2_WRBUF        0x00000001  // Buffered Flash Memory Write
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FWBVAL register.
N//
N//*****************************************************************************
N#define FLASH_FWBVAL_FWB_M      0xFFFFFFFF  // Flash Memory Write Buffer
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FLPEKEY register.
N//
N//*****************************************************************************
N#define FLASH_FLPEKEY_PEKEY_M   0x0000FFFF  // Key Value
N#define FLASH_FLPEKEY_PEKEY_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FWBN register.
N//
N//*****************************************************************************
N#define FLASH_FWBN_DATA_M       0xFFFFFFFF  // Data
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_PP register.
N//
N//*****************************************************************************
N#define FLASH_PP_PFC            0x40000000  // Prefetch Cache Mode
N#define FLASH_PP_FMM            0x20000000  // Flash Mirror Mode
N#define FLASH_PP_DFA            0x10000000  // DMA Code SRAM Access
N#define FLASH_PP_EESS_M         0x00780000  // EEPROM Sector Size of the
N                                            // physical bank
N#define FLASH_PP_EESS_1KB       0x00000000  // 1 KB
N#define FLASH_PP_EESS_2KB       0x00080000  // 2 KB
N#define FLASH_PP_EESS_4KB       0x00100000  // 4 KB
N#define FLASH_PP_EESS_8KB       0x00180000  // 8 KB
N#define FLASH_PP_MAINSS_M       0x00070000  // Flash Sector Size of the
N                                            // physical bank
N#define FLASH_PP_MAINSS_1KB     0x00000000  // 1 KB
N#define FLASH_PP_MAINSS_2KB     0x00010000  // 2 KB
N#define FLASH_PP_MAINSS_4KB     0x00020000  // 4 KB
N#define FLASH_PP_MAINSS_8KB     0x00030000  // 8 KB
N#define FLASH_PP_MAINSS_16KB    0x00040000  // 16 KB
N#define FLASH_PP_SIZE_M         0x0000FFFF  // Code SRAM Size
N#define FLASH_PP_SIZE_16KB      0x00000007  // 16 KB of Code SRAM
N#define FLASH_PP_SIZE_32KB      0x0000000F  // 32 KB of Code SRAM
N#define FLASH_PP_SIZE_64KB      0x0000001F  // 64 KB of Code SRAM
N#define FLASH_PP_SIZE_96KB      0x0000002F  // 96 KB of Code SRAM
N#define FLASH_PP_SIZE_128KB     0x0000003F  // 128 KB of Code SRAM
N#define FLASH_PP_SIZE_192KB     0x0000005F  // 192 KB of Flash
N#define FLASH_PP_SIZE_256KB     0x0000007F  // 256 KB of Flash
N#define FLASH_PP_SIZE_384KB     0x000000BF  // 384 K of Flash
N#define FLASH_PP_SIZE_512KB     0x000000FF  // 512 KB of Flash
N#define FLASH_PP_SIZE_1MB       0x000001FF  // 1024 KB of Flash
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_SSIZE register.
N//
N//*****************************************************************************
N#define FLASH_SSIZE_SIZE_M      0x0000FFFF  // SRAM Size
N#define FLASH_SSIZE_SIZE_256KB  0x000003FF  // 256 KB of SRAM
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_CONF register.
N//
N//*****************************************************************************
N#define FLASH_CONF_FMME         0x40000000  // Flash Mirror Mode Enable
N#define FLASH_CONF_SPFE         0x20000000  // Single Prefetch Mode Enable
N#define FLASH_CONF_CLRTV        0x00100000  // Clear Tag Valid Bits
N#define FLASH_CONF_FPFON        0x00020000  // Force Prefetch On
N#define FLASH_CONF_FPFOFF       0x00010000  // Force Prefetch Off
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_ROMSWMAP register.
N//
N//*****************************************************************************
N#define FLASH_ROMSWMAP_SW7EN_M  0x0000C000  // ROM SW Region 7 Availability
N#define FLASH_ROMSWMAP_SW7EN_NOTVIS                                           \
N                                0x00000000  // Not Visible outside of secure
X#define FLASH_ROMSWMAP_SW7EN_NOTVIS                                                                           0x00000000  
N                                            // INITIALIZATION
N#define FLASH_ROMSWMAP_SW7EN_CORE                                             \
N                                0x00004000  // Visible to core
X#define FLASH_ROMSWMAP_SW7EN_CORE                                                                             0x00004000  
N#define FLASH_ROMSWMAP_SW6EN_M  0x00003000  // ROM SW Region 6 Availability
N#define FLASH_ROMSWMAP_SW6EN_NOTVIS                                           \
N                                0x00000000  // Not Visible outside of secure
X#define FLASH_ROMSWMAP_SW6EN_NOTVIS                                                                           0x00000000  
N                                            // INITIALIZATION
N#define FLASH_ROMSWMAP_SW6EN_CORE                                             \
N                                0x00001000  // Visible to core
X#define FLASH_ROMSWMAP_SW6EN_CORE                                                                             0x00001000  
N#define FLASH_ROMSWMAP_SW5EN_M  0x00000C00  // ROM SW Region 5 Availability
N#define FLASH_ROMSWMAP_SW5EN_NOTVIS                                           \
N                                0x00000000  // Not Visible outside of secure
X#define FLASH_ROMSWMAP_SW5EN_NOTVIS                                                                           0x00000000  
N                                            // INITIALIZATION
N#define FLASH_ROMSWMAP_SW5EN_CORE                                             \
N                                0x00000400  // Visible to core
X#define FLASH_ROMSWMAP_SW5EN_CORE                                                                             0x00000400  
N#define FLASH_ROMSWMAP_SW4EN_M  0x00000300  // ROM SW Region 4 Availability
N#define FLASH_ROMSWMAP_SW4EN_NOTVIS                                           \
N                                0x00000000  // Not Visible outside of secure
X#define FLASH_ROMSWMAP_SW4EN_NOTVIS                                                                           0x00000000  
N                                            // INITIALIZATION
N#define FLASH_ROMSWMAP_SW4EN_CORE                                             \
N                                0x00000100  // Visible to core
X#define FLASH_ROMSWMAP_SW4EN_CORE                                                                             0x00000100  
N#define FLASH_ROMSWMAP_SW3EN_M  0x000000C0  // ROM SW Region 3 Availability
N#define FLASH_ROMSWMAP_SW3EN_NOTVIS                                           \
N                                0x00000000  // Not Visible outside of secure
X#define FLASH_ROMSWMAP_SW3EN_NOTVIS                                                                           0x00000000  
N                                            // INITIALIZATION
N#define FLASH_ROMSWMAP_SW3EN_CORE                                             \
N                                0x00000040  // Visible to core
X#define FLASH_ROMSWMAP_SW3EN_CORE                                                                             0x00000040  
N#define FLASH_ROMSWMAP_SW2EN_M  0x00000030  // ROM SW Region 2 Availability
N#define FLASH_ROMSWMAP_SW2EN_NOTVIS                                           \
N                                0x00000000  // Not Visible outside of secure
X#define FLASH_ROMSWMAP_SW2EN_NOTVIS                                                                           0x00000000  
N                                            // INITIALIZATION
N#define FLASH_ROMSWMAP_SW2EN_CORE                                             \
N                                0x00000010  // Visible to core
X#define FLASH_ROMSWMAP_SW2EN_CORE                                                                             0x00000010  
N#define FLASH_ROMSWMAP_SW1EN_M  0x0000000C  // ROM SW Region 1 Availability
N#define FLASH_ROMSWMAP_SW1EN_NOTVIS                                           \
N                                0x00000000  // Not Visible outside of secure
X#define FLASH_ROMSWMAP_SW1EN_NOTVIS                                                                           0x00000000  
N                                            // INITIALIZATION
N#define FLASH_ROMSWMAP_SW1EN_CORE                                             \
N                                0x00000004  // Visible to core
X#define FLASH_ROMSWMAP_SW1EN_CORE                                                                             0x00000004  
N#define FLASH_ROMSWMAP_SW0EN_M  0x00000003  // ROM SW Region 0 Availability
N#define FLASH_ROMSWMAP_SW0EN_NOTVIS                                           \
N                                0x00000000  // Not Visible outside of secure
X#define FLASH_ROMSWMAP_SW0EN_NOTVIS                                                                           0x00000000  
N                                            // INITIALIZATION
N#define FLASH_ROMSWMAP_SW0EN_CORE                                             \
N                                0x00000001  // Visible to core
X#define FLASH_ROMSWMAP_SW0EN_CORE                                                                             0x00000001  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_DMASZ register.
N//
N//*****************************************************************************
N#define FLASH_DMASZ_SIZE_M      0x0003FFFF  // KBs of uDMA-accessible Address
N                                            // Space in powers of 2
N#define FLASH_DMASZ_SIZE_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_DMAST register.
N//
N//*****************************************************************************
N#define FLASH_DMAST_ADDR_M      0x1FFFF800  // Contains the starting address of
N                                            // the Code SRAM region accessible
N                                            // by uDMA if the FLASHPP register
N                                            // DFA bit is set
N#define FLASH_DMAST_ADDR_S      11
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_RVP register.
N//
N//*****************************************************************************
N#define FLASH_RVP_RV_M          0xFFFFFFFF  // Reset Vector Pointer Address
N#define FLASH_RVP_RV_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_BOOTCFG register.
N//
N//*****************************************************************************
N#define FLASH_BOOTCFG_NW        0x80000000  // Not Written
N#define FLASH_BOOTCFG_PORT_M    0x0000E000  // Boot GPIO Port
N#define FLASH_BOOTCFG_PORT_A    0x00000000  // Port A
N#define FLASH_BOOTCFG_PORT_B    0x00002000  // Port B
N#define FLASH_BOOTCFG_PORT_C    0x00004000  // Port C
N#define FLASH_BOOTCFG_PORT_D    0x00006000  // Port D
N#define FLASH_BOOTCFG_PORT_E    0x00008000  // Port E
N#define FLASH_BOOTCFG_PORT_F    0x0000A000  // Port F
N#define FLASH_BOOTCFG_PORT_G    0x0000C000  // Port G
N#define FLASH_BOOTCFG_PORT_H    0x0000E000  // Port H
N#define FLASH_BOOTCFG_PIN_M     0x00001C00  // Boot GPIO Pin
N#define FLASH_BOOTCFG_PIN_0     0x00000000  // Pin 0
N#define FLASH_BOOTCFG_PIN_1     0x00000400  // Pin 1
N#define FLASH_BOOTCFG_PIN_2     0x00000800  // Pin 2
N#define FLASH_BOOTCFG_PIN_3     0x00000C00  // Pin 3
N#define FLASH_BOOTCFG_PIN_4     0x00001000  // Pin 4
N#define FLASH_BOOTCFG_PIN_5     0x00001400  // Pin 5
N#define FLASH_BOOTCFG_PIN_6     0x00001800  // Pin 6
N#define FLASH_BOOTCFG_PIN_7     0x00001C00  // Pin 7
N#define FLASH_BOOTCFG_POL       0x00000200  // Boot GPIO Polarity
N#define FLASH_BOOTCFG_EN        0x00000100  // Boot GPIO Enable
N#define FLASH_BOOTCFG_KEY       0x00000010  // KEY Select
N#define FLASH_BOOTCFG_DBG1      0x00000002  // Debug Control 1
N#define FLASH_BOOTCFG_DBG0      0x00000001  // Debug Control 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_USRPWRUP register.
N//
N//*****************************************************************************
N#define FLASH_USRPWRUP_LDODISABL_M                                            \
N                                0x000000FF  // LDO Disable
X#define FLASH_USRPWRUP_LDODISABL_M                                                                            0x000000FF  
N#define FLASH_USRPWRUP_LDODISABL_S                                            \
N                                0
X#define FLASH_USRPWRUP_LDODISABL_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_USERREG0 register.
N//
N//*****************************************************************************
N#define FLASH_USERREG0_DATA_M   0xFFFFFFFF  // User Data
N#define FLASH_USERREG0_DATA_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_USERREG1 register.
N//
N//*****************************************************************************
N#define FLASH_USERREG1_DATA_M   0xFFFFFFFF  // User Data
N#define FLASH_USERREG1_DATA_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_USERREG2 register.
N//
N//*****************************************************************************
N#define FLASH_USERREG2_DATA_M   0xFFFFFFFF  // User Data
N#define FLASH_USERREG2_DATA_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_USERREG3 register.
N//
N//*****************************************************************************
N#define FLASH_USERREG3_DATA_M   0xFFFFFFFF  // User Data
N#define FLASH_USERREG3_DATA_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE8 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE8_READ_ENABLE_M                                            \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE8_READ_ENABLE_M                                                                            0xFFFFFFFF  
N#define FLASH_FMPRE8_READ_ENABLE_S                                            \
N                                0
X#define FLASH_FMPRE8_READ_ENABLE_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE9 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE9_READ_ENABLE_M                                            \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE9_READ_ENABLE_M                                                                            0xFFFFFFFF  
N#define FLASH_FMPRE9_READ_ENABLE_S                                            \
N                                0
X#define FLASH_FMPRE9_READ_ENABLE_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE10 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE10_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE10_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE10_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE10_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE11 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE11_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE11_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE11_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE11_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE12 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE12_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE12_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE12_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE12_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE13 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE13_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE13_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE13_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE13_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE14 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE14_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE14_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE14_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE14_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPRE15 register.
N//
N//*****************************************************************************
N#define FLASH_FMPRE15_READ_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Read Enable
X#define FLASH_FMPRE15_READ_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPRE15_READ_ENABLE_S                                           \
N                                0
X#define FLASH_FMPRE15_READ_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE8 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE8_PROG_ENABLE_M                                            \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE8_PROG_ENABLE_M                                                                            0xFFFFFFFF  
N#define FLASH_FMPPE8_PROG_ENABLE_S                                            \
N                                0
X#define FLASH_FMPPE8_PROG_ENABLE_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE9 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE9_PROG_ENABLE_M                                            \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE9_PROG_ENABLE_M                                                                            0xFFFFFFFF  
N#define FLASH_FMPPE9_PROG_ENABLE_S                                            \
N                                0
X#define FLASH_FMPPE9_PROG_ENABLE_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE10 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE10_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE10_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE10_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE10_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE11 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE11_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE11_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE11_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE11_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE12 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE12_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE12_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE12_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE12_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE13 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE13_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE13_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE13_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE13_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE14 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE14_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE14_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE14_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE14_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the FLASH_FMPPE15 register.
N//
N//*****************************************************************************
N#define FLASH_FMPPE15_PROG_ENABLE_M                                           \
N                                0xFFFFFFFF  // Flash Programming Enable
X#define FLASH_FMPPE15_PROG_ENABLE_M                                                                           0xFFFFFFFF  
N#define FLASH_FMPPE15_PROG_ENABLE_S                                           \
N                                0
X#define FLASH_FMPPE15_PROG_ENABLE_S                                                                           0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DID0 register.
N//
N//*****************************************************************************
N#define SYSCTL_DID0_VER_M       0x70000000  // DID0 Version
N#define SYSCTL_DID0_VER_1       0x10000000  // Second version of the DID0
N                                            // register format
N#define SYSCTL_DID0_CLASS_M     0x00FF0000  // Device Class
N#define SYSCTL_DID0_CLASS_SNOWFLAKE                                           \
N                                0x000A0000  // Tiva(TM) C Series
X#define SYSCTL_DID0_CLASS_SNOWFLAKE                                                                           0x000A0000  
N                                            // Snowflake-class microcontrollers
N#define SYSCTL_DID0_MAJ_M       0x0000FF00  // Major Revision
N#define SYSCTL_DID0_MAJ_REVA    0x00000000  // Revision A (initial device)
N#define SYSCTL_DID0_MAJ_REVB    0x00000100  // Revision B (first base layer
N                                            // revision)
N#define SYSCTL_DID0_MAJ_REVC    0x00000200  // Revision C (second base layer
N                                            // revision)
N#define SYSCTL_DID0_MIN_M       0x000000FF  // Minor Revision
N#define SYSCTL_DID0_MIN_0       0x00000000  // Initial device, or a major
N                                            // revision update
N#define SYSCTL_DID0_MIN_1       0x00000001  // First metal layer change
N#define SYSCTL_DID0_MIN_2       0x00000002  // Second metal layer change
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DID1 register.
N//
N//*****************************************************************************
N#define SYSCTL_DID1_VER_M       0xF0000000  // DID1 Version
N#define SYSCTL_DID1_VER_1       0x10000000  // Second version of the DID1
N                                            // register format
N#define SYSCTL_DID1_FAM_M       0x0F000000  // Family
N#define SYSCTL_DID1_FAM_TIVA    0x00000000  // Tiva family of microcontollers
N#define SYSCTL_DID1_PRTNO_M     0x00FF0000  // Part Number
N#define SYSCTL_DID1_PRTNO_TM4C129ENCPDT                                       \
N                                0x002D0000  // TM4C129ENCPDT
X#define SYSCTL_DID1_PRTNO_TM4C129ENCPDT                                                                       0x002D0000  
N#define SYSCTL_DID1_PINCNT_M    0x0000E000  // Package Pin Count
N#define SYSCTL_DID1_PINCNT_100  0x00004000  // 100-pin package
N#define SYSCTL_DID1_PINCNT_64   0x00006000  // 64-pin package
N#define SYSCTL_DID1_PINCNT_144  0x00008000  // 144-pin package
N#define SYSCTL_DID1_PINCNT_157  0x0000A000  // 157-pin package
N#define SYSCTL_DID1_PINCNT_128  0x0000C000  // 128-pin package
N#define SYSCTL_DID1_TEMP_M      0x000000E0  // Temperature Range
N#define SYSCTL_DID1_TEMP_C      0x00000000  // Commercial temperature range (0C
N                                            // to 70C)
N#define SYSCTL_DID1_TEMP_I      0x00000020  // Industrial temperature range
N                                            // (-40C to 85C)
N#define SYSCTL_DID1_TEMP_E      0x00000040  // Extended temperature range (-40C
N                                            // to 105C)
N#define SYSCTL_DID1_PKG_M       0x00000018  // Package Type
N#define SYSCTL_DID1_PKG_SOIC    0x00000000  // SOIC package
N#define SYSCTL_DID1_PKG_QFP     0x00000008  // LQFP package
N#define SYSCTL_DID1_PKG_BGA     0x00000010  // BGA package
N#define SYSCTL_DID1_ROHS        0x00000004  // RoHS-Compliance
N#define SYSCTL_DID1_QUAL_M      0x00000003  // Qualification Status
N#define SYSCTL_DID1_QUAL_ES     0x00000000  // Engineering Sample (unqualified)
N#define SYSCTL_DID1_QUAL_PP     0x00000001  // Pilot Production (unqualified)
N#define SYSCTL_DID1_QUAL_FQ     0x00000002  // Fully Qualified
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PTBOCTL register.
N//
N//*****************************************************************************
N#define SYSCTL_PTBOCTL_VDDA_UBOR_M                                            \
N                                0x00000300  // VDDA under BOR Event Action
X#define SYSCTL_PTBOCTL_VDDA_UBOR_M                                                                            0x00000300  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_NONE                                         \
N                                0x00000000  // No Action
X#define SYSCTL_PTBOCTL_VDDA_UBOR_NONE                                                                         0x00000000  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_SYSINT                                       \
N                                0x00000100  // System control interrupt
X#define SYSCTL_PTBOCTL_VDDA_UBOR_SYSINT                                                                       0x00000100  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_NMI                                          \
N                                0x00000200  // NMI
X#define SYSCTL_PTBOCTL_VDDA_UBOR_NMI                                                                          0x00000200  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_RST                                          \
N                                0x00000300  // Reset
X#define SYSCTL_PTBOCTL_VDDA_UBOR_RST                                                                          0x00000300  
N#define SYSCTL_PTBOCTL_VDD_UBOR_M                                             \
N                                0x00000003  // VDD under BOR Event Action
X#define SYSCTL_PTBOCTL_VDD_UBOR_M                                                                             0x00000003  
N#define SYSCTL_PTBOCTL_VDD_UBOR_NONE                                          \
N                                0x00000000  // No Action
X#define SYSCTL_PTBOCTL_VDD_UBOR_NONE                                                                          0x00000000  
N#define SYSCTL_PTBOCTL_VDD_UBOR_SYSINT                                        \
N                                0x00000001  // System control interrupt
X#define SYSCTL_PTBOCTL_VDD_UBOR_SYSINT                                                                        0x00000001  
N#define SYSCTL_PTBOCTL_VDD_UBOR_NMI                                           \
N                                0x00000002  // NMI
X#define SYSCTL_PTBOCTL_VDD_UBOR_NMI                                                                           0x00000002  
N#define SYSCTL_PTBOCTL_VDD_UBOR_RST                                           \
N                                0x00000003  // Reset
X#define SYSCTL_PTBOCTL_VDD_UBOR_RST                                                                           0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RIS register.
N//
N//*****************************************************************************
N#define SYSCTL_RIS_MOSCPUPRIS   0x00000100  // MOSC Power Up Raw Interrupt
N                                            // Status
N#define SYSCTL_RIS_PLLLRIS      0x00000040  // PLL Lock Raw Interrupt Status
N#define SYSCTL_RIS_MOFRIS       0x00000008  // Main Oscillator Fault Raw
N                                            // Interrupt Status
N#define SYSCTL_RIS_BORRIS       0x00000002  // Brown-Out Reset Raw Interrupt
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_IMC register.
N//
N//*****************************************************************************
N#define SYSCTL_IMC_MOSCPUPIM    0x00000100  // MOSC Power Up Interrupt Mask
N#define SYSCTL_IMC_PLLLIM       0x00000040  // PLL Lock Interrupt Mask
N#define SYSCTL_IMC_MOFIM        0x00000008  // Main Oscillator Fault Interrupt
N                                            // Mask
N#define SYSCTL_IMC_BORIM        0x00000002  // Brown-Out Reset Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_MISC register.
N//
N//*****************************************************************************
N#define SYSCTL_MISC_MOSCPUPMIS  0x00000100  // MOSC Power Up Masked Interrupt
N                                            // Status
N#define SYSCTL_MISC_PLLLMIS     0x00000040  // PLL Lock Masked Interrupt Status
N#define SYSCTL_MISC_MOFMIS      0x00000008  // Main Oscillator Fault Masked
N                                            // Interrupt Status
N#define SYSCTL_MISC_BORMIS      0x00000002  // BOR Masked Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RESC register.
N//
N//*****************************************************************************
N#define SYSCTL_RESC_MOSCFAIL    0x00010000  // MOSC Failure Reset
N#define SYSCTL_RESC_KAPER       0x00008000  // Key Added Period Exceeded Reset
N#define SYSCTL_RESC_HSSR        0x00001000  // HSSR Reset
N#define SYSCTL_RESC_HIB         0x00000040  // HIB Reset
N#define SYSCTL_RESC_WDT1        0x00000020  // Watchdog Timer 1 Reset
N#define SYSCTL_RESC_SW          0x00000010  // Software Reset
N#define SYSCTL_RESC_WDT0        0x00000008  // Watchdog Timer 0 Reset
N#define SYSCTL_RESC_BOR         0x00000004  // Brown-Out Reset
N#define SYSCTL_RESC_POR         0x00000002  // Power-On Reset
N#define SYSCTL_RESC_EXT         0x00000001  // External Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PWRTC register.
N//
N//*****************************************************************************
N#define SYSCTL_PWRTC_VDDA_UBOR0 0x00000010  // VDDAUnder BOR0 Status
N#define SYSCTL_PWRTC_VDD_UBOR0  0x00000001  // VDDUnder BOR0 Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_NMIC register.
N//
N//*****************************************************************************
N#define SYSCTL_NMIC_MOSCFAIL    0x00010000  // MOSC Failure NMI
N#define SYSCTL_NMIC_TAMPER      0x00000200  // Tamper Event NMI
N#define SYSCTL_NMIC_WDT1        0x00000020  // Watch Dog Timer (WDT) 1 NMI
N#define SYSCTL_NMIC_WDT0        0x00000008  // Watch Dog Timer (WDT) 0 NMI
N#define SYSCTL_NMIC_POWER       0x00000004  // Power/Brown Out Event NMI
N#define SYSCTL_NMIC_EXTERNAL    0x00000001  // External Pin NMI
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_MOSCCTL register.
N//
N//*****************************************************************************
N#define SYSCTL_MOSCCTL_SESRC    0x00000020  // Single-Ended Source
N#define SYSCTL_MOSCCTL_OSCRNG   0x00000010  // Oscillator Range
N#define SYSCTL_MOSCCTL_PWRDN    0x00000008  // Power Down
N#define SYSCTL_MOSCCTL_NOXTAL   0x00000004  // No Crystal Connected
N#define SYSCTL_MOSCCTL_MOSCIM   0x00000002  // MOSC Failure Action
N#define SYSCTL_MOSCCTL_CVAL     0x00000001  // Clock Validation for MOSC
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RSCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RSCLKCFG_MEMTIMU 0x80000000  // Memory Timing Register Update
N#define SYSCTL_RSCLKCFG_NEWFREQ 0x40000000  // New PLLFREQ Accept
N#define SYSCTL_RSCLKCFG_ACG     0x20000000  // Auto Clock Gating Enable
N#define SYSCTL_RSCLKCFG_USEPLL  0x10000000  // Use PLL
N#define SYSCTL_RSCLKCFG_PLLSRC_M                                              \
N                                0x0F000000  // PLL Source
X#define SYSCTL_RSCLKCFG_PLLSRC_M                                                                              0x0F000000  
N#define SYSCTL_RSCLKCFG_PLLSRC_PIOSC                                          \
N                                0x00000000  // PIOSC is PLL input clock source
X#define SYSCTL_RSCLKCFG_PLLSRC_PIOSC                                                                          0x00000000  
N#define SYSCTL_RSCLKCFG_PLLSRC_MOSC                                           \
N                                0x03000000  // MOSC is PLL input clock source
X#define SYSCTL_RSCLKCFG_PLLSRC_MOSC                                                                           0x03000000  
N#define SYSCTL_RSCLKCFG_OSCSRC_M                                              \
N                                0x00F00000  // Oscillator Source
X#define SYSCTL_RSCLKCFG_OSCSRC_M                                                                              0x00F00000  
N#define SYSCTL_RSCLKCFG_OSCSRC_PIOSC                                          \
N                                0x00000000  // PIOSC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_PIOSC                                                                          0x00000000  
N#define SYSCTL_RSCLKCFG_OSCSRC_LFIOSC                                         \
N                                0x00200000  // LFIOSC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_LFIOSC                                                                         0x00200000  
N#define SYSCTL_RSCLKCFG_OSCSRC_MOSC                                           \
N                                0x00300000  // MOSC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_MOSC                                                                           0x00300000  
N#define SYSCTL_RSCLKCFG_OSCSRC_RTC                                            \
N                                0x00400000  // RTC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_RTC                                                                            0x00400000  
N#define SYSCTL_RSCLKCFG_OSYSDIV_M                                             \
N                                0x000FFC00  // Oscillator System Clock Divisor
X#define SYSCTL_RSCLKCFG_OSYSDIV_M                                                                             0x000FFC00  
N#define SYSCTL_RSCLKCFG_PSYSDIV_M                                             \
N                                0x000003FF  // PLL System Clock Divisor
X#define SYSCTL_RSCLKCFG_PSYSDIV_M                                                                             0x000003FF  
N#define SYSCTL_RSCLKCFG_OSYSDIV_S                                             \
N                                10
X#define SYSCTL_RSCLKCFG_OSYSDIV_S                                                                             10
N#define SYSCTL_RSCLKCFG_PSYSDIV_S                                             \
N                                0
X#define SYSCTL_RSCLKCFG_PSYSDIV_S                                                                             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_MEMTIM0 register.
N//
N//*****************************************************************************
N#define SYSCTL_MEMTIM0_EBCHT_M  0x03C00000  // EEPROM Clock High Time
N#define SYSCTL_MEMTIM0_EBCHT_0_5                                              \
N                                0x00000000  // System clock high
X#define SYSCTL_MEMTIM0_EBCHT_0_5                                                                              0x00000000  
N#define SYSCTL_MEMTIM0_EBCHT_1  0x00400000  // 1 system clock period
N#define SYSCTL_MEMTIM0_EBCHT_1_5                                              \
N                                0x00800000  // 1.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_1_5                                                                              0x00800000  
N#define SYSCTL_MEMTIM0_EBCHT_2  0x00C00000  // 2 system clock periods
N#define SYSCTL_MEMTIM0_EBCHT_2_5                                              \
N                                0x01000000  // 2.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_2_5                                                                              0x01000000  
N#define SYSCTL_MEMTIM0_EBCHT_3  0x01400000  // 3 system clock periods
N#define SYSCTL_MEMTIM0_EBCHT_3_5                                              \
N                                0x01800000  // 3.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_3_5                                                                              0x01800000  
N#define SYSCTL_MEMTIM0_EBCHT_4  0x01C00000  // 4 system clock periods
N#define SYSCTL_MEMTIM0_EBCHT_4_5                                              \
N                                0x02000000  // 4.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_4_5                                                                              0x02000000  
N#define SYSCTL_MEMTIM0_EBCE     0x00200000  // EEPROM Bank Clock Edge
N#define SYSCTL_MEMTIM0_EWS_M    0x000F0000  // EEPROM Wait State
N#define SYSCTL_MEMTIM0_FBCHT_M  0x000003C0  // Flash Bank Clock High Time
N#define SYSCTL_MEMTIM0_FBCHT_0_5                                              \
N                                0x00000000  // System clock high
X#define SYSCTL_MEMTIM0_FBCHT_0_5                                                                              0x00000000  
N#define SYSCTL_MEMTIM0_FBCHT_1  0x00000040  // 1 system clock period
N#define SYSCTL_MEMTIM0_FBCHT_1_5                                              \
N                                0x00000080  // 1.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_1_5                                                                              0x00000080  
N#define SYSCTL_MEMTIM0_FBCHT_2  0x000000C0  // 2 system clock periods
N#define SYSCTL_MEMTIM0_FBCHT_2_5                                              \
N                                0x00000100  // 2.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_2_5                                                                              0x00000100  
N#define SYSCTL_MEMTIM0_FBCHT_3  0x00000140  // 3 system clock periods
N#define SYSCTL_MEMTIM0_FBCHT_3_5                                              \
N                                0x00000180  // 3.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_3_5                                                                              0x00000180  
N#define SYSCTL_MEMTIM0_FBCHT_4  0x000001C0  // 4 system clock periods
N#define SYSCTL_MEMTIM0_FBCHT_4_5                                              \
N                                0x00000200  // 4.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_4_5                                                                              0x00000200  
N#define SYSCTL_MEMTIM0_FBCE     0x00000020  // Flash Bank Clock Edge
N#define SYSCTL_MEMTIM0_FWS_M    0x0000000F  // Flash Wait State
N#define SYSCTL_MEMTIM0_EWS_S    16
N#define SYSCTL_MEMTIM0_FWS_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DSMEMTIM0
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DSMEMTIM0_DSEBCHT_M                                            \
N                                0x03C00000  // Deep Sleep EEPROM Clock High
X#define SYSCTL_DSMEMTIM0_DSEBCHT_M                                                                            0x03C00000  
N                                            // Time
N#define SYSCTL_DSMEMTIM0_DSEBCHT_0_5                                          \
N                                0x00000000  // System clock high
X#define SYSCTL_DSMEMTIM0_DSEBCHT_0_5                                                                          0x00000000  
N#define SYSCTL_DSMEMTIM0_DSEBCHT_1                                            \
N                                0x00400000  // 1 system clock period
X#define SYSCTL_DSMEMTIM0_DSEBCHT_1                                                                            0x00400000  
N#define SYSCTL_DSMEMTIM0_DSEBCHT_1_5                                          \
N                                0x00800000  // 1.5 system clock periods
X#define SYSCTL_DSMEMTIM0_DSEBCHT_1_5                                                                          0x00800000  
N#define SYSCTL_DSMEMTIM0_DSEBCHT_2                                            \
N                                0x00C00000  // 2 system clock periods
X#define SYSCTL_DSMEMTIM0_DSEBCHT_2                                                                            0x00C00000  
N#define SYSCTL_DSMEMTIM0_DSEBCHT_2_5                                          \
N                                0x01000000  // 2.5 system clock periods
X#define SYSCTL_DSMEMTIM0_DSEBCHT_2_5                                                                          0x01000000  
N#define SYSCTL_DSMEMTIM0_DSEBCHT_3                                            \
N                                0x01400000  // 3 system clock periods
X#define SYSCTL_DSMEMTIM0_DSEBCHT_3                                                                            0x01400000  
N#define SYSCTL_DSMEMTIM0_DSEBCHT_3_5                                          \
N                                0x01800000  // 3.5 system clock periods
X#define SYSCTL_DSMEMTIM0_DSEBCHT_3_5                                                                          0x01800000  
N#define SYSCTL_DSMEMTIM0_DSEBCHT_4                                            \
N                                0x01C00000  // 4 system clock periods
X#define SYSCTL_DSMEMTIM0_DSEBCHT_4                                                                            0x01C00000  
N#define SYSCTL_DSMEMTIM0_DSEBCHT_4_5                                          \
N                                0x02000000  // 4.5 system clock periods
X#define SYSCTL_DSMEMTIM0_DSEBCHT_4_5                                                                          0x02000000  
N#define SYSCTL_DSMEMTIM0_DSEBCE 0x00200000  // Deep Sleep EEPROM Bank Clock
N                                            // Edge
N#define SYSCTL_DSMEMTIM0_EBO    0x00100000  // Deep Sleep EEPROM Bank Output
N#define SYSCTL_DSMEMTIM0_EWS_M  0x000F0000  // Deep Sleep EEPROM Wait State
N#define SYSCTL_DSMEMTIM0_DSFBCHT_M                                            \
N                                0x000003C0  // Deep Sleep Flash Bank Clock High
X#define SYSCTL_DSMEMTIM0_DSFBCHT_M                                                                            0x000003C0  
N                                            // Time
N#define SYSCTL_DSMEMTIM0_DSFBCHT_0_5                                          \
N                                0x00000000  // System clock high
X#define SYSCTL_DSMEMTIM0_DSFBCHT_0_5                                                                          0x00000000  
N#define SYSCTL_DSMEMTIM0_DSFBCHT_1                                            \
N                                0x00000040  // 1 system clock period
X#define SYSCTL_DSMEMTIM0_DSFBCHT_1                                                                            0x00000040  
N#define SYSCTL_DSMEMTIM0_DSFBCHT_1_5                                          \
N                                0x00000080  // 1.5 system clock periods
X#define SYSCTL_DSMEMTIM0_DSFBCHT_1_5                                                                          0x00000080  
N#define SYSCTL_DSMEMTIM0_DSFBCHT_2                                            \
N                                0x000000C0  // 2 system clock periods
X#define SYSCTL_DSMEMTIM0_DSFBCHT_2                                                                            0x000000C0  
N#define SYSCTL_DSMEMTIM0_DSFBCHT_2_5                                          \
N                                0x00000100  // 2.5 system clock periods
X#define SYSCTL_DSMEMTIM0_DSFBCHT_2_5                                                                          0x00000100  
N#define SYSCTL_DSMEMTIM0_DSFBCHT_3                                            \
N                                0x00000140  // 3 system clock periods
X#define SYSCTL_DSMEMTIM0_DSFBCHT_3                                                                            0x00000140  
N#define SYSCTL_DSMEMTIM0_DSFBCHT_3_5                                          \
N                                0x00000180  // 3.5 system clock periods
X#define SYSCTL_DSMEMTIM0_DSFBCHT_3_5                                                                          0x00000180  
N#define SYSCTL_DSMEMTIM0_DSFBCHT_4                                            \
N                                0x000001C0  // 4 system clock periods
X#define SYSCTL_DSMEMTIM0_DSFBCHT_4                                                                            0x000001C0  
N#define SYSCTL_DSMEMTIM0_DSFBCHT_4_5                                          \
N                                0x00000200  // 4.5 system clock periods
X#define SYSCTL_DSMEMTIM0_DSFBCHT_4_5                                                                          0x00000200  
N#define SYSCTL_DSMEMTIM0_DSFBCE 0x00000020  // Deep Sleep Flash Bank Clock Edge
N#define SYSCTL_DSMEMTIM0_DSFBO  0x00000010  // Deep Sleep Flash Bank Output
N#define SYSCTL_DSMEMTIM0_DSFWS_M                                              \
N                                0x0000000F  // Deep Sleep Flash Wait State
X#define SYSCTL_DSMEMTIM0_DSFWS_M                                                                              0x0000000F  
N#define SYSCTL_DSMEMTIM0_EWS_S  16
N#define SYSCTL_DSMEMTIM0_DSFWS_S                                              \
N                                0
X#define SYSCTL_DSMEMTIM0_DSFWS_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_ALTCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_ALTCLKCFG_ALTCLK_M                                             \
N                                0x0000000F  // Alternate Clock Source
X#define SYSCTL_ALTCLKCFG_ALTCLK_M                                                                             0x0000000F  
N#define SYSCTL_ALTCLKCFG_ALTCLK_PIOSC                                         \
N                                0x00000000  // PIOSC
X#define SYSCTL_ALTCLKCFG_ALTCLK_PIOSC                                                                         0x00000000  
N#define SYSCTL_ALTCLKCFG_ALTCLK_PIOSC48                                       \
N                                0x00000001  // PIOSC48
X#define SYSCTL_ALTCLKCFG_ALTCLK_PIOSC48                                                                       0x00000001  
N#define SYSCTL_ALTCLKCFG_ALTCLK_LFIOSC                                        \
N                                0x00000002  // LFIOSC
X#define SYSCTL_ALTCLKCFG_ALTCLK_LFIOSC                                                                        0x00000002  
N#define SYSCTL_ALTCLKCFG_ALTCLK_RTCOSC                                        \
N                                0x00000003  // Hibernation Module Real-time
X#define SYSCTL_ALTCLKCFG_ALTCLK_RTCOSC                                                                        0x00000003  
N                                            // clock output (RTCOSC)
N#define SYSCTL_ALTCLKCFG_ALTCLK_HIBRTC                                        \
N                                0x00000004  // Hibernation Module RTCOSC
X#define SYSCTL_ALTCLKCFG_ALTCLK_HIBRTC                                                                        0x00000004  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DSCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DSCLKCFG_PIOSCPD 0x80000000  // PIOSC Power Down
N#define SYSCTL_DSCLKCFG_MOSCDPD 0x40000000  // MOSC Disable Power Down
N#define SYSCTL_DSCLKCFG_DSOSCSRC_M                                            \
N                                0x00F00000  // Deep Sleep
X#define SYSCTL_DSCLKCFG_DSOSCSRC_M                                                                            0x00F00000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_PIOSC                                        \
N                                0x00000000  // PIOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_PIOSC                                                                        0x00000000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_LFIOSC                                       \
N                                0x00200000  // LFIOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_LFIOSC                                                                       0x00200000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_MOSC                                         \
N                                0x00300000  // MOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_MOSC                                                                         0x00300000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_RTC                                          \
N                                0x00400000  // RTC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_RTC                                                                          0x00400000  
N#define SYSCTL_DSCLKCFG_DSSYSDIV_M                                            \
N                                0x000003FF  // Deep Sleep Clock Divisor
X#define SYSCTL_DSCLKCFG_DSSYSDIV_M                                                                            0x000003FF  
N#define SYSCTL_DSCLKCFG_DSSYSDIV_S                                            \
N                                0
X#define SYSCTL_DSCLKCFG_DSSYSDIV_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DIVSCLK register.
N//
N//*****************************************************************************
N#define SYSCTL_DIVSCLK_EN       0x80000000  // Enable
N#define SYSCTL_DIVSCLK_SRC_M    0x00030000  // Clock Source
N#define SYSCTL_DIVSCLK_SRC_SYSCLK                                             \
N                                0x00000000  // System Clock
X#define SYSCTL_DIVSCLK_SRC_SYSCLK                                                                             0x00000000  
N#define SYSCTL_DIVSCLK_SRC_PIOSC                                              \
N                                0x00010000  // PIOSC
X#define SYSCTL_DIVSCLK_SRC_PIOSC                                                                              0x00010000  
N#define SYSCTL_DIVSCLK_SRC_MOSC 0x00020000  // MOSC
N#define SYSCTL_DIVSCLK_DIV_M    0x000000FF  // Divisor Value
N#define SYSCTL_DIVSCLK_DIV_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SYSPROP register.
N//
N//*****************************************************************************
N#define SYSCTL_SYSPROP_FPU      0x00000001  // FPU Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PIOSCCAL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSCCAL_UTEN    0x80000000  // Use User Trim Value
N#define SYSCTL_PIOSCCAL_CAL     0x00000200  // Start Calibration
N#define SYSCTL_PIOSCCAL_UPDATE  0x00000100  // Update Trim
N#define SYSCTL_PIOSCCAL_UT_M    0x0000007F  // User Trim Value
N#define SYSCTL_PIOSCCAL_UT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PIOSCSTAT
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSCSTAT_DT_M   0x007F0000  // Default Trim Value
N#define SYSCTL_PIOSCSTAT_CR_M   0x00000300  // Calibration Result
N#define SYSCTL_PIOSCSTAT_CRNONE 0x00000000  // Calibration has not been
N                                            // attempted
N#define SYSCTL_PIOSCSTAT_CRPASS 0x00000100  // The last calibration operation
N                                            // completed to meet 1% accuracy
N#define SYSCTL_PIOSCSTAT_CRFAIL 0x00000200  // The last calibration operation
N                                            // failed to meet 1% accuracy
N#define SYSCTL_PIOSCSTAT_CT_M   0x0000007F  // Calibration Trim Value
N#define SYSCTL_PIOSCSTAT_DT_S   16
N#define SYSCTL_PIOSCSTAT_CT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PLLFREQ0
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PLLFREQ0_PLLPWR  0x00800000  // PLL Power
N#define SYSCTL_PLLFREQ0_MFRAC_M 0x000FFC00  // PLL M Fractional Value
N#define SYSCTL_PLLFREQ0_MINT_M  0x000003FF  // PLL M Integer Value
N#define SYSCTL_PLLFREQ0_MFRAC_S 10
N#define SYSCTL_PLLFREQ0_MINT_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PLLFREQ1
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PLLFREQ1_Q_M     0x00001F00  // PLL Q Value
N#define SYSCTL_PLLFREQ1_N_M     0x0000001F  // PLL N Value
N#define SYSCTL_PLLFREQ1_Q_S     8
N#define SYSCTL_PLLFREQ1_N_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PLLSTAT register.
N//
N//*****************************************************************************
N#define SYSCTL_PLLSTAT_LOCK     0x00000001  // PLL Lock
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SLPPWRCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SLPPWRCFG_FLASHPM_M                                            \
N                                0x00000030  // Flash Power Modes
X#define SYSCTL_SLPPWRCFG_FLASHPM_M                                                                            0x00000030  
N#define SYSCTL_SLPPWRCFG_FLASHPM_NRM                                          \
N                                0x00000000  // Active Mode
X#define SYSCTL_SLPPWRCFG_FLASHPM_NRM                                                                          0x00000000  
N#define SYSCTL_SLPPWRCFG_FLASHPM_SLP                                          \
N                                0x00000020  // Low Power Mode
X#define SYSCTL_SLPPWRCFG_FLASHPM_SLP                                                                          0x00000020  
N#define SYSCTL_SLPPWRCFG_SRAMPM_M                                             \
N                                0x00000003  // SRAM Power Modes
X#define SYSCTL_SLPPWRCFG_SRAMPM_M                                                                             0x00000003  
N#define SYSCTL_SLPPWRCFG_SRAMPM_NRM                                           \
N                                0x00000000  // Active Mode
X#define SYSCTL_SLPPWRCFG_SRAMPM_NRM                                                                           0x00000000  
N#define SYSCTL_SLPPWRCFG_SRAMPM_SBY                                           \
N                                0x00000001  // Standby Mode
X#define SYSCTL_SLPPWRCFG_SRAMPM_SBY                                                                           0x00000001  
N#define SYSCTL_SLPPWRCFG_SRAMPM_LP                                            \
N                                0x00000003  // Low Power Mode
X#define SYSCTL_SLPPWRCFG_SRAMPM_LP                                                                            0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DSLPPWRCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DSLPPWRCFG_LDOSM 0x00000200  // LDO Sleep Mode
N#define SYSCTL_DSLPPWRCFG_TSPD  0x00000100  // Temperature Sense Power Down
N#define SYSCTL_DSLPPWRCFG_FLASHPM_M                                           \
N                                0x00000030  // Flash Power Modes
X#define SYSCTL_DSLPPWRCFG_FLASHPM_M                                                                           0x00000030  
N#define SYSCTL_DSLPPWRCFG_FLASHPM_NRM                                         \
N                                0x00000000  // Active Mode
X#define SYSCTL_DSLPPWRCFG_FLASHPM_NRM                                                                         0x00000000  
N#define SYSCTL_DSLPPWRCFG_FLASHPM_SLP                                         \
N                                0x00000020  // Low Power Mode
X#define SYSCTL_DSLPPWRCFG_FLASHPM_SLP                                                                         0x00000020  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_M                                            \
N                                0x00000003  // SRAM Power Modes
X#define SYSCTL_DSLPPWRCFG_SRAMPM_M                                                                            0x00000003  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_NRM                                          \
N                                0x00000000  // Active Mode
X#define SYSCTL_DSLPPWRCFG_SRAMPM_NRM                                                                          0x00000000  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_SBY                                          \
N                                0x00000001  // Standby Mode
X#define SYSCTL_DSLPPWRCFG_SRAMPM_SBY                                                                          0x00000001  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_LP                                           \
N                                0x00000003  // Low Power Mode
X#define SYSCTL_DSLPPWRCFG_SRAMPM_LP                                                                           0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_NVMSTAT register.
N//
N//*****************************************************************************
N#define SYSCTL_NVMSTAT_FWB      0x00000001  // 32 Word Flash Write Buffer
N                                            // Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_LDODPCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_LDODPCTL_VADJEN  0x80000000  // Voltage Adjust Enable
N#define SYSCTL_LDODPCTL_VLDO_M  0x000000FF  // LDO Output Voltage
N#define SYSCTL_LDODPCTL_VLDO_0_90V                                            \
N                                0x00000012  // 0.90 V
X#define SYSCTL_LDODPCTL_VLDO_0_90V                                                                            0x00000012  
N#define SYSCTL_LDODPCTL_VLDO_0_95V                                            \
N                                0x00000013  // 0.95 V
X#define SYSCTL_LDODPCTL_VLDO_0_95V                                                                            0x00000013  
N#define SYSCTL_LDODPCTL_VLDO_1_00V                                            \
N                                0x00000014  // 1.00 V
X#define SYSCTL_LDODPCTL_VLDO_1_00V                                                                            0x00000014  
N#define SYSCTL_LDODPCTL_VLDO_1_05V                                            \
N                                0x00000015  // 1.05 V
X#define SYSCTL_LDODPCTL_VLDO_1_05V                                                                            0x00000015  
N#define SYSCTL_LDODPCTL_VLDO_1_10V                                            \
N                                0x00000016  // 1.10 V
X#define SYSCTL_LDODPCTL_VLDO_1_10V                                                                            0x00000016  
N#define SYSCTL_LDODPCTL_VLDO_1_15V                                            \
N                                0x00000017  // 1.15 V
X#define SYSCTL_LDODPCTL_VLDO_1_15V                                                                            0x00000017  
N#define SYSCTL_LDODPCTL_VLDO_1_20V                                            \
N                                0x00000018  // 1.20 V
X#define SYSCTL_LDODPCTL_VLDO_1_20V                                                                            0x00000018  
N#define SYSCTL_LDODPCTL_VLDO_1_25V                                            \
N                                0x00000019  // 1.25 V
X#define SYSCTL_LDODPCTL_VLDO_1_25V                                                                            0x00000019  
N#define SYSCTL_LDODPCTL_VLDO_1_30V                                            \
N                                0x0000001A  // 1.30 V
X#define SYSCTL_LDODPCTL_VLDO_1_30V                                                                            0x0000001A  
N#define SYSCTL_LDODPCTL_VLDO_1_35V                                            \
N                                0x0000001B  // 1.35 V
X#define SYSCTL_LDODPCTL_VLDO_1_35V                                                                            0x0000001B  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RESBEHAVCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RESBEHAVCTL_WDOG1_M                                            \
N                                0x000000C0  // Defines operation of Watchdog 1
X#define SYSCTL_RESBEHAVCTL_WDOG1_M                                                                            0x000000C0  
N                                            // Reset
N#define SYSCTL_RESBEHAVCTL_WDOG1_SYSRST                                       \
N                                0x00000080  // Watchdog 1 issues system reset.
X#define SYSCTL_RESBEHAVCTL_WDOG1_SYSRST                                                                       0x00000080  
N                                            // Application starts within 10usec
N#define SYSCTL_RESBEHAVCTL_WDOG1_POR                                          \
N                                0x000000C0  // Watchdog 1 issues full POR
X#define SYSCTL_RESBEHAVCTL_WDOG1_POR                                                                          0x000000C0  
N                                            // sequence. Application starts <
N                                            // 500us after deassertion
N                                            // (Default)
N#define SYSCTL_RESBEHAVCTL_WDOG0_M                                            \
N                                0x00000030  // Defines operation of Watchdog 0
X#define SYSCTL_RESBEHAVCTL_WDOG0_M                                                                            0x00000030  
N                                            // Reset
N#define SYSCTL_RESBEHAVCTL_WDOG0_SYSRST                                       \
N                                0x00000020  // Watchdog 0 issues system reset.
X#define SYSCTL_RESBEHAVCTL_WDOG0_SYSRST                                                                       0x00000020  
N                                            // Application starts within 10usec
N#define SYSCTL_RESBEHAVCTL_WDOG0_POR                                          \
N                                0x00000030  // Watchdog 0 issues full POR
X#define SYSCTL_RESBEHAVCTL_WDOG0_POR                                                                          0x00000030  
N                                            // sequence. Application starts <
N                                            // 500us after deassertion
N                                            // (Default)
N#define SYSCTL_RESBEHAVCTL_BOR_M                                              \
N                                0x0000000C  // Defines operation of BOR when
X#define SYSCTL_RESBEHAVCTL_BOR_M                                                                              0x0000000C  
N                                            // USER has defined the BOR
N                                            // operation to be a reset
N#define SYSCTL_RESBEHAVCTL_BOR_SYSRST                                         \
N                                0x00000008  // Brown Out Reset issues system
X#define SYSCTL_RESBEHAVCTL_BOR_SYSRST                                                                         0x00000008  
N                                            // reset. Application starts within
N                                            // 10usec
N#define SYSCTL_RESBEHAVCTL_BOR_POR                                            \
N                                0x0000000C  // Brown Out Reset issues full POR
X#define SYSCTL_RESBEHAVCTL_BOR_POR                                                                            0x0000000C  
N                                            // sequence. Application starts <
N                                            // 500us after deassertion
N                                            // (Default)
N#define SYSCTL_RESBEHAVCTL_EXTRES_M                                           \
N                                0x00000003  // External Resetn Pin Operation
X#define SYSCTL_RESBEHAVCTL_EXTRES_M                                                                           0x00000003  
N#define SYSCTL_RESBEHAVCTL_EXTRES_SYSRST                                      \
N                                0x00000002  // External Resetn issues system
X#define SYSCTL_RESBEHAVCTL_EXTRES_SYSRST                                                                      0x00000002  
N                                            // reset. Application starts within
N                                            // 10usec
N#define SYSCTL_RESBEHAVCTL_EXTRES_POR                                         \
N                                0x00000003  // External Resetn issues full POR
X#define SYSCTL_RESBEHAVCTL_EXTRES_POR                                                                         0x00000003  
N                                            // sequence. Application starts <
N                                            // 500us after deassertion
N                                            // (Default) Application starts <
N                                            // 500us after deassertion
N                                            // (Default)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_HSSR register.
N//
N//*****************************************************************************
N#define SYSCTL_HSSR_KEY_M       0xFF000000  // Write Key
N#define SYSCTL_HSSR_CDOFF_M     0x00FFFFFF  // Command Descriptor Pointer
N#define SYSCTL_HSSR_KEY_S       24
N#define SYSCTL_HSSR_CDOFF_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_USBPDS register.
N//
N//*****************************************************************************
N#define SYSCTL_USBPDS_MEMSTAT_M 0x0000000C  // Memory Array Power Status
N#define SYSCTL_USBPDS_MEMSTAT_OFF                                             \
N                                0x00000000  // Array OFF
X#define SYSCTL_USBPDS_MEMSTAT_OFF                                                                             0x00000000  
N#define SYSCTL_USBPDS_MEMSTAT_RETAIN                                          \
N                                0x00000004  // SRAM Retention
X#define SYSCTL_USBPDS_MEMSTAT_RETAIN                                                                          0x00000004  
N#define SYSCTL_USBPDS_MEMSTAT_ON                                              \
N                                0x0000000C  // Array On
X#define SYSCTL_USBPDS_MEMSTAT_ON                                                                              0x0000000C  
N#define SYSCTL_USBPDS_PWRSTAT_M 0x00000003  // Power Domain Status
N#define SYSCTL_USBPDS_PWRSTAT_OFF                                             \
N                                0x00000000  // OFF
X#define SYSCTL_USBPDS_PWRSTAT_OFF                                                                             0x00000000  
N#define SYSCTL_USBPDS_PWRSTAT_ON                                              \
N                                0x00000003  // ON
X#define SYSCTL_USBPDS_PWRSTAT_ON                                                                              0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_USBMPC register.
N//
N//*****************************************************************************
N#define SYSCTL_USBMPC_PWRCTL_M  0x00000003  // Memory Array Power Control
N#define SYSCTL_USBMPC_PWRCTL_OFF                                              \
N                                0x00000000  // Array OFF
X#define SYSCTL_USBMPC_PWRCTL_OFF                                                                              0x00000000  
N#define SYSCTL_USBMPC_PWRCTL_RETAIN                                           \
N                                0x00000001  // SRAM Retention
X#define SYSCTL_USBMPC_PWRCTL_RETAIN                                                                           0x00000001  
N#define SYSCTL_USBMPC_PWRCTL_ON 0x00000003  // Array On
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_EMACPDS register.
N//
N//*****************************************************************************
N#define SYSCTL_EMACPDS_MEMSTAT_M                                              \
N                                0x0000000C  // Memory Array Power Status
X#define SYSCTL_EMACPDS_MEMSTAT_M                                                                              0x0000000C  
N#define SYSCTL_EMACPDS_MEMSTAT_OFF                                            \
N                                0x00000000  // Array OFF
X#define SYSCTL_EMACPDS_MEMSTAT_OFF                                                                            0x00000000  
N#define SYSCTL_EMACPDS_MEMSTAT_ON                                             \
N                                0x0000000C  // Array On
X#define SYSCTL_EMACPDS_MEMSTAT_ON                                                                             0x0000000C  
N#define SYSCTL_EMACPDS_PWRSTAT_M                                              \
N                                0x00000003  // Power Domain Status
X#define SYSCTL_EMACPDS_PWRSTAT_M                                                                              0x00000003  
N#define SYSCTL_EMACPDS_PWRSTAT_OFF                                            \
N                                0x00000000  // OFF
X#define SYSCTL_EMACPDS_PWRSTAT_OFF                                                                            0x00000000  
N#define SYSCTL_EMACPDS_PWRSTAT_ON                                             \
N                                0x00000003  // ON
X#define SYSCTL_EMACPDS_PWRSTAT_ON                                                                             0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_EMACMPC register.
N//
N//*****************************************************************************
N#define SYSCTL_EMACMPC_PWRCTL_M 0x00000003  // Memory Array Power Control
N#define SYSCTL_EMACMPC_PWRCTL_OFF                                             \
N                                0x00000000  // Array OFF
X#define SYSCTL_EMACMPC_PWRCTL_OFF                                                                             0x00000000  
N#define SYSCTL_EMACMPC_PWRCTL_ON                                              \
N                                0x00000003  // Array On
X#define SYSCTL_EMACMPC_PWRCTL_ON                                                                              0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPWD register.
N//
N//*****************************************************************************
N#define SYSCTL_PPWD_P1          0x00000002  // Watchdog Timer 1 Present
N#define SYSCTL_PPWD_P0          0x00000001  // Watchdog Timer 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_PPTIMER_P7       0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Present
N#define SYSCTL_PPTIMER_P6       0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Present
N#define SYSCTL_PPTIMER_P5       0x00000020  // Timer 5 Present
N#define SYSCTL_PPTIMER_P4       0x00000010  // Timer 4 Present
N#define SYSCTL_PPTIMER_P3       0x00000008  // Timer 3 Present
N#define SYSCTL_PPTIMER_P2       0x00000004  // Timer 2 Present
N#define SYSCTL_PPTIMER_P1       0x00000002  // Timer 1 Present
N#define SYSCTL_PPTIMER_P0       0x00000001  // Timer 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_PPGPIO_P14       0x00004000  // GPIO Port Q Present
N#define SYSCTL_PPGPIO_P13       0x00002000  // GPIO Port P Present
N#define SYSCTL_PPGPIO_P12       0x00001000  // GPIO Port N Present
N#define SYSCTL_PPGPIO_P11       0x00000800  // GPIO Port M Present
N#define SYSCTL_PPGPIO_P10       0x00000400  // GPIO Port L Present
N#define SYSCTL_PPGPIO_P9        0x00000200  // GPIO Port K Present
N#define SYSCTL_PPGPIO_P8        0x00000100  // GPIO Port J Present
N#define SYSCTL_PPGPIO_P7        0x00000080  // GPIO Port H Present
N#define SYSCTL_PPGPIO_P6        0x00000040  // GPIO Port G Present
N#define SYSCTL_PPGPIO_P5        0x00000020  // GPIO Port F Present
N#define SYSCTL_PPGPIO_P4        0x00000010  // GPIO Port E Present
N#define SYSCTL_PPGPIO_P3        0x00000008  // GPIO Port D Present
N#define SYSCTL_PPGPIO_P2        0x00000004  // GPIO Port C Present
N#define SYSCTL_PPGPIO_P1        0x00000002  // GPIO Port B Present
N#define SYSCTL_PPGPIO_P0        0x00000001  // GPIO Port A Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_PPDMA_P0         0x00000001  // uDMA Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEPI_P0         0x00000001  // EPI Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_PPHIB_P0         0x00000001  // Hibernation Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPUART register.
N//
N//*****************************************************************************
N#define SYSCTL_PPUART_P7        0x00000080  // UART Module 7 Present
N#define SYSCTL_PPUART_P6        0x00000040  // UART Module 6 Present
N#define SYSCTL_PPUART_P5        0x00000020  // UART Module 5 Present
N#define SYSCTL_PPUART_P4        0x00000010  // UART Module 4 Present
N#define SYSCTL_PPUART_P3        0x00000008  // UART Module 3 Present
N#define SYSCTL_PPUART_P2        0x00000004  // UART Module 2 Present
N#define SYSCTL_PPUART_P1        0x00000002  // UART Module 1 Present
N#define SYSCTL_PPUART_P0        0x00000001  // UART Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPSSI_P3         0x00000008  // SSI Module 3 Present
N#define SYSCTL_PPSSI_P2         0x00000004  // SSI Module 2 Present
N#define SYSCTL_PPSSI_P1         0x00000002  // SSI Module 1 Present
N#define SYSCTL_PPSSI_P0         0x00000001  // SSI Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_PPI2C_P9         0x00000200  // I2C Module 9 Present
N#define SYSCTL_PPI2C_P8         0x00000100  // I2C Module 8 Present
N#define SYSCTL_PPI2C_P7         0x00000080  // I2C Module 7 Present
N#define SYSCTL_PPI2C_P6         0x00000040  // I2C Module 6 Present
N#define SYSCTL_PPI2C_P5         0x00000020  // I2C Module 5 Present
N#define SYSCTL_PPI2C_P4         0x00000010  // I2C Module 4 Present
N#define SYSCTL_PPI2C_P3         0x00000008  // I2C Module 3 Present
N#define SYSCTL_PPI2C_P2         0x00000004  // I2C Module 2 Present
N#define SYSCTL_PPI2C_P1         0x00000002  // I2C Module 1 Present
N#define SYSCTL_PPI2C_P0         0x00000001  // I2C Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_PPUSB_P0         0x00000001  // USB Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEPHY_P0        0x00000001  // Ethernet PHY Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PPCAN_P1         0x00000002  // CAN Module 1 Present
N#define SYSCTL_PPCAN_P0         0x00000001  // CAN Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPADC register.
N//
N//*****************************************************************************
N#define SYSCTL_PPADC_P1         0x00000002  // ADC Module 1 Present
N#define SYSCTL_PPADC_P0         0x00000001  // ADC Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_PPACMP_P0        0x00000001  // Analog Comparator Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_PPPWM_P0         0x00000001  // PWM Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPQEI_P0         0x00000001  // QEI Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPLPC register.
N//
N//*****************************************************************************
N#define SYSCTL_PPLPC_P0         0x00000001  // LPC Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPPECI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPPECI_P0        0x00000001  // PECI Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPFAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PPFAN_P0         0x00000001  // FAN Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEEPROM_P0      0x00000001  // EEPROM Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PPWTIMER_P0      0x00000001  // Wide Timer 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPRTS register.
N//
N//*****************************************************************************
N#define SYSCTL_PPRTS_P0         0x00000001  // RTS Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_PPCCM_P0         0x00000001  // CRC and Cryptographic Modules
N                                            // Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_PPLCD_P0         0x00000001  // LCD Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPOWIRE register.
N//
N//*****************************************************************************
N#define SYSCTL_PPOWIRE_P0       0x00000001  // One-Wire Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEMAC_P0        0x00000001  // Ethernet Controller Module
N                                            // Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPHIM register.
N//
N//*****************************************************************************
N#define SYSCTL_PPHIM_P0         0x00000001  // HIM Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRWD register.
N//
N//*****************************************************************************
N#define SYSCTL_SRWD_R1          0x00000002  // Watchdog Timer 1 Software Reset
N#define SYSCTL_SRWD_R0          0x00000001  // Watchdog Timer 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_SRTIMER_R7       0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Software Reset
N#define SYSCTL_SRTIMER_R6       0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Software Reset
N#define SYSCTL_SRTIMER_R5       0x00000020  // Timer 5 Software Reset
N#define SYSCTL_SRTIMER_R4       0x00000010  // Timer 4 Software Reset
N#define SYSCTL_SRTIMER_R3       0x00000008  // Timer 3 Software Reset
N#define SYSCTL_SRTIMER_R2       0x00000004  // Timer 2 Software Reset
N#define SYSCTL_SRTIMER_R1       0x00000002  // Timer 1 Software Reset
N#define SYSCTL_SRTIMER_R0       0x00000001  // Timer 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_SRGPIO_R14       0x00004000  // GPIO Port Q Software Reset
N#define SYSCTL_SRGPIO_R13       0x00002000  // GPIO Port P Software Reset
N#define SYSCTL_SRGPIO_R12       0x00001000  // GPIO Port N Software Reset
N#define SYSCTL_SRGPIO_R11       0x00000800  // GPIO Port M Software Reset
N#define SYSCTL_SRGPIO_R10       0x00000400  // GPIO Port L Software Reset
N#define SYSCTL_SRGPIO_R9        0x00000200  // GPIO Port K Software Reset
N#define SYSCTL_SRGPIO_R8        0x00000100  // GPIO Port J Software Reset
N#define SYSCTL_SRGPIO_R7        0x00000080  // GPIO Port H Software Reset
N#define SYSCTL_SRGPIO_R6        0x00000040  // GPIO Port G Software Reset
N#define SYSCTL_SRGPIO_R5        0x00000020  // GPIO Port F Software Reset
N#define SYSCTL_SRGPIO_R4        0x00000010  // GPIO Port E Software Reset
N#define SYSCTL_SRGPIO_R3        0x00000008  // GPIO Port D Software Reset
N#define SYSCTL_SRGPIO_R2        0x00000004  // GPIO Port C Software Reset
N#define SYSCTL_SRGPIO_R1        0x00000002  // GPIO Port B Software Reset
N#define SYSCTL_SRGPIO_R0        0x00000001  // GPIO Port A Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_SRDMA_R0         0x00000001  // uDMA Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREPI register.
N//
N//*****************************************************************************
N#define SYSCTL_SREPI_R0         0x00000001  // EPI Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_SRHIB_R0         0x00000001  // Hibernation Module Software
N                                            // Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRUART register.
N//
N//*****************************************************************************
N#define SYSCTL_SRUART_R7        0x00000080  // UART Module 7 Software Reset
N#define SYSCTL_SRUART_R6        0x00000040  // UART Module 6 Software Reset
N#define SYSCTL_SRUART_R5        0x00000020  // UART Module 5 Software Reset
N#define SYSCTL_SRUART_R4        0x00000010  // UART Module 4 Software Reset
N#define SYSCTL_SRUART_R3        0x00000008  // UART Module 3 Software Reset
N#define SYSCTL_SRUART_R2        0x00000004  // UART Module 2 Software Reset
N#define SYSCTL_SRUART_R1        0x00000002  // UART Module 1 Software Reset
N#define SYSCTL_SRUART_R0        0x00000001  // UART Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_SRSSI_R3         0x00000008  // SSI Module 3 Software Reset
N#define SYSCTL_SRSSI_R2         0x00000004  // SSI Module 2 Software Reset
N#define SYSCTL_SRSSI_R1         0x00000002  // SSI Module 1 Software Reset
N#define SYSCTL_SRSSI_R0         0x00000001  // SSI Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_SRI2C_R9         0x00000200  // I2C Module 9 Software Reset
N#define SYSCTL_SRI2C_R8         0x00000100  // I2C Module 8 Software Reset
N#define SYSCTL_SRI2C_R7         0x00000080  // I2C Module 7 Software Reset
N#define SYSCTL_SRI2C_R6         0x00000040  // I2C Module 6 Software Reset
N#define SYSCTL_SRI2C_R5         0x00000020  // I2C Module 5 Software Reset
N#define SYSCTL_SRI2C_R4         0x00000010  // I2C Module 4 Software Reset
N#define SYSCTL_SRI2C_R3         0x00000008  // I2C Module 3 Software Reset
N#define SYSCTL_SRI2C_R2         0x00000004  // I2C Module 2 Software Reset
N#define SYSCTL_SRI2C_R1         0x00000002  // I2C Module 1 Software Reset
N#define SYSCTL_SRI2C_R0         0x00000001  // I2C Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_SRUSB_R0         0x00000001  // USB Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_SREPHY_R0        0x00000001  // Ethernet PHY Module Software
N                                            // Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCAN_R1         0x00000002  // CAN Module 1 Software Reset
N#define SYSCTL_SRCAN_R0         0x00000001  // CAN Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRADC register.
N//
N//*****************************************************************************
N#define SYSCTL_SRADC_R1         0x00000002  // ADC Module 1 Software Reset
N#define SYSCTL_SRADC_R0         0x00000001  // ADC Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_SRACMP_R0        0x00000001  // Analog Comparator Module 0
N                                            // Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_SRPWM_R0         0x00000001  // PWM Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_SRQEI_R0         0x00000001  // QEI Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SREEPROM_R0      0x00000001  // EEPROM Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCCM_R0         0x00000001  // CRC and Cryptographic Modules
N                                            // Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_SREMAC_R0        0x00000001  // Ethernet Controller MAC Module 0
N                                            // Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCWD_R1        0x00000002  // Watchdog Timer 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCWD_R0        0x00000001  // Watchdog Timer 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCTIMER_R7     0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R6     0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R5     0x00000020  // Timer 5 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCTIMER_R4     0x00000010  // Timer 4 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCTIMER_R3     0x00000008  // Timer 3 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCTIMER_R2     0x00000004  // Timer 2 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCTIMER_R1     0x00000002  // Timer 1 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCTIMER_R0     0x00000001  // Timer 0 Run Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCGPIO
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCGPIO_R14     0x00004000  // GPIO Port Q Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R13     0x00002000  // GPIO Port P Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R12     0x00001000  // GPIO Port N Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R11     0x00000800  // GPIO Port M Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R10     0x00000400  // GPIO Port L Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R9      0x00000200  // GPIO Port K Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R8      0x00000100  // GPIO Port J Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R7      0x00000080  // GPIO Port H Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R6      0x00000040  // GPIO Port G Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R5      0x00000020  // GPIO Port F Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R4      0x00000010  // GPIO Port E Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R3      0x00000008  // GPIO Port D Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R2      0x00000004  // GPIO Port C Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R1      0x00000002  // GPIO Port B Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R0      0x00000001  // GPIO Port A Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCDMA_R0       0x00000001  // uDMA Module Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEPI_R0       0x00000001  // EPI Module Run Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCHIB_R0       0x00000001  // Hibernation Module Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCUART
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCUART_R7      0x00000080  // UART Module 7 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R6      0x00000040  // UART Module 6 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R5      0x00000020  // UART Module 5 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R4      0x00000010  // UART Module 4 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R3      0x00000008  // UART Module 3 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R2      0x00000004  // UART Module 2 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R1      0x00000002  // UART Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R0      0x00000001  // UART Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCSSI_R3       0x00000008  // SSI Module 3 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCSSI_R2       0x00000004  // SSI Module 2 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCSSI_R1       0x00000002  // SSI Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCSSI_R0       0x00000001  // SSI Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCI2C_R9       0x00000200  // I2C Module 9 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R8       0x00000100  // I2C Module 8 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R7       0x00000080  // I2C Module 7 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R6       0x00000040  // I2C Module 6 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R5       0x00000020  // I2C Module 5 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R4       0x00000010  // I2C Module 4 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R3       0x00000008  // I2C Module 3 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R2       0x00000004  // I2C Module 2 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R1       0x00000002  // I2C Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R0       0x00000001  // I2C Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCUSB_R0       0x00000001  // USB Module Run Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEPHY
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEPHY_R0      0x00000001  // Ethernet PHY Module Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCCAN_R1       0x00000002  // CAN Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCCAN_R0       0x00000001  // CAN Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCADC_R1       0x00000002  // ADC Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCADC_R0       0x00000001  // ADC Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCACMP
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCACMP_R0      0x00000001  // Analog Comparator Module 0 Run
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCPWM_R0       0x00000001  // PWM Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCQEI_R0       0x00000001  // QEI Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEEPROM_R0    0x00000001  // EEPROM Module Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCCCM_R0       0x00000001  // CRC and Cryptographic Modules
N                                            // Run Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEMAC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEMAC_R0      0x00000001  // Ethernet MAC Module 0 Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCWD_S1        0x00000002  // Watchdog Timer 1 Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCWD_S0        0x00000001  // Watchdog Timer 0 Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCTIMER_S7     0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S6     0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S5     0x00000020  // Timer 5 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S4     0x00000010  // Timer 4 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S3     0x00000008  // Timer 3 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S2     0x00000004  // Timer 2 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S1     0x00000002  // Timer 1 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S0     0x00000001  // Timer 0 Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCGPIO
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCGPIO_S14     0x00004000  // GPIO Port Q Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S13     0x00002000  // GPIO Port P Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S12     0x00001000  // GPIO Port N Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S11     0x00000800  // GPIO Port M Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S10     0x00000400  // GPIO Port L Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S9      0x00000200  // GPIO Port K Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S8      0x00000100  // GPIO Port J Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S7      0x00000080  // GPIO Port H Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S6      0x00000040  // GPIO Port G Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S5      0x00000020  // GPIO Port F Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S4      0x00000010  // GPIO Port E Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S3      0x00000008  // GPIO Port D Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S2      0x00000004  // GPIO Port C Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S1      0x00000002  // GPIO Port B Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S0      0x00000001  // GPIO Port A Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEPI_S0       0x00000001  // EPI Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCHIB_S0       0x00000001  // Hibernation Module Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCUART
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCUART_S7      0x00000080  // UART Module 7 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S6      0x00000040  // UART Module 6 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S5      0x00000020  // UART Module 5 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S4      0x00000010  // UART Module 4 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S3      0x00000008  // UART Module 3 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S2      0x00000004  // UART Module 2 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S1      0x00000002  // UART Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S0      0x00000001  // UART Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCSSI_S3       0x00000008  // SSI Module 3 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCSSI_S2       0x00000004  // SSI Module 2 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCSSI_S1       0x00000002  // SSI Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCSSI_S0       0x00000001  // SSI Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCI2C_S9       0x00000200  // I2C Module 9 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S8       0x00000100  // I2C Module 8 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S7       0x00000080  // I2C Module 7 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S6       0x00000040  // I2C Module 6 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S5       0x00000020  // I2C Module 5 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S4       0x00000010  // I2C Module 4 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S3       0x00000008  // I2C Module 3 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S2       0x00000004  // I2C Module 2 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S1       0x00000002  // I2C Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S0       0x00000001  // I2C Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCUSB_S0       0x00000001  // USB Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEPHY
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEPHY_S0      0x00000001  // PHY Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCCAN_S1       0x00000002  // CAN Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCCAN_S0       0x00000001  // CAN Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCADC_S1       0x00000002  // ADC Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCADC_S0       0x00000001  // ADC Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCACMP
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCACMP_S0      0x00000001  // Analog Comparator Module 0 Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCPWM_S0       0x00000001  // PWM Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCQEI_S0       0x00000001  // QEI Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEEPROM_S0    0x00000001  // EEPROM Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCCCM_S0       0x00000001  // CRC and Cryptographic Modules
N                                            // Sleep Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEMAC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEMAC_S0      0x00000001  // Ethernet MAC Module 0 Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCWD_D1        0x00000002  // Watchdog Timer 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCWD_D0        0x00000001  // Watchdog Timer 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCTIMER_D7     0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D6     0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D5     0x00000020  // Timer 5 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCTIMER_D4     0x00000010  // Timer 4 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCTIMER_D3     0x00000008  // Timer 3 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCTIMER_D2     0x00000004  // Timer 2 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCTIMER_D1     0x00000002  // Timer 1 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCTIMER_D0     0x00000001  // Timer 0 Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCGPIO
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCGPIO_D14     0x00004000  // GPIO Port Q Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D13     0x00002000  // GPIO Port P Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D12     0x00001000  // GPIO Port N Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D11     0x00000800  // GPIO Port M Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D10     0x00000400  // GPIO Port L Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D9      0x00000200  // GPIO Port K Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D8      0x00000100  // GPIO Port J Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D7      0x00000080  // GPIO Port H Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D6      0x00000040  // GPIO Port G Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D5      0x00000020  // GPIO Port F Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D4      0x00000010  // GPIO Port E Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D3      0x00000008  // GPIO Port D Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D2      0x00000004  // GPIO Port C Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D1      0x00000002  // GPIO Port B Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D0      0x00000001  // GPIO Port A Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEPI_D0       0x00000001  // EPI Module Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCHIB_D0       0x00000001  // Hibernation Module Deep-Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCUART
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCUART_D7      0x00000080  // UART Module 7 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D6      0x00000040  // UART Module 6 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D5      0x00000020  // UART Module 5 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D4      0x00000010  // UART Module 4 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D3      0x00000008  // UART Module 3 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D2      0x00000004  // UART Module 2 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D1      0x00000002  // UART Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D0      0x00000001  // UART Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCSSI_D3       0x00000008  // SSI Module 3 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCSSI_D2       0x00000004  // SSI Module 2 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCSSI_D1       0x00000002  // SSI Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCSSI_D0       0x00000001  // SSI Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCI2C_D9       0x00000200  // I2C Module 9 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D8       0x00000100  // I2C Module 8 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D7       0x00000080  // I2C Module 7 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D6       0x00000040  // I2C Module 6 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D5       0x00000020  // I2C Module 5 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D4       0x00000010  // I2C Module 4 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D3       0x00000008  // I2C Module 3 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D2       0x00000004  // I2C Module 2 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D1       0x00000002  // I2C Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D0       0x00000001  // I2C Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCUSB_D0       0x00000001  // USB Module Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEPHY
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEPHY_D0      0x00000001  // PHY Module Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCCAN_D1       0x00000002  // CAN Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCCAN_D0       0x00000001  // CAN Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCADC_D1       0x00000002  // ADC Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCADC_D0       0x00000001  // ADC Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCACMP
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCACMP_D0      0x00000001  // Analog Comparator Module 0
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCPWM_D0       0x00000001  // PWM Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCQEI_D0       0x00000001  // QEI Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEEPROM_D0    0x00000001  // EEPROM Module Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCCCM_D0       0x00000001  // CRC and Cryptographic Modules
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEMAC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEMAC_D0      0x00000001  // Ethernet MAC Module 0 Deep-Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_PCWD_P1          0x00000002  // Watchdog Timer 1 Power Control
N#define SYSCTL_PCWD_P0          0x00000001  // Watchdog Timer 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_PCTIMER_P7       0x00000080  // General-Purpose Timer 7 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P6       0x00000040  // General-Purpose Timer 6 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P5       0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Power Control
N#define SYSCTL_PCTIMER_P4       0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Power Control
N#define SYSCTL_PCTIMER_P3       0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Power Control
N#define SYSCTL_PCTIMER_P2       0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Power Control
N#define SYSCTL_PCTIMER_P1       0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Power Control
N#define SYSCTL_PCTIMER_P0       0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_PCGPIO_P14       0x00004000  // GPIO Port Q Power Control
N#define SYSCTL_PCGPIO_P13       0x00002000  // GPIO Port P Power Control
N#define SYSCTL_PCGPIO_P12       0x00001000  // GPIO Port N Power Control
N#define SYSCTL_PCGPIO_P11       0x00000800  // GPIO Port M Power Control
N#define SYSCTL_PCGPIO_P10       0x00000400  // GPIO Port L Power Control
N#define SYSCTL_PCGPIO_P9        0x00000200  // GPIO Port K Power Control
N#define SYSCTL_PCGPIO_P8        0x00000100  // GPIO Port J Power Control
N#define SYSCTL_PCGPIO_P7        0x00000080  // GPIO Port H Power Control
N#define SYSCTL_PCGPIO_P6        0x00000040  // GPIO Port G Power Control
N#define SYSCTL_PCGPIO_P5        0x00000020  // GPIO Port F Power Control
N#define SYSCTL_PCGPIO_P4        0x00000010  // GPIO Port E Power Control
N#define SYSCTL_PCGPIO_P3        0x00000008  // GPIO Port D Power Control
N#define SYSCTL_PCGPIO_P2        0x00000004  // GPIO Port C Power Control
N#define SYSCTL_PCGPIO_P1        0x00000002  // GPIO Port B Power Control
N#define SYSCTL_PCGPIO_P0        0x00000001  // GPIO Port A Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_PCDMA_P0         0x00000001  // uDMA Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEPI_P0         0x00000001  // EPI Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_PCHIB_P0         0x00000001  // Hibernation Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCUART register.
N//
N//*****************************************************************************
N#define SYSCTL_PCUART_P7        0x00000080  // UART Module 7 Power Control
N#define SYSCTL_PCUART_P6        0x00000040  // UART Module 6 Power Control
N#define SYSCTL_PCUART_P5        0x00000020  // UART Module 5 Power Control
N#define SYSCTL_PCUART_P4        0x00000010  // UART Module 4 Power Control
N#define SYSCTL_PCUART_P3        0x00000008  // UART Module 3 Power Control
N#define SYSCTL_PCUART_P2        0x00000004  // UART Module 2 Power Control
N#define SYSCTL_PCUART_P1        0x00000002  // UART Module 1 Power Control
N#define SYSCTL_PCUART_P0        0x00000001  // UART Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_PCSSI_P3         0x00000008  // SSI Module 3 Power Control
N#define SYSCTL_PCSSI_P2         0x00000004  // SSI Module 2 Power Control
N#define SYSCTL_PCSSI_P1         0x00000002  // SSI Module 1 Power Control
N#define SYSCTL_PCSSI_P0         0x00000001  // SSI Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_PCI2C_P9         0x00000200  // I2C Module 9 Power Control
N#define SYSCTL_PCI2C_P8         0x00000100  // I2C Module 8 Power Control
N#define SYSCTL_PCI2C_P7         0x00000080  // I2C Module 7 Power Control
N#define SYSCTL_PCI2C_P6         0x00000040  // I2C Module 6 Power Control
N#define SYSCTL_PCI2C_P5         0x00000020  // I2C Module 5 Power Control
N#define SYSCTL_PCI2C_P4         0x00000010  // I2C Module 4 Power Control
N#define SYSCTL_PCI2C_P3         0x00000008  // I2C Module 3 Power Control
N#define SYSCTL_PCI2C_P2         0x00000004  // I2C Module 2 Power Control
N#define SYSCTL_PCI2C_P1         0x00000002  // I2C Module 1 Power Control
N#define SYSCTL_PCI2C_P0         0x00000001  // I2C Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_PCUSB_P0         0x00000001  // USB Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEPHY_P0        0x00000001  // Ethernet PHY Module Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PCCAN_P1         0x00000002  // CAN Module 1 Power Control
N#define SYSCTL_PCCAN_P0         0x00000001  // CAN Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_PCADC_P1         0x00000002  // ADC Module 1 Power Control
N#define SYSCTL_PCADC_P0         0x00000001  // ADC Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_PCACMP_P0        0x00000001  // Analog Comparator Module 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_PCPWM_P0         0x00000001  // PWM Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_PCQEI_P0         0x00000001  // QEI Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEEPROM_P0      0x00000001  // EEPROM Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_PCCCM_P0         0x00000001  // CRC and Cryptographic Modules
N                                            // Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEMAC_P0        0x00000001  // Ethernet MAC Module 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRWD register.
N//
N//*****************************************************************************
N#define SYSCTL_PRWD_R1          0x00000002  // Watchdog Timer 1 Peripheral
N                                            // Ready
N#define SYSCTL_PRWD_R0          0x00000001  // Watchdog Timer 0 Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_PRTIMER_R7       0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Peripheral Ready
N#define SYSCTL_PRTIMER_R6       0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Peripheral Ready
N#define SYSCTL_PRTIMER_R5       0x00000020  // Timer 5 Peripheral Ready
N#define SYSCTL_PRTIMER_R4       0x00000010  // Timer 4 Peripheral Ready
N#define SYSCTL_PRTIMER_R3       0x00000008  // Timer 3 Peripheral Ready
N#define SYSCTL_PRTIMER_R2       0x00000004  // Timer 2 Peripheral Ready
N#define SYSCTL_PRTIMER_R1       0x00000002  // Timer 1 Peripheral Ready
N#define SYSCTL_PRTIMER_R0       0x00000001  // Timer 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_PRGPIO_R14       0x00004000  // GPIO Port Q Peripheral Ready
N#define SYSCTL_PRGPIO_R13       0x00002000  // GPIO Port P Peripheral Ready
N#define SYSCTL_PRGPIO_R12       0x00001000  // GPIO Port N Peripheral Ready
N#define SYSCTL_PRGPIO_R11       0x00000800  // GPIO Port M Peripheral Ready
N#define SYSCTL_PRGPIO_R10       0x00000400  // GPIO Port L Peripheral Ready
N#define SYSCTL_PRGPIO_R9        0x00000200  // GPIO Port K Peripheral Ready
N#define SYSCTL_PRGPIO_R8        0x00000100  // GPIO Port J Peripheral Ready
N#define SYSCTL_PRGPIO_R7        0x00000080  // GPIO Port H Peripheral Ready
N#define SYSCTL_PRGPIO_R6        0x00000040  // GPIO Port G Peripheral Ready
N#define SYSCTL_PRGPIO_R5        0x00000020  // GPIO Port F Peripheral Ready
N#define SYSCTL_PRGPIO_R4        0x00000010  // GPIO Port E Peripheral Ready
N#define SYSCTL_PRGPIO_R3        0x00000008  // GPIO Port D Peripheral Ready
N#define SYSCTL_PRGPIO_R2        0x00000004  // GPIO Port C Peripheral Ready
N#define SYSCTL_PRGPIO_R1        0x00000002  // GPIO Port B Peripheral Ready
N#define SYSCTL_PRGPIO_R0        0x00000001  // GPIO Port A Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_PRDMA_R0         0x00000001  // uDMA Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREPI register.
N//
N//*****************************************************************************
N#define SYSCTL_PREPI_R0         0x00000001  // EPI Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_PRHIB_R0         0x00000001  // Hibernation Module Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRUART register.
N//
N//*****************************************************************************
N#define SYSCTL_PRUART_R7        0x00000080  // UART Module 7 Peripheral Ready
N#define SYSCTL_PRUART_R6        0x00000040  // UART Module 6 Peripheral Ready
N#define SYSCTL_PRUART_R5        0x00000020  // UART Module 5 Peripheral Ready
N#define SYSCTL_PRUART_R4        0x00000010  // UART Module 4 Peripheral Ready
N#define SYSCTL_PRUART_R3        0x00000008  // UART Module 3 Peripheral Ready
N#define SYSCTL_PRUART_R2        0x00000004  // UART Module 2 Peripheral Ready
N#define SYSCTL_PRUART_R1        0x00000002  // UART Module 1 Peripheral Ready
N#define SYSCTL_PRUART_R0        0x00000001  // UART Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_PRSSI_R3         0x00000008  // SSI Module 3 Peripheral Ready
N#define SYSCTL_PRSSI_R2         0x00000004  // SSI Module 2 Peripheral Ready
N#define SYSCTL_PRSSI_R1         0x00000002  // SSI Module 1 Peripheral Ready
N#define SYSCTL_PRSSI_R0         0x00000001  // SSI Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_PRI2C_R9         0x00000200  // I2C Module 9 Peripheral Ready
N#define SYSCTL_PRI2C_R8         0x00000100  // I2C Module 8 Peripheral Ready
N#define SYSCTL_PRI2C_R7         0x00000080  // I2C Module 7 Peripheral Ready
N#define SYSCTL_PRI2C_R6         0x00000040  // I2C Module 6 Peripheral Ready
N#define SYSCTL_PRI2C_R5         0x00000020  // I2C Module 5 Peripheral Ready
N#define SYSCTL_PRI2C_R4         0x00000010  // I2C Module 4 Peripheral Ready
N#define SYSCTL_PRI2C_R3         0x00000008  // I2C Module 3 Peripheral Ready
N#define SYSCTL_PRI2C_R2         0x00000004  // I2C Module 2 Peripheral Ready
N#define SYSCTL_PRI2C_R1         0x00000002  // I2C Module 1 Peripheral Ready
N#define SYSCTL_PRI2C_R0         0x00000001  // I2C Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_PRUSB_R0         0x00000001  // USB Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_PREPHY_R0        0x00000001  // Ethernet PHY Module Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PRCAN_R1         0x00000002  // CAN Module 1 Peripheral Ready
N#define SYSCTL_PRCAN_R0         0x00000001  // CAN Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRADC register.
N//
N//*****************************************************************************
N#define SYSCTL_PRADC_R1         0x00000002  // ADC Module 1 Peripheral Ready
N#define SYSCTL_PRADC_R0         0x00000001  // ADC Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_PRACMP_R0        0x00000001  // Analog Comparator Module 0
N                                            // Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_PRPWM_R0         0x00000001  // PWM Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_PRQEI_R0         0x00000001  // QEI Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PREEPROM_R0      0x00000001  // EEPROM Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_PRCCM_R0         0x00000001  // CRC and Cryptographic Modules
N                                            // Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_PREMAC_R0        0x00000001  // Ethernet MAC Module 0 Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_CCMCGREQ
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_CCMCGREQ_DESCFG  0x00000004  // DES Clock Gating Request
N#define SYSCTL_CCMCGREQ_AESCFG  0x00000002  // AES Clock Gating Request
N#define SYSCTL_CCMCGREQ_SHACFG  0x00000001  // SHA/MD5 Clock Gating Request
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_STAT register.
N//
N//*****************************************************************************
N#define UDMA_STAT_DMACHANS_M    0x001F0000  // Available uDMA Channels Minus 1
N#define UDMA_STAT_STATE_M       0x000000F0  // Control State Machine Status
N#define UDMA_STAT_STATE_IDLE    0x00000000  // Idle
N#define UDMA_STAT_STATE_RD_CTRL 0x00000010  // Reading channel controller data
N#define UDMA_STAT_STATE_RD_SRCENDP                                            \
N                                0x00000020  // Reading source end pointer
X#define UDMA_STAT_STATE_RD_SRCENDP                                                                            0x00000020  
N#define UDMA_STAT_STATE_RD_DSTENDP                                            \
N                                0x00000030  // Reading destination end pointer
X#define UDMA_STAT_STATE_RD_DSTENDP                                                                            0x00000030  
N#define UDMA_STAT_STATE_RD_SRCDAT                                             \
N                                0x00000040  // Reading source data
X#define UDMA_STAT_STATE_RD_SRCDAT                                                                             0x00000040  
N#define UDMA_STAT_STATE_WR_DSTDAT                                             \
N                                0x00000050  // Writing destination data
X#define UDMA_STAT_STATE_WR_DSTDAT                                                                             0x00000050  
N#define UDMA_STAT_STATE_WAIT    0x00000060  // Waiting for uDMA request to
N                                            // clear
N#define UDMA_STAT_STATE_WR_CTRL 0x00000070  // Writing channel controller data
N#define UDMA_STAT_STATE_STALL   0x00000080  // Stalled
N#define UDMA_STAT_STATE_DONE    0x00000090  // Done
N#define UDMA_STAT_STATE_UNDEF   0x000000A0  // Undefined
N#define UDMA_STAT_MASTEN        0x00000001  // Master Enable Status
N#define UDMA_STAT_DMACHANS_S    16
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_CFG register.
N//
N//*****************************************************************************
N#define UDMA_CFG_MASTEN         0x00000001  // Controller Master Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_CTLBASE register.
N//
N//*****************************************************************************
N#define UDMA_CTLBASE_ADDR_M     0xFFFFFC00  // Channel Control Base Address
N#define UDMA_CTLBASE_ADDR_S     10
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_ALTBASE register.
N//
N//*****************************************************************************
N#define UDMA_ALTBASE_ADDR_M     0xFFFFFFFF  // Alternate Channel Address
N                                            // Pointer
N#define UDMA_ALTBASE_ADDR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_WAITSTAT register.
N//
N//*****************************************************************************
N#define UDMA_WAITSTAT_WAITREQ_M 0xFFFFFFFF  // Channel [n] Wait Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_SWREQ register.
N//
N//*****************************************************************************
N#define UDMA_SWREQ_M            0xFFFFFFFF  // Channel [n] Software Request
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_USEBURSTSET
N// register.
N//
N//*****************************************************************************
N#define UDMA_USEBURSTSET_SET_M  0xFFFFFFFF  // Channel [n] Useburst Set
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_USEBURSTCLR
N// register.
N//
N//*****************************************************************************
N#define UDMA_USEBURSTCLR_CLR_M  0xFFFFFFFF  // Channel [n] Useburst Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_REQMASKSET
N// register.
N//
N//*****************************************************************************
N#define UDMA_REQMASKSET_SET_M   0xFFFFFFFF  // Channel [n] Request Mask Set
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_REQMASKCLR
N// register.
N//
N//*****************************************************************************
N#define UDMA_REQMASKCLR_CLR_M   0xFFFFFFFF  // Channel [n] Request Mask Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_ENASET register.
N//
N//*****************************************************************************
N#define UDMA_ENASET_SET_M       0xFFFFFFFF  // Channel [n] Enable Set
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_ENACLR register.
N//
N//*****************************************************************************
N#define UDMA_ENACLR_CLR_M       0xFFFFFFFF  // Clear Channel [n] Enable Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_ALTSET register.
N//
N//*****************************************************************************
N#define UDMA_ALTSET_SET_M       0xFFFFFFFF  // Channel [n] Alternate Set
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_ALTCLR register.
N//
N//*****************************************************************************
N#define UDMA_ALTCLR_CLR_M       0xFFFFFFFF  // Channel [n] Alternate Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_PRIOSET register.
N//
N//*****************************************************************************
N#define UDMA_PRIOSET_SET_M      0xFFFFFFFF  // Channel [n] Priority Set
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_PRIOCLR register.
N//
N//*****************************************************************************
N#define UDMA_PRIOCLR_CLR_M      0xFFFFFFFF  // Channel [n] Priority Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_ERRCLR register.
N//
N//*****************************************************************************
N#define UDMA_ERRCLR_ERRCLR      0x00000001  // uDMA Bus Error Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_CHASGN register.
N//
N//*****************************************************************************
N#define UDMA_CHASGN_M           0xFFFFFFFF  // Channel [n] Assignment Select
N#define UDMA_CHASGN_PRIMARY     0x00000000  // Use the primary channel
N                                            // assignment
N#define UDMA_CHASGN_SECONDARY   0x00000001  // Use the secondary channel
N                                            // assignment
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_CHMAP0 register.
N//
N//*****************************************************************************
N#define UDMA_CHMAP0_CH7SEL_M    0xF0000000  // uDMA Channel 7 Source Select
N#define UDMA_CHMAP0_CH6SEL_M    0x0F000000  // uDMA Channel 6 Source Select
N#define UDMA_CHMAP0_CH5SEL_M    0x00F00000  // uDMA Channel 5 Source Select
N#define UDMA_CHMAP0_CH4SEL_M    0x000F0000  // uDMA Channel 4 Source Select
N#define UDMA_CHMAP0_CH3SEL_M    0x0000F000  // uDMA Channel 3 Source Select
N#define UDMA_CHMAP0_CH2SEL_M    0x00000F00  // uDMA Channel 2 Source Select
N#define UDMA_CHMAP0_CH1SEL_M    0x000000F0  // uDMA Channel 1 Source Select
N#define UDMA_CHMAP0_CH0SEL_M    0x0000000F  // uDMA Channel 0 Source Select
N#define UDMA_CHMAP0_CH7SEL_S    28
N#define UDMA_CHMAP0_CH6SEL_S    24
N#define UDMA_CHMAP0_CH5SEL_S    20
N#define UDMA_CHMAP0_CH4SEL_S    16
N#define UDMA_CHMAP0_CH3SEL_S    12
N#define UDMA_CHMAP0_CH2SEL_S    8
N#define UDMA_CHMAP0_CH1SEL_S    4
N#define UDMA_CHMAP0_CH0SEL_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_CHMAP1 register.
N//
N//*****************************************************************************
N#define UDMA_CHMAP1_CH15SEL_M   0xF0000000  // uDMA Channel 15 Source Select
N#define UDMA_CHMAP1_CH14SEL_M   0x0F000000  // uDMA Channel 14 Source Select
N#define UDMA_CHMAP1_CH13SEL_M   0x00F00000  // uDMA Channel 13 Source Select
N#define UDMA_CHMAP1_CH12SEL_M   0x000F0000  // uDMA Channel 12 Source Select
N#define UDMA_CHMAP1_CH11SEL_M   0x0000F000  // uDMA Channel 11 Source Select
N#define UDMA_CHMAP1_CH10SEL_M   0x00000F00  // uDMA Channel 10 Source Select
N#define UDMA_CHMAP1_CH9SEL_M    0x000000F0  // uDMA Channel 9 Source Select
N#define UDMA_CHMAP1_CH8SEL_M    0x0000000F  // uDMA Channel 8 Source Select
N#define UDMA_CHMAP1_CH15SEL_S   28
N#define UDMA_CHMAP1_CH14SEL_S   24
N#define UDMA_CHMAP1_CH13SEL_S   20
N#define UDMA_CHMAP1_CH12SEL_S   16
N#define UDMA_CHMAP1_CH11SEL_S   12
N#define UDMA_CHMAP1_CH10SEL_S   8
N#define UDMA_CHMAP1_CH9SEL_S    4
N#define UDMA_CHMAP1_CH8SEL_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_CHMAP2 register.
N//
N//*****************************************************************************
N#define UDMA_CHMAP2_CH23SEL_M   0xF0000000  // uDMA Channel 23 Source Select
N#define UDMA_CHMAP2_CH22SEL_M   0x0F000000  // uDMA Channel 22 Source Select
N#define UDMA_CHMAP2_CH21SEL_M   0x00F00000  // uDMA Channel 21 Source Select
N#define UDMA_CHMAP2_CH20SEL_M   0x000F0000  // uDMA Channel 20 Source Select
N#define UDMA_CHMAP2_CH19SEL_M   0x0000F000  // uDMA Channel 19 Source Select
N#define UDMA_CHMAP2_CH18SEL_M   0x00000F00  // uDMA Channel 18 Source Select
N#define UDMA_CHMAP2_CH17SEL_M   0x000000F0  // uDMA Channel 17 Source Select
N#define UDMA_CHMAP2_CH16SEL_M   0x0000000F  // uDMA Channel 16 Source Select
N#define UDMA_CHMAP2_CH23SEL_S   28
N#define UDMA_CHMAP2_CH22SEL_S   24
N#define UDMA_CHMAP2_CH21SEL_S   20
N#define UDMA_CHMAP2_CH20SEL_S   16
N#define UDMA_CHMAP2_CH19SEL_S   12
N#define UDMA_CHMAP2_CH18SEL_S   8
N#define UDMA_CHMAP2_CH17SEL_S   4
N#define UDMA_CHMAP2_CH16SEL_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_CHMAP3 register.
N//
N//*****************************************************************************
N#define UDMA_CHMAP3_CH31SEL_M   0xF0000000  // uDMA Channel 31 Source Select
N#define UDMA_CHMAP3_CH30SEL_M   0x0F000000  // uDMA Channel 30 Source Select
N#define UDMA_CHMAP3_CH29SEL_M   0x00F00000  // uDMA Channel 29 Source Select
N#define UDMA_CHMAP3_CH28SEL_M   0x000F0000  // uDMA Channel 28 Source Select
N#define UDMA_CHMAP3_CH27SEL_M   0x0000F000  // uDMA Channel 27 Source Select
N#define UDMA_CHMAP3_CH26SEL_M   0x00000F00  // uDMA Channel 26 Source Select
N#define UDMA_CHMAP3_CH25SEL_M   0x000000F0  // uDMA Channel 25 Source Select
N#define UDMA_CHMAP3_CH24SEL_M   0x0000000F  // uDMA Channel 24 Source Select
N#define UDMA_CHMAP3_CH31SEL_S   28
N#define UDMA_CHMAP3_CH30SEL_S   24
N#define UDMA_CHMAP3_CH29SEL_S   20
N#define UDMA_CHMAP3_CH28SEL_S   16
N#define UDMA_CHMAP3_CH27SEL_S   12
N#define UDMA_CHMAP3_CH26SEL_S   8
N#define UDMA_CHMAP3_CH25SEL_S   4
N#define UDMA_CHMAP3_CH24SEL_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_O_SRCENDP register.
N//
N//*****************************************************************************
N#define UDMA_SRCENDP_ADDR_M     0xFFFFFFFF  // Source Address End Pointer
N#define UDMA_SRCENDP_ADDR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_O_DSTENDP register.
N//
N//*****************************************************************************
N#define UDMA_DSTENDP_ADDR_M     0xFFFFFFFF  // Destination Address End Pointer
N#define UDMA_DSTENDP_ADDR_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the UDMA_O_CHCTL register.
N//
N//*****************************************************************************
N#define UDMA_CHCTL_DSTINC_M     0xC0000000  // Destination Address Increment
N#define UDMA_CHCTL_DSTINC_8     0x00000000  // Byte
N#define UDMA_CHCTL_DSTINC_16    0x40000000  // Half-word
N#define UDMA_CHCTL_DSTINC_32    0x80000000  // Word
N#define UDMA_CHCTL_DSTINC_NONE  0xC0000000  // No increment
N#define UDMA_CHCTL_DSTSIZE_M    0x30000000  // Destination Data Size
N#define UDMA_CHCTL_DSTSIZE_8    0x00000000  // Byte
N#define UDMA_CHCTL_DSTSIZE_16   0x10000000  // Half-word
N#define UDMA_CHCTL_DSTSIZE_32   0x20000000  // Word
N#define UDMA_CHCTL_SRCINC_M     0x0C000000  // Source Address Increment
N#define UDMA_CHCTL_SRCINC_8     0x00000000  // Byte
N#define UDMA_CHCTL_SRCINC_16    0x04000000  // Half-word
N#define UDMA_CHCTL_SRCINC_32    0x08000000  // Word
N#define UDMA_CHCTL_SRCINC_NONE  0x0C000000  // No increment
N#define UDMA_CHCTL_SRCSIZE_M    0x03000000  // Source Data Size
N#define UDMA_CHCTL_SRCSIZE_8    0x00000000  // Byte
N#define UDMA_CHCTL_SRCSIZE_16   0x01000000  // Half-word
N#define UDMA_CHCTL_SRCSIZE_32   0x02000000  // Word
N#define UDMA_CHCTL_DSTPROT0     0x00200000  // Destination Privilege Access
N#define UDMA_CHCTL_SRCPROT0     0x00040000  // Source Privilege Access
N#define UDMA_CHCTL_ARBSIZE_M    0x0003C000  // Arbitration Size
N#define UDMA_CHCTL_ARBSIZE_1    0x00000000  // 1 Transfer
N#define UDMA_CHCTL_ARBSIZE_2    0x00004000  // 2 Transfers
N#define UDMA_CHCTL_ARBSIZE_4    0x00008000  // 4 Transfers
N#define UDMA_CHCTL_ARBSIZE_8    0x0000C000  // 8 Transfers
N#define UDMA_CHCTL_ARBSIZE_16   0x00010000  // 16 Transfers
N#define UDMA_CHCTL_ARBSIZE_32   0x00014000  // 32 Transfers
N#define UDMA_CHCTL_ARBSIZE_64   0x00018000  // 64 Transfers
N#define UDMA_CHCTL_ARBSIZE_128  0x0001C000  // 128 Transfers
N#define UDMA_CHCTL_ARBSIZE_256  0x00020000  // 256 Transfers
N#define UDMA_CHCTL_ARBSIZE_512  0x00024000  // 512 Transfers
N#define UDMA_CHCTL_ARBSIZE_1024 0x00028000  // 1024 Transfers
N#define UDMA_CHCTL_XFERSIZE_M   0x00003FF0  // Transfer Size (minus 1)
N#define UDMA_CHCTL_NXTUSEBURST  0x00000008  // Next Useburst
N#define UDMA_CHCTL_XFERMODE_M   0x00000007  // uDMA Transfer Mode
N#define UDMA_CHCTL_XFERMODE_STOP                                              \
N                                0x00000000  // Stop
X#define UDMA_CHCTL_XFERMODE_STOP                                                                              0x00000000  
N#define UDMA_CHCTL_XFERMODE_BASIC                                             \
N                                0x00000001  // Basic
X#define UDMA_CHCTL_XFERMODE_BASIC                                                                             0x00000001  
N#define UDMA_CHCTL_XFERMODE_AUTO                                              \
N                                0x00000002  // Auto-Request
X#define UDMA_CHCTL_XFERMODE_AUTO                                                                              0x00000002  
N#define UDMA_CHCTL_XFERMODE_PINGPONG                                          \
N                                0x00000003  // Ping-Pong
X#define UDMA_CHCTL_XFERMODE_PINGPONG                                                                          0x00000003  
N#define UDMA_CHCTL_XFERMODE_MEM_SG                                            \
N                                0x00000004  // Memory Scatter-Gather
X#define UDMA_CHCTL_XFERMODE_MEM_SG                                                                            0x00000004  
N#define UDMA_CHCTL_XFERMODE_MEM_SGA                                           \
N                                0x00000005  // Alternate Memory Scatter-Gather
X#define UDMA_CHCTL_XFERMODE_MEM_SGA                                                                           0x00000005  
N#define UDMA_CHCTL_XFERMODE_PER_SG                                            \
N                                0x00000006  // Peripheral Scatter-Gather
X#define UDMA_CHCTL_XFERMODE_PER_SG                                                                            0x00000006  
N#define UDMA_CHCTL_XFERMODE_PER_SGA                                           \
N                                0x00000007  // Alternate Peripheral
X#define UDMA_CHCTL_XFERMODE_PER_SGA                                                                           0x00000007  
N                                            // Scatter-Gather
N#define UDMA_CHCTL_XFERSIZE_S   4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CCM_O_CRCCTRL register.
N//
N//*****************************************************************************
N#define CCM_CRCCTRL_INIT_M      0x00006000  // CRC Initialization
N#define CCM_CRCCTRL_INIT_SEED   0x00000000  // Use the EC_S_CRC_SEED register
N                                            // context as the starting value
N#define CCM_CRCCTRL_INIT_0      0x00004000  // Initialize to all '0s'
N#define CCM_CRCCTRL_INIT_1      0x00006000  // Initialize to all '1s'
N#define CCM_CRCCTRL_SIZE        0x00001000  // Input Data Size
N#define CCM_CRCCTRL_RESINV      0x00000200  // Result Inverse Enable
N#define CCM_CRCCTRL_OBR         0x00000100  // Output Reverse Enable
N#define CCM_CRCCTRL_BR          0x00000080  // Bit reverse enable
N#define CCM_CRCCTRL_ENDIAN_M    0x00000030  // Endian Control
N#define CCM_CRCCTRL_ENDIAN_SBHW 0x00000000  // Configuration unchanged. (B3,
N                                            // B2, B1, B0)
N#define CCM_CRCCTRL_ENDIAN_SHW  0x00000010  // Bytes are swapped in half-words
N                                            // but half-words are not swapped
N                                            // (B2, B3, B0, B1)
N#define CCM_CRCCTRL_ENDIAN_SHWNB                                              \
N                                0x00000020  // Half-words are swapped but bytes
X#define CCM_CRCCTRL_ENDIAN_SHWNB                                                                              0x00000020  
N                                            // are not swapped in half-word.
N                                            // (B1, B0, B3, B2)
N#define CCM_CRCCTRL_ENDIAN_SBSW 0x00000030  // Bytes are swapped in half-words
N                                            // and half-words are swapped. (B0,
N                                            // B1, B2, B3)
N#define CCM_CRCCTRL_TYPE_M      0x0000000F  // Operation Type
N#define CCM_CRCCTRL_TYPE_P8055  0x00000000  // Polynomial 0x8005
N#define CCM_CRCCTRL_TYPE_P1021  0x00000001  // Polynomial 0x1021
N#define CCM_CRCCTRL_TYPE_P4C11DB7                                             \
N                                0x00000002  // Polynomial 0x4C11DB7
X#define CCM_CRCCTRL_TYPE_P4C11DB7                                                                             0x00000002  
N#define CCM_CRCCTRL_TYPE_P1EDC6F41                                            \
N                                0x00000003  // Polynomial 0x1EDC6F41
X#define CCM_CRCCTRL_TYPE_P1EDC6F41                                                                            0x00000003  
N#define CCM_CRCCTRL_TYPE_TCPCHKSUM                                            \
N                                0x00000008  // TCP checksum
X#define CCM_CRCCTRL_TYPE_TCPCHKSUM                                                                            0x00000008  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CCM_O_CRCSEED register.
N//
N//*****************************************************************************
N#define CCM_CRCSEED_SEED_M      0xFFFFFFFF  // SEED/Context Value
N#define CCM_CRCSEED_SEED_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CCM_O_CRCDIN register.
N//
N//*****************************************************************************
N#define CCM_CRCDIN_DATAIN_M     0xFFFFFFFF  // Data Input
N#define CCM_CRCDIN_DATAIN_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the CCM_O_CRCRSLTPP
N// register.
N//
N//*****************************************************************************
N#define CCM_CRCRSLTPP_RSLTPP_M  0xFFFFFFFF  // Post Processing Result
N#define CCM_CRCRSLTPP_RSLTPP_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_ODIGEST_A
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_ODIGEST_A_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_ODIGEST_A_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_ODIGEST_B
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_ODIGEST_B_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_ODIGEST_B_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_ODIGEST_C
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_ODIGEST_C_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_ODIGEST_C_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_ODIGEST_D
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_ODIGEST_D_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_ODIGEST_D_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_ODIGEST_E
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_ODIGEST_E_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_ODIGEST_E_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_ODIGEST_F
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_ODIGEST_F_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_ODIGEST_F_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_ODIGEST_G
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_ODIGEST_G_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_ODIGEST_G_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_ODIGEST_H
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_ODIGEST_H_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_ODIGEST_H_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IDIGEST_A
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IDIGEST_A_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_IDIGEST_A_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IDIGEST_B
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IDIGEST_B_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_IDIGEST_B_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IDIGEST_C
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IDIGEST_C_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_IDIGEST_C_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IDIGEST_D
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IDIGEST_D_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_IDIGEST_D_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IDIGEST_E
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IDIGEST_E_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_IDIGEST_E_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IDIGEST_F
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IDIGEST_F_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_IDIGEST_F_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IDIGEST_G
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IDIGEST_G_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_IDIGEST_G_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IDIGEST_H
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IDIGEST_H_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_IDIGEST_H_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DIGEST_COUNT
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DIGEST_COUNT_M   0xFFFFFFFF  // Data
N#define SHAMD5_DIGEST_COUNT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_MODE register.
N//
N//*****************************************************************************
N#define SHAMD5_MODE_HMAC_OUTER_HASH                                           \
N                                0x00000080  // The HMAC Outer Hash is performed
X#define SHAMD5_MODE_HMAC_OUTER_HASH                                                                           0x00000080  
N                                            // on the hash digest when the
N                                            // inner hash has finished (block
N                                            // length exhausted and final hash
N                                            // performed if close_hash is 1)
N#define SHAMD5_MODE_HMAC_KEY_PROC                                             \
N                                0x00000020  // Performs HMAC key processing on
X#define SHAMD5_MODE_HMAC_KEY_PROC                                                                             0x00000020  
N                                            // the 512 bit HMAC key loaded into
N                                            // the SHA_S_IDIGEST_{A to H} and
N                                            // SHA_S_ODIGEST_{A to H} register
N                                            // block
N#define SHAMD5_MODE_CLOSE_HASH  0x00000010  // Performs the padding, the
N                                            // Hash/HMAC will be 'closed' at
N                                            // the end of the block, as per
N                                            // MD5/SHA-1/SHA-2 specification (i
N#define SHAMD5_MODE_ALGO_CONSTANT                                             \
N                                0x00000008  // The initial digest register will
X#define SHAMD5_MODE_ALGO_CONSTANT                                                                             0x00000008  
N                                            // be overwritten with the
N                                            // algorithm constants for the
N                                            // selected algorithm when hashing
N                                            // and the initial digest count
N                                            // register will be reset to 0
N#define SHAMD5_MODE_ALGO_M      0x00000007  // Hash Algorithm
N#define SHAMD5_MODE_ALGO_MD5    0x00000000  // MD5
N#define SHAMD5_MODE_ALGO_SHA1   0x00000002  // SHA-1
N#define SHAMD5_MODE_ALGO_SHA224 0x00000004  // SHA-224
N#define SHAMD5_MODE_ALGO_SHA256 0x00000006  // SHA-256
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_LENGTH
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_LENGTH_M         0xFFFFFFFF  // Data
N#define SHAMD5_LENGTH_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_0_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_0_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_0_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_1_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_1_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_1_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_2_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_2_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_2_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_3_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_3_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_3_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_4_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_4_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_4_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_5_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_5_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_5_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_6_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_6_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_6_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_7_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_7_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_7_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_8_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_8_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_8_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_9_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_9_IN_DATA_M 0xFFFFFFFF  // Digest/Key Data
N#define SHAMD5_DATA_9_IN_DATA_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_10_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_10_IN_DATA_M                                              \
N                                0xFFFFFFFF  // Digest/Key Data
X#define SHAMD5_DATA_10_IN_DATA_M                                                                              0xFFFFFFFF  
N#define SHAMD5_DATA_10_IN_DATA_S                                              \
N                                0
X#define SHAMD5_DATA_10_IN_DATA_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_11_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_11_IN_DATA_M                                              \
N                                0xFFFFFFFF  // Digest/Key Data
X#define SHAMD5_DATA_11_IN_DATA_M                                                                              0xFFFFFFFF  
N#define SHAMD5_DATA_11_IN_DATA_S                                              \
N                                0
X#define SHAMD5_DATA_11_IN_DATA_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_12_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_12_IN_DATA_M                                              \
N                                0xFFFFFFFF  // Digest/Key Data
X#define SHAMD5_DATA_12_IN_DATA_M                                                                              0xFFFFFFFF  
N#define SHAMD5_DATA_12_IN_DATA_S                                              \
N                                0
X#define SHAMD5_DATA_12_IN_DATA_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_13_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_13_IN_DATA_M                                              \
N                                0xFFFFFFFF  // Digest/Key Data
X#define SHAMD5_DATA_13_IN_DATA_M                                                                              0xFFFFFFFF  
N#define SHAMD5_DATA_13_IN_DATA_S                                              \
N                                0
X#define SHAMD5_DATA_13_IN_DATA_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_14_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_14_IN_DATA_M                                              \
N                                0xFFFFFFFF  // Digest/Key Data
X#define SHAMD5_DATA_14_IN_DATA_M                                                                              0xFFFFFFFF  
N#define SHAMD5_DATA_14_IN_DATA_S                                              \
N                                0
X#define SHAMD5_DATA_14_IN_DATA_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DATA_15_IN
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DATA_15_IN_DATA_M                                              \
N                                0xFFFFFFFF  // Digest/Key Data
X#define SHAMD5_DATA_15_IN_DATA_M                                                                              0xFFFFFFFF  
N#define SHAMD5_DATA_15_IN_DATA_S                                              \
N                                0
X#define SHAMD5_DATA_15_IN_DATA_S                                                                              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_REVISION
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_REVISION_M       0xFFFFFFFF  // Revision Number
N#define SHAMD5_REVISION_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_SYSCONFIG
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_SYSCONFIG_SADVANCED                                            \
N                                0x00000080  // Secure World Advanced Mode
X#define SHAMD5_SYSCONFIG_SADVANCED                                                                            0x00000080  
N                                            // Enable
N#define SHAMD5_SYSCONFIG_SIDLE_M                                              \
N                                0x00000030  // Sidle mode
X#define SHAMD5_SYSCONFIG_SIDLE_M                                                                              0x00000030  
N#define SHAMD5_SYSCONFIG_SIDLE_FORCE                                          \
N                                0x00000000  // Force-idle mode
X#define SHAMD5_SYSCONFIG_SIDLE_FORCE                                                                          0x00000000  
N#define SHAMD5_SYSCONFIG_DMA_EN 0x00000008  // uDMA Request Enable
N#define SHAMD5_SYSCONFIG_IT_EN  0x00000004  // Interrupt Enable
N#define SHAMD5_SYSCONFIG_SOFTRESET                                            \
N                                0x00000002  // Soft reset
X#define SHAMD5_SYSCONFIG_SOFTRESET                                                                            0x00000002  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_SYSSTATUS
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_SYSSTATUS_RESETDONE                                            \
N                                0x00000001  // Reset done status
X#define SHAMD5_SYSSTATUS_RESETDONE                                                                            0x00000001  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IRQSTATUS
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IRQSTATUS_CONTEXT_READY                                        \
N                                0x00000008  // Indicates that the HIB1 context
X#define SHAMD5_IRQSTATUS_CONTEXT_READY                                                                        0x00000008  
N                                            // input registers are available
N                                            // for a new context for the next
N                                            // packet to be processed
N#define SHAMD5_IRQSTATUS_INPUT_READY                                          \
N                                0x00000002  // Indicates that the HIB1 data
X#define SHAMD5_IRQSTATUS_INPUT_READY                                                                          0x00000002  
N                                            // FIFO is ready to receive the
N                                            // next 64 byte data block
N#define SHAMD5_IRQSTATUS_OUTPUT_READY                                         \
N                                0x00000001  // Indicates that a (partial)
X#define SHAMD5_IRQSTATUS_OUTPUT_READY                                                                         0x00000001  
N                                            // result or saved context is
N                                            // available from the HIB1 context
N                                            // output registers
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_IRQENABLE
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_IRQENABLE_CONTEXT_READY                                        \
N                                0x00000008  // Mask for context ready interrupt
X#define SHAMD5_IRQENABLE_CONTEXT_READY                                                                        0x00000008  
N#define SHAMD5_IRQENABLE_INPUT_READY                                          \
N                                0x00000002  // Mask for input ready interrupt
X#define SHAMD5_IRQENABLE_INPUT_READY                                                                          0x00000002  
N#define SHAMD5_IRQENABLE_OUTPUT_READY                                         \
N                                0x00000001  // Mask for output ready interrupt
X#define SHAMD5_IRQENABLE_OUTPUT_READY                                                                         0x00000001  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DMAIM register.
N//
N//*****************************************************************************
N#define SHAMD5_DMAIM_COUT       0x00000004  // Context Out DMA Done Interrupt
N                                            // Mask
N#define SHAMD5_DMAIM_DIN        0x00000002  // Data In DMA Done Interrupt Mask
N#define SHAMD5_DMAIM_CIN        0x00000001  // Context In DMA Done Interrupt
N                                            // Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DMARIS
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DMARIS_COUT      0x00000004  // Context Out DMA Done Raw
N                                            // Interrupt Status
N#define SHAMD5_DMARIS_DIN       0x00000002  // Data In DMA Done Raw Interrupt
N                                            // Status
N#define SHAMD5_DMARIS_CIN       0x00000001  // Context In DMA Done Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DMAMIS
N// register.
N//
N//*****************************************************************************
N#define SHAMD5_DMAMIS_COUT      0x00000004  // Context Out DMA Done Masked
N                                            // Interrupt Status
N#define SHAMD5_DMAMIS_DIN       0x00000002  // Data In DMA Done Masked
N                                            // Interrupt Status
N#define SHAMD5_DMAMIS_CIN       0x00000001  // Context In DMA Done Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SHAMD5_O_DMAIC register.
N//
N//*****************************************************************************
N#define SHAMD5_DMAIC_COUT       0x00000004  // Context Out DMA Done Masked
N                                            // Interrupt Status
N#define SHAMD5_DMAIC_DIN        0x00000002  // Data In DMA Done Interrupt Clear
N#define SHAMD5_DMAIC_CIN        0x00000001  // Context In DMA Done Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY2_6 register.
N//
N//*****************************************************************************
N#define AES_KEY2_6_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY2_6_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY2_7 register.
N//
N//*****************************************************************************
N#define AES_KEY2_7_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY2_7_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY2_4 register.
N//
N//*****************************************************************************
N#define AES_KEY2_4_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY2_4_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY2_5 register.
N//
N//*****************************************************************************
N#define AES_KEY2_5_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY2_5_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY2_2 register.
N//
N//*****************************************************************************
N#define AES_KEY2_2_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY2_2_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY2_3 register.
N//
N//*****************************************************************************
N#define AES_KEY2_3_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY2_3_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY2_0 register.
N//
N//*****************************************************************************
N#define AES_KEY2_0_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY2_0_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY2_1 register.
N//
N//*****************************************************************************
N#define AES_KEY2_1_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY2_1_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY1_6 register.
N//
N//*****************************************************************************
N#define AES_KEY1_6_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY1_6_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY1_7 register.
N//
N//*****************************************************************************
N#define AES_KEY1_7_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY1_7_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY1_4 register.
N//
N//*****************************************************************************
N#define AES_KEY1_4_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY1_4_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY1_5 register.
N//
N//*****************************************************************************
N#define AES_KEY1_5_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY1_5_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY1_2 register.
N//
N//*****************************************************************************
N#define AES_KEY1_2_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY1_2_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY1_3 register.
N//
N//*****************************************************************************
N#define AES_KEY1_3_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY1_3_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY1_0 register.
N//
N//*****************************************************************************
N#define AES_KEY1_0_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY1_0_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_KEY1_1 register.
N//
N//*****************************************************************************
N#define AES_KEY1_1_KEY_M        0xFFFFFFFF  // key data
N#define AES_KEY1_1_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_IV_IN_0 register.
N//
N//*****************************************************************************
N#define AES_IV_IN_0_DATA_M      0xFFFFFFFF  // Initialization vector input
N#define AES_IV_IN_0_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_IV_IN_1 register.
N//
N//*****************************************************************************
N#define AES_IV_IN_1_DATA_M      0xFFFFFFFF  // Initialization vector input
N#define AES_IV_IN_1_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_IV_IN_2 register.
N//
N//*****************************************************************************
N#define AES_IV_IN_2_DATA_M      0xFFFFFFFF  // Initialization vector input
N#define AES_IV_IN_2_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_IV_IN_3 register.
N//
N//*****************************************************************************
N#define AES_IV_IN_3_DATA_M      0xFFFFFFFF  // Initialization vector input
N#define AES_IV_IN_3_DATA_S      0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_CTRL register.
N//
N//*****************************************************************************
N#define AES_CTRL_CTXTRDY        0x80000000  // Context Data Registers Ready
N#define AES_CTRL_SVCTXTRDY      0x40000000  // AES TAG/IV block(s) Ready
N#define AES_CTRL_SAVE_CONTEXT   0x20000000  // TAG or Result IV Save
N#define AES_CTRL_CCM_M_M        0x01C00000  // Counter with CBC-MAC (CCM)
N#define AES_CTRL_CCM_L_M        0x00380000  // L Value
N#define AES_CTRL_CCM_L_2        0x00080000  // width = 2
N#define AES_CTRL_CCM_L_4        0x00180000  // width = 4
N#define AES_CTRL_CCM_L_8        0x00380000  // width = 8
N#define AES_CTRL_CCM            0x00040000  // AES-CCM Mode
N#define AES_CTRL_GCM_M          0x00030000  // AES-GCM Mode Enable
N#define AES_CTRL_GCM_NOP        0x00000000  // No operation
N#define AES_CTRL_GCM_HLY0ZERO   0x00010000  // GHASH with H loaded and
N                                            // Y0-encrypted forced to zero
N#define AES_CTRL_GCM_HLY0CALC   0x00020000  // GHASH with H loaded and
N                                            // Y0-encrypted calculated
N                                            // internally
N#define AES_CTRL_GCM_HY0CALC    0x00030000  // Autonomous GHASH (both H and
N                                            // Y0-encrypted calculated
N                                            // internally)
N#define AES_CTRL_CBCMAC         0x00008000  // AES-CBC MAC Enable
N#define AES_CTRL_F9             0x00004000  // AES f9 Mode Enable
N#define AES_CTRL_F8             0x00002000  // AES f8 Mode Enable
N#define AES_CTRL_XTS_M          0x00001800  // AES-XTS Operation Enabled
N#define AES_CTRL_XTS_NOP        0x00000000  // No operation
N#define AES_CTRL_XTS_TWEAKJL    0x00000800  // Previous/intermediate tweak
N                                            // value and j loaded (value is
N                                            // loaded via IV, j is loaded via
N                                            // the AAD length register)
N#define AES_CTRL_XTS_K2IJL      0x00001000  // Key2, i and j loaded (i is
N                                            // loaded via IV, j is loaded via
N                                            // the AAD length register)
N#define AES_CTRL_XTS_K2ILJ0     0x00001800  // Key2 and i loaded, j=0 (i is
N                                            // loaded via IV)
N#define AES_CTRL_CFB            0x00000400  // Full block AES cipher feedback
N                                            // mode (CFB128) Enable
N#define AES_CTRL_ICM            0x00000200  // AES integer counter mode (ICM)
N                                            // Enable
N#define AES_CTRL_CTR_WIDTH_M    0x00000180  // AES-CTR Mode Counter Width
N#define AES_CTRL_CTR_WIDTH_32   0x00000000  // Counter is 32 bits
N#define AES_CTRL_CTR_WIDTH_64   0x00000080  // Counter is 64 bits
N#define AES_CTRL_CTR_WIDTH_96   0x00000100  // Counter is 96 bits
N#define AES_CTRL_CTR_WIDTH_128  0x00000180  // Counter is 128 bits
N#define AES_CTRL_CTR            0x00000040  // Counter Mode
N#define AES_CTRL_MODE           0x00000020  // ECB/CBC Mode
N#define AES_CTRL_KEY_SIZE_M     0x00000018  // Key Size
N#define AES_CTRL_KEY_SIZE_128   0x00000008  // Key is 128 bits
N#define AES_CTRL_KEY_SIZE_192   0x00000010  // Key is 192 bits
N#define AES_CTRL_KEY_SIZE_256   0x00000018  // Key is 256 bits
N#define AES_CTRL_DIRECTION      0x00000004  // Encryption/Decryption Selection
N#define AES_CTRL_INPUT_READY    0x00000002  // Input Ready Status
N#define AES_CTRL_OUTPUT_READY   0x00000001  // Output Ready Status
N#define AES_CTRL_CCM_M_S        22
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_C_LENGTH_0
N// register.
N//
N//*****************************************************************************
N#define AES_C_LENGTH_0_LENGTH_M 0xFFFFFFFF  // Data length (LSW)
N#define AES_C_LENGTH_0_LENGTH_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_C_LENGTH_1
N// register.
N//
N//*****************************************************************************
N#define AES_C_LENGTH_1_LENGTH_M 0xFFFFFFFF  // Data length (LSW)
N#define AES_C_LENGTH_1_LENGTH_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_AUTH_LENGTH
N// register.
N//
N//*****************************************************************************
N#define AES_AUTH_LENGTH_AUTH_M  0xFFFFFFFF  // Data
N#define AES_AUTH_LENGTH_AUTH_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_DATA_IN_0
N// register.
N//
N//*****************************************************************************
N#define AES_DATA_IN_0_DATA_M    0xFFFFFFFF  // Data
N#define AES_DATA_IN_0_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_DATA_IN_1
N// register.
N//
N//*****************************************************************************
N#define AES_DATA_IN_1_DATA_M    0xFFFFFFFF  // Data
N#define AES_DATA_IN_1_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_DATA_IN_2
N// register.
N//
N//*****************************************************************************
N#define AES_DATA_IN_2_DATA_M    0xFFFFFFFF  // Data
N#define AES_DATA_IN_2_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_DATA_IN_3
N// register.
N//
N//*****************************************************************************
N#define AES_DATA_IN_3_DATA_M    0xFFFFFFFF  // Data
N#define AES_DATA_IN_3_DATA_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_TAG_OUT_0
N// register.
N//
N//*****************************************************************************
N#define AES_TAG_OUT_0_HASH_M    0xFFFFFFFF  // Hash Result
N#define AES_TAG_OUT_0_HASH_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_TAG_OUT_1
N// register.
N//
N//*****************************************************************************
N#define AES_TAG_OUT_1_HASH_M    0xFFFFFFFF  // Hash Result
N#define AES_TAG_OUT_1_HASH_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_TAG_OUT_2
N// register.
N//
N//*****************************************************************************
N#define AES_TAG_OUT_2_HASH_M    0xFFFFFFFF  // Hash Result
N#define AES_TAG_OUT_2_HASH_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_TAG_OUT_3
N// register.
N//
N//*****************************************************************************
N#define AES_TAG_OUT_3_HASH_M    0xFFFFFFFF  // Hash Result
N#define AES_TAG_OUT_3_HASH_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_REVISION register.
N//
N//*****************************************************************************
N#define AES_REVISION_M          0xFFFFFFFF  // Revision number
N#define AES_REVISION_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_SYSCONFIG
N// register.
N//
N//*****************************************************************************
N#define AES_SYSCONFIG_K3        0x00001000  // K3 Select
N#define AES_SYSCONFIG_KEYENC    0x00000800  // Key Encoding
N#define AES_SYSCONFIG_MAP_CONTEXT_OUT_ON_DATA_OUT                             \
N                                0x00000200  // Map Context Out on Data Out
X#define AES_SYSCONFIG_MAP_CONTEXT_OUT_ON_DATA_OUT                                                             0x00000200  
N                                            // Enable
N#define AES_SYSCONFIG_DMA_REQ_CONTEXT_OUT_EN                                  \
N                                0x00000100  // DMA Request Context Out Enable
X#define AES_SYSCONFIG_DMA_REQ_CONTEXT_OUT_EN                                                                  0x00000100  
N#define AES_SYSCONFIG_DMA_REQ_CONTEXT_IN_EN                                   \
N                                0x00000080  // DMA Request Context In Enable
X#define AES_SYSCONFIG_DMA_REQ_CONTEXT_IN_EN                                                                   0x00000080  
N#define AES_SYSCONFIG_DMA_REQ_DATA_OUT_EN                                     \
N                                0x00000040  // DMA Request Data Out Enable
X#define AES_SYSCONFIG_DMA_REQ_DATA_OUT_EN                                                                     0x00000040  
N#define AES_SYSCONFIG_DMA_REQ_DATA_IN_EN                                      \
N                                0x00000020  // DMA Request Data In Enable
X#define AES_SYSCONFIG_DMA_REQ_DATA_IN_EN                                                                      0x00000020  
N#define AES_SYSCONFIG_SOFTRESET 0x00000002  // Soft reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_SYSSTATUS
N// register.
N//
N//*****************************************************************************
N#define AES_SYSSTATUS_RESETDONE 0x00000001  // Indicates if reset is done
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_IRQSTATUS
N// register.
N//
N//*****************************************************************************
N#define AES_IRQSTATUS_CONTEXT_OUT                                             \
N                                0x00000008  // This bit indicates
X#define AES_IRQSTATUS_CONTEXT_OUT                                                                             0x00000008  
N                                            // authentication tag (and IV)
N                                            // interrupt(s) is/are active and
N                                            // triggers the interrupt output
N#define AES_IRQSTATUS_DATA_OUT  0x00000004  // This bit indicates data output
N                                            // interrupt is active and triggers
N                                            // the interrupt output
N#define AES_IRQSTATUS_DATA_IN   0x00000002  // This bit indicates data input
N                                            // interrupt is active and triggers
N                                            // the interrupt output
N#define AES_IRQSTATUS_CONTEXT_IN                                              \
N                                0x00000001  // Context In Interrupt Status
X#define AES_IRQSTATUS_CONTEXT_IN                                                                              0x00000001  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_IRQENABLE
N// register.
N//
N//*****************************************************************************
N#define AES_IRQENABLE_CONTEXT_OUT                                             \
N                                0x00000008  // This bit indicates
X#define AES_IRQENABLE_CONTEXT_OUT                                                                             0x00000008  
N                                            // authentication tag (and IV)
N                                            // interrupt(s) is/are enabled
N#define AES_IRQENABLE_DATA_OUT  0x00000004  // This bit indicates data output
N                                            // interrupt is enabled
N#define AES_IRQENABLE_DATA_IN   0x00000002  // This bit indicates data input
N                                            // interrupt is enabled
N#define AES_IRQENABLE_CONTEXT_IN                                              \
N                                0x00000001  // Context In Interrupt Enable
X#define AES_IRQENABLE_CONTEXT_IN                                                                              0x00000001  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_DIRTYBITS
N// register.
N//
N//*****************************************************************************
N#define AES_DIRTYBITS_S_DIRTY   0x00000002  // This bit is set to 1 by the
N                                            // module if any of the AES_S_*
N                                            // registers is written
N#define AES_DIRTYBITS_S_ACCESS  0x00000001  // This bit is set to 1 by the
N                                            // module if any of the AES_S_*
N                                            // registers is read
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_DMAIM register.
N//
N//*****************************************************************************
N#define AES_DMAIM_DOUT          0x00000008  // Data Out DMA Done Interrupt Mask
N#define AES_DMAIM_DIN           0x00000004  // Data In DMA Done Interrupt Mask
N#define AES_DMAIM_COUT          0x00000002  // Context Out DMA Done Interrupt
N                                            // Mask
N#define AES_DMAIM_CIN           0x00000001  // Context In DMA Done Interrupt
N                                            // Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_DMARIS register.
N//
N//*****************************************************************************
N#define AES_DMARIS_DOUT         0x00000008  // Data Out DMA Done Raw Interrupt
N                                            // Status
N#define AES_DMARIS_DIN          0x00000004  // Data In DMA Done Raw Interrupt
N                                            // Status
N#define AES_DMARIS_COUT         0x00000002  // Context Out DMA Done Raw
N                                            // Interrupt Status
N#define AES_DMARIS_CIN          0x00000001  // Context In DMA Done Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_DMAMIS register.
N//
N//*****************************************************************************
N#define AES_DMAMIS_DOUT         0x00000008  // Data Out DMA Done Masked
N                                            // Interrupt Status
N#define AES_DMAMIS_DIN          0x00000004  // Data In DMA Done Masked
N                                            // Interrupt Status
N#define AES_DMAMIS_COUT         0x00000002  // Context Out DMA Done Masked
N                                            // Interrupt Status
N#define AES_DMAMIS_CIN          0x00000001  // Context In DMA Done Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the AES_O_DMAIC register.
N//
N//*****************************************************************************
N#define AES_DMAIC_DOUT          0x00000008  // Data Out DMA Done Interrupt
N                                            // Clear
N#define AES_DMAIC_DIN           0x00000004  // Data In DMA Done Interrupt Clear
N#define AES_DMAIC_COUT          0x00000002  // Context Out DMA Done Masked
N                                            // Interrupt Status
N#define AES_DMAIC_CIN           0x00000001  // Context In DMA Done Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_KEY3_L register.
N//
N//*****************************************************************************
N#define DES_KEY3_L_KEY_M        0xFFFFFFFF  // Key Data
N#define DES_KEY3_L_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_KEY3_H register.
N//
N//*****************************************************************************
N#define DES_KEY3_H_KEY_M        0xFFFFFFFF  // Key Data
N#define DES_KEY3_H_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_KEY2_L register.
N//
N//*****************************************************************************
N#define DES_KEY2_L_KEY_M        0xFFFFFFFF  // Key Data
N#define DES_KEY2_L_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_KEY2_H register.
N//
N//*****************************************************************************
N#define DES_KEY2_H_KEY_M        0xFFFFFFFF  // Key Data
N#define DES_KEY2_H_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_KEY1_L register.
N//
N//*****************************************************************************
N#define DES_KEY1_L_KEY_M        0xFFFFFFFF  // Key Data
N#define DES_KEY1_L_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_KEY1_H register.
N//
N//*****************************************************************************
N#define DES_KEY1_H_KEY_M        0xFFFFFFFF  // Key Data
N#define DES_KEY1_H_KEY_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_IV_L register.
N//
N//*****************************************************************************
N#define DES_IV_L_M              0xFFFFFFFF  // Initialization vector for CBC,
N                                            // CFB modes (LSW)
N#define DES_IV_L_S              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_IV_H register.
N//
N//*****************************************************************************
N#define DES_IV_H_M              0xFFFFFFFF  // Initialization vector for CBC,
N                                            // CFB modes (MSW)
N#define DES_IV_H_S              0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_CTRL register.
N//
N//*****************************************************************************
N#define DES_CTRL_CONTEXT        0x80000000  // If 1, this read-only status bit
N                                            // indicates that the context data
N                                            // registers can be overwritten and
N                                            // the host is permitted to write
N                                            // the next context
N#define DES_CTRL_MODE_M         0x00000030  // Select CBC, ECB or CFB mode0x0:
N                                            // ECB mode0x1: CBC mode0x2: CFB
N                                            // mode0x3: reserved
N#define DES_CTRL_TDES           0x00000008  // Select DES or triple DES
N                                            // encryption/decryption
N#define DES_CTRL_DIRECTION      0x00000004  // Select encryption/decryption
N                                            // 0x0: decryption is selected0x1:
N                                            // Encryption is selected
N#define DES_CTRL_INPUT_READY    0x00000002  // When '1', ready to
N                                            // encrypt/decrypt data
N#define DES_CTRL_OUTPUT_READY   0x00000001  // When '1', Data
N                                            // decrypted/encrypted ready
N#define DES_CTRL_MODE_S         4
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_LENGTH register.
N//
N//*****************************************************************************
N#define DES_LENGTH_M            0xFFFFFFFF  // Cryptographic data length in
N                                            // bytes for all modes
N#define DES_LENGTH_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_DATA_L register.
N//
N//*****************************************************************************
N#define DES_DATA_L_M            0xFFFFFFFF  // Data for encryption/decryption,
N                                            // LSW
N#define DES_DATA_L_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_DATA_H register.
N//
N//*****************************************************************************
N#define DES_DATA_H_M            0xFFFFFFFF  // Data for encryption/decryption,
N                                            // MSW
N#define DES_DATA_H_S            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_REVISION register.
N//
N//*****************************************************************************
N#define DES_REVISION_M          0xFFFFFFFF  // Revision number
N#define DES_REVISION_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_SYSCONFIG
N// register.
N//
N//*****************************************************************************
N#define DES_SYSCONFIG_DMA_REQ_CONTEXT_IN_EN                                   \
N                                0x00000080  // DMA Request Context In Enable
X#define DES_SYSCONFIG_DMA_REQ_CONTEXT_IN_EN                                                                   0x00000080  
N#define DES_SYSCONFIG_DMA_REQ_DATA_OUT_EN                                     \
N                                0x00000040  // DMA Request Data Out Enable
X#define DES_SYSCONFIG_DMA_REQ_DATA_OUT_EN                                                                     0x00000040  
N#define DES_SYSCONFIG_DMA_REQ_DATA_IN_EN                                      \
N                                0x00000020  // DMA Request Data In Enable
X#define DES_SYSCONFIG_DMA_REQ_DATA_IN_EN                                                                      0x00000020  
N#define DES_SYSCONFIG_SIDLE_M   0x0000000C  // Sidle mode
N#define DES_SYSCONFIG_SIDLE_FORCE                                             \
N                                0x00000000  // Force-idle mode
X#define DES_SYSCONFIG_SIDLE_FORCE                                                                             0x00000000  
N#define DES_SYSCONFIG_SOFTRESET 0x00000002  // Soft reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_SYSSTATUS
N// register.
N//
N//*****************************************************************************
N#define DES_SYSSTATUS_RESETDONE 0x00000001  // Reset Done
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_IRQSTATUS
N// register.
N//
N//*****************************************************************************
N#define DES_IRQSTATUS_DATA_OUT  0x00000004  // This bit indicates data output
N                                            // interrupt is active and triggers
N                                            // the interrupt output
N#define DES_IRQSTATUS_DATA_IN   0x00000002  // This bit indicates data input
N                                            // interrupt is active and triggers
N                                            // the interrupt output
N#define DES_IRQSTATUS_CONTEX_IN 0x00000001  // This bit indicates context
N                                            // interrupt is active and triggers
N                                            // the interrupt output
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_IRQENABLE
N// register.
N//
N//*****************************************************************************
N#define DES_IRQENABLE_M_DATA_OUT                                              \
N                                0x00000004  // If this bit is set to 1 the
X#define DES_IRQENABLE_M_DATA_OUT                                                                              0x00000004  
N                                            // secure data output interrupt is
N                                            // enabled
N#define DES_IRQENABLE_M_DATA_IN 0x00000002  // If this bit is set to 1 the
N                                            // secure data input interrupt is
N                                            // enabled
N#define DES_IRQENABLE_M_CONTEX_IN                                             \
N                                0x00000001  // If this bit is set to 1 the
X#define DES_IRQENABLE_M_CONTEX_IN                                                                             0x00000001  
N                                            // secure context interrupt is
N                                            // enabled
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_DIRTYBITS
N// register.
N//
N//*****************************************************************************
N#define DES_DIRTYBITS_S_DIRTY   0x00000002  // This bit is set to 1 by the
N                                            // module if any of the DES_S_*
N                                            // registers is written
N#define DES_DIRTYBITS_S_ACCESS  0x00000001  // This bit is set to 1 by the
N                                            // module if any of the DES_S_*
N                                            // registers is read
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_DMAIM register.
N//
N//*****************************************************************************
N#define DES_DMAIM_DOUT          0x00000004  // Data Out DMA Done Interrupt Mask
N#define DES_DMAIM_DIN           0x00000002  // Data In DMA Done Interrupt Mask
N#define DES_DMAIM_CIN           0x00000001  // Context In DMA Done Interrupt
N                                            // Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_DMARIS register.
N//
N//*****************************************************************************
N#define DES_DMARIS_DOUT         0x00000004  // Data Out DMA Done Raw Interrupt
N                                            // Status
N#define DES_DMARIS_DIN          0x00000002  // Data In DMA Done Raw Interrupt
N                                            // Status
N#define DES_DMARIS_CIN          0x00000001  // Context In DMA Done Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_DMAMIS register.
N//
N//*****************************************************************************
N#define DES_DMAMIS_DOUT         0x00000004  // Data Out DMA Done Masked
N                                            // Interrupt Status
N#define DES_DMAMIS_DIN          0x00000002  // Data In DMA Done Masked
N                                            // Interrupt Status
N#define DES_DMAMIS_CIN          0x00000001  // Context In DMA Done Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the DES_O_DMAIC register.
N//
N//*****************************************************************************
N#define DES_DMAIC_DOUT          0x00000004  // Data Out DMA Done Interrupt
N                                            // Clear
N#define DES_DMAIC_DIN           0x00000002  // Data In DMA Done Interrupt Clear
N#define DES_DMAIC_CIN           0x00000001  // Context In DMA Done Raw
N                                            // Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTLR register.
N//
N//*****************************************************************************
N#define NVIC_ACTLR_DISOOFP      0x00000200  // Disable Out-Of-Order Floating
N                                            // Point
N#define NVIC_ACTLR_DISFPCA      0x00000100  // Disable CONTROL
N#define NVIC_ACTLR_DISFOLD      0x00000004  // Disable IT Folding
N#define NVIC_ACTLR_DISWBUF      0x00000002  // Disable Write Buffer
N#define NVIC_ACTLR_DISMCYC      0x00000001  // Disable Interrupts of Multiple
N                                            // Cycle Instructions
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ST_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_ST_CTRL_COUNT      0x00010000  // Count Flag
N#define NVIC_ST_CTRL_CLK_SRC    0x00000004  // Clock Source
N#define NVIC_ST_CTRL_INTEN      0x00000002  // Interrupt Enable
N#define NVIC_ST_CTRL_ENABLE     0x00000001  // Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ST_RELOAD register.
N//
N//*****************************************************************************
N#define NVIC_ST_RELOAD_M        0x00FFFFFF  // Reload Value
N#define NVIC_ST_RELOAD_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ST_CURRENT
N// register.
N//
N//*****************************************************************************
N#define NVIC_ST_CURRENT_M       0x00FFFFFF  // Current Value
N#define NVIC_ST_CURRENT_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_EN0 register.
N//
N//*****************************************************************************
N#define NVIC_EN0_INT_M          0xFFFFFFFF  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_EN1 register.
N//
N//*****************************************************************************
N#define NVIC_EN1_INT_M          0xFFFFFFFF  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_EN2 register.
N//
N//*****************************************************************************
N#define NVIC_EN2_INT_M          0xFFFFFFFF  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_EN3 register.
N//
N//*****************************************************************************
N#define NVIC_EN3_INT_M          0xFFFFFFFF  // Interrupt Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DIS0 register.
N//
N//*****************************************************************************
N#define NVIC_DIS0_INT_M         0xFFFFFFFF  // Interrupt Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DIS1 register.
N//
N//*****************************************************************************
N#define NVIC_DIS1_INT_M         0xFFFFFFFF  // Interrupt Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DIS2 register.
N//
N//*****************************************************************************
N#define NVIC_DIS2_INT_M         0xFFFFFFFF  // Interrupt Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DIS3 register.
N//
N//*****************************************************************************
N#define NVIC_DIS3_INT_M         0xFFFFFFFF  // Interrupt Disable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PEND0 register.
N//
N//*****************************************************************************
N#define NVIC_PEND0_INT_M        0xFFFFFFFF  // Interrupt Set Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PEND1 register.
N//
N//*****************************************************************************
N#define NVIC_PEND1_INT_M        0xFFFFFFFF  // Interrupt Set Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PEND2 register.
N//
N//*****************************************************************************
N#define NVIC_PEND2_INT_M        0xFFFFFFFF  // Interrupt Set Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PEND3 register.
N//
N//*****************************************************************************
N#define NVIC_PEND3_INT_M        0xFFFFFFFF  // Interrupt Set Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_UNPEND0 register.
N//
N//*****************************************************************************
N#define NVIC_UNPEND0_INT_M      0xFFFFFFFF  // Interrupt Clear Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_UNPEND1 register.
N//
N//*****************************************************************************
N#define NVIC_UNPEND1_INT_M      0xFFFFFFFF  // Interrupt Clear Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_UNPEND2 register.
N//
N//*****************************************************************************
N#define NVIC_UNPEND2_INT_M      0xFFFFFFFF  // Interrupt Clear Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_UNPEND3 register.
N//
N//*****************************************************************************
N#define NVIC_UNPEND3_INT_M      0xFFFFFFFF  // Interrupt Clear Pending
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTIVE0 register.
N//
N//*****************************************************************************
N#define NVIC_ACTIVE0_INT_M      0xFFFFFFFF  // Interrupt Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTIVE1 register.
N//
N//*****************************************************************************
N#define NVIC_ACTIVE1_INT_M      0xFFFFFFFF  // Interrupt Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTIVE2 register.
N//
N//*****************************************************************************
N#define NVIC_ACTIVE2_INT_M      0xFFFFFFFF  // Interrupt Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_ACTIVE3 register.
N//
N//*****************************************************************************
N#define NVIC_ACTIVE3_INT_M      0xFFFFFFFF  // Interrupt Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI0 register.
N//
N//*****************************************************************************
N#define NVIC_PRI0_INT3_M        0xE0000000  // Interrupt 3 Priority Mask
N#define NVIC_PRI0_INT2_M        0x00E00000  // Interrupt 2 Priority Mask
N#define NVIC_PRI0_INT1_M        0x0000E000  // Interrupt 1 Priority Mask
N#define NVIC_PRI0_INT0_M        0x000000E0  // Interrupt 0 Priority Mask
N#define NVIC_PRI0_INT3_S        29
N#define NVIC_PRI0_INT2_S        21
N#define NVIC_PRI0_INT1_S        13
N#define NVIC_PRI0_INT0_S        5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI1 register.
N//
N//*****************************************************************************
N#define NVIC_PRI1_INT7_M        0xE0000000  // Interrupt 7 Priority Mask
N#define NVIC_PRI1_INT6_M        0x00E00000  // Interrupt 6 Priority Mask
N#define NVIC_PRI1_INT5_M        0x0000E000  // Interrupt 5 Priority Mask
N#define NVIC_PRI1_INT4_M        0x000000E0  // Interrupt 4 Priority Mask
N#define NVIC_PRI1_INT7_S        29
N#define NVIC_PRI1_INT6_S        21
N#define NVIC_PRI1_INT5_S        13
N#define NVIC_PRI1_INT4_S        5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI2 register.
N//
N//*****************************************************************************
N#define NVIC_PRI2_INT11_M       0xE0000000  // Interrupt 11 Priority Mask
N#define NVIC_PRI2_INT10_M       0x00E00000  // Interrupt 10 Priority Mask
N#define NVIC_PRI2_INT9_M        0x0000E000  // Interrupt 9 Priority Mask
N#define NVIC_PRI2_INT8_M        0x000000E0  // Interrupt 8 Priority Mask
N#define NVIC_PRI2_INT11_S       29
N#define NVIC_PRI2_INT10_S       21
N#define NVIC_PRI2_INT9_S        13
N#define NVIC_PRI2_INT8_S        5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI3 register.
N//
N//*****************************************************************************
N#define NVIC_PRI3_INT15_M       0xE0000000  // Interrupt 15 Priority Mask
N#define NVIC_PRI3_INT14_M       0x00E00000  // Interrupt 14 Priority Mask
N#define NVIC_PRI3_INT13_M       0x0000E000  // Interrupt 13 Priority Mask
N#define NVIC_PRI3_INT12_M       0x000000E0  // Interrupt 12 Priority Mask
N#define NVIC_PRI3_INT15_S       29
N#define NVIC_PRI3_INT14_S       21
N#define NVIC_PRI3_INT13_S       13
N#define NVIC_PRI3_INT12_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI4 register.
N//
N//*****************************************************************************
N#define NVIC_PRI4_INT19_M       0xE0000000  // Interrupt 19 Priority Mask
N#define NVIC_PRI4_INT18_M       0x00E00000  // Interrupt 18 Priority Mask
N#define NVIC_PRI4_INT17_M       0x0000E000  // Interrupt 17 Priority Mask
N#define NVIC_PRI4_INT16_M       0x000000E0  // Interrupt 16 Priority Mask
N#define NVIC_PRI4_INT19_S       29
N#define NVIC_PRI4_INT18_S       21
N#define NVIC_PRI4_INT17_S       13
N#define NVIC_PRI4_INT16_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI5 register.
N//
N//*****************************************************************************
N#define NVIC_PRI5_INT23_M       0xE0000000  // Interrupt 23 Priority Mask
N#define NVIC_PRI5_INT22_M       0x00E00000  // Interrupt 22 Priority Mask
N#define NVIC_PRI5_INT21_M       0x0000E000  // Interrupt 21 Priority Mask
N#define NVIC_PRI5_INT20_M       0x000000E0  // Interrupt 20 Priority Mask
N#define NVIC_PRI5_INT23_S       29
N#define NVIC_PRI5_INT22_S       21
N#define NVIC_PRI5_INT21_S       13
N#define NVIC_PRI5_INT20_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI6 register.
N//
N//*****************************************************************************
N#define NVIC_PRI6_INT27_M       0xE0000000  // Interrupt 27 Priority Mask
N#define NVIC_PRI6_INT26_M       0x00E00000  // Interrupt 26 Priority Mask
N#define NVIC_PRI6_INT25_M       0x0000E000  // Interrupt 25 Priority Mask
N#define NVIC_PRI6_INT24_M       0x000000E0  // Interrupt 24 Priority Mask
N#define NVIC_PRI6_INT27_S       29
N#define NVIC_PRI6_INT26_S       21
N#define NVIC_PRI6_INT25_S       13
N#define NVIC_PRI6_INT24_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI7 register.
N//
N//*****************************************************************************
N#define NVIC_PRI7_INT31_M       0xE0000000  // Interrupt 31 Priority Mask
N#define NVIC_PRI7_INT30_M       0x00E00000  // Interrupt 30 Priority Mask
N#define NVIC_PRI7_INT29_M       0x0000E000  // Interrupt 29 Priority Mask
N#define NVIC_PRI7_INT28_M       0x000000E0  // Interrupt 28 Priority Mask
N#define NVIC_PRI7_INT31_S       29
N#define NVIC_PRI7_INT30_S       21
N#define NVIC_PRI7_INT29_S       13
N#define NVIC_PRI7_INT28_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI8 register.
N//
N//*****************************************************************************
N#define NVIC_PRI8_INT35_M       0xE0000000  // Interrupt 35 Priority Mask
N#define NVIC_PRI8_INT34_M       0x00E00000  // Interrupt 34 Priority Mask
N#define NVIC_PRI8_INT33_M       0x0000E000  // Interrupt 33 Priority Mask
N#define NVIC_PRI8_INT32_M       0x000000E0  // Interrupt 32 Priority Mask
N#define NVIC_PRI8_INT35_S       29
N#define NVIC_PRI8_INT34_S       21
N#define NVIC_PRI8_INT33_S       13
N#define NVIC_PRI8_INT32_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI9 register.
N//
N//*****************************************************************************
N#define NVIC_PRI9_INT39_M       0xE0000000  // Interrupt 39 Priority Mask
N#define NVIC_PRI9_INT38_M       0x00E00000  // Interrupt 38 Priority Mask
N#define NVIC_PRI9_INT37_M       0x0000E000  // Interrupt 37 Priority Mask
N#define NVIC_PRI9_INT36_M       0x000000E0  // Interrupt 36 Priority Mask
N#define NVIC_PRI9_INT39_S       29
N#define NVIC_PRI9_INT38_S       21
N#define NVIC_PRI9_INT37_S       13
N#define NVIC_PRI9_INT36_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI10 register.
N//
N//*****************************************************************************
N#define NVIC_PRI10_INT43_M      0xE0000000  // Interrupt 43 Priority Mask
N#define NVIC_PRI10_INT42_M      0x00E00000  // Interrupt 42 Priority Mask
N#define NVIC_PRI10_INT41_M      0x0000E000  // Interrupt 41 Priority Mask
N#define NVIC_PRI10_INT40_M      0x000000E0  // Interrupt 40 Priority Mask
N#define NVIC_PRI10_INT43_S      29
N#define NVIC_PRI10_INT42_S      21
N#define NVIC_PRI10_INT41_S      13
N#define NVIC_PRI10_INT40_S      5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI11 register.
N//
N//*****************************************************************************
N#define NVIC_PRI11_INT47_M      0xE0000000  // Interrupt 47 Priority Mask
N#define NVIC_PRI11_INT46_M      0x00E00000  // Interrupt 46 Priority Mask
N#define NVIC_PRI11_INT45_M      0x0000E000  // Interrupt 45 Priority Mask
N#define NVIC_PRI11_INT44_M      0x000000E0  // Interrupt 44 Priority Mask
N#define NVIC_PRI11_INT47_S      29
N#define NVIC_PRI11_INT46_S      21
N#define NVIC_PRI11_INT45_S      13
N#define NVIC_PRI11_INT44_S      5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI12 register.
N//
N//*****************************************************************************
N#define NVIC_PRI12_INT51_M      0xE0000000  // Interrupt 51 Priority Mask
N#define NVIC_PRI12_INT50_M      0x00E00000  // Interrupt 50 Priority Mask
N#define NVIC_PRI12_INT49_M      0x0000E000  // Interrupt 49 Priority Mask
N#define NVIC_PRI12_INT48_M      0x000000E0  // Interrupt 48 Priority Mask
N#define NVIC_PRI12_INT51_S      29
N#define NVIC_PRI12_INT50_S      21
N#define NVIC_PRI12_INT49_S      13
N#define NVIC_PRI12_INT48_S      5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI13 register.
N//
N//*****************************************************************************
N#define NVIC_PRI13_INT55_M      0xE0000000  // Interrupt 55 Priority Mask
N#define NVIC_PRI13_INT54_M      0x00E00000  // Interrupt 54 Priority Mask
N#define NVIC_PRI13_INT53_M      0x0000E000  // Interrupt 53 Priority Mask
N#define NVIC_PRI13_INT52_M      0x000000E0  // Interrupt 52 Priority Mask
N#define NVIC_PRI13_INT55_S      29
N#define NVIC_PRI13_INT54_S      21
N#define NVIC_PRI13_INT53_S      13
N#define NVIC_PRI13_INT52_S      5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI14 register.
N//
N//*****************************************************************************
N#define NVIC_PRI14_INTD_M       0xE0000000  // Interrupt 59 Priority Mask
N#define NVIC_PRI14_INTC_M       0x00E00000  // Interrupt 58 Priority Mask
N#define NVIC_PRI14_INTB_M       0x0000E000  // Interrupt 57 Priority Mask
N#define NVIC_PRI14_INTA_M       0x000000E0  // Interrupt 56 Priority Mask
N#define NVIC_PRI14_INTD_S       29
N#define NVIC_PRI14_INTC_S       21
N#define NVIC_PRI14_INTB_S       13
N#define NVIC_PRI14_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI15 register.
N//
N//*****************************************************************************
N#define NVIC_PRI15_INTD_M       0xE0000000  // Interrupt 63 Priority Mask
N#define NVIC_PRI15_INTC_M       0x00E00000  // Interrupt 62 Priority Mask
N#define NVIC_PRI15_INTB_M       0x0000E000  // Interrupt 61 Priority Mask
N#define NVIC_PRI15_INTA_M       0x000000E0  // Interrupt 60 Priority Mask
N#define NVIC_PRI15_INTD_S       29
N#define NVIC_PRI15_INTC_S       21
N#define NVIC_PRI15_INTB_S       13
N#define NVIC_PRI15_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI16 register.
N//
N//*****************************************************************************
N#define NVIC_PRI16_INTD_M       0xE0000000  // Interrupt 67 Priority Mask
N#define NVIC_PRI16_INTC_M       0x00E00000  // Interrupt 66 Priority Mask
N#define NVIC_PRI16_INTB_M       0x0000E000  // Interrupt 65 Priority Mask
N#define NVIC_PRI16_INTA_M       0x000000E0  // Interrupt 64 Priority Mask
N#define NVIC_PRI16_INTD_S       29
N#define NVIC_PRI16_INTC_S       21
N#define NVIC_PRI16_INTB_S       13
N#define NVIC_PRI16_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI17 register.
N//
N//*****************************************************************************
N#define NVIC_PRI17_INTD_M       0xE0000000  // Interrupt 71 Priority Mask
N#define NVIC_PRI17_INTC_M       0x00E00000  // Interrupt 70 Priority Mask
N#define NVIC_PRI17_INTB_M       0x0000E000  // Interrupt 69 Priority Mask
N#define NVIC_PRI17_INTA_M       0x000000E0  // Interrupt 68 Priority Mask
N#define NVIC_PRI17_INTD_S       29
N#define NVIC_PRI17_INTC_S       21
N#define NVIC_PRI17_INTB_S       13
N#define NVIC_PRI17_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI18 register.
N//
N//*****************************************************************************
N#define NVIC_PRI18_INTD_M       0xE0000000  // Interrupt 75 Priority Mask
N#define NVIC_PRI18_INTC_M       0x00E00000  // Interrupt 74 Priority Mask
N#define NVIC_PRI18_INTB_M       0x0000E000  // Interrupt 73 Priority Mask
N#define NVIC_PRI18_INTA_M       0x000000E0  // Interrupt 72 Priority Mask
N#define NVIC_PRI18_INTD_S       29
N#define NVIC_PRI18_INTC_S       21
N#define NVIC_PRI18_INTB_S       13
N#define NVIC_PRI18_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI19 register.
N//
N//*****************************************************************************
N#define NVIC_PRI19_INTD_M       0xE0000000  // Interrupt 79 Priority Mask
N#define NVIC_PRI19_INTC_M       0x00E00000  // Interrupt 78 Priority Mask
N#define NVIC_PRI19_INTB_M       0x0000E000  // Interrupt 77 Priority Mask
N#define NVIC_PRI19_INTA_M       0x000000E0  // Interrupt 76 Priority Mask
N#define NVIC_PRI19_INTD_S       29
N#define NVIC_PRI19_INTC_S       21
N#define NVIC_PRI19_INTB_S       13
N#define NVIC_PRI19_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI20 register.
N//
N//*****************************************************************************
N#define NVIC_PRI20_INTD_M       0xE0000000  // Interrupt 83 Priority Mask
N#define NVIC_PRI20_INTC_M       0x00E00000  // Interrupt 82 Priority Mask
N#define NVIC_PRI20_INTB_M       0x0000E000  // Interrupt 81 Priority Mask
N#define NVIC_PRI20_INTA_M       0x000000E0  // Interrupt 80 Priority Mask
N#define NVIC_PRI20_INTD_S       29
N#define NVIC_PRI20_INTC_S       21
N#define NVIC_PRI20_INTB_S       13
N#define NVIC_PRI20_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI21 register.
N//
N//*****************************************************************************
N#define NVIC_PRI21_INTD_M       0xE0000000  // Interrupt 87 Priority Mask
N#define NVIC_PRI21_INTC_M       0x00E00000  // Interrupt 86 Priority Mask
N#define NVIC_PRI21_INTB_M       0x0000E000  // Interrupt 85 Priority Mask
N#define NVIC_PRI21_INTA_M       0x000000E0  // Interrupt 84 Priority Mask
N#define NVIC_PRI21_INTD_S       29
N#define NVIC_PRI21_INTC_S       21
N#define NVIC_PRI21_INTB_S       13
N#define NVIC_PRI21_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI22 register.
N//
N//*****************************************************************************
N#define NVIC_PRI22_INTD_M       0xE0000000  // Interrupt 91 Priority Mask
N#define NVIC_PRI22_INTC_M       0x00E00000  // Interrupt 90 Priority Mask
N#define NVIC_PRI22_INTB_M       0x0000E000  // Interrupt 89 Priority Mask
N#define NVIC_PRI22_INTA_M       0x000000E0  // Interrupt 88 Priority Mask
N#define NVIC_PRI22_INTD_S       29
N#define NVIC_PRI22_INTC_S       21
N#define NVIC_PRI22_INTB_S       13
N#define NVIC_PRI22_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI23 register.
N//
N//*****************************************************************************
N#define NVIC_PRI23_INTD_M       0xE0000000  // Interrupt 95 Priority Mask
N#define NVIC_PRI23_INTC_M       0x00E00000  // Interrupt 94 Priority Mask
N#define NVIC_PRI23_INTB_M       0x0000E000  // Interrupt 93 Priority Mask
N#define NVIC_PRI23_INTA_M       0x000000E0  // Interrupt 92 Priority Mask
N#define NVIC_PRI23_INTD_S       29
N#define NVIC_PRI23_INTC_S       21
N#define NVIC_PRI23_INTB_S       13
N#define NVIC_PRI23_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI24 register.
N//
N//*****************************************************************************
N#define NVIC_PRI24_INTD_M       0xE0000000  // Interrupt 99 Priority Mask
N#define NVIC_PRI24_INTC_M       0x00E00000  // Interrupt 98 Priority Mask
N#define NVIC_PRI24_INTB_M       0x0000E000  // Interrupt 97 Priority Mask
N#define NVIC_PRI24_INTA_M       0x000000E0  // Interrupt 96 Priority Mask
N#define NVIC_PRI24_INTD_S       29
N#define NVIC_PRI24_INTC_S       21
N#define NVIC_PRI24_INTB_S       13
N#define NVIC_PRI24_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI25 register.
N//
N//*****************************************************************************
N#define NVIC_PRI25_INTD_M       0xE0000000  // Interrupt 103 Priority Mask
N#define NVIC_PRI25_INTC_M       0x00E00000  // Interrupt 102 Priority Mask
N#define NVIC_PRI25_INTB_M       0x0000E000  // Interrupt 101 Priority Mask
N#define NVIC_PRI25_INTA_M       0x000000E0  // Interrupt 100 Priority Mask
N#define NVIC_PRI25_INTD_S       29
N#define NVIC_PRI25_INTC_S       21
N#define NVIC_PRI25_INTB_S       13
N#define NVIC_PRI25_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI26 register.
N//
N//*****************************************************************************
N#define NVIC_PRI26_INTD_M       0xE0000000  // Interrupt 107 Priority Mask
N#define NVIC_PRI26_INTC_M       0x00E00000  // Interrupt 106 Priority Mask
N#define NVIC_PRI26_INTB_M       0x0000E000  // Interrupt 105 Priority Mask
N#define NVIC_PRI26_INTA_M       0x000000E0  // Interrupt 104 Priority Mask
N#define NVIC_PRI26_INTD_S       29
N#define NVIC_PRI26_INTC_S       21
N#define NVIC_PRI26_INTB_S       13
N#define NVIC_PRI26_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI27 register.
N//
N//*****************************************************************************
N#define NVIC_PRI27_INTD_M       0xE0000000  // Interrupt 111 Priority Mask
N#define NVIC_PRI27_INTC_M       0x00E00000  // Interrupt 110 Priority Mask
N#define NVIC_PRI27_INTB_M       0x0000E000  // Interrupt 109 Priority Mask
N#define NVIC_PRI27_INTA_M       0x000000E0  // Interrupt 108 Priority Mask
N#define NVIC_PRI27_INTD_S       29
N#define NVIC_PRI27_INTC_S       21
N#define NVIC_PRI27_INTB_S       13
N#define NVIC_PRI27_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_PRI28 register.
N//
N//*****************************************************************************
N#define NVIC_PRI28_INTD_M       0xE0000000  // Interrupt 115 Priority Mask
N#define NVIC_PRI28_INTC_M       0x00E00000  // Interrupt 114 Priority Mask
N#define NVIC_PRI28_INTB_M       0x0000E000  // Interrupt 113 Priority Mask
N#define NVIC_PRI28_INTA_M       0x000000E0  // Interrupt 112 Priority Mask
N#define NVIC_PRI28_INTD_S       29
N#define NVIC_PRI28_INTC_S       21
N#define NVIC_PRI28_INTB_S       13
N#define NVIC_PRI28_INTA_S       5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_CPUID register.
N//
N//*****************************************************************************
N#define NVIC_CPUID_IMP_M        0xFF000000  // Implementer Code
N#define NVIC_CPUID_IMP_ARM      0x41000000  // ARM
N#define NVIC_CPUID_VAR_M        0x00F00000  // Variant Number
N#define NVIC_CPUID_CON_M        0x000F0000  // Constant
N#define NVIC_CPUID_PARTNO_M     0x0000FFF0  // Part Number
N#define NVIC_CPUID_PARTNO_CM4   0x0000C240  // Cortex-M4 processor
N#define NVIC_CPUID_REV_M        0x0000000F  // Revision Number
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_INT_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_INT_CTRL_NMI_SET   0x80000000  // NMI Set Pending
N#define NVIC_INT_CTRL_PEND_SV   0x10000000  // PendSV Set Pending
N#define NVIC_INT_CTRL_UNPEND_SV 0x08000000  // PendSV Clear Pending
N#define NVIC_INT_CTRL_PENDSTSET 0x04000000  // SysTick Set Pending
N#define NVIC_INT_CTRL_PENDSTCLR 0x02000000  // SysTick Clear Pending
N#define NVIC_INT_CTRL_ISR_PRE   0x00800000  // Debug Interrupt Handling
N#define NVIC_INT_CTRL_ISR_PEND  0x00400000  // Interrupt Pending
N#define NVIC_INT_CTRL_VEC_PEN_M 0x000FF000  // Interrupt Pending Vector Number
N#define NVIC_INT_CTRL_VEC_PEN_NMI                                             \
N                                0x00002000  // NMI
X#define NVIC_INT_CTRL_VEC_PEN_NMI                                                                             0x00002000  
N#define NVIC_INT_CTRL_VEC_PEN_HARD                                            \
N                                0x00003000  // Hard fault
X#define NVIC_INT_CTRL_VEC_PEN_HARD                                                                            0x00003000  
N#define NVIC_INT_CTRL_VEC_PEN_MEM                                             \
N                                0x00004000  // Memory management fault
X#define NVIC_INT_CTRL_VEC_PEN_MEM                                                                             0x00004000  
N#define NVIC_INT_CTRL_VEC_PEN_BUS                                             \
N                                0x00005000  // Bus fault
X#define NVIC_INT_CTRL_VEC_PEN_BUS                                                                             0x00005000  
N#define NVIC_INT_CTRL_VEC_PEN_USG                                             \
N                                0x00006000  // Usage fault
X#define NVIC_INT_CTRL_VEC_PEN_USG                                                                             0x00006000  
N#define NVIC_INT_CTRL_VEC_PEN_SVC                                             \
N                                0x0000B000  // SVCall
X#define NVIC_INT_CTRL_VEC_PEN_SVC                                                                             0x0000B000  
N#define NVIC_INT_CTRL_VEC_PEN_PNDSV                                           \
N                                0x0000E000  // PendSV
X#define NVIC_INT_CTRL_VEC_PEN_PNDSV                                                                           0x0000E000  
N#define NVIC_INT_CTRL_VEC_PEN_TICK                                            \
N                                0x0000F000  // SysTick
X#define NVIC_INT_CTRL_VEC_PEN_TICK                                                                            0x0000F000  
N#define NVIC_INT_CTRL_RET_BASE  0x00000800  // Return to Base
N#define NVIC_INT_CTRL_VEC_ACT_M 0x000000FF  // Interrupt Pending Vector Number
N#define NVIC_INT_CTRL_VEC_ACT_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_VTABLE register.
N//
N//*****************************************************************************
N#define NVIC_VTABLE_OFFSET_M    0xFFFFFC00  // Vector Table Offset
N#define NVIC_VTABLE_OFFSET_S    10
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_APINT register.
N//
N//*****************************************************************************
N#define NVIC_APINT_VECTKEY_M    0xFFFF0000  // Register Key
N#define NVIC_APINT_VECTKEY      0x05FA0000  // Vector key
N#define NVIC_APINT_ENDIANESS    0x00008000  // Data Endianess
N#define NVIC_APINT_PRIGROUP_M   0x00000700  // Interrupt Priority Grouping
N#define NVIC_APINT_PRIGROUP_7_1 0x00000000  // Priority group 7.1 split
N#define NVIC_APINT_PRIGROUP_6_2 0x00000100  // Priority group 6.2 split
N#define NVIC_APINT_PRIGROUP_5_3 0x00000200  // Priority group 5.3 split
N#define NVIC_APINT_PRIGROUP_4_4 0x00000300  // Priority group 4.4 split
N#define NVIC_APINT_PRIGROUP_3_5 0x00000400  // Priority group 3.5 split
N#define NVIC_APINT_PRIGROUP_2_6 0x00000500  // Priority group 2.6 split
N#define NVIC_APINT_PRIGROUP_1_7 0x00000600  // Priority group 1.7 split
N#define NVIC_APINT_PRIGROUP_0_8 0x00000700  // Priority group 0.8 split
N#define NVIC_APINT_SYSRESETREQ  0x00000004  // System Reset Request
N#define NVIC_APINT_VECT_CLR_ACT 0x00000002  // Clear Active NMI / Fault
N#define NVIC_APINT_VECT_RESET   0x00000001  // System Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_SYS_CTRL_SEVONPEND 0x00000010  // Wake Up on Pending
N#define NVIC_SYS_CTRL_SLEEPDEEP 0x00000004  // Deep Sleep Enable
N#define NVIC_SYS_CTRL_SLEEPEXIT 0x00000002  // Sleep on ISR Exit
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_CFG_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_CFG_CTRL_STKALIGN  0x00000200  // Stack Alignment on Exception
N                                            // Entry
N#define NVIC_CFG_CTRL_BFHFNMIGN 0x00000100  // Ignore Bus Fault in NMI and
N                                            // Fault
N#define NVIC_CFG_CTRL_DIV0      0x00000010  // Trap on Divide by 0
N#define NVIC_CFG_CTRL_UNALIGNED 0x00000008  // Trap on Unaligned Access
N#define NVIC_CFG_CTRL_MAIN_PEND 0x00000002  // Allow Main Interrupt Trigger
N#define NVIC_CFG_CTRL_BASE_THR  0x00000001  // Thread State Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_PRI1 register.
N//
N//*****************************************************************************
N#define NVIC_SYS_PRI1_USAGE_M   0x00E00000  // Usage Fault Priority
N#define NVIC_SYS_PRI1_BUS_M     0x0000E000  // Bus Fault Priority
N#define NVIC_SYS_PRI1_MEM_M     0x000000E0  // Memory Management Fault Priority
N#define NVIC_SYS_PRI1_USAGE_S   21
N#define NVIC_SYS_PRI1_BUS_S     13
N#define NVIC_SYS_PRI1_MEM_S     5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_PRI2 register.
N//
N//*****************************************************************************
N#define NVIC_SYS_PRI2_SVC_M     0xE0000000  // SVCall Priority
N#define NVIC_SYS_PRI2_SVC_S     29
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_PRI3 register.
N//
N//*****************************************************************************
N#define NVIC_SYS_PRI3_TICK_M    0xE0000000  // SysTick Exception Priority
N#define NVIC_SYS_PRI3_PENDSV_M  0x00E00000  // PendSV Priority
N#define NVIC_SYS_PRI3_DEBUG_M   0x000000E0  // Debug Priority
N#define NVIC_SYS_PRI3_TICK_S    29
N#define NVIC_SYS_PRI3_PENDSV_S  21
N#define NVIC_SYS_PRI3_DEBUG_S   5
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SYS_HND_CTRL
N// register.
N//
N//*****************************************************************************
N#define NVIC_SYS_HND_CTRL_USAGE 0x00040000  // Usage Fault Enable
N#define NVIC_SYS_HND_CTRL_BUS   0x00020000  // Bus Fault Enable
N#define NVIC_SYS_HND_CTRL_MEM   0x00010000  // Memory Management Fault Enable
N#define NVIC_SYS_HND_CTRL_SVC   0x00008000  // SVC Call Pending
N#define NVIC_SYS_HND_CTRL_BUSP  0x00004000  // Bus Fault Pending
N#define NVIC_SYS_HND_CTRL_MEMP  0x00002000  // Memory Management Fault Pending
N#define NVIC_SYS_HND_CTRL_USAGEP                                              \
N                                0x00001000  // Usage Fault Pending
X#define NVIC_SYS_HND_CTRL_USAGEP                                                                              0x00001000  
N#define NVIC_SYS_HND_CTRL_TICK  0x00000800  // SysTick Exception Active
N#define NVIC_SYS_HND_CTRL_PNDSV 0x00000400  // PendSV Exception Active
N#define NVIC_SYS_HND_CTRL_MON   0x00000100  // Debug Monitor Active
N#define NVIC_SYS_HND_CTRL_SVCA  0x00000080  // SVC Call Active
N#define NVIC_SYS_HND_CTRL_USGA  0x00000008  // Usage Fault Active
N#define NVIC_SYS_HND_CTRL_BUSA  0x00000002  // Bus Fault Active
N#define NVIC_SYS_HND_CTRL_MEMA  0x00000001  // Memory Management Fault Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FAULT_STAT
N// register.
N//
N//*****************************************************************************
N#define NVIC_FAULT_STAT_DIV0    0x02000000  // Divide-by-Zero Usage Fault
N#define NVIC_FAULT_STAT_UNALIGN 0x01000000  // Unaligned Access Usage Fault
N#define NVIC_FAULT_STAT_NOCP    0x00080000  // No Coprocessor Usage Fault
N#define NVIC_FAULT_STAT_INVPC   0x00040000  // Invalid PC Load Usage Fault
N#define NVIC_FAULT_STAT_INVSTAT 0x00020000  // Invalid State Usage Fault
N#define NVIC_FAULT_STAT_UNDEF   0x00010000  // Undefined Instruction Usage
N                                            // Fault
N#define NVIC_FAULT_STAT_BFARV   0x00008000  // Bus Fault Address Register Valid
N#define NVIC_FAULT_STAT_BLSPERR 0x00002000  // Bus Fault on Floating-Point Lazy
N                                            // State Preservation
N#define NVIC_FAULT_STAT_BSTKE   0x00001000  // Stack Bus Fault
N#define NVIC_FAULT_STAT_BUSTKE  0x00000800  // Unstack Bus Fault
N#define NVIC_FAULT_STAT_IMPRE   0x00000400  // Imprecise Data Bus Error
N#define NVIC_FAULT_STAT_PRECISE 0x00000200  // Precise Data Bus Error
N#define NVIC_FAULT_STAT_IBUS    0x00000100  // Instruction Bus Error
N#define NVIC_FAULT_STAT_MMARV   0x00000080  // Memory Management Fault Address
N                                            // Register Valid
N#define NVIC_FAULT_STAT_MLSPERR 0x00000020  // Memory Management Fault on
N                                            // Floating-Point Lazy State
N                                            // Preservation
N#define NVIC_FAULT_STAT_MSTKE   0x00000010  // Stack Access Violation
N#define NVIC_FAULT_STAT_MUSTKE  0x00000008  // Unstack Access Violation
N#define NVIC_FAULT_STAT_DERR    0x00000002  // Data Access Violation
N#define NVIC_FAULT_STAT_IERR    0x00000001  // Instruction Access Violation
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_HFAULT_STAT
N// register.
N//
N//*****************************************************************************
N#define NVIC_HFAULT_STAT_DBG    0x80000000  // Debug Event
N#define NVIC_HFAULT_STAT_FORCED 0x40000000  // Forced Hard Fault
N#define NVIC_HFAULT_STAT_VECT   0x00000002  // Vector Table Read Fault
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DEBUG_STAT
N// register.
N//
N//*****************************************************************************
N#define NVIC_DEBUG_STAT_EXTRNL  0x00000010  // EDBGRQ asserted
N#define NVIC_DEBUG_STAT_VCATCH  0x00000008  // Vector catch
N#define NVIC_DEBUG_STAT_DWTTRAP 0x00000004  // DWT match
N#define NVIC_DEBUG_STAT_BKPT    0x00000002  // Breakpoint instruction
N#define NVIC_DEBUG_STAT_HALTED  0x00000001  // Halt request
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MM_ADDR register.
N//
N//*****************************************************************************
N#define NVIC_MM_ADDR_M          0xFFFFFFFF  // Fault Address
N#define NVIC_MM_ADDR_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FAULT_ADDR
N// register.
N//
N//*****************************************************************************
N#define NVIC_FAULT_ADDR_M       0xFFFFFFFF  // Fault Address
N#define NVIC_FAULT_ADDR_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_CPAC register.
N//
N//*****************************************************************************
N#define NVIC_CPAC_CP11_M        0x00C00000  // CP11 Coprocessor Access
N                                            // Privilege
N#define NVIC_CPAC_CP11_DIS      0x00000000  // Access Denied
N#define NVIC_CPAC_CP11_PRIV     0x00400000  // Privileged Access Only
N#define NVIC_CPAC_CP11_FULL     0x00C00000  // Full Access
N#define NVIC_CPAC_CP10_M        0x00300000  // CP10 Coprocessor Access
N                                            // Privilege
N#define NVIC_CPAC_CP10_DIS      0x00000000  // Access Denied
N#define NVIC_CPAC_CP10_PRIV     0x00100000  // Privileged Access Only
N#define NVIC_CPAC_CP10_FULL     0x00300000  // Full Access
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_TYPE register.
N//
N//*****************************************************************************
N#define NVIC_MPU_TYPE_IREGION_M 0x00FF0000  // Number of I Regions
N#define NVIC_MPU_TYPE_DREGION_M 0x0000FF00  // Number of D Regions
N#define NVIC_MPU_TYPE_SEPARATE  0x00000001  // Separate or Unified MPU
N#define NVIC_MPU_TYPE_IREGION_S 16
N#define NVIC_MPU_TYPE_DREGION_S 8
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_MPU_CTRL_PRIVDEFEN 0x00000004  // MPU Default Region
N#define NVIC_MPU_CTRL_HFNMIENA  0x00000002  // MPU Enabled During Faults
N#define NVIC_MPU_CTRL_ENABLE    0x00000001  // MPU Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_NUMBER
N// register.
N//
N//*****************************************************************************
N#define NVIC_MPU_NUMBER_M       0x00000007  // MPU Region to Access
N#define NVIC_MPU_NUMBER_S       0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_BASE register.
N//
N//*****************************************************************************
N#define NVIC_MPU_BASE_ADDR_M    0xFFFFFFE0  // Base Address Mask
N#define NVIC_MPU_BASE_VALID     0x00000010  // Region Number Valid
N#define NVIC_MPU_BASE_REGION_M  0x00000007  // Region Number
N#define NVIC_MPU_BASE_ADDR_S    5
N#define NVIC_MPU_BASE_REGION_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_ATTR register.
N//
N//*****************************************************************************
N#define NVIC_MPU_ATTR_XN        0x10000000  // Instruction Access Disable
N#define NVIC_MPU_ATTR_AP_M      0x07000000  // Access Privilege
N#define NVIC_MPU_ATTR_TEX_M     0x00380000  // Type Extension Mask
N#define NVIC_MPU_ATTR_SHAREABLE 0x00040000  // Shareable
N#define NVIC_MPU_ATTR_CACHEABLE 0x00020000  // Cacheable
N#define NVIC_MPU_ATTR_BUFFRABLE 0x00010000  // Bufferable
N#define NVIC_MPU_ATTR_SRD_M     0x0000FF00  // Subregion Disable Bits
N#define NVIC_MPU_ATTR_SIZE_M    0x0000003E  // Region Size Mask
N#define NVIC_MPU_ATTR_ENABLE    0x00000001  // Region Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_BASE1 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_BASE1_ADDR_M   0xFFFFFFE0  // Base Address Mask
N#define NVIC_MPU_BASE1_VALID    0x00000010  // Region Number Valid
N#define NVIC_MPU_BASE1_REGION_M 0x00000007  // Region Number
N#define NVIC_MPU_BASE1_ADDR_S   5
N#define NVIC_MPU_BASE1_REGION_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_ATTR1 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_ATTR1_XN       0x10000000  // Instruction Access Disable
N#define NVIC_MPU_ATTR1_AP_M     0x07000000  // Access Privilege
N#define NVIC_MPU_ATTR1_TEX_M    0x00380000  // Type Extension Mask
N#define NVIC_MPU_ATTR1_SHAREABLE                                              \
N                                0x00040000  // Shareable
X#define NVIC_MPU_ATTR1_SHAREABLE                                                                              0x00040000  
N#define NVIC_MPU_ATTR1_CACHEABLE                                              \
N                                0x00020000  // Cacheable
X#define NVIC_MPU_ATTR1_CACHEABLE                                                                              0x00020000  
N#define NVIC_MPU_ATTR1_BUFFRABLE                                              \
N                                0x00010000  // Bufferable
X#define NVIC_MPU_ATTR1_BUFFRABLE                                                                              0x00010000  
N#define NVIC_MPU_ATTR1_SRD_M    0x0000FF00  // Subregion Disable Bits
N#define NVIC_MPU_ATTR1_SIZE_M   0x0000003E  // Region Size Mask
N#define NVIC_MPU_ATTR1_ENABLE   0x00000001  // Region Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_BASE2 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_BASE2_ADDR_M   0xFFFFFFE0  // Base Address Mask
N#define NVIC_MPU_BASE2_VALID    0x00000010  // Region Number Valid
N#define NVIC_MPU_BASE2_REGION_M 0x00000007  // Region Number
N#define NVIC_MPU_BASE2_ADDR_S   5
N#define NVIC_MPU_BASE2_REGION_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_ATTR2 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_ATTR2_XN       0x10000000  // Instruction Access Disable
N#define NVIC_MPU_ATTR2_AP_M     0x07000000  // Access Privilege
N#define NVIC_MPU_ATTR2_TEX_M    0x00380000  // Type Extension Mask
N#define NVIC_MPU_ATTR2_SHAREABLE                                              \
N                                0x00040000  // Shareable
X#define NVIC_MPU_ATTR2_SHAREABLE                                                                              0x00040000  
N#define NVIC_MPU_ATTR2_CACHEABLE                                              \
N                                0x00020000  // Cacheable
X#define NVIC_MPU_ATTR2_CACHEABLE                                                                              0x00020000  
N#define NVIC_MPU_ATTR2_BUFFRABLE                                              \
N                                0x00010000  // Bufferable
X#define NVIC_MPU_ATTR2_BUFFRABLE                                                                              0x00010000  
N#define NVIC_MPU_ATTR2_SRD_M    0x0000FF00  // Subregion Disable Bits
N#define NVIC_MPU_ATTR2_SIZE_M   0x0000003E  // Region Size Mask
N#define NVIC_MPU_ATTR2_ENABLE   0x00000001  // Region Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_BASE3 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_BASE3_ADDR_M   0xFFFFFFE0  // Base Address Mask
N#define NVIC_MPU_BASE3_VALID    0x00000010  // Region Number Valid
N#define NVIC_MPU_BASE3_REGION_M 0x00000007  // Region Number
N#define NVIC_MPU_BASE3_ADDR_S   5
N#define NVIC_MPU_BASE3_REGION_S 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_MPU_ATTR3 register.
N//
N//*****************************************************************************
N#define NVIC_MPU_ATTR3_XN       0x10000000  // Instruction Access Disable
N#define NVIC_MPU_ATTR3_AP_M     0x07000000  // Access Privilege
N#define NVIC_MPU_ATTR3_TEX_M    0x00380000  // Type Extension Mask
N#define NVIC_MPU_ATTR3_SHAREABLE                                              \
N                                0x00040000  // Shareable
X#define NVIC_MPU_ATTR3_SHAREABLE                                                                              0x00040000  
N#define NVIC_MPU_ATTR3_CACHEABLE                                              \
N                                0x00020000  // Cacheable
X#define NVIC_MPU_ATTR3_CACHEABLE                                                                              0x00020000  
N#define NVIC_MPU_ATTR3_BUFFRABLE                                              \
N                                0x00010000  // Bufferable
X#define NVIC_MPU_ATTR3_BUFFRABLE                                                                              0x00010000  
N#define NVIC_MPU_ATTR3_SRD_M    0x0000FF00  // Subregion Disable Bits
N#define NVIC_MPU_ATTR3_SIZE_M   0x0000003E  // Region Size Mask
N#define NVIC_MPU_ATTR3_ENABLE   0x00000001  // Region Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DBG_CTRL register.
N//
N//*****************************************************************************
N#define NVIC_DBG_CTRL_DBGKEY_M  0xFFFF0000  // Debug key mask
N#define NVIC_DBG_CTRL_DBGKEY    0xA05F0000  // Debug key
N#define NVIC_DBG_CTRL_S_RESET_ST                                              \
N                                0x02000000  // Core has reset since last read
X#define NVIC_DBG_CTRL_S_RESET_ST                                                                              0x02000000  
N#define NVIC_DBG_CTRL_S_RETIRE_ST                                             \
N                                0x01000000  // Core has executed insruction
X#define NVIC_DBG_CTRL_S_RETIRE_ST                                                                             0x01000000  
N                                            // since last read
N#define NVIC_DBG_CTRL_S_LOCKUP  0x00080000  // Core is locked up
N#define NVIC_DBG_CTRL_S_SLEEP   0x00040000  // Core is sleeping
N#define NVIC_DBG_CTRL_S_HALT    0x00020000  // Core status on halt
N#define NVIC_DBG_CTRL_S_REGRDY  0x00010000  // Register read/write available
N#define NVIC_DBG_CTRL_C_SNAPSTALL                                             \
N                                0x00000020  // Breaks a stalled load/store
X#define NVIC_DBG_CTRL_C_SNAPSTALL                                                                             0x00000020  
N#define NVIC_DBG_CTRL_C_MASKINT 0x00000008  // Mask interrupts when stepping
N#define NVIC_DBG_CTRL_C_STEP    0x00000004  // Step the core
N#define NVIC_DBG_CTRL_C_HALT    0x00000002  // Halt the core
N#define NVIC_DBG_CTRL_C_DEBUGEN 0x00000001  // Enable debug
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DBG_XFER register.
N//
N//*****************************************************************************
N#define NVIC_DBG_XFER_REG_WNR   0x00010000  // Write or not read
N#define NVIC_DBG_XFER_REG_SEL_M 0x0000001F  // Register
N#define NVIC_DBG_XFER_REG_R0    0x00000000  // Register R0
N#define NVIC_DBG_XFER_REG_R1    0x00000001  // Register R1
N#define NVIC_DBG_XFER_REG_R2    0x00000002  // Register R2
N#define NVIC_DBG_XFER_REG_R3    0x00000003  // Register R3
N#define NVIC_DBG_XFER_REG_R4    0x00000004  // Register R4
N#define NVIC_DBG_XFER_REG_R5    0x00000005  // Register R5
N#define NVIC_DBG_XFER_REG_R6    0x00000006  // Register R6
N#define NVIC_DBG_XFER_REG_R7    0x00000007  // Register R7
N#define NVIC_DBG_XFER_REG_R8    0x00000008  // Register R8
N#define NVIC_DBG_XFER_REG_R9    0x00000009  // Register R9
N#define NVIC_DBG_XFER_REG_R10   0x0000000A  // Register R10
N#define NVIC_DBG_XFER_REG_R11   0x0000000B  // Register R11
N#define NVIC_DBG_XFER_REG_R12   0x0000000C  // Register R12
N#define NVIC_DBG_XFER_REG_R13   0x0000000D  // Register R13
N#define NVIC_DBG_XFER_REG_R14   0x0000000E  // Register R14
N#define NVIC_DBG_XFER_REG_R15   0x0000000F  // Register R15
N#define NVIC_DBG_XFER_REG_FLAGS 0x00000010  // xPSR/Flags register
N#define NVIC_DBG_XFER_REG_MSP   0x00000011  // Main SP
N#define NVIC_DBG_XFER_REG_PSP   0x00000012  // Process SP
N#define NVIC_DBG_XFER_REG_DSP   0x00000013  // Deep SP
N#define NVIC_DBG_XFER_REG_CFBP  0x00000014  // Control/Fault/BasePri/PriMask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DBG_DATA register.
N//
N//*****************************************************************************
N#define NVIC_DBG_DATA_M         0xFFFFFFFF  // Data temporary cache
N#define NVIC_DBG_DATA_S         0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_DBG_INT register.
N//
N//*****************************************************************************
N#define NVIC_DBG_INT_HARDERR    0x00000400  // Debug trap on hard fault
N#define NVIC_DBG_INT_INTERR     0x00000200  // Debug trap on interrupt errors
N#define NVIC_DBG_INT_BUSERR     0x00000100  // Debug trap on bus error
N#define NVIC_DBG_INT_STATERR    0x00000080  // Debug trap on usage fault state
N#define NVIC_DBG_INT_CHKERR     0x00000040  // Debug trap on usage fault check
N#define NVIC_DBG_INT_NOCPERR    0x00000020  // Debug trap on coprocessor error
N#define NVIC_DBG_INT_MMERR      0x00000010  // Debug trap on mem manage fault
N#define NVIC_DBG_INT_RESET      0x00000008  // Core reset status
N#define NVIC_DBG_INT_RSTPENDCLR 0x00000004  // Clear pending core reset
N#define NVIC_DBG_INT_RSTPENDING 0x00000002  // Core reset is pending
N#define NVIC_DBG_INT_RSTVCATCH  0x00000001  // Reset vector catch
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_SW_TRIG register.
N//
N//*****************************************************************************
N#define NVIC_SW_TRIG_INTID_M    0x000000FF  // Interrupt ID
N#define NVIC_SW_TRIG_INTID_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FPCC register.
N//
N//*****************************************************************************
N#define NVIC_FPCC_ASPEN         0x80000000  // Automatic State Preservation
N                                            // Enable
N#define NVIC_FPCC_LSPEN         0x40000000  // Lazy State Preservation Enable
N#define NVIC_FPCC_MONRDY        0x00000100  // Monitor Ready
N#define NVIC_FPCC_BFRDY         0x00000040  // Bus Fault Ready
N#define NVIC_FPCC_MMRDY         0x00000020  // Memory Management Fault Ready
N#define NVIC_FPCC_HFRDY         0x00000010  // Hard Fault Ready
N#define NVIC_FPCC_THREAD        0x00000008  // Thread Mode
N#define NVIC_FPCC_USER          0x00000002  // User Privilege Level
N#define NVIC_FPCC_LSPACT        0x00000001  // Lazy State Preservation Active
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FPCA register.
N//
N//*****************************************************************************
N#define NVIC_FPCA_ADDRESS_M     0xFFFFFFF8  // Address
N#define NVIC_FPCA_ADDRESS_S     3
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the NVIC_FPDSC register.
N//
N//*****************************************************************************
N#define NVIC_FPDSC_AHP          0x04000000  // AHP Bit Default
N#define NVIC_FPDSC_DN           0x02000000  // DN Bit Default
N#define NVIC_FPDSC_FZ           0x01000000  // FZ Bit Default
N#define NVIC_FPDSC_RMODE_M      0x00C00000  // RMODE Bit Default
N#define NVIC_FPDSC_RMODE_RN     0x00000000  // Round to Nearest (RN) mode
N#define NVIC_FPDSC_RMODE_RP     0x00400000  // Round towards Plus Infinity (RP)
N                                            // mode
N#define NVIC_FPDSC_RMODE_RM     0x00800000  // Round towards Minus Infinity
N                                            // (RM) mode
N#define NVIC_FPDSC_RMODE_RZ     0x00C00000  // Round towards Zero (RZ) mode
N
N#endif // __TM4C129ENCPDT_H__
L 55 ".\startup\common_head.h" 2
N
N
N
N
N#include "bsp.h"
L 1 ".\startup\bsp.h" 1
N#ifndef _BSP_H_
N#define _BSP_H_
N
N
N/*keyboard releated gpio*/
N#define POWER_KEY_PORT       GPIO_PORTE_BASE
N#define POWER_KEY_PIN        GPIO_PIN_2
N#define INT_KEY_POWER        INT_GPIOE
N
N#define IS_POWER_KEY_DOWN()   (GPIO_ReadSinglePin(POWER_KEY_PORT, POWER_KEY_PIN) == 1? 1:0)
N
N#define ENTER_KEY_PORT       GPIO_PORTE_BASE
N#define ENTER_KEY_PIN        GPIO_PIN_1
N#define INT_KEY_ENTER        INT_GPIOE
N
N#define BACK_KEY_PORT       GPIO_PORTE_BASE
N#define BACK_KEY_PIN        GPIO_PIN_0
N#define INT_KEY_BACK        INT_GPIOE
N
N#define LEFT_KEY_PORT       GPIO_PORTK_BASE
N#define LEFT_KEY_PIN        GPIO_PIN_0
N#define INT_KEY_LEFT        INT_GPIOK
N
N#define RIGHT_KEY_PORT      GPIO_PORTK_BASE
N#define RIGHT_KEY_PIN       GPIO_PIN_1
N#define INT_KEY_RIGHT       INT_GPIOK
N
N#define UP_KEY_PORT         GPIO_PORTK_BASE
N#define UP_KEY_PIN          GPIO_PIN_2
N#define INT_KEY_UP          INT_GPIOK
N
N#define DOWN_KEY_PORT       GPIO_PORTK_BASE
N#define DOWN_KEY_PIN        GPIO_PIN_3
N#define INT_KEY_DOWN        INT_GPIOK
N
N/*lcd releated gpio*/
N#define LCD_RW_PORT 			GPIO_PORTQ_BASE
N#define LCD_RW_PIN 			 	GPIO_PIN_0
N
N#define LCD_RS_PORT 			GPIO_PORTQ_BASE
N#define LCD_RS_PIN 			 	GPIO_PIN_1
N
N#define LCD_EN_PORT 			GPIO_PORTD_BASE
N#define LCD_EN_PIN  			GPIO_PIN_3
N
N#define PORT_LCD_DATA     GPIO_PORTD_BASE
N
N#define LCD_DB4_PORT GPIO_PORTD_BASE
N#define LCD_DB4_PIN  GPIO_PIN_2
N
N#define LCD_DB5_PORT GPIO_PORTD_BASE
N#define LCD_DB5_PIN  GPIO_PIN_0
N
N#define LCD_DB6_PORT GPIO_PORTD_BASE
N#define LCD_DB6_PIN  GPIO_PIN_7
N
N#define LCD_DB7_PORT GPIO_PORTD_BASE
N#define LCD_DB7_PIN  GPIO_PIN_5
N
N#define LCD_PWM_PORT GPIO_PORTF_BASE
N#define LCD_PWM_PIN  GPIO_PIN_0
N#define LCD_PWM_CHANNEL  GPIO_PF0_M0PWM0
N
N
N/*power management related gpio*/
N#define DC5V_EN_PORT  GPIO_PORTN_BASE
N#define DC5V_EN_PIN   GPIO_PIN_2
N#define DC5V_ON()     GPIO_PIN_SET(DC5V_EN_PORT, DC5V_EN_PIN, 1)
N#define DC5V_OFF()    GPIO_PIN_SET(DC5V_EN_PORT, DC5V_EN_PIN, 0)
N
N#define AC_STANDBY_PORT GPIO_PORTN_BASE
N#define AC_STANDBY_PIN  GPIO_PIN_1
N#define AC_STANDBY(x)    GPIO_PIN_SET(AC_STANDBY_PORT, AC_STANDBY_PIN, x)
N
N
N/*LED related gpio*/
N#define BLUE_LED_PORT   GPIO_PORTC_BASE
N#define BLUE_LED_PIN    GPIO_PIN_7
N#define RED_LED_PORT    GPIO_PORTC_BASE
N#define RED_LED_PIN     GPIO_PIN_6
N
N#define BLED_SET(x) do{ \
N	GPIO_PIN_SET(BLUE_LED_PORT, BLUE_LED_PIN, !x); \
N	GPIO_PIN_SET(RED_LED_PORT, RED_LED_PIN, x); \
N}while(0)
X#define BLED_SET(x) do{ 	GPIO_PIN_SET(BLUE_LED_PORT, BLUE_LED_PIN, !x); 	GPIO_PIN_SET(RED_LED_PORT, RED_LED_PIN, x); }while(0)
N
N#define RLED_SET(x) do{ \
N	GPIO_PIN_SET(BLUE_LED_PORT, BLUE_LED_PIN, x); \
N	GPIO_PIN_SET(RED_LED_PORT, RED_LED_PIN, !x); \
N}while(0)
X#define RLED_SET(x) do{ 	GPIO_PIN_SET(BLUE_LED_PORT, BLUE_LED_PIN, x); 	GPIO_PIN_SET(RED_LED_PORT, RED_LED_PIN, !x); }while(0)
N
N#define LED_OFF() do{ \
N	GPIO_PIN_SET(BLUE_LED_PORT, BLUE_LED_PIN, 1); \
N	GPIO_PIN_SET(RED_LED_PORT, RED_LED_PIN, 1); \
N}while(0)
X#define LED_OFF() do{ 	GPIO_PIN_SET(BLUE_LED_PORT, BLUE_LED_PIN, 1); 	GPIO_PIN_SET(RED_LED_PORT, RED_LED_PIN, 1); }while(0)
N
N/*EPROM related gpio*/
N#define EPROM_SDA_PORT   GPIO_PORTB_BASE
N#define EPROM_SDA_PIN    GPIO_PIN_3
N#define EPROM_SCL_PORT   GPIO_PORTB_BASE
N#define EPROM_SCL_PIN    GPIO_PIN_2
N
N/*IR related gpio*/
N#define TIME0_DIVISION 12000
N#define FRONT_IR_PORT    GPIO_PORTQ_BASE
N#define FRONT_IR_PIN     GPIO_PIN_2
N#define FRONT_IR_IRQ     INT_GPIOQ2
N#define IR_IN_PORT       GPIO_PORTH_BASE
N#define IR_IN_PIN        GPIO_PIN_1
N#define IR_OUT_PORT      GPIO_PORTH_BASE
N#define IR_OUT_PIN       GPIO_PIN_3
N#define IR_IN_IRQ        INT_GPIOH
N#define IR_IN_DETECT_PORT      GPIO_PORTF_BASE
N#define IR_IN_DETECT_PIN       GPIO_PIN_3
N#define IS_IR_JACK_IN()    (GPIO_ReadSinglePin(IR_IN_DETECT_PORT, IR_IN_DETECT_PIN) == 1? 1:0)
N
N/*njw1195 related gpio*/
N#define NJW1195_DATA_PORT  GPIO_PORTE_BASE
N#define NJW1195_DATA_PIN   GPIO_PIN_4
N#define NJW1195_CLK_PORT   GPIO_PORTB_BASE
N#define NJW1195_CLK_PIN    GPIO_PIN_5
N#define NJW1195_CS_PORT    GPIO_PORTN_BASE
N#define NJW1195_CS_PIN     GPIO_PIN_0
N
N/*CS4251 related gpio*/
N#define CS4251_MOSI_PORT  GPIO_PORTE_BASE
N#define CS4251_MOSI_PIN   GPIO_PIN_4
N#define CS4251_MISO_PORT  GPIO_PORTP_BASE
N#define CS4251_MISO_PIN   GPIO_PIN_4
N#define CS4251_CLK_PORT   GPIO_PORTB_BASE
N#define CS4251_CLK_PIN    GPIO_PIN_5
N#define CS4251_CS_PORT    GPIO_PORTP_BASE
N#define CS4251_CS_PIN     GPIO_PIN_3
N#define CS4251_RST_PORT   GPIO_PORTQ_BASE
N#define CS4251_RST_PIN    GPIO_PIN_4
N
N/*CS48520 related gpio*/
N#define CS48520_RST_PORT  GPIO_PORTM_BASE
N#define CS48520_RST_PIN   GPIO_PIN_1
N#define CS48520_CS_PORT   GPIO_PORTB_BASE
N#define CS48520_CS_PIN    GPIO_PIN_4
N#define CS48520_BUSY_PORT GPIO_PORTM_BASE
N#define CS48520_BUSY_PIN  GPIO_PIN_0
N#define CS48520_IRQ_PORT  GPIO_PORTL_BASE
N#define CS48520_IRQ_PIN   GPIO_PIN_0
N#define CS48520_MOSI_PORT  GPIO_PORTE_BASE
N#define CS48520_MOSI_PIN   GPIO_PIN_4
N#define CS48520_MISO_PORT  GPIO_PORTE_BASE
N#define CS48520_MISO_PIN   GPIO_PIN_5
N#define CS48520_CLK_PORT   GPIO_PORTB_BASE
N#define CS48520_CLK_PIN    GPIO_PIN_5
N
N/*Detect related gpio*/
N#define AUDIO_SENSE_PORT   GPIO_PORTK_BASE
N#define AUDIO_SENSE_PIN    GPIO_PIN_7
N#define TRIGGER_IN_PORT    GPIO_PORTL_BASE
N#define TRIGGER_IN_PIN     GPIO_PIN_5
N#define SENSE_THRES_PORT   GPIO_PORTK_BASE
N#define SENSE_THRES_PIN    GPIO_PIN_5
N#define OVER_TEMP_PORT     GPIO_PORTP_BASE
N#define OVER_TEMP_PIN      GPIO_PIN_1
N#define OVER_VOLTAGE_OR_SHORT_PORT   GPIO_PORTP_BASE
N#define OVER_VOLTAGE_OR_SHORT_PIN    GPIO_PIN_0
N#define OVER_CLIP_PORT     GPIO_PORTJ_BASE
N#define OVER_CLIP_PIN      GPIO_PIN_1
N#define OVER_DC_ERROR_PORT   GPIO_PORTN_BASE
N#define OVER_DC_ERROR_PIN    GPIO_PIN_4
N#define OVER_CURRENT_PORT   GPIO_PORTN_BASE
N#define OVER_CURRENT_PIN    GPIO_PIN_3
N#define OVER_15V_PORT       GPIO_PORTL_BASE
N#define OVER_15V_PIN        GPIO_PIN_4
N
N#define IS_OVER_CURRENT  (GPIO_ReadSinglePin(OVER_CURRENT_PORT, OVER_CURRENT_PIN) == 1? 1:0)
N#define IS_SHORT_CIRCUIT (GPIO_ReadSinglePin(OVER_VOLTAGE_OR_SHORT_PORT, OVER_VOLTAGE_OR_SHORT_PIN) == 0? 1:0)
N#define IS_AUDIO_VALID   (GPIO_ReadSinglePin(AUDIO_SENSE_PORT, AUDIO_SENSE_PIN) == 0? 0:1)
N#define IS_TRIGGER_VALID (GPIO_ReadSinglePin(TRIGGER_IN_PORT, TRIGGER_IN_PIN) == 0? 1:0)
N#define IS_POWER_READY   (GPIO_ReadSinglePin(OVER_15V_PORT, OVER_15V_PIN) == 1? 1:0)
N#define IS_OVER_TEMP     (GPIO_ReadSinglePin(OVER_TEMP_PORT, OVER_TEMP_PIN) == 1? 1:0)
N#define IS_DC_ERROR      (GPIO_ReadSinglePin(OVER_DC_ERROR_PORT, OVER_DC_ERROR_PIN) == 1? 1:0)
N#define IS_OVER_VOLTAGE  (GPIO_ReadSinglePin(OVER_VOLTAGE_OR_SHORT_PORT, OVER_VOLTAGE_OR_SHORT_PIN) == 1? 1:0)
N
N/*AMP control related gpio*/
N#define AMP_EN_PORT        GPIO_PORTJ_BASE
N#define AMP_EN_PIN         GPIO_PIN_0
N#define AMP_MUTE_PORT      GPIO_PORTN_BASE
N#define AMP_MUTE_PIN       GPIO_PIN_5
N
N#define AMP_ENABLE()       GPIO_PIN_SET(AMP_EN_PORT, AMP_EN_PIN, 1)
N#define AMP_DISENABLE()    GPIO_PIN_SET(AMP_EN_PORT, AMP_EN_PIN, 0)
N#define AMP_MUTE_ON()      GPIO_PIN_SET(AMP_MUTE_PORT, AMP_MUTE_PIN, 0)
N#define AMP_MUTE_OFF()     GPIO_PIN_SET(AMP_MUTE_PORT, AMP_MUTE_PIN, 1)
N
N/*PCM1804 related gpio*/
N#define PCM1804_RST_PORT   GPIO_PORTF_BASE
N#define PCM1804_RST_PIN    GPIO_PIN_4
N#define PCM1804_RST(x)     GPIO_PIN_SET(PCM1804_RST_PORT, PCM1804_RST_PIN, x)
N//#define PCM1804_FS0_PORT   GPIO_PORTN_BASE
N//#define PCM1804_FS0_PIN    GPIO_PIN_0
N//#define PCM1804_FS1_PORT   GPIO_PORTP_BASE
N//#define PCM1804_FS1_PIN    GPIO_PIN_5
N
N/*Lineout switch related gpio*/
N#define RCA_OUT_S_PORT     GPIO_PORTA_BASE
N#define RCA_OUT_S_PIN      GPIO_PIN_6
N#define BAN_OUT_S_PORT     GPIO_PORTA_BASE
N#define BAN_OUT_S_PIN      GPIO_PIN_7
N
N#define RCA_OUT_BYPASS()    GPIO_PIN_SET(RCA_OUT_S_PORT, RCA_OUT_S_PIN, 0)
N#define RCA_OUT_DSP()      GPIO_PIN_SET(RCA_OUT_S_PORT, RCA_OUT_S_PIN, 1)
N
N#define BAN_OUT_BYPASS()    GPIO_PIN_SET(BAN_OUT_S_PORT, BAN_OUT_S_PIN, 0)
N#define BAN_OUT_DSP()       GPIO_PIN_SET(BAN_OUT_S_PORT, BAN_OUT_S_PIN, 1)
N
N
N/*pop noise control gpio*/
N#define RCA_OUT_MUTE_PORT   GPIO_PORTF_BASE
N#define RCA_OUT_MUTE_PIN    GPIO_PIN_2
N#define BAN_OUT_MUTE_PORT   GPIO_PORTF_BASE
N#define BAN_OUT_MUTE_PIN    GPIO_PIN_1
N#define OUTPUT_MUTE_M_PORT  GPIO_PORTG_BASE
N#define OUTPUT_MUTE_M_PIN   GPIO_PIN_0
N
N#define RCA_OUT_MUTE_ON()    GPIO_PIN_SET(RCA_OUT_MUTE_PORT, RCA_OUT_MUTE_PIN, 0)
N#define RCA_OUT_MUTE_OFF()   GPIO_PIN_SET(RCA_OUT_MUTE_PORT, RCA_OUT_MUTE_PIN, 1)
N
N#define BAN_OUT_MUTE_ON()    GPIO_PIN_SET(BAN_OUT_MUTE_PORT, BAN_OUT_MUTE_PIN, 0)
N#define BAN_OUT_MUTE_OFF()   GPIO_PIN_SET(BAN_OUT_MUTE_PORT, BAN_OUT_MUTE_PIN, 1)
N
N#define OUTPUT_M_MUTE_ON()    GPIO_PIN_SET(OUTPUT_MUTE_M_PORT, OUTPUT_MUTE_M_PIN, 0)
N#define OUTPUT_M_MUTE_OFF()   GPIO_PIN_SET(OUTPUT_MUTE_M_PORT, OUTPUT_MUTE_M_PIN, 1)
N
N
N
N#define GPIO_PIN_SET(port,pin,value) do{ \
N	if(value){ \
N		GPIOPinWrite(port,pin,pin); } \
N	else{ \
N		GPIOPinWrite(port,pin,0); } \
N	}while(0)
X#define GPIO_PIN_SET(port,pin,value) do{ 	if(value){ 		GPIOPinWrite(port,pin,pin); } 	else{ 		GPIOPinWrite(port,pin,0); } 	}while(0)
N	
N
Nvoid bsp_delay_ms(uint32 time);
N
Nvoid bsp_delay_us(uint32 time);
N
Nvoid bsp_gpio_init(void);
N
Nvoid s_printf(const char *fmt, ...);
N
Nvoid bsp_pwm0_init(void);
N
Nvoid bsp_timer1_init(void);
N	
Nvoid bsp_timer0_init(void);
N
Nuint32 bsp_timer0_get_time(void);
N	
N	
NUINT8 GPIO_ReadSinglePin(UINT32 ulPort, UINT8 ucPins);
N
Nvoid bsp_lcd_bright_control(uint8 duty);
N
Nvoid GPIOPinInputPu(UINT32 ulPort, UINT8 ucPins);
N
Nvoid bsp_pwm_for_sense_init(void);
N
Nvoid bsp_pwm_for_sense_set(uint16 x, uint16 y);
N
N#endif
N
N
N
N
N
N
L 60 ".\startup\common_head.h" 2
N#include "sys_database.h"
L 1 ".\startup\sys_database.h" 1
N#ifndef _SYS_DATABASE_H_
N#define _SYS_DATABASE_H_
N
N
N#define ROOM_EQ_FILTER_NUM  6
N#define CUSTMER_EQ_FILTER_NUM 2
N#define PRESET_EQ_FILTER_NUM  2
N#define SUB_MODE_EQ_FILTER_NUM 8
N
N#define TYPE_ROOM_EQ 1
N#define TYPE_PRESET_EQ 2
N#define TYPE_SUB_EQ  3
N
N#define SUB_CHANNEL 0
N#define LINEOUT_CHANNEL 1
N
Ntypedef enum{
N	WELCOM_MENU = 0,
N	FACTORY_SUB_SELECT_MENU,
N	FACTOTY_SUB_CONFIRM_MENU,
N	VOLUME_MENU,
N	SOURCE_MENU,
N	PRESET_MENU,
N	BRIGHTLESS_MENU,
N	INSTALL_MENU,
N	IP_ADDRESS_MENU,
N	SUB_MODEL_MENU,
N	INPUT_GAIN_MENU,
N	PHRASE_MENU,
N	SUB_LOWPASS_MENU,
N	SUB_HIGHPASS_MENU,
N	LINEOUT_HIGHPASS_MENU,
N	DELAY_ROUTER_MENU,
N	DELAY_TIME_MENU,
N	POWER_ON_METHOD_MENU,
N	SENSE_THRESHOLD,
N	SENSE_OFF_TIME,
N	RESET_MENU,
N	RESET_CONFIRM_MENU,
N	MENU_NUM,
N	DIS_OVER_TEMP,
N	DIS_OVER_VOLTAGE_OR_SHORT,
N	DIS_OVER_CLIP,
N	DIS_OVER_DC_ERROR,
N	DIS_OVER_CURRENT,
N	DIS_OVER_15V,
N	DIS_PEQ_STATE,
N	DIS_VERSION_INFOR
N}menu_id_t;
N
Ntypedef enum{
NIR_VOL_UP =0,
NIR_VOL_DOWN,
NIR_ON,
NIR_OFF,
NIR_NORMAL,
NIR_CINEMA,
NIR_NIGHT,
NIR_USER1,
NIR_USER2,
NIR_USER3,
NIR_BACK,
NIR_UP,
NIR_LFET,
NIR_CENTER,
NIR_RIGHT,
NIR_DOWN,
NIR_MUTE,
NIR_PQE_ON,
NIR_PQE_OFF,
NIR_COMMOND_NUM
N}ir_commond_t;
N
N#define MENU_NODE  IP_ADDRESS_MENU
N
N
Ntypedef enum{
N	DETECT_AUDIO = 0,
N	DETECT_TRIGGER,
N	DETECT_OVER_TEMP,
N	DETECT_OVER_VOLTAGE_OR_SHORT,
N	DETECT_OVER_CLIP,
N	DETECT_OVER_DC_ERROR,
N	DETECT_OVER_CURRENT,
N	DETECT_OVER_15V,
N	NUM_OF_DETECT
N}detect_event_t;
N
Nextern const char *version;
N
Ntypedef struct{
N	size_t index;
N	size_t min;
N	size_t max;
N}menu_context_t;
N
Nstruct menu{
N	menu_id_t id;
N	menu_context_t *context;
N	struct menu *next;
N	struct menu *prev;
N	struct menu *child;
N	struct menu *parent;
N};
N
Ntypedef struct menu menu_t;
N
Ntypedef enum{
N	DELAY_SUB=0,
N	DELAY_LINEOUT,
N	DELAY_OFF,
N	DELAY_ROUTER_MAX
N}delay_router_t;
N
N#define FILTER_SLOPE_12DB    1
N#define FILTER_SLOPE_24DB    2
N#define FILTER_SLOPE_48DB    3
N
Ntypedef struct{
N	uint16 freq;
N	uint8  Q;
N	int    gain;
N	uint32 a;
N	uint32 b;
N	uint32 g;
N}b_eq_t;
N
Ntypedef struct{
N	uint8 phrase;
N	uint16 lowpass;
N	uint8 lowpass_slope;
N	uint16 highpass;
N	uint8 highpass_slope;
N	uint16 delay;
N}sub_state_t;
N
N
Ntypedef enum{
N	MANUAL=0,
N	AUDIO,
N	TRIGGER,
N	IR_IP,
N	POWER_ON_MAX
N}power_on_t;
N
Ntypedef enum{
N	STATUS_STANDBY=0,
N	STATUS_INITING,
N	STATUS_WORKING,
N	STATUS_SHUTDOWN,
N	STATUS_MAX
N}sys_status_t;
N
Ntypedef enum{
N	BALANCE=0,
N	RCA,
N	SPEAHER,
N	SRC_NUM
N}src_t;
N
Ntypedef enum{
N	PRE_NORMAL=0,
N	PRE_CINEMA,
N	PRE_NIGHT,
N	PRE_USER1,
N	PRE_USER2,
N	PRE_USER3,
N	PRESET_NUM
N}preset_t;
N
Ntypedef enum{
N	BRI_LOW=0,
N	BRI_MEDIUM,
N	BRI_HIGH,
N	BRI_NUM
N}lcd_bright_t;
N
Ntypedef enum{
N	MINI_INROOM=0,
N	MINI_INCEILING,
N	MINI_FLEXSUB,
N	BRONZE_IWOW_SLIM,
N	BRONZE_DOWN_SLIM,
N	BRONZE_INROOM,
N	BRONZE_IWORIC,
N	SILVER_INROOM,
N	SILVER_INWALL,
N	SILVER_FLEXSUB,
N	GOLD_INROOM,
N	PLATINUM_INROOM,
N	SUB_FLAT,
N	SUB_MODEL_NUM
N}sub_model_t;
N
Ntypedef enum{
N	SENSE_3MV=0,
N	SENSE_6MV,
N	SENSE_9MV,
N	SENSE_12MV,
N	SENSE_15MV,
N	SENSE_THRESHOLD_NUM
N}sense_threshold_t;
N
Ntypedef enum{
N	SE_TIMEOUT_5=0,
N	SE_TIMEOUT_10,
N	SE_TIMEOUT_20,
N	SE_TIMEOUT_30,
N	SE_TIMEOUT_60,
N	SE_TIMEOUT_NUM
N}sense_timeout_t;
N
N
N
Nextern b_eq_t gEqTemp;
N
Ntypedef struct{
N	b_eq_t filter[ROOM_EQ_FILTER_NUM];
X	b_eq_t filter[6];
N}Rooom_eq_t;
N
Ntypedef struct{
N	b_eq_t filter[PRESET_EQ_FILTER_NUM];
X	b_eq_t filter[2];
N	int vol;
N}Preset_eq_t;
N
Ntypedef struct{
N	b_eq_t filter[CUSTMER_EQ_FILTER_NUM];
X	b_eq_t filter[2];
N	int vol;
N}Custmer_eq_t;
N
Ntypedef struct{
N	Rooom_eq_t req;
N	Preset_eq_t peq[PRESET_NUM];
N}EQ_t;
N
N
Ntypedef struct{
N	uint32 ip;
N	uint32 netmask;
N	uint32 gateway;
N	uint8  mac[6];
N	uint8  ip_mode;
N	power_on_t method;
N	int master_vol;
N	src_t src;
N	preset_t preset;
N	lcd_bright_t bright;
N	sub_model_t sub_model;
N	int input_gain;
N	uint16 lineout_highpass;
N	uint8 lineout_highpass_slope;
N	uint16 line_delay_time;
N	delay_router_t d_router;
N	sense_threshold_t sense_thres;
N	sense_timeout_t se_timeout;
N	uint8 room_eq_index;
N	uint8 eq_on_off;
N	uint32 sys_crc32;
N	uint32 sub_crc32;
N	uint32 eq_crc32;
N	
N	
N	uint8 end_of_nv;
N	
N	sub_state_t *sub;
N	EQ_t *eq;
N	uint8 cur_room_eq;
N	uint8 cur_cust_eq;
N	bool do_reset;
X	_Bool do_reset;
N	bool confirm_reset;
X	_Bool confirm_reset;
N	uint8 code_index;
N	bool is_mute;
X	_Bool is_mute;
N	uint8 protect_bitmap;
N  uint8 is_in_factory;
N	bool is_auto_power_on_enable;
X	_Bool is_auto_power_on_enable;
N	bool is_trigger_off_need_delay;
X	_Bool is_trigger_off_need_delay;
N	bool is_in_protection;
X	_Bool is_in_protection;
N	bool is_short_circuit;
X	_Bool is_short_circuit;
N	bool is_out_of_fix_hardware;
X	_Bool is_out_of_fix_hardware;
N	bool is_dis_timeout;
X	_Bool is_dis_timeout;
N	sub_model_t temp_sub_model;
N	volatile sys_status_t status;
N}sys_state_t;
N
N
N
N
N#define SIZEOF_SYS_NV   ((uint8 *)&gSystem_t->end_of_nv - (uint8 *)&gSystem_t->ip)
N#define SIZEOF_SUB_NV   (sizeof(sub_state_t) * SUB_MODEL_NUM)
N#define SIZEOF_EQ_NV    (sizeof(EQ_t))
N
N
N#endif
N
N
L 61 ".\startup\common_head.h" 2
N#include "sys_config.h"
L 1 ".\startup\sys_config.h" 1
N#ifndef _SYS_CONFIG_H_
N#define _SYS_CONFIG_H_
N
N
N#define CONFIG_USE_CONSOLE
N#define CONFIG_USE_CONSOLE
N
N#define EPPROM_IIC_ADDRESS 0xA0
N
N
N
N#define VOL_MENU_3S_TIMEOUT  (3 * 1000)
N#define DIS_TIMEOUT          (20 * 1000)
N
N
N
N#define SYS_NV_ADDRESS  0x00
N#define SYS_LOW_POWER_FLAG_ADDRESS 0x200
N#define SYS_NV_ADDRESS_SUB  0x400
N#define SYS_NV_ADDRESS_EQ   0x800
N
N
N
N#define CONFIG_SYS_MAXARGS  16
N
N#define VOLUME_INDEX_DEFAULT   0
N#define VOLUME_VALUE_MAX(x)     ((x)>=0?(11 - (x)):(11))
N#define VOLUME_VALUE_MIN(x)     ((x)>=0?(-40):(-40 - (x)))
N#define VOLUME_OFFSET_BETWEEN_VALUE_AND_GAIN(x)  (41 + (x))
N#define VOLUME_HARDWARE_GAIN     29
N#define VOLUME_GAIN_IN_1195_DEFAULT   6
N#define VOLUME_GAIN_IN_DSP(x)   ((x) - VOLUME_HARDWARE_GAIN - VOLUME_GAIN_IN_1195_DEFAULT)
N#define VOLUME_GAIN_IN_DSP_MAX  (6)
N
N#define MASTER_VOL_MUTE_REG_VALUE (-41)
N#define MASTER_VOL_VALUE_MIN  (-40)
N#define MASTER_VOL_VALUE_MAX   (11)
N
N
N#define INPUT_GAIN_MIN       (-10)
N#define INPUT_GAIN_MAX       (10)
N
N#define SENSE_LEVEL_MIN      3
N#define SENSE_LEVEL_MAX      15
N#define SENSE_LEVEL_DEFAULT  SENSE_6MV
N
N#define FILTER_FREQ_MIN      20
N
N#define SUB_LOWPASS_MIN      30
N#define SUB_LOWPASS_MAX      300
N/*special value to indicate LFE according to the webpage handler*/
N#define SUB_LOWPASS_DEFAULT  330 
N#define SUB_LOWPASS_NODE1    60
N#define SUB_LOWPASS_NODE2    120
N#define SUB_LP_NODE1_STEP     1
N#define SUB_LP_NODE2_STEP     5
N#define SUB_LP_NODE3_STEP     10
N
N#define SUB_LP12DB_REG_NUM     3
N#define SUB_LP24DB_REG_NUM     6
N#define SUB_LP48DB_REG_NUM    12
N
N#define SUB_LP_OFFSET_OF_FILTER  (SUB_LOWPASS_MIN - FILTER_FREQ_MIN)
N
N
N#define SUB_HIGHPASS_MIN  20
N#define SUB_HIGHPASS_MAX  100
N#define SUB_HIGHPASS_DEFAULT 20
N#define SUB_HIGHPASS_OFF  130
N#define SUB_HIGHPASS_NODE1 60
N
N#define SUB_HP_NODE1_STEP  1
N#define SUB_HP_NODE2_STEP  5
N
N#define LINEOUT_HIGHPASS_MIN 30
N#define LINEOUT_HIGHPASS_MAX 300
N/*special value to indicate Thru according to the webpage handler*/
N#define LINEOUT_HIGHPASS_DEFAULT 330
N#define LINEOUT_HIGHPASS_NODE1 60
N#define LINEOUT_HIGHPASS_NODE2 120
N
N#define SUB_DELAY_MAX 250
N
N#define DEFAULTT_SOURCE        RCA 
N
N#define POWER_ON_METHOD_DEFAULT   AUDIO
N
N#define DSP_DELAY_DEFAULT_ROUTER  DELAY_OFF
N
N#define LCD_BRIGHTNESS_DEFAULT BRI_MEDIUM
N
N#define DSP_DEFAULT_PRESET PRE_NORMAL
N
N#define SUB_DEFAULT_MODE   BRONZE_IWORIC
N
N#define CODE_NUM 3
N
N#define EQ_FREQ_MIN  20
N#define EQ_FREQ_DEFAULT  100
N#define EQ_FREQ_MAX  300
N#define EQ_GAIN_MIN  (-18)
N#define EQ_GAIN_MAX    12
N#define EQ_Q_MIN     3
N#define EQ_Q_MAX     120
N
N
N#if 1
Nextern void s_printf(const char *fmt, ...);
N#define SYS_TRACE s_printf
N#else
S#define SYS_TRACE(...)
N#endif
N
N
N#if 1
N#define OSAL_ASSERT(x) \
Nif(!(x)){\
N	SYS_TRACE("(%s) has assert failed at %s.\n", #x, __FUNCTION__);\
N  while(1);\
N}
X#define OSAL_ASSERT(x) if(!(x)){	SYS_TRACE("(%s) has assert failed at %s.\n", #x, __FUNCTION__);  while(1);}
N#else
S
S#define OSAL_ASSERT(...)
S
N#endif
N
N
N
N#endif
N
N
L 62 ".\startup\common_head.h" 2
N
N
N
Nextern uint32 gSysClock;
N
N
N
N#endif
N
N
N
N
N
L 2 "Application\serial.c" 2
N#include <string.h>
N#include "OSAL_Console.h"
L 1 "Application\OSAL_Console.h" 1
N#ifndef _OSAL_CONSOLE_H_
N#define _OSAL_CONSOLE_H_
N
N
Ntypedef enum{
N	CMD_NO_ERROR=0,
N	CMD_UNKNOWN,
N	CMD_PARAMETER_ERROR
N}cmd_err_t;
N
Nstruct cmd_tbl_s{
N	char *name; /*command name*/
N	int maxargs; /*maximum number of the arguments*/
N	int (*cmd)(struct cmd_tbl_s *, int, char * const[]);
N	char *usage; /*usgae message*/
N};
N
Ntypedef struct cmd_tbl_s cmd_tbl_t;
N
N
N#define OSAL_CMD(_name, _maxargs, _cmd, _usage) \
N			const cmd_tbl_t __init_cmd_##_name  __attribute__((used, section("INIT_CMD"))) = \
N       {#_name, _maxargs, _cmd, _usage}
X#define OSAL_CMD(_name, _maxargs, _cmd, _usage) 			const cmd_tbl_t __init_cmd_##_name  __attribute__((used, section("INIT_CMD"))) =        {#_name, _maxargs, _cmd, _usage}
N
N
N#define is_blank(c)  (c == ' ' || c == '\t')
N
Ncmd_err_t osal_run_command(char *cmd);
N
Nvoid Init_all(unsigned long addr,unsigned long len);
N
N#endif
N
N
N
N
N
N
N
L 4 "Application\serial.c" 2
N#include "OSAL_RingBuf.h"
L 1 "Application\OSAL_RingBuf.h" 1
N#ifndef _OSAL_RINGBUF_H_
N#define _OSAL_RINGBUF_H_
N
N
N#define RING_BUF_SIZE  512
N
N
Ntypedef struct
N{
N	   uint8  buffer[RING_BUF_SIZE];
X	   uint8  buffer[512];
N	   size_t bytes_in_buffer;
N	   uint8  *pread;
N	   uint8  *pwrite;
N}ring_buffer_t;
N
N
Ntypedef  enum{
N	CONSOLE =0,
N	IR_FRONT,
N	IR_BACK_IN,
N	DEVICE_NUM
N}ringbuf_device_t;
N
N
N
Nvoid ring_buffer_init(void);
N
Nvoid ring_buffer_write(ringbuf_device_t index, uint8 ch);
N
Nsize_t ring_buffer_len(ringbuf_device_t index);
N
N
Nuint8 ring_buffer_read(ringbuf_device_t index);
N
N
N#endif
N
L 5 "Application\serial.c" 2
N#include "serial.h"
L 1 "Application\serial.h" 1
N#ifndef _SERIAL_H_
N#define _SERIAL_H_
N
N
N
N
N
Nvoid bsp_uart_init(void);
N
N
N
N
N
N
Nvoid serial_poll_handler(void);
N
N
N
N
N
N#endif
N
N
N
N
N
N
L 6 "Application\serial.c" 2
N
N
Nring_buffer_t console;
N
N
Nvoid bsp_uart_init(void)
N{
N	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
X	SysCtlPeripheralEnable(0xf0001800);
N	GPIOPinConfigure(GPIO_PA0_U0RX);
X	GPIOPinConfigure(0x00000001);
N	GPIOPinConfigure(GPIO_PA1_U0TX);
X	GPIOPinConfigure(0x00000401);
N	GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
X	GPIOPinTypeUART(0x40004000, 0x00000001 | 0x00000002);
N	UARTConfigSetExpClk(UART0_BASE, gSysClock, 115200,(UART_CONFIG_WLEN_8|UART_CONFIG_STOP_ONE |UART_CONFIG_PAR_NONE));
X	UARTConfigSetExpClk(0x4000C000, gSysClock, 115200,(0x00000060|0x00000000 |0x00000000));
N
N	//	Enable RX interrupt
N	UARTIntEnable(UART0_BASE, UART_INT_RX|UART_INT_RT);
X	UARTIntEnable(0x4000C000, 0x010|0x040);
N
N	
N
N	// 	Enable UART0
N	UARTEnable(UART0_BASE); 
X	UARTEnable(0x4000C000); 
N}
N
Nvoid uart0_interrupt_handler(void)
N{
N	 uint32_t status;
N	 int ch;
N	
N	 status = UARTIntStatus(UART0_BASE, true);
X	 status = UARTIntStatus(0x4000C000, 1);
N	 UARTIntClear(UART0_BASE, status);
X	 UARTIntClear(0x4000C000, status);
N	
N	 if ((status & UART_INT_RX) || (status & UART_INT_RT)){
X	 if ((status & 0x010) || (status & 0x040)){
N		   while(UARTCharsAvail(UART0_BASE)){
X		   while(UARTCharsAvail(0x4000C000)){
N				 ch = UARTCharGetNonBlocking(UART0_BASE);
X				 ch = UARTCharGetNonBlocking(0x4000C000);
N				 if(ch > 0){
N					 ring_buffer_write(CONSOLE,(uint8)ch);
N				 }
N			 }
N	 }
N}
N
N
Nstatic void c_printf(uint8 ch)
N{
N	   while(UARTCharPutNonBlocking(UART0_BASE, ch) == false);
X	   while(UARTCharPutNonBlocking(0x4000C000, ch) == 0);
N}
N
N
Nvoid serial_poll_handler(void)
N{
N	   size_t len;
N	   uint8 ch;
N	   static char buf[128] = {0};
N     static  uint8 index = 0;
N	
N	   len = ring_buffer_len(CONSOLE);
N
N	   if(len > 0){
N			 while(len--){
N				    ch = ring_buffer_read(CONSOLE);
N				    if(ch == '\b'){
N							  s_printf("\b \b");
N							  if(index > 0){
N							    buf[--index] = 0;
N								}
N							  continue;
N						}
N						if(ch == '\r' || ch == '\n'){
N							if(index == 0){
N								  s_printf("\r\nSaiyn->");
N								  continue;
N							}
N							else{
N							  buf[index] = 0;
N							  osal_run_command(buf);
N							  memset(buf, 0, sizeof(buf));
N							  index = 0;
N								continue;
N							}
N						}
N						if(index > 127) index = 0;
N						buf[index++] = ch;
N						c_printf(ch);
N			 }
N		 }		
N}
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
N
