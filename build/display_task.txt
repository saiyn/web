; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\display_task.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\display_task.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\display_task.crf Task\Display_Task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  menu_list_add_next PROC
;;;85     
;;;86     static menu_t *menu_list_add_next(menu_t **head, menu_id_t id)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;87     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;88     	menu_t *menu;
;;;89     	menu_t *p = *head;
000008  682f              LDR      r7,[r5,#0]
;;;90     	
;;;91     	menu = (menu_t *)pvPortMalloc(sizeof(menu_t));
00000a  2018              MOVS     r0,#0x18
00000c  f7fffffe          BL       pvPortMalloc
000010  4604              MOV      r4,r0
;;;92     	
;;;93     	OSAL_ASSERT(menu != NULL);
000012  b934              CBNZ     r4,|L1.34|
000014  4af0              LDR      r2,|L1.984|
000016  a1f1              ADR      r1,|L1.988|
000018  a0f4              ADR      r0,|L1.1004|
00001a  f7fffffe          BL       s_printf
00001e  bf00              NOP      
                  |L1.32|
000020  e7fe              B        |L1.32|
                  |L1.34|
;;;94     	
;;;95     	menu->id = id;
000022  7026              STRB     r6,[r4,#0]
;;;96     	menu->context = &menu_context[id];
000024  eb060046          ADD      r0,r6,r6,LSL #1
000028  49f8              LDR      r1,|L1.1036|
00002a  eb010080          ADD      r0,r1,r0,LSL #2
00002e  6060              STR      r0,[r4,#4]
;;;97     	menu->child = NULL;
000030  2000              MOVS     r0,#0
000032  6120              STR      r0,[r4,#0x10]
;;;98     	menu->parent = NULL;
000034  6160              STR      r0,[r4,#0x14]
;;;99     	menu->next = NULL;
000036  60a0              STR      r0,[r4,#8]
;;;100    	menu->prev = NULL;
000038  60e0              STR      r0,[r4,#0xc]
;;;101    	
;;;102    	if(*head){
00003a  6828              LDR      r0,[r5,#0]
00003c  b138              CBZ      r0,|L1.78|
;;;103    		while(p->next){
00003e  e000              B        |L1.66|
                  |L1.64|
;;;104    			p = p->next;
000040  68bf              LDR      r7,[r7,#8]
                  |L1.66|
000042  68b8              LDR      r0,[r7,#8]            ;103
000044  2800              CMP      r0,#0                 ;103
000046  d1fb              BNE      |L1.64|
;;;105    		}
;;;106    		
;;;107    		p->next = menu;
000048  60bc              STR      r4,[r7,#8]
;;;108    		menu->prev = p;
00004a  60e7              STR      r7,[r4,#0xc]
00004c  e000              B        |L1.80|
                  |L1.78|
;;;109    		
;;;110    	}else{
;;;111    		*head = menu;
00004e  602c              STR      r4,[r5,#0]
                  |L1.80|
;;;112    	}
;;;113    	
;;;114    	/*reach the list end*/
;;;115    	if(id == MENU_NODE - 1){
000050  2e07              CMP      r6,#7
000052  d109              BNE      |L1.104|
;;;116    		menu->next = (*head)->next->next->next;
000054  6828              LDR      r0,[r5,#0]
000056  6880              LDR      r0,[r0,#8]
000058  6880              LDR      r0,[r0,#8]
00005a  6880              LDR      r0,[r0,#8]
00005c  60a0              STR      r0,[r4,#8]
;;;117    		(*head)->next->next->next->prev = menu;
00005e  6828              LDR      r0,[r5,#0]
000060  6880              LDR      r0,[r0,#8]
000062  6880              LDR      r0,[r0,#8]
000064  6880              LDR      r0,[r0,#8]
000066  60c4              STR      r4,[r0,#0xc]
                  |L1.104|
;;;118    	}
;;;119    	
;;;120    	return menu;
000068  4620              MOV      r0,r4
;;;121    }
00006a  e8bd81f0          POP      {r4-r8,pc}
;;;122    
                          ENDP

                  menu_list_add_child_and_next PROC
;;;123    static void menu_list_add_child_and_next(menu_t *parent, menu_id_t id)
00006e  e92d41f0          PUSH     {r4-r8,lr}
;;;124    {
000072  4607              MOV      r7,r0
000074  460e              MOV      r6,r1
;;;125    	menu_t *menu;
;;;126    	menu_t *p = parent;
000076  463d              MOV      r5,r7
;;;127    	
;;;128    	menu = (menu_t *)pvPortMalloc(sizeof(menu_t));
000078  2018              MOVS     r0,#0x18
00007a  f7fffffe          BL       pvPortMalloc
00007e  4604              MOV      r4,r0
;;;129    	
;;;130    	OSAL_ASSERT(menu != NULL);
000080  b934              CBNZ     r4,|L1.144|
000082  4ae3              LDR      r2,|L1.1040|
000084  a1d5              ADR      r1,|L1.988|
000086  a0d9              ADR      r0,|L1.1004|
000088  f7fffffe          BL       s_printf
00008c  bf00              NOP      
                  |L1.142|
00008e  e7fe              B        |L1.142|
                  |L1.144|
;;;131    	
;;;132    	menu->id = id;
000090  7026              STRB     r6,[r4,#0]
;;;133    	menu->context = &menu_context[id];
000092  eb060046          ADD      r0,r6,r6,LSL #1
000096  49dd              LDR      r1,|L1.1036|
000098  eb010080          ADD      r0,r1,r0,LSL #2
00009c  6060              STR      r0,[r4,#4]
;;;134    	menu->child = NULL;
00009e  2000              MOVS     r0,#0
0000a0  6120              STR      r0,[r4,#0x10]
;;;135    	menu->parent = NULL;
0000a2  6160              STR      r0,[r4,#0x14]
;;;136    	menu->next = NULL;
0000a4  60a0              STR      r0,[r4,#8]
;;;137    	menu->prev = NULL;
0000a6  60e0              STR      r0,[r4,#0xc]
;;;138    	
;;;139    	if(id == MENU_NODE){
0000a8  2e08              CMP      r6,#8
0000aa  d102              BNE      |L1.178|
;;;140    		p->child = menu;
0000ac  612c              STR      r4,[r5,#0x10]
;;;141    		menu->parent = p;
0000ae  6165              STR      r5,[r4,#0x14]
0000b0  e007              B        |L1.194|
                  |L1.178|
;;;142    	}else{
;;;143    		p = p->child;
0000b2  692d              LDR      r5,[r5,#0x10]
;;;144    		
;;;145    		while(p->next){
0000b4  e000              B        |L1.184|
                  |L1.182|
;;;146    			p = p->next;
0000b6  68ad              LDR      r5,[r5,#8]
                  |L1.184|
0000b8  68a8              LDR      r0,[r5,#8]            ;145
0000ba  2800              CMP      r0,#0                 ;145
0000bc  d1fb              BNE      |L1.182|
;;;147    		}
;;;148    		
;;;149    		p->next = menu;
0000be  60ac              STR      r4,[r5,#8]
;;;150    		menu->prev = p;
0000c0  60e5              STR      r5,[r4,#0xc]
                  |L1.194|
;;;151    	}
;;;152    	
;;;153    	if(id == MENU_NUM - 1){
0000c2  2e15              CMP      r6,#0x15
0000c4  d103              BNE      |L1.206|
;;;154    		menu->next = parent->child;
0000c6  6938              LDR      r0,[r7,#0x10]
0000c8  60a0              STR      r0,[r4,#8]
;;;155    		parent->child->prev = menu;
0000ca  6938              LDR      r0,[r7,#0x10]
0000cc  60c4              STR      r4,[r0,#0xc]
                  |L1.206|
;;;156    	}
;;;157    }
0000ce  e8bd81f0          POP      {r4-r8,pc}
;;;158    
                          ENDP

                  display_menu_list_create PROC
;;;161    
;;;162    void display_menu_list_create(menu_t **head)
0000d2  b570              PUSH     {r4-r6,lr}
;;;163    {
0000d4  4606              MOV      r6,r0
;;;164    	uint8 j;
;;;165    	menu_t *tail;
;;;166    	
;;;167    	for(j = 0; j < MENU_NODE; j++){
0000d6  2400              MOVS     r4,#0
0000d8  e006              B        |L1.232|
                  |L1.218|
;;;168    		tail = menu_list_add_next(head, (menu_id_t)j);
0000da  4621              MOV      r1,r4
0000dc  4630              MOV      r0,r6
0000de  f7fffffe          BL       menu_list_add_next
0000e2  4605              MOV      r5,r0
0000e4  1c60              ADDS     r0,r4,#1              ;167
0000e6  b2c4              UXTB     r4,r0                 ;167
                  |L1.232|
0000e8  2c08              CMP      r4,#8                 ;167
0000ea  dbf6              BLT      |L1.218|
;;;169    	}
;;;170    	
;;;171    	//SYS_TRACE("the first list end menu is[%d]\r\n", tail->id);
;;;172    	
;;;173    	/*welcome and factory menu just show once*/
;;;174    	(*head)->next->next->next->prev = tail;
0000ec  6830              LDR      r0,[r6,#0]
0000ee  6880              LDR      r0,[r0,#8]
0000f0  6880              LDR      r0,[r0,#8]
0000f2  6880              LDR      r0,[r0,#8]
0000f4  60c5              STR      r5,[r0,#0xc]
;;;175    	 
;;;176    	
;;;177    	for(j = MENU_NODE; j < MENU_NUM; j++){
0000f6  2408              MOVS     r4,#8
0000f8  e005              B        |L1.262|
                  |L1.250|
;;;178    		menu_list_add_child_and_next(tail, (menu_id_t)j);
0000fa  4621              MOV      r1,r4
0000fc  4628              MOV      r0,r5
0000fe  f7fffffe          BL       menu_list_add_child_and_next
000102  1c60              ADDS     r0,r4,#1              ;177
000104  b2c4              UXTB     r4,r0                 ;177
                  |L1.262|
000106  2c16              CMP      r4,#0x16              ;177
000108  dbf7              BLT      |L1.250|
;;;179    	}
;;;180    	
;;;181    }
00010a  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP

                  display_menu_jump PROC
;;;183    
;;;184    void display_menu_jump(menu_id_t to)
00010c  b570              PUSH     {r4-r6,lr}
;;;185    {
00010e  4605              MOV      r5,r0
;;;186    	menu_t *found = gMenuHead;
000110  48c0              LDR      r0,|L1.1044|
000112  6804              LDR      r4,[r0,#0]  ; gMenuHead
;;;187    	menu_t *begin = gMenuHead;
000114  6806              LDR      r6,[r0,#0]  ; gMenuHead
;;;188    	
;;;189    	while(found->id != INSTALL_MENU){
000116  e006              B        |L1.294|
                  |L1.280|
;;;190    		if(found->id == to){
000118  7820              LDRB     r0,[r4,#0]
00011a  42a8              CMP      r0,r5
00011c  d102              BNE      |L1.292|
;;;191    			cur_menu = found;
00011e  48be              LDR      r0,|L1.1048|
000120  6004              STR      r4,[r0,#0]  ; cur_menu
                  |L1.290|
;;;192    			return;
;;;193    		}else{
;;;194    			found = found->next;
;;;195    		}
;;;196    	}
;;;197    	
;;;198    	begin = found->child;
;;;199    	found = found->child;
;;;200    	
;;;201    	OSAL_ASSERT(begin != NULL);
;;;202    	
;;;203    	while(found->next != begin){
;;;204         if(found->id == to){
;;;205    			 cur_menu = found;
;;;206    			 break;
;;;207    		 }else{
;;;208    			 found = found->next;
;;;209    		 }
;;;210    	}
;;;211    	
;;;212    }
000122  bd70              POP      {r4-r6,pc}
                  |L1.292|
000124  68a4              LDR      r4,[r4,#8]            ;194
                  |L1.294|
000126  7820              LDRB     r0,[r4,#0]            ;189
000128  2807              CMP      r0,#7                 ;189
00012a  d1f5              BNE      |L1.280|
00012c  6926              LDR      r6,[r4,#0x10]         ;198
00012e  6924              LDR      r4,[r4,#0x10]         ;199
000130  b936              CBNZ     r6,|L1.320|
000132  4aba              LDR      r2,|L1.1052|
000134  a1ba              ADR      r1,|L1.1056|
000136  a0ad              ADR      r0,|L1.1004|
000138  f7fffffe          BL       s_printf
00013c  bf00              NOP                            ;201
                  |L1.318|
00013e  e7fe              B        |L1.318|
                  |L1.320|
000140  e006              B        |L1.336|
                  |L1.322|
000142  7820              LDRB     r0,[r4,#0]            ;204
000144  42a8              CMP      r0,r5                 ;204
000146  d102              BNE      |L1.334|
000148  48b3              LDR      r0,|L1.1048|
00014a  6004              STR      r4,[r0,#0]            ;205  ; cur_menu
00014c  e003              B        |L1.342|
                  |L1.334|
00014e  68a4              LDR      r4,[r4,#8]            ;208
                  |L1.336|
000150  68a0              LDR      r0,[r4,#8]            ;203
000152  42b0              CMP      r0,r6                 ;203
000154  d1f5              BNE      |L1.322|
                  |L1.342|
000156  bf00              NOP                            ;206
000158  bf00              NOP      
00015a  e7e2              B        |L1.290|
;;;213    
                          ENDP

                  dis_print PROC
;;;214    
;;;215    static void dis_print(uint8 line, char *fmt, ...)
00015c  b40f              PUSH     {r0-r3}
;;;216    {
00015e  b530              PUSH     {r4,r5,lr}
000160  b087              SUB      sp,sp,#0x1c
000162  4605              MOV      r5,r0
;;;217    	 uint8 j;
;;;218    	 char buf[LCD_LINE_LEN + 1] = {0};
000164  2118              MOVS     r1,#0x18
000166  a801              ADD      r0,sp,#4
000168  f7fffffe          BL       __aeabi_memclr4
;;;219       va_list ap;
;;;220    
;;;221       va_start(ap, fmt);
00016c  a80c              ADD      r0,sp,#0x30
00016e  9000              STR      r0,[sp,#0]
;;;222       vsprintf(buf, fmt, ap);
000170  a801              ADD      r0,sp,#4
000172  9a00              LDR      r2,[sp,#0]
000174  990b              LDR      r1,[sp,#0x2c]
000176  f7fffffe          BL       vsprintf
;;;223       va_end(ap);
00017a  2000              MOVS     r0,#0
00017c  9000              STR      r0,[sp,#0]
;;;224    
;;;225       lcd_write_cmd(line);
00017e  4628              MOV      r0,r5
000180  f7fffffe          BL       lcd_write_cmd
;;;226       bsp_delay_us(47);
000184  202f              MOVS     r0,#0x2f
000186  f7fffffe          BL       bsp_delay_us
;;;227       for(j = 0; j < LCD_LINE_LEN; j++){
00018a  2400              MOVS     r4,#0
00018c  e02f              B        |L1.494|
                  |L1.398|
;;;228    		 if(buf[j] == '<'){
00018e  a801              ADD      r0,sp,#4
000190  5d00              LDRB     r0,[r0,r4]
000192  283c              CMP      r0,#0x3c
000194  d103              BNE      |L1.414|
;;;229    			 lcd_write_data(0);
000196  2000              MOVS     r0,#0
000198  f7fffffe          BL       lcd_write_data
00019c  e022              B        |L1.484|
                  |L1.414|
;;;230    		 }else if(buf[j] == '>'){
00019e  a801              ADD      r0,sp,#4
0001a0  5d00              LDRB     r0,[r0,r4]
0001a2  283e              CMP      r0,#0x3e
0001a4  d103              BNE      |L1.430|
;;;231    			 lcd_write_data(6);
0001a6  2006              MOVS     r0,#6
0001a8  f7fffffe          BL       lcd_write_data
0001ac  e01a              B        |L1.484|
                  |L1.430|
;;;232    		 }else if(buf[j] == '@'){
0001ae  a801              ADD      r0,sp,#4
0001b0  5d00              LDRB     r0,[r0,r4]
0001b2  2840              CMP      r0,#0x40
0001b4  d103              BNE      |L1.446|
;;;233    			 lcd_write_data(4);
0001b6  2004              MOVS     r0,#4
0001b8  f7fffffe          BL       lcd_write_data
0001bc  e012              B        |L1.484|
                  |L1.446|
;;;234    		 }else if(buf[j] == 0){
0001be  a801              ADD      r0,sp,#4
0001c0  5d00              LDRB     r0,[r0,r4]
0001c2  b918              CBNZ     r0,|L1.460|
;;;235    			 lcd_write_data(' ');
0001c4  2020              MOVS     r0,#0x20
0001c6  f7fffffe          BL       lcd_write_data
0001ca  e00b              B        |L1.484|
                  |L1.460|
;;;236    		 }else if(buf[j] == '^'){
0001cc  a801              ADD      r0,sp,#4
0001ce  5d00              LDRB     r0,[r0,r4]
0001d0  285e              CMP      r0,#0x5e
0001d2  d103              BNE      |L1.476|
;;;237    			 lcd_write_data(7);
0001d4  2007              MOVS     r0,#7
0001d6  f7fffffe          BL       lcd_write_data
0001da  e003              B        |L1.484|
                  |L1.476|
;;;238    		 }else{
;;;239    			 lcd_write_data(buf[j]);
0001dc  a901              ADD      r1,sp,#4
0001de  5d08              LDRB     r0,[r1,r4]
0001e0  f7fffffe          BL       lcd_write_data
                  |L1.484|
;;;240    		 }
;;;241    		 
;;;242    		 bsp_delay_us(47);
0001e4  202f              MOVS     r0,#0x2f
0001e6  f7fffffe          BL       bsp_delay_us
0001ea  1c60              ADDS     r0,r4,#1              ;227
0001ec  b2c4              UXTB     r4,r0                 ;227
                  |L1.494|
0001ee  2c14              CMP      r4,#0x14              ;227
0001f0  dbcd              BLT      |L1.398|
;;;243    	 }
;;;244       
;;;245    }
0001f2  b007              ADD      sp,sp,#0x1c
0001f4  bc30              POP      {r4,r5}
0001f6  f85dfb14          LDR      pc,[sp],#0x14
;;;246    
                          ENDP

                  dis_print_buf PROC
;;;247    static void dis_print_buf(uint8 line, uint8 *buf)
0001fa  b570              PUSH     {r4-r6,lr}
;;;248    {
0001fc  4606              MOV      r6,r0
0001fe  460d              MOV      r5,r1
;;;249    	 uint8 j;
;;;250    	
;;;251    	 lcd_write_cmd(line);
000200  4630              MOV      r0,r6
000202  f7fffffe          BL       lcd_write_cmd
;;;252       bsp_delay_us(47);
000206  202f              MOVS     r0,#0x2f
000208  f7fffffe          BL       bsp_delay_us
;;;253       for(j = 0; j < LCD_LINE_LEN; j++){
00020c  2400              MOVS     r4,#0
00020e  e007              B        |L1.544|
                  |L1.528|
;;;254    		 lcd_write_data(buf[j]);
000210  5d28              LDRB     r0,[r5,r4]
000212  f7fffffe          BL       lcd_write_data
;;;255    		 bsp_delay_us(47);
000216  202f              MOVS     r0,#0x2f
000218  f7fffffe          BL       bsp_delay_us
00021c  1c60              ADDS     r0,r4,#1              ;253
00021e  b2c4              UXTB     r4,r0                 ;253
                  |L1.544|
000220  2c14              CMP      r4,#0x14              ;253
000222  dbf5              BLT      |L1.528|
;;;256    	 }
;;;257    }
000224  bd70              POP      {r4-r6,pc}
;;;258    
                          ENDP

                  dis_clean PROC
;;;259    static void dis_clean(void)
000226  4770              BX       lr
;;;260    {
;;;261    //	lcd_write_cmd(0x01);
;;;262    //	bsp_delay_ms(2);
;;;263    }
;;;264    
                          ENDP

                  dis_welcome_menu PROC
;;;265    static void dis_welcome_menu(sys_state_t *sys)
000228  b510              PUSH     {r4,lr}
;;;266    {
00022a  4604              MOV      r4,r0
;;;267    	 dis_clean();
00022c  f7fffffe          BL       dis_clean
;;;268    	 dis_print(LCD_LINE_1, " TRIAD SPEAKERS INC");
000230  a17f              ADR      r1,|L1.1072|
000232  2080              MOVS     r0,#0x80
000234  f7fffffe          BL       dis_print
;;;269    	 OSAL_ASSERT(sys->sub_model < SUB_MODEL_NUM);
000238  7ee0              LDRB     r0,[r4,#0x1b]
00023a  280d              CMP      r0,#0xd
00023c  db06              BLT      |L1.588|
00023e  4a81              LDR      r2,|L1.1092|
000240  a181              ADR      r1,|L1.1096|
000242  a06a              ADR      r0,|L1.1004|
000244  f7fffffe          BL       s_printf
000248  bf00              NOP      
                  |L1.586|
00024a  e7fe              B        |L1.586|
                  |L1.588|
;;;270    	 dis_print(LCD_LINE_2, "  %s", sub_name[sys->sub_model]);
00024c  7ee0              LDRB     r0,[r4,#0x1b]
00024e  4986              LDR      r1,|L1.1128|
000250  f8512020          LDR      r2,[r1,r0,LSL #2]
000254  a185              ADR      r1,|L1.1132|
000256  20c0              MOVS     r0,#0xc0
000258  f7fffffe          BL       dis_print
;;;271    	
;;;272    	 //sys_timeout(5000, welcome_dis_timeout_handler, (void *)sys);
;;;273    }
00025c  bd10              POP      {r4,pc}
;;;274    
                          ENDP

                  dis_volume_menu PROC
;;;275    static void dis_volume_menu(sys_state_t *sys)
00025e  e92d41f0          PUSH     {r4-r8,lr}
;;;276    {
000262  b086              SUB      sp,sp,#0x18
000264  4604              MOV      r4,r0
;;;277    	 uint8 vol,j;
;;;278    	 uint8 index1, index2;
;;;279    	 uint8 temp[20] = {0};
000266  2114              MOVS     r1,#0x14
000268  a801              ADD      r0,sp,#4
00026a  f7fffffe          BL       __aeabi_memclr4
;;;280    	
;;;281    
;;;282       /*when protection event occur, we should not overwrite the protection display*/
;;;283       if(sys->protect_bitmap != 0) return;
00026e  f894004a          LDRB     r0,[r4,#0x4a]
000272  b110              CBZ      r0,|L1.634|
                  |L1.628|
;;;284    
;;;285    	 dis_clean(); 
;;;286    	 if(sys->is_mute == true){
;;;287    		    dis_print(LCD_LINE_1, "Volume       < Mute>");
;;;288    		    dis_print(LCD_LINE_2, "                    ");
;;;289    	 }else{
;;;290    			if(sys->master_vol >= 0){
;;;291    				dis_print(LCD_LINE_1, "Volume       <+%02ddB>", sys->master_vol);
;;;292    			}else{
;;;293    				dis_print(LCD_LINE_1, "Volume       <%03ddB>", sys->master_vol);
;;;294    			}
;;;295    			
;;;296    			vol = sys->master_vol - VOLUME_VALUE_MIN(sys->input_gain);
;;;297    			index1 = vol / 4;
;;;298    			index2 = vol % 4;
;;;299    			for(j = 0; j < index1; j++){
;;;300    				temp[j] = 5;
;;;301    			}
;;;302    			
;;;303    			for(j = index1; j < 20; j++){
;;;304    				temp[j] = ' ';
;;;305    			}
;;;306    			
;;;307    			if(index2){
;;;308    			    temp[index1] = index2;
;;;309    			}
;;;310    			
;;;311    			dis_print_buf(LCD_LINE_2,temp);
;;;312    			
;;;313       }
;;;314    	 
;;;315    }
000274  b006              ADD      sp,sp,#0x18
000276  e8bd81f0          POP      {r4-r8,pc}
                  |L1.634|
00027a  f7fffffe          BL       dis_clean
00027e  f8940049          LDRB     r0,[r4,#0x49]         ;286
000282  2801              CMP      r0,#1                 ;286
000284  d108              BNE      |L1.664|
000286  a17b              ADR      r1,|L1.1140|
000288  2080              MOVS     r0,#0x80              ;287
00028a  f7fffffe          BL       dis_print
00028e  a17f              ADR      r1,|L1.1164|
000290  20c0              MOVS     r0,#0xc0              ;288
000292  f7fffffe          BL       dis_print
000296  e043              B        |L1.800|
                  |L1.664|
000298  6960              LDR      r0,[r4,#0x14]         ;290
00029a  2800              CMP      r0,#0                 ;290
00029c  db05              BLT      |L1.682|
00029e  a181              ADR      r1,|L1.1188|
0002a0  2080              MOVS     r0,#0x80              ;291
0002a2  6962              LDR      r2,[r4,#0x14]         ;291
0002a4  f7fffffe          BL       dis_print
0002a8  e004              B        |L1.692|
                  |L1.682|
0002aa  a184              ADR      r1,|L1.1212|
0002ac  2080              MOVS     r0,#0x80              ;293
0002ae  6962              LDR      r2,[r4,#0x14]         ;293
0002b0  f7fffffe          BL       dis_print
                  |L1.692|
0002b4  6961              LDR      r1,[r4,#0x14]         ;296
0002b6  69e0              LDR      r0,[r4,#0x1c]         ;296
0002b8  2800              CMP      r0,#0                 ;296
0002ba  db02              BLT      |L1.706|
0002bc  f06f0027          MVN      r0,#0x27              ;296
0002c0  e003              B        |L1.714|
                  |L1.706|
0002c2  f06f0227          MVN      r2,#0x27              ;296
0002c6  69e0              LDR      r0,[r4,#0x1c]         ;296
0002c8  1a10              SUBS     r0,r2,r0              ;296
                  |L1.714|
0002ca  1a08              SUBS     r0,r1,r0              ;296
0002cc  b2c5              UXTB     r5,r0                 ;296
0002ce  4628              MOV      r0,r5                 ;297
0002d0  17e9              ASRS     r1,r5,#31             ;297
0002d2  eb057191          ADD      r1,r5,r1,LSR #30      ;297
0002d6  108f              ASRS     r7,r1,#2              ;297
0002d8  17e9              ASRS     r1,r5,#31             ;298
0002da  eb057191          ADD      r1,r5,r1,LSR #30      ;298
0002de  1089              ASRS     r1,r1,#2              ;298
0002e0  eba50181          SUB      r1,r5,r1,LSL #2       ;298
0002e4  f00108ff          AND      r8,r1,#0xff           ;298
0002e8  2600              MOVS     r6,#0                 ;299
0002ea  e004              B        |L1.758|
                  |L1.748|
0002ec  2005              MOVS     r0,#5                 ;300
0002ee  a901              ADD      r1,sp,#4              ;300
0002f0  5588              STRB     r0,[r1,r6]            ;300
0002f2  1c70              ADDS     r0,r6,#1              ;299
0002f4  b2c6              UXTB     r6,r0                 ;299
                  |L1.758|
0002f6  42be              CMP      r6,r7                 ;299
0002f8  dbf8              BLT      |L1.748|
0002fa  463e              MOV      r6,r7                 ;303
0002fc  e004              B        |L1.776|
                  |L1.766|
0002fe  2020              MOVS     r0,#0x20              ;304
000300  a901              ADD      r1,sp,#4              ;304
000302  5588              STRB     r0,[r1,r6]            ;304
000304  1c70              ADDS     r0,r6,#1              ;303
000306  b2c6              UXTB     r6,r0                 ;303
                  |L1.776|
000308  2e14              CMP      r6,#0x14              ;303
00030a  dbf8              BLT      |L1.766|
00030c  f1b80f00          CMP      r8,#0                 ;307
000310  d002              BEQ      |L1.792|
000312  a801              ADD      r0,sp,#4              ;308
000314  f8008007          STRB     r8,[r0,r7]            ;308
                  |L1.792|
000318  a901              ADD      r1,sp,#4              ;311
00031a  20c0              MOVS     r0,#0xc0              ;311
00031c  f7fffffe          BL       dis_print_buf
                  |L1.800|
000320  bf00              NOP      
000322  e7a7              B        |L1.628|
;;;316    
                          ENDP

                  dis_source_menu PROC
;;;317    static void dis_source_menu(sys_state_t *sys)
000324  b538              PUSH     {r3-r5,lr}
;;;318    {
000326  4604              MOV      r4,r0
;;;319    	dis_clean(); 
000328  f7fffffe          BL       dis_clean
;;;320      dis_print(LCD_LINE_1, " Input Source Select");
00032c  a169              ADR      r1,|L1.1236|
00032e  2080              MOVS     r0,#0x80
000330  f7fffffe          BL       dis_print
;;;321    	OSAL_ASSERT(sys->src < SRC_NUM);
000334  7e20              LDRB     r0,[r4,#0x18]
000336  2803              CMP      r0,#3
000338  db06              BLT      |L1.840|
00033a  4a6c              LDR      r2,|L1.1260|
00033c  a16c              ADR      r1,|L1.1264|
00033e  a02b              ADR      r0,|L1.1004|
000340  f7fffffe          BL       s_printf
000344  bf00              NOP      
                  |L1.838|
000346  e7fe              B        |L1.838|
                  |L1.840|
;;;322    	dis_print(LCD_LINE_2, "%-6s<%5s >%6s", src_name[(sys->src == 0? (SRC_NUM - 1):(sys->src - 1))], src_name[sys->src], src_name[((sys->src + 1) % SRC_NUM)]);
000348  7e20              LDRB     r0,[r4,#0x18]
00034a  1c40              ADDS     r0,r0,#1
00034c  2103              MOVS     r1,#3
00034e  fb90f2f1          SDIV     r2,r0,r1
000352  fb010012          MLS      r0,r1,r2,r0
000356  496b              LDR      r1,|L1.1284|
000358  f8515020          LDR      r5,[r1,r0,LSL #2]
00035c  9500              STR      r5,[sp,#0]
00035e  7e20              LDRB     r0,[r4,#0x18]
000360  f8513020          LDR      r3,[r1,r0,LSL #2]
000364  b908              CBNZ     r0,|L1.874|
000366  2002              MOVS     r0,#2
000368  e001              B        |L1.878|
                  |L1.874|
00036a  7e20              LDRB     r0,[r4,#0x18]
00036c  1e40              SUBS     r0,r0,#1
                  |L1.878|
00036e  4965              LDR      r1,|L1.1284|
000370  f8512020          LDR      r2,[r1,r0,LSL #2]
000374  a164              ADR      r1,|L1.1288|
000376  20c0              MOVS     r0,#0xc0
000378  f7fffffe          BL       dis_print
;;;323    }
00037c  bd38              POP      {r3-r5,pc}
;;;324    
                          ENDP

                  dis_preset_menu PROC
;;;325    
;;;326    static void dis_preset_menu(sys_state_t *sys)
00037e  b538              PUSH     {r3-r5,lr}
;;;327    {
000380  4604              MOV      r4,r0
;;;328    	dis_clean();  
000382  f7fffffe          BL       dis_clean
;;;329    	dis_print(LCD_LINE_1, " Preset Selection");
000386  a164              ADR      r1,|L1.1304|
000388  2080              MOVS     r0,#0x80
00038a  f7fffffe          BL       dis_print
;;;330    	OSAL_ASSERT(sys->preset < PRESET_NUM);
00038e  7e60              LDRB     r0,[r4,#0x19]
000390  2806              CMP      r0,#6
000392  db06              BLT      |L1.930|
000394  4a65              LDR      r2,|L1.1324|
000396  a166              ADR      r1,|L1.1328|
000398  a014              ADR      r0,|L1.1004|
00039a  f7fffffe          BL       s_printf
00039e  bf00              NOP      
                  |L1.928|
0003a0  e7fe              B        |L1.928|
                  |L1.930|
;;;331    	dis_print(LCD_LINE_2, "%-6s<%6s>%6s", pre_name[(sys->preset == 0? (PRESET_NUM - 1): (sys->preset - 1))], pre_name[sys->preset], pre_name[((sys->preset + 1) % PRESET_NUM)]);
0003a2  7e60              LDRB     r0,[r4,#0x19]
0003a4  1c40              ADDS     r0,r0,#1
0003a6  2106              MOVS     r1,#6
0003a8  fb90f2f1          SDIV     r2,r0,r1
0003ac  fb010012          MLS      r0,r1,r2,r0
0003b0  4966              LDR      r1,|L1.1356|
0003b2  f8515020          LDR      r5,[r1,r0,LSL #2]
0003b6  9500              STR      r5,[sp,#0]
0003b8  7e60              LDRB     r0,[r4,#0x19]
0003ba  f8513020          LDR      r3,[r1,r0,LSL #2]
0003be  b908              CBNZ     r0,|L1.964|
0003c0  2005              MOVS     r0,#5
0003c2  e001              B        |L1.968|
                  |L1.964|
0003c4  7e60              LDRB     r0,[r4,#0x19]
0003c6  1e40              SUBS     r0,r0,#1
                  |L1.968|
0003c8  4960              LDR      r1,|L1.1356|
0003ca  f8512020          LDR      r2,[r1,r0,LSL #2]
0003ce  a160              ADR      r1,|L1.1360|
0003d0  20c0              MOVS     r0,#0xc0
0003d2  f7fffffe          BL       dis_print
;;;332    }
0003d6  bd38              POP      {r3-r5,pc}
                  |L1.984|
                          DCD      __FUNCTION__
                  |L1.988|
0003dc  6d656e75          DCB      "menu != NULL",0
0003e0  20213d20
0003e4  4e554c4c
0003e8  00      
0003e9  00                DCB      0
0003ea  00                DCB      0
0003eb  00                DCB      0
                  |L1.1004|
0003ec  28257329          DCB      "(%s) has assert failed at %s.\n",0
0003f0  20686173
0003f4  20617373
0003f8  65727420
0003fc  6661696c
000400  65642061
000404  74202573
000408  2e0a00  
00040b  00                DCB      0
                  |L1.1036|
                          DCD      menu_context
                  |L1.1040|
                          DCD      |symbol_number.35|
                  |L1.1044|
                          DCD      gMenuHead
                  |L1.1048|
                          DCD      cur_menu
                  |L1.1052|
                          DCD      |symbol_number.36|
                  |L1.1056|
000420  62656769          DCB      "begin != NULL",0
000424  6e20213d
000428  204e554c
00042c  4c00    
00042e  00                DCB      0
00042f  00                DCB      0
                  |L1.1072|
000430  20545249          DCB      " TRIAD SPEAKERS INC",0
000434  41442053
000438  5045414b
00043c  45525320
000440  494e4300
                  |L1.1092|
                          DCD      |symbol_number.37|
                  |L1.1096|
000448  7379732d          DCB      "sys->sub_model < SUB_MODEL_NUM",0
00044c  3e737562
000450  5f6d6f64
000454  656c203c
000458  20535542
00045c  5f4d4f44
000460  454c5f4e
000464  554d00  
000467  00                DCB      0
                  |L1.1128|
                          DCD      sub_name
                  |L1.1132|
00046c  20202573          DCB      "  %s",0
000470  00      
000471  00                DCB      0
000472  00                DCB      0
000473  00                DCB      0
                  |L1.1140|
000474  566f6c75          DCB      "Volume       < Mute>",0
000478  6d652020
00047c  20202020
000480  203c204d
000484  7574653e
000488  00      
000489  00                DCB      0
00048a  00                DCB      0
00048b  00                DCB      0
                  |L1.1164|
00048c  20202020          DCB      "    "
                  |L1.1168|
000490  20202020          DCB      "                ",0
000494  20202020
000498  20202020
00049c  20202020
0004a0  00      
0004a1  00                DCB      0
0004a2  00                DCB      0
0004a3  00                DCB      0
                  |L1.1188|
0004a4  566f6c75          DCB      "Volume       <+%02ddB>",0
0004a8  6d652020
0004ac  20202020
0004b0  203c2b25
0004b4  30326464
0004b8  423e00  
0004bb  00                DCB      0
                  |L1.1212|
0004bc  566f6c75          DCB      "Volume       <%03ddB>",0
0004c0  6d652020
0004c4  20202020
0004c8  203c2530
0004cc  33646442
0004d0  3e00    
0004d2  00                DCB      0
0004d3  00                DCB      0
                  |L1.1236|
0004d4  20496e70          DCB      " Input Source Select",0
0004d8  75742053
0004dc  6f757263
0004e0  65205365
0004e4  6c656374
0004e8  00      
0004e9  00                DCB      0
0004ea  00                DCB      0
0004eb  00                DCB      0
                  |L1.1260|
                          DCD      |symbol_number.38|
                  |L1.1264|
0004f0  7379732d          DCB      "sys->src < SRC_NUM",0
0004f4  3e737263
0004f8  203c2053
0004fc  52435f4e
000500  554d00  
000503  00                DCB      0
                  |L1.1284|
                          DCD      src_name
                  |L1.1288|
000508  252d3673          DCB      "%-6s<%5s >%6s",0
00050c  3c253573
000510  203e2536
000514  7300    
000516  00                DCB      0
000517  00                DCB      0
                  |L1.1304|
000518  20507265          DCB      " Preset Selection",0
00051c  73657420
000520  53656c65
000524  6374696f
000528  6e00    
00052a  00                DCB      0
00052b  00                DCB      0
                  |L1.1324|
                          DCD      |symbol_number.39|
                  |L1.1328|
000530  7379732d          DCB      "sys->preset < PRESET_NUM",0
000534  3e707265
000538  73657420
00053c  3c205052
000540  45534554
000544  5f4e554d
000548  00      
000549  00                DCB      0
00054a  00                DCB      0
00054b  00                DCB      0
                  |L1.1356|
                          DCD      pre_name
                  |L1.1360|
000550  252d3673          DCB      "%-6s<%6s>%6s",0
000554  3c253673
000558  3e253673
00055c  00      
00055d  00                DCB      0
00055e  00                DCB      0
00055f  00                DCB      0
                          ENDP

                  dis_brightless_menu PROC
;;;333    
;;;334    static void dis_brightless_menu(sys_state_t *sys)
000560  b538              PUSH     {r3-r5,lr}
;;;335    {
000562  4604              MOV      r4,r0
;;;336    	dis_clean(); 
000564  f7fffffe          BL       dis_clean
;;;337    	dis_print(LCD_LINE_1, " Display Brightness");
000568  a1f7              ADR      r1,|L1.2376|
00056a  2080              MOVS     r0,#0x80
00056c  f7fffffe          BL       dis_print
;;;338    	OSAL_ASSERT(sys->bright < BRI_NUM);
000570  7ea0              LDRB     r0,[r4,#0x1a]
000572  2803              CMP      r0,#3
000574  db07              BLT      |L1.1414|
000576  4af9              LDR      r2,|L1.2396|
000578  a1f9              ADR      r1,|L1.2400|
00057a  f2af1090          ADR      r0,|L1.1004|
00057e  f7fffffe          BL       s_printf
000582  bf00              NOP      
                  |L1.1412|
000584  e7fe              B        |L1.1412|
                  |L1.1414|
;;;339    	dis_print(LCD_LINE_2, "%-6s<%-6s>%6s", bright_name[(sys->bright == 0? (BRI_NUM - 1):(sys->bright - 1))], bright_name_center[sys->bright], bright_name[((sys->bright + 1) % BRI_NUM)]);
000586  7ea0              LDRB     r0,[r4,#0x1a]
000588  1c40              ADDS     r0,r0,#1
00058a  2103              MOVS     r1,#3
00058c  fb90f2f1          SDIV     r2,r0,r1
000590  fb010012          MLS      r0,r1,r2,r0
000594  49f8              LDR      r1,|L1.2424|
000596  f8515020          LDR      r5,[r1,r0,LSL #2]
00059a  9500              STR      r5,[sp,#0]
00059c  7ea0              LDRB     r0,[r4,#0x1a]
00059e  49f7              LDR      r1,|L1.2428|
0005a0  f8513020          LDR      r3,[r1,r0,LSL #2]
0005a4  b908              CBNZ     r0,|L1.1450|
0005a6  2002              MOVS     r0,#2
0005a8  e001              B        |L1.1454|
                  |L1.1450|
0005aa  7ea0              LDRB     r0,[r4,#0x1a]
0005ac  1e40              SUBS     r0,r0,#1
                  |L1.1454|
0005ae  49f2              LDR      r1,|L1.2424|
0005b0  f8512020          LDR      r2,[r1,r0,LSL #2]
0005b4  a1f2              ADR      r1,|L1.2432|
0005b6  20c0              MOVS     r0,#0xc0
0005b8  f7fffffe          BL       dis_print
;;;340    }
0005bc  bd38              POP      {r3-r5,pc}
;;;341    
                          ENDP

                  dis_menu_flash PROC
;;;342    static void dis_menu_flash(void *arg)
0005be  b510              PUSH     {r4,lr}
;;;343    {
0005c0  4604              MOV      r4,r0
;;;344    	static uint8 cnt = 0;
;;;345    
;;;346      if(cnt % 2){
0005c2  49f3              LDR      r1,|L1.2448|
0005c4  7808              LDRB     r0,[r1,#0]  ; cnt
0005c6  eb0071d0          ADD      r1,r0,r0,LSR #31
0005ca  1049              ASRS     r1,r1,#1
0005cc  ebb00141          SUBS     r1,r0,r1,LSL #1
0005d0  d00a              BEQ      |L1.1512|
;;;347          dis_clean();  
0005d2  f7fffffe          BL       dis_clean
;;;348    			dis_print(LCD_LINE_1, "  Installer Menu");
0005d6  a1ef              ADR      r1,|L1.2452|
0005d8  2080              MOVS     r0,#0x80
0005da  f7fffffe          BL       dis_print
;;;349    			dis_print(LCD_LINE_2, "  Enter Code ***");
0005de  a1f2              ADR      r1,|L1.2472|
0005e0  20c0              MOVS     r0,#0xc0
0005e2  f7fffffe          BL       dis_print
0005e6  e00a              B        |L1.1534|
                  |L1.1512|
;;;350    	}else{
;;;351    		  dis_clean();  
0005e8  f7fffffe          BL       dis_clean
;;;352    			dis_print(LCD_LINE_1, "  Installer Menu");
0005ec  a1e9              ADR      r1,|L1.2452|
0005ee  2080              MOVS     r0,#0x80
0005f0  f7fffffe          BL       dis_print
;;;353    			dis_print(LCD_LINE_2, "                ");
0005f4  f2af1168          ADR      r1,|L1.1168|
0005f8  20c0              MOVS     r0,#0xc0
0005fa  f7fffffe          BL       dis_print
                  |L1.1534|
;;;354    	}
;;;355    	
;;;356    	cnt++;
0005fe  48e4              LDR      r0,|L1.2448|
000600  7800              LDRB     r0,[r0,#0]  ; cnt
000602  1c40              ADDS     r0,r0,#1
000604  49e2              LDR      r1,|L1.2448|
000606  7008              STRB     r0,[r1,#0]
;;;357    	if(cnt == 4){
000608  4608              MOV      r0,r1
00060a  7800              LDRB     r0,[r0,#0]  ; cnt
00060c  2804              CMP      r0,#4
00060e  d102              BNE      |L1.1558|
;;;358    		cnt = 0;
000610  2000              MOVS     r0,#0
000612  7008              STRB     r0,[r1,#0]
000614  e005              B        |L1.1570|
                  |L1.1558|
;;;359    	}else{
;;;360    		sys_timeout(500, dis_menu_flash, NULL);
000616  2200              MOVS     r2,#0
000618  49e8              LDR      r1,|L1.2492|
00061a  f44f70fa          MOV      r0,#0x1f4
00061e  f7fffffe          BL       sys_timeout
                  |L1.1570|
;;;361    	}
;;;362    	
;;;363    	/*when we flash the menu, we must keep clear the code buf*/
;;;364    	CLEAR_CODE();
000622  bf00              NOP      
000624  48e6              LDR      r0,|L1.2496|
000626  2100              MOVS     r1,#0
000628  8001              STRH     r1,[r0,#0]
00062a  7081              STRB     r1,[r0,#2]
00062c  2000              MOVS     r0,#0
00062e  49e5              LDR      r1,|L1.2500|
000630  6809              LDR      r1,[r1,#0]  ; gSystem_t
000632  f8810048          STRB     r0,[r1,#0x48]
000636  bf00              NOP      
;;;365    }
000638  bd10              POP      {r4,pc}
;;;366    
                          ENDP

                  dis_install_menu PROC
;;;367    static void dis_install_menu(sys_state_t *sys)
00063a  b510              PUSH     {r4,lr}
;;;368    {
00063c  4604              MOV      r4,r0
;;;369    	
;;;370    	if(IS_CODE_PASS){
00063e  48e0              LDR      r0,|L1.2496|
000640  7800              LDRB     r0,[r0,#0]  ; gCode
000642  283c              CMP      r0,#0x3c
000644  d109              BNE      |L1.1626|
000646  48de              LDR      r0,|L1.2496|
000648  7840              LDRB     r0,[r0,#1]  ; gCode
00064a  283e              CMP      r0,#0x3e
00064c  d105              BNE      |L1.1626|
00064e  48dc              LDR      r0,|L1.2496|
000650  7880              LDRB     r0,[r0,#2]  ; gCode
000652  283c              CMP      r0,#0x3c
000654  d101              BNE      |L1.1626|
000656  2001              MOVS     r0,#1
000658  e000              B        |L1.1628|
                  |L1.1626|
00065a  2000              MOVS     r0,#0
                  |L1.1628|
00065c  b178              CBZ      r0,|L1.1662|
;;;371    		CLEAR_CODE();
00065e  bf00              NOP      
000660  48d7              LDR      r0,|L1.2496|
000662  2100              MOVS     r1,#0
000664  8001              STRH     r1,[r0,#0]
000666  7081              STRB     r1,[r0,#2]
000668  2000              MOVS     r0,#0
00066a  49d6              LDR      r1,|L1.2500|
00066c  6809              LDR      r1,[r1,#0]  ; gSystem_t
00066e  f8810048          STRB     r0,[r1,#0x48]
000672  bf00              NOP      
;;;372    		sys_send_msg(CODE_PASS_MSG, 0);
000674  2100              MOVS     r1,#0
000676  2003              MOVS     r0,#3
000678  f7fffffe          BL       sys_send_msg
00067c  e026              B        |L1.1740|
                  |L1.1662|
;;;373    	}
;;;374    	else{
;;;375    		if(IS_CODE_ERR){
00067e  48d0              LDR      r0,|L1.2496|
000680  7880              LDRB     r0,[r0,#2]  ; gCode
000682  b108              CBZ      r0,|L1.1672|
000684  2001              MOVS     r0,#1
000686  e000              B        |L1.1674|
                  |L1.1672|
000688  2000              MOVS     r0,#0
                  |L1.1674|
00068a  b1a8              CBZ      r0,|L1.1720|
;;;376    			CLEAR_CODE();
00068c  bf00              NOP      
00068e  48cc              LDR      r0,|L1.2496|
000690  2100              MOVS     r1,#0
000692  8001              STRH     r1,[r0,#0]
000694  7081              STRB     r1,[r0,#2]
000696  2000              MOVS     r0,#0
000698  49ca              LDR      r1,|L1.2500|
00069a  6809              LDR      r1,[r1,#0]  ; gSystem_t
00069c  f8810048          STRB     r0,[r1,#0x48]
0006a0  bf00              NOP      
;;;377    			sys_untimeout(dis_menu_flash, NULL);
0006a2  2100              MOVS     r1,#0
0006a4  48c5              LDR      r0,|L1.2492|
0006a6  f7fffffe          BL       sys_untimeout
;;;378    	    sys_timeout(500, dis_menu_flash, NULL);
0006aa  2200              MOVS     r2,#0
0006ac  49c3              LDR      r1,|L1.2492|
0006ae  f44f70fa          MOV      r0,#0x1f4
0006b2  f7fffffe          BL       sys_timeout
0006b6  e009              B        |L1.1740|
                  |L1.1720|
;;;379    		}else{
;;;380    			dis_clean();  
0006b8  f7fffffe          BL       dis_clean
;;;381    			dis_print(LCD_LINE_1, "  Installer Menu");
0006bc  a1b5              ADR      r1,|L1.2452|
0006be  2080              MOVS     r0,#0x80
0006c0  f7fffffe          BL       dis_print
;;;382    			dis_print(LCD_LINE_2, "  Enter Code ***");
0006c4  a1b8              ADR      r1,|L1.2472|
0006c6  20c0              MOVS     r0,#0xc0
0006c8  f7fffffe          BL       dis_print
                  |L1.1740|
;;;383    		}
;;;384    	}
;;;385    }
0006cc  bd10              POP      {r4,pc}
;;;386    
                          ENDP

                  dis_ip_address_menu PROC
;;;387    static void dis_ip_address_menu(sys_state_t *sys)
0006ce  b570              PUSH     {r4-r6,lr}
;;;388    {
0006d0  4604              MOV      r4,r0
;;;389    	  if(IS_RESET_IP_CODE){
0006d2  48bb              LDR      r0,|L1.2496|
0006d4  7800              LDRB     r0,[r0,#0]  ; gCode
0006d6  283c              CMP      r0,#0x3c
0006d8  d109              BNE      |L1.1774|
0006da  48b9              LDR      r0,|L1.2496|
0006dc  7840              LDRB     r0,[r0,#1]  ; gCode
0006de  283c              CMP      r0,#0x3c
0006e0  d105              BNE      |L1.1774|
0006e2  48b7              LDR      r0,|L1.2496|
0006e4  7880              LDRB     r0,[r0,#2]  ; gCode
0006e6  283c              CMP      r0,#0x3c
0006e8  d101              BNE      |L1.1774|
0006ea  2001              MOVS     r0,#1
0006ec  e000              B        |L1.1776|
                  |L1.1774|
0006ee  2000              MOVS     r0,#0
                  |L1.1776|
0006f0  b1c0              CBZ      r0,|L1.1828|
;;;390    			CLEAR_CODE();
0006f2  bf00              NOP      
0006f4  48b2              LDR      r0,|L1.2496|
0006f6  2100              MOVS     r1,#0
0006f8  8001              STRH     r1,[r0,#0]
0006fa  7081              STRB     r1,[r0,#2]
0006fc  2000              MOVS     r0,#0
0006fe  49b1              LDR      r1,|L1.2500|
000700  6809              LDR      r1,[r1,#0]  ; gSystem_t
000702  f8810048          STRB     r0,[r1,#0x48]
000706  bf00              NOP      
;;;391    			dis_clean();  
000708  f7fffffe          BL       dis_clean
;;;392    			dis_print(LCD_LINE_1, "     IP Address");
00070c  a1ae              ADR      r1,|L1.2504|
00070e  2080              MOVS     r0,#0x80
000710  f7fffffe          BL       dis_print
;;;393    			dis_print(LCD_LINE_2, "  set IP to static  ");  
000714  a1b0              ADR      r1,|L1.2520|
000716  20c0              MOVS     r0,#0xc0
000718  f7fffffe          BL       dis_print
;;;394    			sys_ip_set_to_default(sys);
00071c  4620              MOV      r0,r4
00071e  f7fffffe          BL       sys_ip_set_to_default
000722  e010              B        |L1.1862|
                  |L1.1828|
;;;395    		}else{
;;;396    			dis_clean();  
000724  f7fffffe          BL       dis_clean
;;;397    			dis_print(LCD_LINE_1, "     IP Address");
000728  a1a7              ADR      r1,|L1.2504|
00072a  2080              MOVS     r0,#0x80
00072c  f7fffffe          BL       dis_print
;;;398    			dis_print(LCD_LINE_2, "    %s", ipaddr_ntoa(get_cur_ip()));  
000730  f7fffffe          BL       get_cur_ip
000734  4606              MOV      r6,r0
000736  f7fffffe          BL       ipaddr_ntoa
00073a  4605              MOV      r5,r0
00073c  462a              MOV      r2,r5
00073e  a1ac              ADR      r1,|L1.2544|
000740  20c0              MOVS     r0,#0xc0
000742  f7fffffe          BL       dis_print
                  |L1.1862|
;;;399    		}
;;;400    }
000746  bd70              POP      {r4-r6,pc}
;;;401    
                          ENDP

                  dis_send_msg PROC
;;;861    
;;;862    void dis_send_msg(dis_msg_type_t type, menu_id_t id)
000748  b538              PUSH     {r3-r5,lr}
;;;863    {
00074a  4605              MOV      r5,r0
00074c  460c              MOV      r4,r1
;;;864    	 dis_msg_t msg;
;;;865    
;;;866       msg.msg = type;
00074e  f88d5000          STRB     r5,[sp,#0]
;;;867       msg.id = id;	
000752  f88d4001          STRB     r4,[sp,#1]
;;;868    	 
;;;869    	 xQueueSend(gDisQueue, &msg, portMAX_DELAY);
000756  2300              MOVS     r3,#0
000758  1e5a              SUBS     r2,r3,#1
00075a  4669              MOV      r1,sp
00075c  48a6              LDR      r0,|L1.2552|
00075e  6800              LDR      r0,[r0,#0]  ; gDisQueue
000760  f7fffffe          BL       xQueueGenericSend
;;;870    }
000764  bd38              POP      {r3-r5,pc}
;;;871    
                          ENDP

                  update_ip_menu PROC
;;;401    
;;;402    void update_ip_menu(void)
000766  b510              PUSH     {r4,lr}
;;;403    {
;;;404    	 if(cur_menu->id == IP_ADDRESS_MENU){
000768  48a4              LDR      r0,|L1.2556|
00076a  6800              LDR      r0,[r0,#0]  ; cur_menu
00076c  7800              LDRB     r0,[r0,#0]
00076e  2808              CMP      r0,#8
000770  d103              BNE      |L1.1914|
;;;405    		 dis_send_msg(DIS_UPDATE, MENU_NUM);
000772  2116              MOVS     r1,#0x16
000774  2001              MOVS     r0,#1
000776  f7fffffe          BL       dis_send_msg
                  |L1.1914|
;;;406    	 }
;;;407    }
00077a  bd10              POP      {r4,pc}
;;;408    
                          ENDP

                  dis_sub_model_menu PROC
;;;409    
;;;410    static void dis_sub_model_menu(sys_state_t *sys)
00077c  b510              PUSH     {r4,lr}
;;;411    {
00077e  4604              MOV      r4,r0
;;;412    	 dis_clean();  
000780  f7fffffe          BL       dis_clean
;;;413       dis_print(LCD_LINE_1, "Current Sub Model EQ");
000784  a19e              ADR      r1,|L1.2560|
000786  2080              MOVS     r0,#0x80
000788  f7fffffe          BL       dis_print
;;;414    	 dis_print(LCD_LINE_2, "<%-18s>", sub_name[sys->sub_model]);
00078c  7ee0              LDRB     r0,[r4,#0x1b]
00078e  49a2              LDR      r1,|L1.2584|
000790  f8512020          LDR      r2,[r1,r0,LSL #2]
000794  a1a1              ADR      r1,|L1.2588|
000796  20c0              MOVS     r0,#0xc0
000798  f7fffffe          BL       dis_print
;;;415    }
00079c  bd10              POP      {r4,pc}
;;;416    
                          ENDP

                  dis_input_gain_menu PROC
;;;417    static void dis_input_gain_menu(sys_state_t *sys)
00079e  b538              PUSH     {r3-r5,lr}
;;;418    {
0007a0  4604              MOV      r4,r0
;;;419    	 dis_clean();  
0007a2  f7fffffe          BL       dis_clean
;;;420    	 dis_print(LCD_LINE_1, "  Input Gain Level");
0007a6  a19f              ADR      r1,|L1.2596|
0007a8  2080              MOVS     r0,#0x80
0007aa  f7fffffe          BL       dis_print
;;;421    	 if(sys->input_gain == 10){
0007ae  69e0              LDR      r0,[r4,#0x1c]
0007b0  280a              CMP      r0,#0xa
0007b2  d104              BNE      |L1.1982|
;;;422    		  dis_print(LCD_LINE_2, "+09dB< +10dB  >     ");
0007b4  a1a0              ADR      r1,|L1.2616|
0007b6  20c0              MOVS     r0,#0xc0
0007b8  f7fffffe          BL       dis_print
0007bc  e03c              B        |L1.2104|
                  |L1.1982|
;;;423    	 }else if(sys->input_gain > 1){
0007be  69e0              LDR      r0,[r4,#0x1c]
0007c0  2801              CMP      r0,#1
0007c2  dd09              BLE      |L1.2008|
;;;424    			dis_print(LCD_LINE_2, "+%02ddB< +%02ddB  >+%02ddB", sys->input_gain - 1, sys->input_gain, sys->input_gain + 1);
0007c4  69e0              LDR      r0,[r4,#0x1c]
0007c6  1c40              ADDS     r0,r0,#1
0007c8  9000              STR      r0,[sp,#0]
0007ca  69e3              LDR      r3,[r4,#0x1c]
0007cc  1e5a              SUBS     r2,r3,#1
0007ce  a1a0              ADR      r1,|L1.2640|
0007d0  20c0              MOVS     r0,#0xc0
0007d2  f7fffffe          BL       dis_print
0007d6  e02f              B        |L1.2104|
                  |L1.2008|
;;;425    	 }else if(sys->input_gain == 1){
0007d8  69e0              LDR      r0,[r4,#0x1c]
0007da  2801              CMP      r0,#1
0007dc  d104              BNE      |L1.2024|
;;;426    		  dis_print(LCD_LINE_2, " 00dB< +01dB  >+02dB");
0007de  a1a3              ADR      r1,|L1.2668|
0007e0  20c0              MOVS     r0,#0xc0
0007e2  f7fffffe          BL       dis_print
0007e6  e027              B        |L1.2104|
                  |L1.2024|
;;;427    	 }else if(sys->input_gain == 0){
0007e8  69e0              LDR      r0,[r4,#0x1c]
0007ea  b920              CBNZ     r0,|L1.2038|
;;;428    		  dis_print(LCD_LINE_2, "-01dB<  00dB  >+01dB");
0007ec  a1a5              ADR      r1,|L1.2692|
0007ee  20c0              MOVS     r0,#0xc0
0007f0  f7fffffe          BL       dis_print
0007f4  e020              B        |L1.2104|
                  |L1.2038|
;;;429    	 }else if(sys->input_gain == -1){
0007f6  69e0              LDR      r0,[r4,#0x1c]
0007f8  1c40              ADDS     r0,r0,#1
0007fa  d104              BNE      |L1.2054|
;;;430    		  dis_print(LCD_LINE_2, "-02dB< -01dB  > 00dB");
0007fc  a1a7              ADR      r1,|L1.2716|
0007fe  20c0              MOVS     r0,#0xc0
000800  f7fffffe          BL       dis_print
000804  e018              B        |L1.2104|
                  |L1.2054|
;;;431    	 }else if(sys->input_gain == 10){
000806  69e0              LDR      r0,[r4,#0x1c]
000808  280a              CMP      r0,#0xa
00080a  d104              BNE      |L1.2070|
;;;432    		  dis_print(LCD_LINE_2, "+09dB< +10dB  >     ");
00080c  a18a              ADR      r1,|L1.2616|
00080e  20c0              MOVS     r0,#0xc0
000810  f7fffffe          BL       dis_print
000814  e010              B        |L1.2104|
                  |L1.2070|
;;;433    	 }else if(sys->input_gain == -10){
000816  69e0              LDR      r0,[r4,#0x1c]
000818  300a              ADDS     r0,r0,#0xa
00081a  d104              BNE      |L1.2086|
;;;434    		  dis_print(LCD_LINE_2, "     < -10dB  > -9dB");
00081c  a1a5              ADR      r1,|L1.2740|
00081e  20c0              MOVS     r0,#0xc0
000820  f7fffffe          BL       dis_print
000824  e008              B        |L1.2104|
                  |L1.2086|
;;;435    	 }else{
;;;436    		  dis_print(LCD_LINE_2, "%03ddB< %03ddB  >%03ddB", sys->input_gain -1, sys->input_gain, sys->input_gain + 1);
000826  69e0              LDR      r0,[r4,#0x1c]
000828  1c40              ADDS     r0,r0,#1
00082a  9000              STR      r0,[sp,#0]
00082c  69e3              LDR      r3,[r4,#0x1c]
00082e  1e5a              SUBS     r2,r3,#1
000830  a1a6              ADR      r1,|L1.2764|
000832  20c0              MOVS     r0,#0xc0
000834  f7fffffe          BL       dis_print
                  |L1.2104|
;;;437    	 }
;;;438    	 
;;;439    }
000838  bd38              POP      {r3-r5,pc}
;;;440    
                          ENDP

                  dis_phrase_menu PROC
;;;441    static void dis_phrase_menu(sys_state_t *sys)
00083a  b510              PUSH     {r4,lr}
;;;442    {
00083c  4604              MOV      r4,r0
;;;443    	dis_clean();    
00083e  f7fffffe          BL       dis_clean
;;;444    	dis_print(LCD_LINE_1, "       Phase");
000842  a1a8              ADR      r1,|L1.2788|
000844  2080              MOVS     r0,#0x80
000846  f7fffffe          BL       dis_print
;;;445    	if(sys->sub[sys->sub_model].phrase){
00084a  7ee1              LDRB     r1,[r4,#0x1b]
00084c  eb010141          ADD      r1,r1,r1,LSL #1
000850  6be0              LDR      r0,[r4,#0x3c]
000852  f8100021          LDRB     r0,[r0,r1,LSL #2]
000856  b120              CBZ      r0,|L1.2146|
;;;446    		dis_print(LCD_LINE_2, "00   <  180   >   00");
000858  a1a6              ADR      r1,|L1.2804|
00085a  20c0              MOVS     r0,#0xc0
00085c  f7fffffe          BL       dis_print
000860  e003              B        |L1.2154|
                  |L1.2146|
;;;447    	}else{
;;;448    		dis_print(LCD_LINE_2, "180  <   00   >  180");
000862  a1aa              ADR      r1,|L1.2828|
000864  20c0              MOVS     r0,#0xc0
000866  f7fffffe          BL       dis_print
                  |L1.2154|
;;;449    	}
;;;450    }
00086a  bd10              POP      {r4,pc}
;;;451    
                          ENDP

                  dis_sub_lowpass_menu PROC
;;;452    static void dis_sub_lowpass_menu(sys_state_t *sys)
00086c  b538              PUSH     {r3-r5,lr}
;;;453    {
00086e  4604              MOV      r4,r0
;;;454    	dis_clean(); 
000870  f7fffffe          BL       dis_clean
;;;455      dis_print(LCD_LINE_1, " Sub Lowpass Filter");  
000874  a1ab              ADR      r1,|L1.2852|
000876  2080              MOVS     r0,#0x80
000878  f7fffffe          BL       dis_print
;;;456    	if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_DEFAULT){
00087c  7ee1              LDRB     r1,[r4,#0x1b]
00087e  eb010141          ADD      r1,r1,r1,LSL #1
000882  6be0              LDR      r0,[r4,#0x3c]
000884  eb000081          ADD      r0,r0,r1,LSL #2
000888  8840              LDRH     r0,[r0,#2]
00088a  f5b07fa5          CMP      r0,#0x14a
00088e  d104              BNE      |L1.2202|
;;;457    		dis_print(LCD_LINE_2, "300Hz<  LFE   > 30Hz");
000890  a1a9              ADR      r1,|L1.2872|
000892  20c0              MOVS     r0,#0xc0
000894  f7fffffe          BL       dis_print
000898  e1e0              B        |L1.3164|
                  |L1.2202|
;;;458    	}else if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_MIN){
00089a  7ee1              LDRB     r1,[r4,#0x1b]
00089c  eb010141          ADD      r1,r1,r1,LSL #1
0008a0  6be0              LDR      r0,[r4,#0x3c]
0008a2  eb000081          ADD      r0,r0,r1,LSL #2
0008a6  8840              LDRH     r0,[r0,#2]
0008a8  281e              CMP      r0,#0x1e
0008aa  d104              BNE      |L1.2230|
;;;459    		dis_print(LCD_LINE_2, "LFE  <  30Hz  > 31Hz");
0008ac  a1a8              ADR      r1,|L1.2896|
0008ae  20c0              MOVS     r0,#0xc0
0008b0  f7fffffe          BL       dis_print
0008b4  e1d2              B        |L1.3164|
                  |L1.2230|
;;;460    	}else if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_MAX){
0008b6  7ee1              LDRB     r1,[r4,#0x1b]
0008b8  eb010141          ADD      r1,r1,r1,LSL #1
0008bc  6be0              LDR      r0,[r4,#0x3c]
0008be  eb000081          ADD      r0,r0,r1,LSL #2
0008c2  8840              LDRH     r0,[r0,#2]
0008c4  f5b07f96          CMP      r0,#0x12c
0008c8  d104              BNE      |L1.2260|
;;;461    		dis_print(LCD_LINE_2, "290Hz< 300Hz  >  LFE");
0008ca  a1a7              ADR      r1,|L1.2920|
0008cc  20c0              MOVS     r0,#0xc0
0008ce  f7fffffe          BL       dis_print
0008d2  e1c3              B        |L1.3164|
                  |L1.2260|
;;;462    	}else if(sys->sub[sys->sub_model].lowpass < SUB_LOWPASS_NODE1){
0008d4  7ee1              LDRB     r1,[r4,#0x1b]
0008d6  eb010141          ADD      r1,r1,r1,LSL #1
0008da  6be0              LDR      r0,[r4,#0x3c]
0008dc  eb000081          ADD      r0,r0,r1,LSL #2
0008e0  8840              LDRH     r0,[r0,#2]
0008e2  283c              CMP      r0,#0x3c
0008e4  da1c              BGE      |L1.2336|
;;;463    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", sys->sub[sys->sub_model].lowpass - 1, 
0008e6  7ee1              LDRB     r1,[r4,#0x1b]
0008e8  eb010141          ADD      r1,r1,r1,LSL #1
0008ec  6be0              LDR      r0,[r4,#0x3c]
0008ee  eb000081          ADD      r0,r0,r1,LSL #2
0008f2  8840              LDRH     r0,[r0,#2]
0008f4  1c40              ADDS     r0,r0,#1
0008f6  9000              STR      r0,[sp,#0]
0008f8  7ee1              LDRB     r1,[r4,#0x1b]
0008fa  eb010141          ADD      r1,r1,r1,LSL #1
0008fe  6be0              LDR      r0,[r4,#0x3c]
000900  eb000081          ADD      r0,r0,r1,LSL #2
000904  8843              LDRH     r3,[r0,#2]
000906  7ee1              LDRB     r1,[r4,#0x1b]
000908  eb010141          ADD      r1,r1,r1,LSL #1
00090c  6be0              LDR      r0,[r4,#0x3c]
00090e  eb000081          ADD      r0,r0,r1,LSL #2
000912  8840              LDRH     r0,[r0,#2]
000914  1e42              SUBS     r2,r0,#1
000916  a19a              ADR      r1,|L1.2944|
000918  20c0              MOVS     r0,#0xc0
00091a  f7fffffe          BL       dis_print
00091e  e19d              B        |L1.3164|
                  |L1.2336|
;;;464    		    sys->sub[sys->sub_model].lowpass, sys->sub[sys->sub_model].lowpass + 1);
;;;465    	}else if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_NODE1){
000920  7ee1              LDRB     r1,[r4,#0x1b]
000922  eb010141          ADD      r1,r1,r1,LSL #1
000926  6be0              LDR      r0,[r4,#0x3c]
000928  eb000081          ADD      r0,r0,r1,LSL #2
00092c  8840              LDRH     r0,[r0,#2]
00092e  283c              CMP      r0,#0x3c
000930  d108              BNE      |L1.2372|
;;;466    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", SUB_LOWPASS_NODE1 - 1, SUB_LOWPASS_NODE1, SUB_LOWPASS_NODE1 + 5);
000932  2041              MOVS     r0,#0x41
000934  233c              MOVS     r3,#0x3c
000936  223b              MOVS     r2,#0x3b
000938  a191              ADR      r1,|L1.2944|
00093a  9000              STR      r0,[sp,#0]
00093c  20c0              MOVS     r0,#0xc0
00093e  f7fffffe          BL       dis_print
000942  e18b              B        |L1.3164|
                  |L1.2372|
000944  e128              B        |L1.2968|
000946  0000              DCW      0x0000
                  |L1.2376|
000948  20446973          DCB      " Display Brightness",0
00094c  706c6179
000950  20427269
000954  6768746e
000958  65737300
                  |L1.2396|
                          DCD      |symbol_number.40|
                  |L1.2400|
000960  7379732d          DCB      "sys->bright < BRI_NUM",0
000964  3e627269
000968  67687420
00096c  3c204252
000970  495f4e55
000974  4d00    
000976  00                DCB      0
000977  00                DCB      0
                  |L1.2424|
                          DCD      bright_name
                  |L1.2428|
                          DCD      bright_name_center
                  |L1.2432|
000980  252d3673          DCB      "%-6s<%-6s>%6s",0
000984  3c252d36
000988  733e2536
00098c  7300    
00098e  00                DCB      0
00098f  00                DCB      0
                  |L1.2448|
                          DCD      ||cnt||
                  |L1.2452|
000994  2020496e          DCB      "  Installer Menu",0
000998  7374616c
00099c  6c657220
0009a0  4d656e75
0009a4  00      
0009a5  00                DCB      0
0009a6  00                DCB      0
0009a7  00                DCB      0
                  |L1.2472|
0009a8  2020456e          DCB      "  Enter Code ***",0
0009ac  74657220
0009b0  436f6465
0009b4  202a2a2a
0009b8  00      
0009b9  00                DCB      0
0009ba  00                DCB      0
0009bb  00                DCB      0
                  |L1.2492|
                          DCD      dis_menu_flash
                  |L1.2496|
                          DCD      gCode
                  |L1.2500|
                          DCD      gSystem_t
                  |L1.2504|
0009c8  20202020          DCB      "     IP Address",0
0009cc  20495020
0009d0  41646472
0009d4  65737300
                  |L1.2520|
0009d8  20207365          DCB      "  set IP to static  ",0
0009dc  74204950
0009e0  20746f20
0009e4  73746174
0009e8  69632020
0009ec  00      
0009ed  00                DCB      0
0009ee  00                DCB      0
0009ef  00                DCB      0
                  |L1.2544|
0009f0  20202020          DCB      "    %s",0
0009f4  257300  
0009f7  00                DCB      0
                  |L1.2552|
                          DCD      gDisQueue
                  |L1.2556|
                          DCD      cur_menu
                  |L1.2560|
000a00  43757272          DCB      "Current Sub Model EQ",0
000a04  656e7420
000a08  53756220
000a0c  4d6f6465
000a10  6c204551
000a14  00      
000a15  00                DCB      0
000a16  00                DCB      0
000a17  00                DCB      0
                  |L1.2584|
                          DCD      sub_name
                  |L1.2588|
000a1c  3c252d31          DCB      "<%-18s>",0
000a20  38733e00
                  |L1.2596|
000a24  2020496e          DCB      "  Input Gain Level",0
000a28  70757420
000a2c  4761696e
000a30  204c6576
000a34  656c00  
000a37  00                DCB      0
                  |L1.2616|
000a38  2b303964          DCB      "+09dB< +10dB  >     ",0
000a3c  423c202b
000a40  31306442
000a44  20203e20
000a48  20202020
000a4c  00      
000a4d  00                DCB      0
000a4e  00                DCB      0
000a4f  00                DCB      0
                  |L1.2640|
000a50  2b253032          DCB      "+%02ddB< +%02ddB  >+%02ddB",0
000a54  6464423c
000a58  202b2530
000a5c  32646442
000a60  20203e2b
000a64  25303264
000a68  644200  
000a6b  00                DCB      0
                  |L1.2668|
000a6c  20303064          DCB      " 00dB< +01dB  >+02dB",0
000a70  423c202b
000a74  30316442
000a78  20203e2b
000a7c  30326442
000a80  00      
000a81  00                DCB      0
000a82  00                DCB      0
000a83  00                DCB      0
                  |L1.2692|
000a84  2d303164          DCB      "-01dB<  00dB  >+01dB",0
000a88  423c2020
000a8c  30306442
000a90  20203e2b
000a94  30316442
000a98  00      
000a99  00                DCB      0
000a9a  00                DCB      0
000a9b  00                DCB      0
                  |L1.2716|
000a9c  2d303264          DCB      "-02dB< -01dB  > 00dB",0
000aa0  423c202d
000aa4  30316442
000aa8  20203e20
000aac  30306442
000ab0  00      
000ab1  00                DCB      0
000ab2  00                DCB      0
000ab3  00                DCB      0
                  |L1.2740|
000ab4  20202020          DCB      "     < -10dB  > -9dB",0
000ab8  203c202d
000abc  31306442
000ac0  20203e20
000ac4  2d396442
000ac8  00      
000ac9  00                DCB      0
000aca  00                DCB      0
000acb  00                DCB      0
                  |L1.2764|
000acc  25303364          DCB      "%03ddB< %03ddB  >%03ddB",0
000ad0  64423c20
000ad4  25303364
000ad8  64422020
000adc  3e253033
000ae0  64644200
                  |L1.2788|
000ae4  20202020          DCB      "       Phase",0
000ae8  20202050
000aec  68617365
000af0  00      
000af1  00                DCB      0
000af2  00                DCB      0
000af3  00                DCB      0
                  |L1.2804|
000af4  30302020          DCB      "00   <  180   >   00",0
000af8  203c2020
000afc  31383020
000b00  20203e20
000b04  20203030
000b08  00      
000b09  00                DCB      0
000b0a  00                DCB      0
000b0b  00                DCB      0
                  |L1.2828|
000b0c  31383020          DCB      "180  <   00   >  180",0
000b10  203c2020
000b14  20303020
000b18  20203e20
000b1c  20313830
000b20  00      
000b21  00                DCB      0
000b22  00                DCB      0
000b23  00                DCB      0
                  |L1.2852|
000b24  20537562          DCB      " Sub Lowpass Filter",0
000b28  204c6f77
000b2c  70617373
000b30  2046696c
000b34  74657200
                  |L1.2872|
000b38  33303048          DCB      "300Hz<  LFE   > 30Hz",0
000b3c  7a3c2020
000b40  4c464520
000b44  20203e20
000b48  3330487a
000b4c  00      
000b4d  00                DCB      0
000b4e  00                DCB      0
000b4f  00                DCB      0
                  |L1.2896|
000b50  4c464520          DCB      "LFE  <  30Hz  > 31Hz",0
000b54  203c2020
000b58  3330487a
000b5c  20203e20
000b60  3331487a
000b64  00      
000b65  00                DCB      0
000b66  00                DCB      0
000b67  00                DCB      0
                  |L1.2920|
000b68  32393048          DCB      "290Hz< 300Hz  >  LFE",0
000b6c  7a3c2033
000b70  3030487a
000b74  20203e20
000b78  204c4645
000b7c  00      
000b7d  00                DCB      0
000b7e  00                DCB      0
000b7f  00                DCB      0
                  |L1.2944|
000b80  25336448          DCB      "%3dHz< %3dHz  >%3dHz",0
000b84  7a3c2025
000b88  3364487a
000b8c  20203e25
000b90  3364487a
000b94  00      
000b95  00                DCB      0
000b96  00                DCB      0
000b97  00                DCB      0
                  |L1.2968|
;;;467    	}else if(sys->sub[sys->sub_model].lowpass < SUB_LOWPASS_NODE2){
000b98  7ee1              LDRB     r1,[r4,#0x1b]
000b9a  eb010141          ADD      r1,r1,r1,LSL #1
000b9e  6be0              LDR      r0,[r4,#0x3c]
000ba0  eb000081          ADD      r0,r0,r1,LSL #2
000ba4  8840              LDRH     r0,[r0,#2]
000ba6  2878              CMP      r0,#0x78
000ba8  da1d              BGE      |L1.3046|
;;;468    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", sys->sub[sys->sub_model].lowpass - 5, 
000baa  7ee1              LDRB     r1,[r4,#0x1b]
000bac  eb010141          ADD      r1,r1,r1,LSL #1
000bb0  6be0              LDR      r0,[r4,#0x3c]
000bb2  eb000081          ADD      r0,r0,r1,LSL #2
000bb6  8840              LDRH     r0,[r0,#2]
000bb8  1d40              ADDS     r0,r0,#5
000bba  9000              STR      r0,[sp,#0]
000bbc  7ee1              LDRB     r1,[r4,#0x1b]
000bbe  eb010141          ADD      r1,r1,r1,LSL #1
000bc2  6be0              LDR      r0,[r4,#0x3c]
000bc4  eb000081          ADD      r0,r0,r1,LSL #2
000bc8  8843              LDRH     r3,[r0,#2]
000bca  7ee1              LDRB     r1,[r4,#0x1b]
000bcc  eb010141          ADD      r1,r1,r1,LSL #1
000bd0  6be0              LDR      r0,[r4,#0x3c]
000bd2  eb000081          ADD      r0,r0,r1,LSL #2
000bd6  8840              LDRH     r0,[r0,#2]
000bd8  1f42              SUBS     r2,r0,#5
000bda  f2af015c          ADR      r1,|L1.2944|
000bde  20c0              MOVS     r0,#0xc0
000be0  f7fffffe          BL       dis_print
000be4  e03a              B        |L1.3164|
                  |L1.3046|
;;;469    		   sys->sub[sys->sub_model].lowpass, sys->sub[sys->sub_model].lowpass + 5);
;;;470    	}else if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_NODE2){
000be6  7ee1              LDRB     r1,[r4,#0x1b]
000be8  eb010141          ADD      r1,r1,r1,LSL #1
000bec  6be0              LDR      r0,[r4,#0x3c]
000bee  eb000081          ADD      r0,r0,r1,LSL #2
000bf2  8840              LDRH     r0,[r0,#2]
000bf4  2878              CMP      r0,#0x78
000bf6  d109              BNE      |L1.3084|
;;;471    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", SUB_LOWPASS_NODE2 - 5, SUB_LOWPASS_NODE2, SUB_LOWPASS_NODE2 + 10);
000bf8  2082              MOVS     r0,#0x82
000bfa  2378              MOVS     r3,#0x78
000bfc  2273              MOVS     r2,#0x73
000bfe  f2af0180          ADR      r1,|L1.2944|
000c02  9000              STR      r0,[sp,#0]
000c04  20c0              MOVS     r0,#0xc0
000c06  f7fffffe          BL       dis_print
000c0a  e027              B        |L1.3164|
                  |L1.3084|
;;;472    	}else if(sys->sub[sys->sub_model].lowpass < SUB_LOWPASS_MAX){
000c0c  7ee1              LDRB     r1,[r4,#0x1b]
000c0e  eb010141          ADD      r1,r1,r1,LSL #1
000c12  6be0              LDR      r0,[r4,#0x3c]
000c14  eb000081          ADD      r0,r0,r1,LSL #2
000c18  8840              LDRH     r0,[r0,#2]
000c1a  f5b07f96          CMP      r0,#0x12c
000c1e  da1d              BGE      |L1.3164|
;;;473    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", sys->sub[sys->sub_model].lowpass - 10, 
000c20  7ee1              LDRB     r1,[r4,#0x1b]
000c22  eb010141          ADD      r1,r1,r1,LSL #1
000c26  6be0              LDR      r0,[r4,#0x3c]
000c28  eb000081          ADD      r0,r0,r1,LSL #2
000c2c  8840              LDRH     r0,[r0,#2]
000c2e  300a              ADDS     r0,r0,#0xa
000c30  9000              STR      r0,[sp,#0]
000c32  7ee1              LDRB     r1,[r4,#0x1b]
000c34  eb010141          ADD      r1,r1,r1,LSL #1
000c38  6be0              LDR      r0,[r4,#0x3c]
000c3a  eb000081          ADD      r0,r0,r1,LSL #2
000c3e  8843              LDRH     r3,[r0,#2]
000c40  7ee1              LDRB     r1,[r4,#0x1b]
000c42  eb010141          ADD      r1,r1,r1,LSL #1
000c46  6be0              LDR      r0,[r4,#0x3c]
000c48  eb000081          ADD      r0,r0,r1,LSL #2
000c4c  8840              LDRH     r0,[r0,#2]
000c4e  f1a0020a          SUB      r2,r0,#0xa
000c52  f2af01d4          ADR      r1,|L1.2944|
000c56  20c0              MOVS     r0,#0xc0
000c58  f7fffffe          BL       dis_print
                  |L1.3164|
;;;474    		  sys->sub[sys->sub_model].lowpass, sys->sub[sys->sub_model].lowpass + 10);
;;;475    	}
;;;476    	
;;;477    }
000c5c  bd38              POP      {r3-r5,pc}
;;;478    
                          ENDP

                  dis_sub_highpass_menu PROC
;;;479    static void dis_sub_highpass_menu(sys_state_t *sys)
000c5e  b538              PUSH     {r3-r5,lr}
;;;480    {
000c60  4604              MOV      r4,r0
;;;481    	 dis_clean(); 
000c62  f7fffffe          BL       dis_clean
;;;482    	 dis_print(LCD_LINE_1, " Sub Highpass Filter");  
000c66  a1fc              ADR      r1,|L1.4184|
000c68  2080              MOVS     r0,#0x80
000c6a  f7fffffe          BL       dis_print
;;;483    	 if(sys->sub[sys->sub_model].highpass == SUB_HIGHPASS_OFF){
000c6e  7ee1              LDRB     r1,[r4,#0x1b]
000c70  eb010141          ADD      r1,r1,r1,LSL #1
000c74  6be0              LDR      r0,[r4,#0x3c]
000c76  eb000081          ADD      r0,r0,r1,LSL #2
000c7a  88c0              LDRH     r0,[r0,#6]
000c7c  2882              CMP      r0,#0x82
000c7e  d104              BNE      |L1.3210|
;;;484    		dis_print(LCD_LINE_2, "100Hz<  OFF   > 20Hz");
000c80  a1fb              ADR      r1,|L1.4208|
000c82  20c0              MOVS     r0,#0xc0
000c84  f7fffffe          BL       dis_print
000c88  e07b              B        |L1.3458|
                  |L1.3210|
;;;485    	}else if(sys->sub[sys->sub_model].highpass == SUB_HIGHPASS_MIN){
000c8a  7ee1              LDRB     r1,[r4,#0x1b]
000c8c  eb010141          ADD      r1,r1,r1,LSL #1
000c90  6be0              LDR      r0,[r4,#0x3c]
000c92  eb000081          ADD      r0,r0,r1,LSL #2
000c96  88c0              LDRH     r0,[r0,#6]
000c98  2814              CMP      r0,#0x14
000c9a  d104              BNE      |L1.3238|
;;;486    		dis_print(LCD_LINE_2, "OFF  <  20Hz  > 21Hz");
000c9c  a1fa              ADR      r1,|L1.4232|
000c9e  20c0              MOVS     r0,#0xc0
000ca0  f7fffffe          BL       dis_print
000ca4  e06d              B        |L1.3458|
                  |L1.3238|
;;;487    	}else if(sys->sub[sys->sub_model].highpass == SUB_HIGHPASS_MAX){
000ca6  7ee1              LDRB     r1,[r4,#0x1b]
000ca8  eb010141          ADD      r1,r1,r1,LSL #1
000cac  6be0              LDR      r0,[r4,#0x3c]
000cae  eb000081          ADD      r0,r0,r1,LSL #2
000cb2  88c0              LDRH     r0,[r0,#6]
000cb4  2864              CMP      r0,#0x64
000cb6  d104              BNE      |L1.3266|
;;;488    		dis_print(LCD_LINE_2, "90Hz < 100Hz  >  OFF");
000cb8  a1f9              ADR      r1,|L1.4256|
000cba  20c0              MOVS     r0,#0xc0
000cbc  f7fffffe          BL       dis_print
000cc0  e05f              B        |L1.3458|
                  |L1.3266|
;;;489    	}else if(sys->sub[sys->sub_model].highpass < SUB_HIGHPASS_NODE1){
000cc2  7ee1              LDRB     r1,[r4,#0x1b]
000cc4  eb010141          ADD      r1,r1,r1,LSL #1
000cc8  6be0              LDR      r0,[r4,#0x3c]
000cca  eb000081          ADD      r0,r0,r1,LSL #2
000cce  88c0              LDRH     r0,[r0,#6]
000cd0  283c              CMP      r0,#0x3c
000cd2  da1d              BGE      |L1.3344|
;;;490    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", sys->sub[sys->sub_model].highpass - 1, 
000cd4  7ee1              LDRB     r1,[r4,#0x1b]
000cd6  eb010141          ADD      r1,r1,r1,LSL #1
000cda  6be0              LDR      r0,[r4,#0x3c]
000cdc  eb000081          ADD      r0,r0,r1,LSL #2
000ce0  88c0              LDRH     r0,[r0,#6]
000ce2  1c40              ADDS     r0,r0,#1
000ce4  9000              STR      r0,[sp,#0]
000ce6  7ee1              LDRB     r1,[r4,#0x1b]
000ce8  eb010141          ADD      r1,r1,r1,LSL #1
000cec  6be0              LDR      r0,[r4,#0x3c]
000cee  eb000081          ADD      r0,r0,r1,LSL #2
000cf2  88c3              LDRH     r3,[r0,#6]
000cf4  7ee1              LDRB     r1,[r4,#0x1b]
000cf6  eb010141          ADD      r1,r1,r1,LSL #1
000cfa  6be0              LDR      r0,[r4,#0x3c]
000cfc  eb000081          ADD      r0,r0,r1,LSL #2
000d00  88c0              LDRH     r0,[r0,#6]
000d02  1e42              SUBS     r2,r0,#1
000d04  f2af1188          ADR      r1,|L1.2944|
000d08  20c0              MOVS     r0,#0xc0
000d0a  f7fffffe          BL       dis_print
000d0e  e038              B        |L1.3458|
                  |L1.3344|
;;;491    		    sys->sub[sys->sub_model].highpass, sys->sub[sys->sub_model].highpass + 1);
;;;492    	}else if(sys->sub[sys->sub_model].highpass == SUB_LOWPASS_NODE1){
000d10  7ee1              LDRB     r1,[r4,#0x1b]
000d12  eb010141          ADD      r1,r1,r1,LSL #1
000d16  6be0              LDR      r0,[r4,#0x3c]
000d18  eb000081          ADD      r0,r0,r1,LSL #2
000d1c  88c0              LDRH     r0,[r0,#6]
000d1e  283c              CMP      r0,#0x3c
000d20  d109              BNE      |L1.3382|
;;;493    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", SUB_HIGHPASS_NODE1 - 1, SUB_HIGHPASS_NODE1, SUB_HIGHPASS_NODE1 + 5);
000d22  2041              MOVS     r0,#0x41
000d24  233c              MOVS     r3,#0x3c
000d26  223b              MOVS     r2,#0x3b
000d28  f2af11ac          ADR      r1,|L1.2944|
000d2c  9000              STR      r0,[sp,#0]
000d2e  20c0              MOVS     r0,#0xc0
000d30  f7fffffe          BL       dis_print
000d34  e025              B        |L1.3458|
                  |L1.3382|
;;;494    	}else if(sys->sub[sys->sub_model].highpass < SUB_HIGHPASS_MAX){
000d36  7ee1              LDRB     r1,[r4,#0x1b]
000d38  eb010141          ADD      r1,r1,r1,LSL #1
000d3c  6be0              LDR      r0,[r4,#0x3c]
000d3e  eb000081          ADD      r0,r0,r1,LSL #2
000d42  88c0              LDRH     r0,[r0,#6]
000d44  2864              CMP      r0,#0x64
000d46  da1c              BGE      |L1.3458|
;;;495    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", sys->sub[sys->sub_model].highpass - 5, 
000d48  7ee1              LDRB     r1,[r4,#0x1b]
000d4a  eb010141          ADD      r1,r1,r1,LSL #1
000d4e  6be0              LDR      r0,[r4,#0x3c]
000d50  eb000081          ADD      r0,r0,r1,LSL #2
000d54  88c0              LDRH     r0,[r0,#6]
000d56  1d40              ADDS     r0,r0,#5
000d58  9000              STR      r0,[sp,#0]
000d5a  7ee1              LDRB     r1,[r4,#0x1b]
000d5c  eb010141          ADD      r1,r1,r1,LSL #1
000d60  6be0              LDR      r0,[r4,#0x3c]
000d62  eb000081          ADD      r0,r0,r1,LSL #2
000d66  88c3              LDRH     r3,[r0,#6]
000d68  7ee1              LDRB     r1,[r4,#0x1b]
000d6a  eb010141          ADD      r1,r1,r1,LSL #1
000d6e  6be0              LDR      r0,[r4,#0x3c]
000d70  eb000081          ADD      r0,r0,r1,LSL #2
000d74  88c0              LDRH     r0,[r0,#6]
000d76  1f42              SUBS     r2,r0,#5
000d78  f2af11fc          ADR      r1,|L1.2944|
000d7c  20c0              MOVS     r0,#0xc0
000d7e  f7fffffe          BL       dis_print
                  |L1.3458|
;;;496    		  sys->sub[sys->sub_model].highpass, sys->sub[sys->sub_model].highpass + 5);
;;;497    	}
;;;498    }
000d82  bd38              POP      {r3-r5,pc}
;;;499    
                          ENDP

                  dis_lineout_highpass_menu PROC
;;;500    static void dis_lineout_highpass_menu(sys_state_t *sys)
000d84  b538              PUSH     {r3-r5,lr}
;;;501    {
000d86  4604              MOV      r4,r0
;;;502    	 dis_clean(); 
000d88  f7fffffe          BL       dis_clean
;;;503    	 dis_print(LCD_LINE_1, "Line Output Highpass"); 
000d8c  a1ca              ADR      r1,|L1.4280|
000d8e  2080              MOVS     r0,#0x80
000d90  f7fffffe          BL       dis_print
;;;504    	 if(sys->lineout_highpass == LINEOUT_HIGHPASS_DEFAULT){
000d94  8c20              LDRH     r0,[r4,#0x20]
000d96  f5b07fa5          CMP      r0,#0x14a
000d9a  d104              BNE      |L1.3494|
;;;505    		dis_print(LCD_LINE_2, "300Hz<  Thru  > 30Hz");
000d9c  a1cc              ADR      r1,|L1.4304|
000d9e  20c0              MOVS     r0,#0xc0
000da0  f7fffffe          BL       dis_print
000da4  e055              B        |L1.3666|
                  |L1.3494|
;;;506    	}else if(sys->lineout_highpass == LINEOUT_HIGHPASS_MIN){
000da6  8c20              LDRH     r0,[r4,#0x20]
000da8  281e              CMP      r0,#0x1e
000daa  d104              BNE      |L1.3510|
;;;507    		dis_print(LCD_LINE_2, "Thru <  30Hz  > 31Hz");
000dac  a1ce              ADR      r1,|L1.4328|
000dae  20c0              MOVS     r0,#0xc0
000db0  f7fffffe          BL       dis_print
000db4  e04d              B        |L1.3666|
                  |L1.3510|
;;;508    	}else if(sys->lineout_highpass == LINEOUT_HIGHPASS_MAX){
000db6  8c20              LDRH     r0,[r4,#0x20]
000db8  f5b07f96          CMP      r0,#0x12c
000dbc  d104              BNE      |L1.3528|
;;;509    		dis_print(LCD_LINE_2, "290Hz< 300Hz  > Thru");
000dbe  a1d0              ADR      r1,|L1.4352|
000dc0  20c0              MOVS     r0,#0xc0
000dc2  f7fffffe          BL       dis_print
000dc6  e044              B        |L1.3666|
                  |L1.3528|
;;;510    	}else if(sys->lineout_highpass < LINEOUT_HIGHPASS_NODE1){
000dc8  8c20              LDRH     r0,[r4,#0x20]
000dca  283c              CMP      r0,#0x3c
000dcc  da0a              BGE      |L1.3556|
;;;511    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", sys->lineout_highpass - 1, 
000dce  8c20              LDRH     r0,[r4,#0x20]
000dd0  1c40              ADDS     r0,r0,#1
000dd2  9000              STR      r0,[sp,#0]
000dd4  8c23              LDRH     r3,[r4,#0x20]
000dd6  1e5a              SUBS     r2,r3,#1
000dd8  f2af215c          ADR      r1,|L1.2944|
000ddc  20c0              MOVS     r0,#0xc0
000dde  f7fffffe          BL       dis_print
000de2  e036              B        |L1.3666|
                  |L1.3556|
;;;512    		    sys->lineout_highpass, sys->lineout_highpass + 1);
;;;513    	}else if(sys->lineout_highpass == LINEOUT_HIGHPASS_NODE1){
000de4  8c20              LDRH     r0,[r4,#0x20]
000de6  283c              CMP      r0,#0x3c
000de8  d109              BNE      |L1.3582|
;;;514    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", LINEOUT_HIGHPASS_NODE1 - 1, LINEOUT_HIGHPASS_NODE1, LINEOUT_HIGHPASS_NODE1 + 5);
000dea  2041              MOVS     r0,#0x41
000dec  233c              MOVS     r3,#0x3c
000dee  223b              MOVS     r2,#0x3b
000df0  f2af2174          ADR      r1,|L1.2944|
000df4  9000              STR      r0,[sp,#0]
000df6  20c0              MOVS     r0,#0xc0
000df8  f7fffffe          BL       dis_print
000dfc  e029              B        |L1.3666|
                  |L1.3582|
;;;515    	}else if(sys->lineout_highpass < LINEOUT_HIGHPASS_NODE2){
000dfe  8c20              LDRH     r0,[r4,#0x20]
000e00  2878              CMP      r0,#0x78
000e02  da0a              BGE      |L1.3610|
;;;516    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", sys->lineout_highpass - 5, 
000e04  8c20              LDRH     r0,[r4,#0x20]
000e06  1d40              ADDS     r0,r0,#5
000e08  9000              STR      r0,[sp,#0]
000e0a  8c23              LDRH     r3,[r4,#0x20]
000e0c  1f5a              SUBS     r2,r3,#5
000e0e  f2af2190          ADR      r1,|L1.2944|
000e12  20c0              MOVS     r0,#0xc0
000e14  f7fffffe          BL       dis_print
000e18  e01b              B        |L1.3666|
                  |L1.3610|
;;;517    		   sys->lineout_highpass, sys->lineout_highpass + 5);
;;;518    	}else if(sys->lineout_highpass == LINEOUT_HIGHPASS_NODE2){
000e1a  8c20              LDRH     r0,[r4,#0x20]
000e1c  2878              CMP      r0,#0x78
000e1e  d109              BNE      |L1.3636|
;;;519    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", LINEOUT_HIGHPASS_NODE2 - 5, LINEOUT_HIGHPASS_NODE2, LINEOUT_HIGHPASS_NODE2 + 10);
000e20  2082              MOVS     r0,#0x82
000e22  2378              MOVS     r3,#0x78
000e24  2273              MOVS     r2,#0x73
000e26  f2af21a8          ADR      r1,|L1.2944|
000e2a  9000              STR      r0,[sp,#0]
000e2c  20c0              MOVS     r0,#0xc0
000e2e  f7fffffe          BL       dis_print
000e32  e00e              B        |L1.3666|
                  |L1.3636|
;;;520    	}else if(sys->lineout_highpass < LINEOUT_HIGHPASS_MAX){
000e34  8c20              LDRH     r0,[r4,#0x20]
000e36  f5b07f96          CMP      r0,#0x12c
000e3a  da0a              BGE      |L1.3666|
;;;521    		dis_print(LCD_LINE_2, "%3dHz< %3dHz  >%3dHz", sys->lineout_highpass - 10, 
000e3c  8c20              LDRH     r0,[r4,#0x20]
000e3e  300a              ADDS     r0,r0,#0xa
000e40  9000              STR      r0,[sp,#0]
000e42  8c23              LDRH     r3,[r4,#0x20]
000e44  f1a3020a          SUB      r2,r3,#0xa
000e48  f2af21cc          ADR      r1,|L1.2944|
000e4c  20c0              MOVS     r0,#0xc0
000e4e  f7fffffe          BL       dis_print
                  |L1.3666|
;;;522    		  sys->lineout_highpass, sys->lineout_highpass + 10);
;;;523    	}
;;;524    }
000e52  bd38              POP      {r3-r5,pc}
;;;525    
                          ENDP

                  dis_delay_router_menu PROC
;;;526    static void dis_delay_router_menu(sys_state_t *sys)
000e54  b538              PUSH     {r3-r5,lr}
;;;527    {
000e56  4604              MOV      r4,r0
;;;528    	 dis_clean(); 
000e58  f7fffffe          BL       dis_clean
;;;529    	 dis_print(LCD_LINE_1, "   Route Delay to");  
000e5c  a1ae              ADR      r1,|L1.4376|
000e5e  2080              MOVS     r0,#0x80
000e60  f7fffffe          BL       dis_print
;;;530    	 OSAL_ASSERT(sys->d_router < DELAY_ROUTER_MAX);
000e64  f8940026          LDRB     r0,[r4,#0x26]
000e68  2803              CMP      r0,#3
000e6a  db07              BLT      |L1.3708|
000e6c  4aaf              LDR      r2,|L1.4396|
000e6e  a1b0              ADR      r1,|L1.4400|
000e70  f6af2088          ADR      r0,|L1.1004|
000e74  f7fffffe          BL       s_printf
000e78  bf00              NOP      
                  |L1.3706|
000e7a  e7fe              B        |L1.3706|
                  |L1.3708|
;;;531    	 dis_print(LCD_LINE_2, "%-5s<  %-6s>%5s", delay_name[(sys->d_router == 0? (DELAY_ROUTER_MAX - 1):(sys->d_router - 1))],
000e7c  f8140f26          LDRB     r0,[r4,#0x26]!
000e80  1c40              ADDS     r0,r0,#1
000e82  2103              MOVS     r1,#3
000e84  fb90f2f1          SDIV     r2,r0,r1
000e88  fb010012          MLS      r0,r1,r2,r0
000e8c  49b1              LDR      r1,|L1.4436|
000e8e  f8515020          LDR      r5,[r1,r0,LSL #2]
000e92  9500              STR      r5,[sp,#0]
000e94  f8140926          LDRB     r0,[r4],#-0x26
000e98  f8513020          LDR      r3,[r1,r0,LSL #2]
000e9c  b908              CBNZ     r0,|L1.3746|
000e9e  2002              MOVS     r0,#2
000ea0  e002              B        |L1.3752|
                  |L1.3746|
000ea2  f8940026          LDRB     r0,[r4,#0x26]
000ea6  1e40              SUBS     r0,r0,#1
                  |L1.3752|
000ea8  49aa              LDR      r1,|L1.4436|
000eaa  f8512020          LDR      r2,[r1,r0,LSL #2]
000eae  a1aa              ADR      r1,|L1.4440|
000eb0  20c0              MOVS     r0,#0xc0
000eb2  f7fffffe          BL       dis_print
;;;532    	      delay_name[sys->d_router], delay_name[(sys->d_router + 1)%DELAY_ROUTER_MAX]); 
;;;533    }
000eb6  bd38              POP      {r3-r5,pc}
;;;534    
                          ENDP

                  dis_power_on_method_menu PROC
;;;535    static void dis_power_on_method_menu(sys_state_t *sys)
000eb8  b538              PUSH     {r3-r5,lr}
;;;536    {
000eba  4604              MOV      r4,r0
;;;537    	 dis_clean(); 
000ebc  f7fffffe          BL       dis_clean
;;;538    	 dis_print(LCD_LINE_1, "  Power On Method");  
000ec0  a1a9              ADR      r1,|L1.4456|
000ec2  2080              MOVS     r0,#0x80
000ec4  f7fffffe          BL       dis_print
;;;539    	 OSAL_ASSERT(sys->method < POWER_ON_MAX);
000ec8  7ce0              LDRB     r0,[r4,#0x13]
000eca  2804              CMP      r0,#4
000ecc  db07              BLT      |L1.3806|
000ece  4aab              LDR      r2,|L1.4476|
000ed0  a1ab              ADR      r1,|L1.4480|
000ed2  f6af20e8          ADR      r0,|L1.1004|
000ed6  f7fffffe          BL       s_printf
000eda  bf00              NOP      
                  |L1.3804|
000edc  e7fe              B        |L1.3804|
                  |L1.3806|
;;;540    	 dis_print(LCD_LINE_2, "%-5s<%-8s>%5s", power_on_name[(sys->method == 0? (POWER_ON_MAX - 1):(sys->method - 1))], 
000ede  7ce0              LDRB     r0,[r4,#0x13]
000ee0  1c45              ADDS     r5,r0,#1
000ee2  17e8              ASRS     r0,r5,#31
000ee4  eb057090          ADD      r0,r5,r0,LSR #30
000ee8  1080              ASRS     r0,r0,#2
000eea  eba50080          SUB      r0,r5,r0,LSL #2
000eee  49ab              LDR      r1,|L1.4508|
000ef0  f8510020          LDR      r0,[r1,r0,LSL #2]
000ef4  9000              STR      r0,[sp,#0]
000ef6  7ce0              LDRB     r0,[r4,#0x13]
000ef8  49a9              LDR      r1,|L1.4512|
000efa  f8513020          LDR      r3,[r1,r0,LSL #2]
000efe  b908              CBNZ     r0,|L1.3844|
000f00  2003              MOVS     r0,#3
000f02  e001              B        |L1.3848|
                  |L1.3844|
000f04  7ce0              LDRB     r0,[r4,#0x13]
000f06  1e40              SUBS     r0,r0,#1
                  |L1.3848|
000f08  49a4              LDR      r1,|L1.4508|
000f0a  f8512020          LDR      r2,[r1,r0,LSL #2]
000f0e  a1a5              ADR      r1,|L1.4516|
000f10  20c0              MOVS     r0,#0xc0
000f12  f7fffffe          BL       dis_print
;;;541    	  power_on_name_center[sys->method], power_on_name[(sys->method + 1)%POWER_ON_MAX]); 
;;;542    }
000f16  bd38              POP      {r3-r5,pc}
;;;543    
                          ENDP

                  dis_reset_menu PROC
;;;544    static void dis_reset_menu(sys_state_t *sys)
000f18  b510              PUSH     {r4,lr}
;;;545    {
000f1a  4604              MOV      r4,r0
;;;546    	 dis_clean(); 
000f1c  f7fffffe          BL       dis_clean
;;;547    	 dis_print(LCD_LINE_1, "Factory Reset Press@");  
000f20  a1a4              ADR      r1,|L1.4532|
000f22  2080              MOVS     r0,#0x80
000f24  f7fffffe          BL       dis_print
;;;548    	 if(sys->do_reset == true){
000f28  f8940046          LDRB     r0,[r4,#0x46]
000f2c  2801              CMP      r0,#1
000f2e  d104              BNE      |L1.3898|
;;;549    			dis_print(LCD_LINE_2, "No   <  Yes   >   No");  
000f30  a1a6              ADR      r1,|L1.4556|
000f32  20c0              MOVS     r0,#0xc0
000f34  f7fffffe          BL       dis_print
000f38  e003              B        |L1.3906|
                  |L1.3898|
;;;550    	 }else{
;;;551    		  dis_print(LCD_LINE_2, "Yes  <  No    >  Yes"); 
000f3a  a1aa              ADR      r1,|L1.4580|
000f3c  20c0              MOVS     r0,#0xc0
000f3e  f7fffffe          BL       dis_print
                  |L1.3906|
;;;552    	 }
;;;553    }
000f42  bd10              POP      {r4,pc}
;;;554    
                          ENDP

                  dis_delay_time_menu PROC
;;;555    static void dis_delay_time_menu(sys_state_t *sys)
000f44  b530              PUSH     {r4,r5,lr}
;;;556    {
000f46  ed2d8b0a          VPUSH    {d8-d12}
000f4a  b085              SUB      sp,sp,#0x14
000f4c  4604              MOV      r4,r0
;;;557    	 dis_clean(); 
000f4e  f7fffffe          BL       dis_clean
;;;558    	 dis_print(LCD_LINE_1, "Delay in ms or (ft)");
000f52  a1aa              ADR      r1,|L1.4604|
000f54  2080              MOVS     r0,#0x80
000f56  f7fffffe          BL       dis_print
;;;559    	 if(sys->d_router == DELAY_SUB){
000f5a  f8940026          LDRB     r0,[r4,#0x26]
000f5e  2800              CMP      r0,#0
000f60  d179              BNE      |L1.4182|
;;;560         dis_print(LCD_LINE_2, "%04.1f <  %04.1f  > %04.1f", (float)((sys->sub[sys->sub_model].delay == 0? (SUB_DELAY_MAX):(sys->sub[sys->sub_model].delay - 5))/10.0),
000f62  7ee2              LDRB     r2,[r4,#0x1b]
000f64  eb020242          ADD      r2,r2,r2,LSL #1
000f68  6be1              LDR      r1,[r4,#0x3c]
000f6a  eb010182          ADD      r1,r1,r2,LSL #2
000f6e  8949              LDRH     r1,[r1,#0xa]
000f70  29fa              CMP      r1,#0xfa
000f72  d101              BNE      |L1.3960|
;;;561    	     (float)(sys->sub[sys->sub_model].delay / 10.0), (float)((sys->sub[sys->sub_model].delay == SUB_DELAY_MAX ?(0):(sys->sub[sys->sub_model].delay + 5))/10.0) ); 
000f74  2100              MOVS     r1,#0
000f76  e007              B        |L1.3976|
                  |L1.3960|
000f78  7ee2              LDRB     r2,[r4,#0x1b]
000f7a  eb020242          ADD      r2,r2,r2,LSL #1
000f7e  6be1              LDR      r1,[r4,#0x3c]
000f80  eb010182          ADD      r1,r1,r2,LSL #2
000f84  8949              LDRH     r1,[r1,#0xa]
000f86  1d49              ADDS     r1,r1,#5
                  |L1.3976|
000f88  4608              MOV      r0,r1
000f8a  f7fffffe          BL       __aeabi_i2d
000f8e  ec410b1c          VMOV     d12,r0,r1
000f92  ed9f0b9f          VLDR     d0,|L1.4624|
000f96  ec532b10          VMOV     r2,r3,d0
000f9a  f7fffffe          BL       __aeabi_ddiv
000f9e  ec410b1b          VMOV     d11,r0,r1
000fa2  f7fffffe          BL       __aeabi_d2f
000fa6  4605              MOV      r5,r0
000fa8  f7fffffe          BL       __aeabi_f2d
000fac  ec410b18          VMOV     d8,r0,r1
000fb0  7ee2              LDRB     r2,[r4,#0x1b]
000fb2  eb020242          ADD      r2,r2,r2,LSL #1
000fb6  6be1              LDR      r1,[r4,#0x3c]
000fb8  eb010182          ADD      r1,r1,r2,LSL #2
000fbc  8948              LDRH     r0,[r1,#0xa]
000fbe  f7fffffe          BL       __aeabi_ui2d
000fc2  ec410b10          VMOV     d0,r0,r1
000fc6  eeb0ca40          VMOV.F32 s24,s0
000fca  eef0ca60          VMOV.F32 s25,s1
000fce  ed9f0b90          VLDR     d0,|L1.4624|
000fd2  ec532b10          VMOV     r2,r3,d0
000fd6  ec510b1c          VMOV     r0,r1,d12
000fda  f7fffffe          BL       __aeabi_ddiv
000fde  ec410b10          VMOV     d0,r0,r1
000fe2  eeb0ba40          VMOV.F32 s22,s0
000fe6  eef0ba60          VMOV.F32 s23,s1
000fea  ec510b1b          VMOV     r0,r1,d11
000fee  f7fffffe          BL       __aeabi_d2f
000ff2  4605              MOV      r5,r0
000ff4  f7fffffe          BL       __aeabi_f2d
000ff8  ec410b19          VMOV     d9,r0,r1
000ffc  7ee2              LDRB     r2,[r4,#0x1b]
000ffe  eb020242          ADD      r2,r2,r2,LSL #1
001002  6be1              LDR      r1,[r4,#0x3c]
001004  eb010182          ADD      r1,r1,r2,LSL #2
001008  8949              LDRH     r1,[r1,#0xa]
00100a  b909              CBNZ     r1,|L1.4112|
00100c  21fa              MOVS     r1,#0xfa              ;560
00100e  e007              B        |L1.4128|
                  |L1.4112|
001010  7ee2              LDRB     r2,[r4,#0x1b]         ;560
001012  eb020242          ADD      r2,r2,r2,LSL #1       ;560
001016  6be1              LDR      r1,[r4,#0x3c]         ;560
001018  eb010182          ADD      r1,r1,r2,LSL #2       ;560
00101c  8949              LDRH     r1,[r1,#0xa]          ;560
00101e  1f49              SUBS     r1,r1,#5              ;560
                  |L1.4128|
001020  4608              MOV      r0,r1                 ;560
001022  f7fffffe          BL       __aeabi_i2d
001026  ec410b1c          VMOV     d12,r0,r1             ;560
00102a  ed9f0b79          VLDR     d0,|L1.4624|
00102e  ec532b10          VMOV     r2,r3,d0              ;560
001032  f7fffffe          BL       __aeabi_ddiv
001036  ec410b1b          VMOV     d11,r0,r1             ;560
00103a  f7fffffe          BL       __aeabi_d2f
00103e  4605              MOV      r5,r0                 ;560
001040  f7fffffe          BL       __aeabi_f2d
001044  ec410b1a          VMOV     d10,r0,r1             ;560
001048  ed8d8b02          VSTR     d8,[sp,#8]            ;560
00104c  ed8d9b00          VSTR     d9,[sp,#0]            ;560
001050  ec532b1a          VMOV     r2,r3,d10             ;560
001054  e0e0              B        |L1.4632|
                  |L1.4182|
001056  e0e4              B        |L1.4642|
                  |L1.4184|
001058  20537562          DCB      " Sub Highpass Filter",0
00105c  20486967
001060  68706173
001064  73204669
001068  6c746572
00106c  00      
00106d  00                DCB      0
00106e  00                DCB      0
00106f  00                DCB      0
                  |L1.4208|
001070  31303048          DCB      "100Hz<  OFF   > 20Hz",0
001074  7a3c2020
001078  4f464620
00107c  20203e20
001080  3230487a
001084  00      
001085  00                DCB      0
001086  00                DCB      0
001087  00                DCB      0
                  |L1.4232|
001088  4f464620          DCB      "OFF  <  20Hz  > 21Hz",0
00108c  203c2020
001090  3230487a
001094  20203e20
001098  3231487a
00109c  00      
00109d  00                DCB      0
00109e  00                DCB      0
00109f  00                DCB      0
                  |L1.4256|
0010a0  3930487a          DCB      "90Hz < 100Hz  >  OFF",0
0010a4  203c2031
0010a8  3030487a
0010ac  20203e20
0010b0  204f4646
0010b4  00      
0010b5  00                DCB      0
0010b6  00                DCB      0
0010b7  00                DCB      0
                  |L1.4280|
0010b8  4c696e65          DCB      "Line Output Highpass",0
0010bc  204f7574
0010c0  70757420
0010c4  48696768
0010c8  70617373
0010cc  00      
0010cd  00                DCB      0
0010ce  00                DCB      0
0010cf  00                DCB      0
                  |L1.4304|
0010d0  33303048          DCB      "300Hz<  Thru  > 30Hz",0
0010d4  7a3c2020
0010d8  54687275
0010dc  20203e20
0010e0  3330487a
0010e4  00      
0010e5  00                DCB      0
0010e6  00                DCB      0
0010e7  00                DCB      0
                  |L1.4328|
0010e8  54687275          DCB      "Thru <  30Hz  > 31Hz",0
0010ec  203c2020
0010f0  3330487a
0010f4  20203e20
0010f8  3331487a
0010fc  00      
0010fd  00                DCB      0
0010fe  00                DCB      0
0010ff  00                DCB      0
                  |L1.4352|
001100  32393048          DCB      "290Hz< 300Hz  > Thru",0
001104  7a3c2033
001108  3030487a
00110c  20203e20
001110  54687275
001114  00      
001115  00                DCB      0
001116  00                DCB      0
001117  00                DCB      0
                  |L1.4376|
001118  20202052          DCB      "   Route Delay to",0
00111c  6f757465
001120  2044656c
001124  61792074
001128  6f00    
00112a  00                DCB      0
00112b  00                DCB      0
                  |L1.4396|
                          DCD      |symbol_number.41|
                  |L1.4400|
001130  7379732d          DCB      "sys->d_router < DELAY_ROUTER_MAX",0
001134  3e645f72
001138  6f757465
00113c  72203c20
001140  44454c41
001144  595f524f
001148  55544552
00114c  5f4d4158
001150  00      
001151  00                DCB      0
001152  00                DCB      0
001153  00                DCB      0
                  |L1.4436|
                          DCD      delay_name
                  |L1.4440|
001158  252d3573          DCB      "%-5s<  %-6s>%5s",0
00115c  3c202025
001160  2d36733e
001164  25357300
                  |L1.4456|
001168  2020506f          DCB      "  Power On Method",0
00116c  77657220
001170  4f6e204d
001174  6574686f
001178  6400    
00117a  00                DCB      0
00117b  00                DCB      0
                  |L1.4476|
                          DCD      |symbol_number.42|
                  |L1.4480|
001180  7379732d          DCB      "sys->method < POWER_ON_MAX",0
001184  3e6d6574
001188  686f6420
00118c  3c20504f
001190  5745525f
001194  4f4e5f4d
001198  415800  
00119b  00                DCB      0
                  |L1.4508|
                          DCD      power_on_name
                  |L1.4512|
                          DCD      power_on_name_center
                  |L1.4516|
0011a4  252d3573          DCB      "%-5s<%-8s>%5s",0
0011a8  3c252d38
0011ac  733e2535
0011b0  7300    
0011b2  00                DCB      0
0011b3  00                DCB      0
                  |L1.4532|
0011b4  46616374          DCB      "Factory Reset Press@",0
0011b8  6f727920
0011bc  52657365
0011c0  74205072
0011c4  65737340
0011c8  00      
0011c9  00                DCB      0
0011ca  00                DCB      0
0011cb  00                DCB      0
                  |L1.4556|
0011cc  4e6f2020          DCB      "No   <  Yes   >   No",0
0011d0  203c2020
0011d4  59657320
0011d8  20203e20
0011dc  20204e6f
0011e0  00      
0011e1  00                DCB      0
0011e2  00                DCB      0
0011e3  00                DCB      0
                  |L1.4580|
0011e4  59657320          DCB      "Yes  <  No    >  Yes",0
0011e8  203c2020
0011ec  4e6f2020
0011f0  20203e20
0011f4  20596573
0011f8  00      
0011f9  00                DCB      0
0011fa  00                DCB      0
0011fb  00                DCB      0
                  |L1.4604|
0011fc  44656c61          DCB      "Delay in ms or (ft)",0
001200  7920696e
001204  206d7320
001208  6f722028
00120c  66742900
                  |L1.4624|
001210  00000000          DCFD     0x4024000000000000 ; 10
001214  40240000
                  |L1.4632|
001218  a1e9              ADR      r1,|L1.5568|
00121a  20c0              MOVS     r0,#0xc0              ;560
00121c  f7fffffe          BL       dis_print
001220  e062              B        |L1.4840|
                  |L1.4642|
;;;562    	 }else if(sys->d_router == DELAY_LINEOUT){
001222  f8940026          LDRB     r0,[r4,#0x26]
001226  2801              CMP      r0,#1
001228  d15e              BNE      |L1.4840|
;;;563    		 dis_print(LCD_LINE_2, "%04.1f <  %04.1f  > %04.1f", (float)((sys->line_delay_time == 0? (SUB_DELAY_MAX):(sys->line_delay_time - 5))/10.0),
00122a  8ca1              LDRH     r1,[r4,#0x24]
00122c  29fa              CMP      r1,#0xfa
00122e  d101              BNE      |L1.4660|
;;;564    	     (float)(sys->line_delay_time / 10.0), (float)((sys->line_delay_time == SUB_DELAY_MAX ?(0):(sys->line_delay_time + 5))/10.0) );
001230  2100              MOVS     r1,#0
001232  e001              B        |L1.4664|
                  |L1.4660|
001234  8ca1              LDRH     r1,[r4,#0x24]
001236  1d49              ADDS     r1,r1,#5
                  |L1.4664|
001238  4608              MOV      r0,r1
00123a  f7fffffe          BL       __aeabi_i2d
00123e  ec410b1c          VMOV     d12,r0,r1
001242  ed1f0b0d          VLDR     d0,|L1.4624|
001246  ec532b10          VMOV     r2,r3,d0
00124a  f7fffffe          BL       __aeabi_ddiv
00124e  ec410b1b          VMOV     d11,r0,r1
001252  f7fffffe          BL       __aeabi_d2f
001256  4605              MOV      r5,r0
001258  f7fffffe          BL       __aeabi_f2d
00125c  ec410b1a          VMOV     d10,r0,r1
001260  8ca0              LDRH     r0,[r4,#0x24]
001262  f7fffffe          BL       __aeabi_ui2d
001266  ec410b10          VMOV     d0,r0,r1
00126a  eeb0ca40          VMOV.F32 s24,s0
00126e  eef0ca60          VMOV.F32 s25,s1
001272  ed1f0b19          VLDR     d0,|L1.4624|
001276  ec532b10          VMOV     r2,r3,d0
00127a  ec510b1c          VMOV     r0,r1,d12
00127e  f7fffffe          BL       __aeabi_ddiv
001282  ec410b10          VMOV     d0,r0,r1
001286  eeb0ba40          VMOV.F32 s22,s0
00128a  eef0ba60          VMOV.F32 s23,s1
00128e  ec510b1b          VMOV     r0,r1,d11
001292  f7fffffe          BL       __aeabi_d2f
001296  4605              MOV      r5,r0
001298  f7fffffe          BL       __aeabi_f2d
00129c  ec410b19          VMOV     d9,r0,r1
0012a0  8ca1              LDRH     r1,[r4,#0x24]
0012a2  b909              CBNZ     r1,|L1.4776|
0012a4  21fa              MOVS     r1,#0xfa              ;563
0012a6  e001              B        |L1.4780|
                  |L1.4776|
0012a8  8ca1              LDRH     r1,[r4,#0x24]         ;563
0012aa  1f49              SUBS     r1,r1,#5              ;563
                  |L1.4780|
0012ac  4608              MOV      r0,r1                 ;563
0012ae  f7fffffe          BL       __aeabi_i2d
0012b2  ec410b1c          VMOV     d12,r0,r1             ;563
0012b6  ed1f0b2a          VLDR     d0,|L1.4624|
0012ba  ec532b10          VMOV     r2,r3,d0              ;563
0012be  f7fffffe          BL       __aeabi_ddiv
0012c2  ec410b1b          VMOV     d11,r0,r1             ;563
0012c6  f7fffffe          BL       __aeabi_d2f
0012ca  4605              MOV      r5,r0                 ;563
0012cc  f7fffffe          BL       __aeabi_f2d
0012d0  ec410b18          VMOV     d8,r0,r1              ;563
0012d4  ed8dab02          VSTR     d10,[sp,#8]           ;563
0012d8  ed8d9b00          VSTR     d9,[sp,#0]            ;563
0012dc  ec532b18          VMOV     r2,r3,d8              ;563
0012e0  a1b7              ADR      r1,|L1.5568|
0012e2  20c0              MOVS     r0,#0xc0              ;563
0012e4  f7fffffe          BL       dis_print
                  |L1.4840|
;;;565    	 }
;;;566    }
0012e8  b005              ADD      sp,sp,#0x14
0012ea  ecbd8b0a          VPOP     {d8-d12}
0012ee  bd30              POP      {r4,r5,pc}
;;;567    
                          ENDP

                  dis_sense_threshold_menu PROC
;;;568    static void dis_sense_threshold_menu(sys_state_t *sys)
0012f0  b538              PUSH     {r3-r5,lr}
;;;569    {
0012f2  4604              MOV      r4,r0
;;;570    	 dis_clean(); 
0012f4  f7fffffe          BL       dis_clean
;;;571    	 dis_print(LCD_LINE_1, "Sense On Threshold");
0012f8  a1b8              ADR      r1,|L1.5596|
0012fa  2080              MOVS     r0,#0x80
0012fc  f7fffffe          BL       dis_print
;;;572    	 OSAL_ASSERT(sys->sense_thres < SENSE_THRESHOLD_NUM);
001300  f8940027          LDRB     r0,[r4,#0x27]
001304  2805              CMP      r0,#5
001306  db07              BLT      |L1.4888|
001308  4ab9              LDR      r2,|L1.5616|
00130a  a1ba              ADR      r1,|L1.5620|
00130c  f6af7024          ADR      r0,|L1.1004|
001310  f7fffffe          BL       s_printf
001314  bf00              NOP      
                  |L1.4886|
001316  e7fe              B        |L1.4886|
                  |L1.4888|
;;;573    	 dis_print(LCD_LINE_2, "%s <  %s  > %s", sense_theshold[(sys->sense_thres == 0? (SENSE_THRESHOLD_NUM - 1):(sys->sense_thres - 1))],
001318  f8140f27          LDRB     r0,[r4,#0x27]!
00131c  1c40              ADDS     r0,r0,#1
00131e  2105              MOVS     r1,#5
001320  fb90f2f1          SDIV     r2,r0,r1
001324  fb010012          MLS      r0,r1,r2,r0
001328  49bc              LDR      r1,|L1.5660|
00132a  f8515020          LDR      r5,[r1,r0,LSL #2]
00132e  9500              STR      r5,[sp,#0]
001330  f8140927          LDRB     r0,[r4],#-0x27
001334  f8513020          LDR      r3,[r1,r0,LSL #2]
001338  b908              CBNZ     r0,|L1.4926|
00133a  2004              MOVS     r0,#4
00133c  e002              B        |L1.4932|
                  |L1.4926|
00133e  f8940027          LDRB     r0,[r4,#0x27]
001342  1e40              SUBS     r0,r0,#1
                  |L1.4932|
001344  49b5              LDR      r1,|L1.5660|
001346  f8512020          LDR      r2,[r1,r0,LSL #2]
00134a  a1b5              ADR      r1,|L1.5664|
00134c  20c0              MOVS     r0,#0xc0
00134e  f7fffffe          BL       dis_print
;;;574    	   sense_theshold[sys->sense_thres], sense_theshold[(sys->sense_thres + 1) % SENSE_THRESHOLD_NUM]);
;;;575    }
001352  bd38              POP      {r3-r5,pc}
;;;576    
                          ENDP

                  dis_sense_off_menu PROC
;;;577    static void dis_sense_off_menu(sys_state_t *sys)
001354  b538              PUSH     {r3-r5,lr}
;;;578    {
001356  4604              MOV      r4,r0
;;;579    	 dis_clean(); 
001358  f7fffffe          BL       dis_clean
;;;580    	 dis_print(LCD_LINE_1, "Sense Off in Minutes");
00135c  a1b4              ADR      r1,|L1.5680|
00135e  2080              MOVS     r0,#0x80
001360  f7fffffe          BL       dis_print
;;;581    	 dis_print(LCD_LINE_2, "%s   <   %s   >   %s", sense_timeout[(sys->se_timeout == 0?(SE_TIMEOUT_NUM - 1):(sys->se_timeout - 1))],
001364  f8140f28          LDRB     r0,[r4,#0x28]!
001368  1c40              ADDS     r0,r0,#1
00136a  2105              MOVS     r1,#5
00136c  fb90f2f1          SDIV     r2,r0,r1
001370  fb010012          MLS      r0,r1,r2,r0
001374  49b4              LDR      r1,|L1.5704|
001376  f8515020          LDR      r5,[r1,r0,LSL #2]
00137a  9500              STR      r5,[sp,#0]
00137c  f8140928          LDRB     r0,[r4],#-0x28
001380  f8513020          LDR      r3,[r1,r0,LSL #2]
001384  b908              CBNZ     r0,|L1.5002|
001386  2004              MOVS     r0,#4
001388  e002              B        |L1.5008|
                  |L1.5002|
00138a  f8940028          LDRB     r0,[r4,#0x28]
00138e  1e40              SUBS     r0,r0,#1
                  |L1.5008|
001390  49ad              LDR      r1,|L1.5704|
001392  f8512020          LDR      r2,[r1,r0,LSL #2]
001396  a1ad              ADR      r1,|L1.5708|
001398  20c0              MOVS     r0,#0xc0
00139a  f7fffffe          BL       dis_print
;;;582          	sense_timeout[sys->se_timeout], sense_timeout[(sys->se_timeout + 1) % SE_TIMEOUT_NUM]); 
;;;583    }
00139e  bd38              POP      {r3-r5,pc}
;;;584    
                          ENDP

                  dis_reset_confirm_menu PROC
;;;585    static void dis_reset_confirm_menu(sys_state_t *sys)
0013a0  b510              PUSH     {r4,lr}
;;;586    {
0013a2  4604              MOV      r4,r0
;;;587    	 dis_clean(); 
0013a4  f7fffffe          BL       dis_clean
;;;588    	 dis_print(LCD_LINE_1, "Confirm Full Reset @");
0013a8  a1ae              ADR      r1,|L1.5732|
0013aa  2080              MOVS     r0,#0x80
0013ac  f7fffffe          BL       dis_print
;;;589    	 if(sys->confirm_reset == true){		 
0013b0  f8940047          LDRB     r0,[r4,#0x47]
0013b4  2801              CMP      r0,#1
0013b6  d105              BNE      |L1.5060|
;;;590    		dis_print(LCD_LINE_2, "No   <  Yes   >   No"); 
0013b8  f2af11f0          ADR      r1,|L1.4556|
0013bc  20c0              MOVS     r0,#0xc0
0013be  f7fffffe          BL       dis_print
0013c2  e003              B        |L1.5068|
                  |L1.5060|
;;;591    	 }else{
;;;592    		dis_print(LCD_LINE_2, "Yes  <   No   >  Yes"); 
0013c4  a1ad              ADR      r1,|L1.5756|
0013c6  20c0              MOVS     r0,#0xc0
0013c8  f7fffffe          BL       dis_print
                  |L1.5068|
;;;593    	 }
;;;594    }
0013cc  bd10              POP      {r4,pc}
;;;595    
                          ENDP

                  dis_factory_sub_select_menu PROC
;;;596    static void dis_factory_sub_select_menu(sys_state_t *sys)
0013ce  b510              PUSH     {r4,lr}
;;;597    {
0013d0  4604              MOV      r4,r0
;;;598    	 dis_clean(); 
0013d2  f7fffffe          BL       dis_clean
;;;599    	 dis_print(LCD_LINE_1, "Sub Model EQ Press@");
0013d6  a1af              ADR      r1,|L1.5780|
0013d8  2080              MOVS     r0,#0x80
0013da  f7fffffe          BL       dis_print
;;;600    	 dis_print(LCD_LINE_2, "<%-18s>", sub_name[sys->temp_sub_model]);
0013de  f8940052          LDRB     r0,[r4,#0x52]
0013e2  49b1              LDR      r1,|L1.5800|
0013e4  f8512020          LDR      r2,[r1,r0,LSL #2]
0013e8  f6af11d0          ADR      r1,|L1.2588|
0013ec  20c0              MOVS     r0,#0xc0
0013ee  f7fffffe          BL       dis_print
;;;601    }
0013f2  bd10              POP      {r4,pc}
;;;602    
                          ENDP

                  dis_factory_sub_confirm_menu PROC
;;;603    static void dis_factory_sub_confirm_menu(sys_state_t *sys)
0013f4  b510              PUSH     {r4,lr}
;;;604    {
0013f6  4604              MOV      r4,r0
;;;605    	 dis_clean(); 
0013f8  f7fffffe          BL       dis_clean
;;;606    	 dis_print(LCD_LINE_1, "Confirm Model Press@");
0013fc  a1ab              ADR      r1,|L1.5804|
0013fe  2080              MOVS     r0,#0x80
001400  f7fffffe          BL       dis_print
;;;607    	 dis_print(LCD_LINE_2, "^%-18s^", sub_name[sys->temp_sub_model]); 
001404  f8940052          LDRB     r0,[r4,#0x52]
001408  49a7              LDR      r1,|L1.5800|
00140a  f8512020          LDR      r2,[r1,r0,LSL #2]
00140e  a1ad              ADR      r1,|L1.5828|
001410  20c0              MOVS     r0,#0xc0
001412  f7fffffe          BL       dis_print
;;;608    }
001416  bd10              POP      {r4,pc}
;;;609    
                          ENDP

                  dis_peq_state_menu PROC
;;;610    static void dis_peq_state_menu(sys_state_t *sys)
001418  b510              PUSH     {r4,lr}
;;;611    {
00141a  4604              MOV      r4,r0
;;;612    	 dis_clean(); 
00141c  f7fffffe          BL       dis_clean
;;;613    	 dis_print(LCD_LINE_1, " Parametric Room EQ ");
001420  a1aa              ADR      r1,|L1.5836|
001422  2080              MOVS     r0,#0x80
001424  f7fffffe          BL       dis_print
;;;614    	 if(sys->eq_on_off == 0){
001428  f894002a          LDRB     r0,[r4,#0x2a]
00142c  b920              CBNZ     r0,|L1.5176|
;;;615    			dis_print(LCD_LINE_2, "       ^ OFF^"); 
00142e  a1ad              ADR      r1,|L1.5860|
001430  20c0              MOVS     r0,#0xc0
001432  f7fffffe          BL       dis_print
001436  e003              B        |L1.5184|
                  |L1.5176|
;;;616    	 }else{
;;;617    		  dis_print(LCD_LINE_2, "       ^ ON ^");
001438  a1ae              ADR      r1,|L1.5876|
00143a  20c0              MOVS     r0,#0xc0
00143c  f7fffffe          BL       dis_print
                  |L1.5184|
;;;618    	 }
;;;619    }
001440  bd10              POP      {r4,pc}
;;;620    
                          ENDP

                  dis_protect_menu PROC
;;;621    static void dis_protect_menu(menu_id_t id)
001442  b510              PUSH     {r4,lr}
;;;622    {
001444  4604              MOV      r4,r0
;;;623    	 switch(id){
001446  f1a40017          SUB      r0,r4,#0x17
00144a  2806              CMP      r0,#6
00144c  d254              BCS      |L1.5368|
00144e  e8dff000          TBB      [pc,r0]
001452  030e              DCB      0x03,0x0e
001454  27323d48          DCB      0x27,0x32,0x3d,0x48
;;;624    		 case DIS_OVER_TEMP:
;;;625    			 dis_clean(); 
001458  f7fffffe          BL       dis_clean
;;;626    			 dis_print(LCD_LINE_1, "   PROTECTION!!!!   ");
00145c  a1a9              ADR      r1,|L1.5892|
00145e  2080              MOVS     r0,#0x80
001460  f7fffffe          BL       dis_print
;;;627    			 dis_print(LCD_LINE_2, " Over Temperature "); 
001464  a1ad              ADR      r1,|L1.5916|
001466  20c0              MOVS     r0,#0xc0
001468  f7fffffe          BL       dis_print
;;;628    			 break;
00146c  e045              B        |L1.5370|
;;;629    		 case DIS_OVER_VOLTAGE_OR_SHORT:
;;;630    			 dis_clean(); 
00146e  f7fffffe          BL       dis_clean
;;;631    			 dis_print(LCD_LINE_1, "   PROTECTION!!!!   ");
001472  a1a4              ADR      r1,|L1.5892|
001474  2080              MOVS     r0,#0x80
001476  f7fffffe          BL       dis_print
;;;632    		   if(IS_SHORT_CIRCUIT){
00147a  2101              MOVS     r1,#1
00147c  48ac              LDR      r0,|L1.5936|
00147e  f7fffffe          BL       GPIO_ReadSinglePin
001482  b908              CBNZ     r0,|L1.5256|
001484  2001              MOVS     r0,#1
001486  e000              B        |L1.5258|
                  |L1.5256|
001488  2000              MOVS     r0,#0
                  |L1.5258|
00148a  b120              CBZ      r0,|L1.5270|
;;;633    				 dis_print(LCD_LINE_2, "  Short Circuit");
00148c  a1a9              ADR      r1,|L1.5940|
00148e  20c0              MOVS     r0,#0xc0
001490  f7fffffe          BL       dis_print
001494  e003              B        |L1.5278|
                  |L1.5270|
;;;634    			 }else{
;;;635    				 dis_print(LCD_LINE_2, "    Over Voltage ");
001496  a1ab              ADR      r1,|L1.5956|
001498  20c0              MOVS     r0,#0xc0
00149a  f7fffffe          BL       dis_print
                  |L1.5278|
;;;636    			 }
;;;637    			 
;;;638    			 break;
00149e  e02c              B        |L1.5370|
;;;639    		 case DIS_OVER_CLIP:
;;;640    			 dis_clean(); 
0014a0  f7fffffe          BL       dis_clean
;;;641    			 dis_print(LCD_LINE_1, "   PROTECTION!!!!   ");
0014a4  a197              ADR      r1,|L1.5892|
0014a6  2080              MOVS     r0,#0x80
0014a8  f7fffffe          BL       dis_print
;;;642    			 dis_print(LCD_LINE_2, "    Clipping ");
0014ac  a1aa              ADR      r1,|L1.5976|
0014ae  20c0              MOVS     r0,#0xc0
0014b0  f7fffffe          BL       dis_print
;;;643    			 break;
0014b4  e021              B        |L1.5370|
;;;644    		 case DIS_OVER_DC_ERROR:
;;;645    			 dis_clean(); 
0014b6  f7fffffe          BL       dis_clean
;;;646    			 dis_print(LCD_LINE_1, "   PROTECTION!!!!   ");
0014ba  a192              ADR      r1,|L1.5892|
0014bc  2080              MOVS     r0,#0x80
0014be  f7fffffe          BL       dis_print
;;;647    			 dis_print(LCD_LINE_2, "     DC Error ");
0014c2  a1a9              ADR      r1,|L1.5992|
0014c4  20c0              MOVS     r0,#0xc0
0014c6  f7fffffe          BL       dis_print
;;;648    			 break;
0014ca  e016              B        |L1.5370|
;;;649    		 case DIS_OVER_CURRENT:
;;;650    			 dis_clean(); 
0014cc  f7fffffe          BL       dis_clean
;;;651    			 dis_print(LCD_LINE_1, "   PROTECTION!!!!   ");
0014d0  a18c              ADR      r1,|L1.5892|
0014d2  2080              MOVS     r0,#0x80
0014d4  f7fffffe          BL       dis_print
;;;652    			 dis_print(LCD_LINE_2, "    Over Current ");
0014d8  a1a7              ADR      r1,|L1.6008|
0014da  20c0              MOVS     r0,#0xc0
0014dc  f7fffffe          BL       dis_print
;;;653    			 break;
0014e0  e00b              B        |L1.5370|
;;;654    		 case DIS_OVER_15V:
;;;655    			 dis_clean(); 
0014e2  f7fffffe          BL       dis_clean
;;;656    			 dis_print(LCD_LINE_1, "   PROTECTION!!!!   ");
0014e6  a187              ADR      r1,|L1.5892|
0014e8  2080              MOVS     r0,#0x80
0014ea  f7fffffe          BL       dis_print
;;;657    			 dis_print(LCD_LINE_2, "    Low 15v ");
0014ee  a1a7              ADR      r1,|L1.6028|
0014f0  20c0              MOVS     r0,#0xc0
0014f2  f7fffffe          BL       dis_print
;;;658    			 break;
0014f6  e000              B        |L1.5370|
                  |L1.5368|
;;;659    		 
;;;660    		 default:
;;;661    			 break;
0014f8  bf00              NOP      
                  |L1.5370|
0014fa  bf00              NOP                            ;628
;;;662    	 }
;;;663    }
0014fc  bd10              POP      {r4,pc}
;;;664    
                          ENDP

                  dis_version_menu PROC
;;;665    static void dis_version_menu(void)
0014fe  b510              PUSH     {r4,lr}
;;;666    {
;;;667    	dis_clean(); 
001500  f7fffffe          BL       dis_clean
;;;668    	dis_print(LCD_LINE_1, "  Firmware Version");
001504  a1a5              ADR      r1,|L1.6044|
001506  2080              MOVS     r0,#0x80
001508  f7fffffe          BL       dis_print
;;;669    	dis_print(LCD_LINE_2, "      %s", version);
00150c  48a8              LDR      r0,|L1.6064|
00150e  a1a9              ADR      r1,|L1.6068|
001510  6802              LDR      r2,[r0,#0]  ; version
001512  20c0              MOVS     r0,#0xc0
001514  f7fffffe          BL       dis_print
;;;670    }
001518  bd10              POP      {r4,pc}
;;;671    
                          ENDP

                  welcome_dis_timeout_handler PROC
;;;796    
;;;797    static void welcome_dis_timeout_handler(void *arg)
00151a  b510              PUSH     {r4,lr}
;;;798    {
00151c  4604              MOV      r4,r0
;;;799    	 if(((sys_state_t *)arg)->is_in_factory){
00151e  f894004b          LDRB     r0,[r4,#0x4b]
001522  b118              CBZ      r0,|L1.5420|
;;;800    		 display_menu_jump(FACTORY_SUB_SELECT_MENU);
001524  2001              MOVS     r0,#1
001526  f7fffffe          BL       display_menu_jump
00152a  e008              B        |L1.5438|
                  |L1.5420|
;;;801    	 }else{
;;;802    		 display_menu_jump(VOLUME_MENU);
00152c  2003              MOVS     r0,#3
00152e  f7fffffe          BL       display_menu_jump
;;;803    		 sys_timeout(DIS_TIMEOUT, dis_timeout_handler, NULL);
001532  2200              MOVS     r2,#0
001534  49a2              LDR      r1,|L1.6080|
001536  f6446020          MOV      r0,#0x4e20
00153a  f7fffffe          BL       sys_timeout
                  |L1.5438|
;;;804    	 }
;;;805    	 dis_send_msg(DIS_UPDATE, MENU_NUM);
00153e  2116              MOVS     r1,#0x16
001540  2001              MOVS     r0,#1
001542  f7fffffe          BL       dis_send_msg
;;;806    }
001546  bd10              POP      {r4,pc}
;;;807    
                          ENDP

                  display_welcome_handler PROC
;;;808    static void display_welcome_handler(sys_state_t *sys)
001548  b510              PUSH     {r4,lr}
;;;809    {
00154a  4604              MOV      r4,r0
;;;810    	 dis_clean(); 
00154c  f7fffffe          BL       dis_clean
;;;811    	 dis_print(LCD_LINE_1, " TRIAD SPEAKERS INC ");
001550  a19c              ADR      r1,|L1.6084|
001552  2080              MOVS     r0,#0x80
001554  f7fffffe          BL       dis_print
;;;812    	 dis_print(LCD_LINE_2, " %s", sub_name[sys->sub_model]);
001558  7ee0              LDRB     r0,[r4,#0x1b]
00155a  4953              LDR      r1,|L1.5800|
00155c  f8512020          LDR      r2,[r1,r0,LSL #2]
001560  a19e              ADR      r1,|L1.6108|
001562  20c0              MOVS     r0,#0xc0
001564  f7fffffe          BL       dis_print
;;;813    	
;;;814    	 sys_untimeout(welcome_dis_timeout_handler, (void *)sys);
001568  4621              MOV      r1,r4
00156a  489d              LDR      r0,|L1.6112|
00156c  f7fffffe          BL       sys_untimeout
;;;815    	 sys_timeout(5000, welcome_dis_timeout_handler, (void *)sys);
001570  4622              MOV      r2,r4
001572  499b              LDR      r1,|L1.6112|
001574  f2413088          MOV      r0,#0x1388
001578  f7fffffe          BL       sys_timeout
;;;816    }
00157c  bd10              POP      {r4,pc}
;;;817    
                          ENDP

                  display_handler PROC
;;;671    
;;;672    static void display_handler(sys_state_t *sys, menu_id_t id)
00157e  b570              PUSH     {r4-r6,lr}
;;;673    {
001580  4605              MOV      r5,r0
001582  460c              MOV      r4,r1
;;;674    	 OSAL_ASSERT(sys != NULL);
001584  b935              CBNZ     r5,|L1.5524|
001586  4a97              LDR      r2,|L1.6116|
001588  a197              ADR      r1,|L1.6120|
00158a  489a              LDR      r0,|L1.6132|
00158c  f7fffffe          BL       s_printf
001590  bf00              NOP      
                  |L1.5522|
001592  e7fe              B        |L1.5522|
                  |L1.5524|
;;;675    	
;;;676    	 if(id >= DIS_OVER_TEMP && id <= DIS_OVER_15V){
001594  2c17              CMP      r4,#0x17
001596  db04              BLT      |L1.5538|
001598  2c1c              CMP      r4,#0x1c
00159a  dc02              BGT      |L1.5538|
;;;677    		 dis_protect_menu(id);
00159c  4620              MOV      r0,r4
00159e  f7fffffe          BL       dis_protect_menu
                  |L1.5538|
;;;678    	 }
;;;679    	
;;;680    	 if(sys->status != STATUS_WORKING) return;
0015a2  f8950053          LDRB     r0,[r5,#0x53]
0015a6  2802              CMP      r0,#2
0015a8  d000              BEQ      |L1.5548|
                  |L1.5546|
;;;681    	
;;;682    	 if(sys->protect_bitmap != 0){
;;;683    		 if(id < MENU_NUM) return;
;;;684    	 }
;;;685    	
;;;686    	 switch(id){
;;;687    		 case WELCOM_MENU:
;;;688    			 display_welcome_handler(sys);
;;;689    			 break;
;;;690    		 
;;;691    		 case VOLUME_MENU:
;;;692    			 dis_volume_menu(sys);
;;;693    			 break;
;;;694    		 
;;;695    		 case SOURCE_MENU:
;;;696    			 dis_source_menu(sys);
;;;697    			 break;
;;;698    		 
;;;699    		 case PRESET_MENU:
;;;700    			 dis_preset_menu(sys);
;;;701    			 break;
;;;702    		 
;;;703    		 case BRIGHTLESS_MENU:
;;;704    			 dis_brightless_menu(sys);
;;;705    			 break;
;;;706    		 
;;;707    		 case INSTALL_MENU:
;;;708    			 dis_install_menu(sys);
;;;709    			 break;
;;;710    		 
;;;711    		 case IP_ADDRESS_MENU:
;;;712    			 dis_ip_address_menu(sys);
;;;713    			 break;
;;;714    		 
;;;715    		 case SUB_MODEL_MENU:
;;;716    			 dis_sub_model_menu(sys);
;;;717    			 break;
;;;718    		 
;;;719    		 case INPUT_GAIN_MENU:
;;;720    			 dis_input_gain_menu(sys);
;;;721    			 break;
;;;722    		 
;;;723    		 case PHRASE_MENU:
;;;724    			 dis_phrase_menu(sys);
;;;725    			 break;
;;;726    		 
;;;727    		 case SUB_LOWPASS_MENU:
;;;728    			 dis_sub_lowpass_menu(sys);
;;;729    			 break;
;;;730    		 
;;;731    		 case SUB_HIGHPASS_MENU:
;;;732    			 dis_sub_highpass_menu(sys);
;;;733    			 break;
;;;734    		 
;;;735    		 case LINEOUT_HIGHPASS_MENU:
;;;736    			 dis_lineout_highpass_menu(sys);
;;;737    			 break;
;;;738    		 
;;;739    		 case DELAY_ROUTER_MENU:
;;;740    			 dis_delay_router_menu(sys);
;;;741    			 break;
;;;742    		 
;;;743    		 case DELAY_TIME_MENU:
;;;744    			 dis_delay_time_menu(sys);
;;;745    			 break;
;;;746    		 
;;;747    		 case POWER_ON_METHOD_MENU:
;;;748    			 dis_power_on_method_menu(sys);
;;;749    			 break;
;;;750    		 
;;;751    		 case SENSE_THRESHOLD:
;;;752    			 dis_sense_threshold_menu(sys);
;;;753    			 break;
;;;754    		 
;;;755    		 case SENSE_OFF_TIME:
;;;756    			 dis_sense_off_menu(sys);
;;;757    			 break;
;;;758    		 
;;;759    		 case RESET_MENU:
;;;760    			 dis_reset_menu(sys);
;;;761    			 break;
;;;762    		 
;;;763    		 case RESET_CONFIRM_MENU:
;;;764    			 dis_reset_confirm_menu(sys);
;;;765    			 break;
;;;766    		 
;;;767    		 case FACTORY_SUB_SELECT_MENU:
;;;768    			 dis_factory_sub_select_menu(sys);
;;;769    			 break;
;;;770    		 
;;;771    		 case FACTOTY_SUB_CONFIRM_MENU:
;;;772    			 dis_factory_sub_confirm_menu(sys);
;;;773    		   break;
;;;774    		 
;;;775    //		 case DIS_OVER_TEMP:
;;;776    //		 case DIS_OVER_VOLTAGE_OR_SHORT:
;;;777    //		 case DIS_OVER_CLIP:
;;;778    //		 case DIS_OVER_DC_ERROR:
;;;779    //		 case DIS_OVER_CURRENT:
;;;780    //		 case DIS_OVER_15V:
;;;781    //			 dis_protect_menu(id);
;;;782    //			 break;
;;;783    		 
;;;784    		 case DIS_PEQ_STATE:
;;;785    			   dis_peq_state_menu(sys);
;;;786    			  break; 
;;;787    		 
;;;788    		 case DIS_VERSION_INFOR:
;;;789    			   dis_version_menu();
;;;790    			 break;
;;;791    		 
;;;792    		 default:
;;;793    			 break;
;;;794    	 }
;;;795    }
0015aa  bd70              POP      {r4-r6,pc}
                  |L1.5548|
0015ac  f895004a          LDRB     r0,[r5,#0x4a]         ;682
0015b0  b110              CBZ      r0,|L1.5560|
0015b2  2c16              CMP      r4,#0x16              ;683
0015b4  da00              BGE      |L1.5560|
0015b6  e7f8              B        |L1.5546|
                  |L1.5560|
0015b8  2c1f              CMP      r4,#0x1f              ;686
0015ba  d200              BCS      |L1.5566|
0015bc  e11c              B        |L1.6136|
                  |L1.5566|
0015be  e18c              B        |L1.6362|
                  |L1.5568|
0015c0  2530342e          DCB      "%04.1f <  %04.1f  > %04.1f",0
0015c4  3166203c
0015c8  20202530
0015cc  342e3166
0015d0  20203e20
0015d4  2530342e
0015d8  316600  
0015db  00                DCB      0
                  |L1.5596|
0015dc  53656e73          DCB      "Sense On Threshold",0
0015e0  65204f6e
0015e4  20546872
0015e8  6573686f
0015ec  6c6400  
0015ef  00                DCB      0
                  |L1.5616|
                          DCD      |symbol_number.43|
                  |L1.5620|
0015f4  7379732d          DCB      "sys->sense_thres < SENSE_THRESHOLD_NUM",0
0015f8  3e73656e
0015fc  73655f74
001600  68726573
001604  203c2053
001608  454e5345
00160c  5f544852
001610  4553484f
001614  4c445f4e
001618  554d00  
00161b  00                DCB      0
                  |L1.5660|
                          DCD      sense_theshold
                  |L1.5664|
001620  2573203c          DCB      "%s <  %s  > %s",0
001624  20202573
001628  20203e20
00162c  257300  
00162f  00                DCB      0
                  |L1.5680|
001630  53656e73          DCB      "Sense Off in Minutes",0
001634  65204f66
001638  6620696e
00163c  204d696e
001640  75746573
001644  00      
001645  00                DCB      0
001646  00                DCB      0
001647  00                DCB      0
                  |L1.5704|
                          DCD      sense_timeout
                  |L1.5708|
00164c  25732020          DCB      "%s   <   %s   >   %s",0
001650  203c2020
001654  20257320
001658  20203e20
00165c  20202573
001660  00      
001661  00                DCB      0
001662  00                DCB      0
001663  00                DCB      0
                  |L1.5732|
001664  436f6e66          DCB      "Confirm Full Reset @",0
001668  69726d20
00166c  46756c6c
001670  20526573
001674  65742040
001678  00      
001679  00                DCB      0
00167a  00                DCB      0
00167b  00                DCB      0
                  |L1.5756|
00167c  59657320          DCB      "Yes  <   No   >  Yes",0
001680  203c2020
001684  204e6f20
001688  20203e20
00168c  20596573
001690  00      
001691  00                DCB      0
001692  00                DCB      0
001693  00                DCB      0
                  |L1.5780|
001694  53756220          DCB      "Sub Model EQ Press@",0
001698  4d6f6465
00169c  6c204551
0016a0  20507265
0016a4  73734000
                  |L1.5800|
                          DCD      sub_name
                  |L1.5804|
0016ac  436f6e66          DCB      "Confirm Model Press@",0
0016b0  69726d20
0016b4  4d6f6465
0016b8  6c205072
0016bc  65737340
0016c0  00      
0016c1  00                DCB      0
0016c2  00                DCB      0
0016c3  00                DCB      0
                  |L1.5828|
0016c4  5e252d31          DCB      "^%-18s^",0
0016c8  38735e00
                  |L1.5836|
0016cc  20506172          DCB      " Parametric Room EQ ",0
0016d0  616d6574
0016d4  72696320
0016d8  526f6f6d
0016dc  20455120
0016e0  00      
0016e1  00                DCB      0
0016e2  00                DCB      0
0016e3  00                DCB      0
                  |L1.5860|
0016e4  20202020          DCB      "       ^ OFF^",0
0016e8  2020205e
0016ec  204f4646
0016f0  5e00    
0016f2  00                DCB      0
0016f3  00                DCB      0
                  |L1.5876|
0016f4  20202020          DCB      "       ^ ON ^",0
0016f8  2020205e
0016fc  204f4e20
001700  5e00    
001702  00                DCB      0
001703  00                DCB      0
                  |L1.5892|
001704  20202050          DCB      "   PROTECTION!!!!   ",0
001708  524f5445
00170c  4354494f
001710  4e212121
001714  21202020
001718  00      
001719  00                DCB      0
00171a  00                DCB      0
00171b  00                DCB      0
                  |L1.5916|
00171c  204f7665          DCB      " Over Temperature ",0
001720  72205465
001724  6d706572
001728  61747572
00172c  652000  
00172f  00                DCB      0
                  |L1.5936|
                          DCD      0x40065000
                  |L1.5940|
001734  20205368          DCB      "  Short Circuit",0
001738  6f727420
00173c  43697263
001740  75697400
                  |L1.5956|
001744  20202020          DCB      "    Over Voltage ",0
001748  4f766572
00174c  20566f6c
001750  74616765
001754  2000    
001756  00                DCB      0
001757  00                DCB      0
                  |L1.5976|
001758  20202020          DCB      "    Clipping ",0
00175c  436c6970
001760  70696e67
001764  2000    
001766  00                DCB      0
001767  00                DCB      0
                  |L1.5992|
001768  20202020          DCB      "     DC Error ",0
00176c  20444320
001770  4572726f
001774  722000  
001777  00                DCB      0
                  |L1.6008|
001778  20202020          DCB      "    Over Current ",0
00177c  4f766572
001780  20437572
001784  72656e74
001788  2000    
00178a  00                DCB      0
00178b  00                DCB      0
                  |L1.6028|
00178c  20202020          DCB      "    Low 15v ",0
001790  4c6f7720
001794  31357620
001798  00      
001799  00                DCB      0
00179a  00                DCB      0
00179b  00                DCB      0
                  |L1.6044|
00179c  20204669          DCB      "  Firmware Version",0
0017a0  726d7761
0017a4  72652056
0017a8  65727369
0017ac  6f6e00  
0017af  00                DCB      0
                  |L1.6064|
                          DCD      version
                  |L1.6068|
0017b4  20202020          DCB      "      %s",0
0017b8  20202573
0017bc  00      
0017bd  00                DCB      0
0017be  00                DCB      0
0017bf  00                DCB      0
                  |L1.6080|
                          DCD      dis_timeout_handler
                  |L1.6084|
0017c4  20545249          DCB      " TRIAD SPEAKERS INC ",0
0017c8  41442053
0017cc  5045414b
0017d0  45525320
0017d4  494e4320
0017d8  00      
0017d9  00                DCB      0
0017da  00                DCB      0
0017db  00                DCB      0
                  |L1.6108|
0017dc  20257300          DCB      " %s",0
                  |L1.6112|
                          DCD      welcome_dis_timeout_handler
                  |L1.6116|
                          DCD      |symbol_number.44|
                  |L1.6120|
0017e8  73797320          DCB      "sys != NULL",0
0017ec  213d204e
0017f0  554c4c00
                  |L1.6132|
                          DCD      ||.text||+0x3ec
                  |L1.6136|
0017f8  e8dff004          TBB      [pc,r4]               ;686
0017fc  10606414          DCB      0x10,0x60,0x64,0x14
001800  181c2024          DCB      0x18,0x1c,0x20,0x24
001804  282c3034          DCB      0x28,0x2c,0x30,0x34
001808  383c4044          DCB      0x38,0x3c,0x40,0x44
00180c  484c5054          DCB      0x48,0x4c,0x50,0x54
001810  585c6f6f          DCB      0x58,0x5c,0x6f,0x6f
001814  6f6f6f6f          DCB      0x6f,0x6f,0x6f,0x6f
001818  6f686c00          DCB      0x6f,0x68,0x6c,0x00
00181c  4628              MOV      r0,r5                 ;688
00181e  f7fffffe          BL       display_welcome_handler
001822  e05b              B        |L1.6364|
001824  4628              MOV      r0,r5                 ;692
001826  f7fffffe          BL       dis_volume_menu
00182a  e057              B        |L1.6364|
00182c  4628              MOV      r0,r5                 ;696
00182e  f7fffffe          BL       dis_source_menu
001832  e053              B        |L1.6364|
001834  4628              MOV      r0,r5                 ;700
001836  f7fffffe          BL       dis_preset_menu
00183a  e04f              B        |L1.6364|
00183c  4628              MOV      r0,r5                 ;704
00183e  f7fffffe          BL       dis_brightless_menu
001842  e04b              B        |L1.6364|
001844  4628              MOV      r0,r5                 ;708
001846  f7fffffe          BL       dis_install_menu
00184a  e047              B        |L1.6364|
00184c  4628              MOV      r0,r5                 ;712
00184e  f7fffffe          BL       dis_ip_address_menu
001852  e043              B        |L1.6364|
001854  4628              MOV      r0,r5                 ;716
001856  f7fffffe          BL       dis_sub_model_menu
00185a  e03f              B        |L1.6364|
00185c  4628              MOV      r0,r5                 ;720
00185e  f7fffffe          BL       dis_input_gain_menu
001862  e03b              B        |L1.6364|
001864  4628              MOV      r0,r5                 ;724
001866  f7fffffe          BL       dis_phrase_menu
00186a  e037              B        |L1.6364|
00186c  4628              MOV      r0,r5                 ;728
00186e  f7fffffe          BL       dis_sub_lowpass_menu
001872  e033              B        |L1.6364|
001874  4628              MOV      r0,r5                 ;732
001876  f7fffffe          BL       dis_sub_highpass_menu
00187a  e02f              B        |L1.6364|
00187c  4628              MOV      r0,r5                 ;736
00187e  f7fffffe          BL       dis_lineout_highpass_menu
001882  e02b              B        |L1.6364|
001884  4628              MOV      r0,r5                 ;740
001886  f7fffffe          BL       dis_delay_router_menu
00188a  e027              B        |L1.6364|
00188c  4628              MOV      r0,r5                 ;744
00188e  f7fffffe          BL       dis_delay_time_menu
001892  e023              B        |L1.6364|
001894  4628              MOV      r0,r5                 ;748
001896  f7fffffe          BL       dis_power_on_method_menu
00189a  e01f              B        |L1.6364|
00189c  4628              MOV      r0,r5                 ;752
00189e  f7fffffe          BL       dis_sense_threshold_menu
0018a2  e01b              B        |L1.6364|
0018a4  4628              MOV      r0,r5                 ;756
0018a6  f7fffffe          BL       dis_sense_off_menu
0018aa  e017              B        |L1.6364|
0018ac  4628              MOV      r0,r5                 ;760
0018ae  f7fffffe          BL       dis_reset_menu
0018b2  e013              B        |L1.6364|
0018b4  4628              MOV      r0,r5                 ;764
0018b6  f7fffffe          BL       dis_reset_confirm_menu
0018ba  e00f              B        |L1.6364|
0018bc  4628              MOV      r0,r5                 ;768
0018be  f7fffffe          BL       dis_factory_sub_select_menu
0018c2  e00b              B        |L1.6364|
0018c4  4628              MOV      r0,r5                 ;772
0018c6  f7fffffe          BL       dis_factory_sub_confirm_menu
0018ca  e007              B        |L1.6364|
0018cc  4628              MOV      r0,r5                 ;785
0018ce  f7fffffe          BL       dis_peq_state_menu
0018d2  e003              B        |L1.6364|
0018d4  f7fffffe          BL       dis_version_menu
0018d8  e000              B        |L1.6364|
                  |L1.6362|
0018da  bf00              NOP                            ;793
                  |L1.6364|
0018dc  bf00              NOP                            ;689
0018de  bf00              NOP      
0018e0  e663              B        |L1.5546|
;;;796    
                          ENDP

                  cancle_welcome_timeout PROC
;;;817    
;;;818    void cancle_welcome_timeout(sys_state_t *sys)
0018e2  b510              PUSH     {r4,lr}
;;;819    {
0018e4  4604              MOV      r4,r0
;;;820    	 sys_untimeout(welcome_dis_timeout_handler, (void *)sys);
0018e6  4621              MOV      r1,r4
0018e8  485c              LDR      r0,|L1.6748|
0018ea  f7fffffe          BL       sys_untimeout
;;;821    }
0018ee  bd10              POP      {r4,pc}
;;;822    
                          ENDP

                  display_init_menu PROC
;;;823    void display_init_menu(void)
0018f0  b510              PUSH     {r4,lr}
;;;824    {
;;;825    	dis_clean(); 
0018f2  f7fffffe          BL       dis_clean
;;;826    	dis_print(LCD_LINE_1, "   Initializing...  "); 
0018f6  a15a              ADR      r1,|L1.6752|
0018f8  2080              MOVS     r0,#0x80
0018fa  f7fffffe          BL       dis_print
;;;827    }
0018fe  bd10              POP      {r4,pc}
;;;828    
                          ENDP

                  display_task PROC
;;;829    
;;;830    void display_task(void *parameter)
001900  b508              PUSH     {r3,lr}
;;;831    {
;;;832    	 dis_msg_t msg;
;;;833    	
;;;834    	 gDisQueue = xQueueCreate(20, sizeof(dis_msg_t));
001902  2200              MOVS     r2,#0
001904  2102              MOVS     r1,#2
001906  2014              MOVS     r0,#0x14
001908  f7fffffe          BL       xQueueGenericCreate
00190c  495a              LDR      r1,|L1.6776|
00190e  6008              STR      r0,[r1,#0]  ; gDisQueue
;;;835    	 OSAL_ASSERT(gDisQueue != NULL);
001910  4608              MOV      r0,r1
001912  6800              LDR      r0,[r0,#0]  ; gDisQueue
001914  b930              CBNZ     r0,|L1.6436|
001916  4a59              LDR      r2,|L1.6780|
001918  a159              ADR      r1,|L1.6784|
00191a  485e              LDR      r0,|L1.6804|
00191c  f7fffffe          BL       s_printf
001920  bf00              NOP      
                  |L1.6434|
001922  e7fe              B        |L1.6434|
                  |L1.6436|
;;;836    	
;;;837    	 display_menu_list_create(&gMenuHead);
001924  485c              LDR      r0,|L1.6808|
001926  f7fffffe          BL       display_menu_list_create
;;;838    	 cur_menu = gMenuHead;
00192a  485b              LDR      r0,|L1.6808|
00192c  6800              LDR      r0,[r0,#0]  ; gMenuHead
00192e  495b              LDR      r1,|L1.6812|
001930  6008              STR      r0,[r1,#0]  ; cur_menu
;;;839    	 
;;;840    	 while(1){
001932  e025              B        |L1.6528|
                  |L1.6452|
;;;841    		 if(xQueueReceive(gDisQueue, &msg, portMAX_DELAY)){
001934  2300              MOVS     r3,#0
001936  1e5a              SUBS     r2,r3,#1
001938  4669              MOV      r1,sp
00193a  484f              LDR      r0,|L1.6776|
00193c  6800              LDR      r0,[r0,#0]  ; gDisQueue
00193e  f7fffffe          BL       xQueueGenericReceive
001942  b1e8              CBZ      r0,|L1.6528|
;;;842    			 switch(msg.msg){
001944  f89d0000          LDRB     r0,[sp,#0]
001948  b120              CBZ      r0,|L1.6484|
00194a  2801              CMP      r0,#1
00194c  d007              BEQ      |L1.6494|
00194e  2802              CMP      r0,#2
001950  d114              BNE      |L1.6524|
001952  e00c              B        |L1.6510|
                  |L1.6484|
;;;843    				 case DIS_WELCOME:
;;;844    					 display_welcome_handler(gSystem_t);
001954  4852              LDR      r0,|L1.6816|
001956  6800              LDR      r0,[r0,#0]  ; gSystem_t
001958  f7fffffe          BL       display_welcome_handler
;;;845    					 break;
00195c  e00f              B        |L1.6526|
                  |L1.6494|
;;;846    				 
;;;847    				 case DIS_UPDATE:
;;;848    					   display_handler(gSystem_t, cur_menu->id);
00195e  484f              LDR      r0,|L1.6812|
001960  6800              LDR      r0,[r0,#0]  ; cur_menu
001962  7801              LDRB     r1,[r0,#0]
001964  484e              LDR      r0,|L1.6816|
001966  6800              LDR      r0,[r0,#0]  ; gSystem_t
001968  f7fffffe          BL       display_handler
;;;849    					 break;
00196c  e007              B        |L1.6526|
                  |L1.6510|
;;;850    				 
;;;851    				 case DIS_JUMP:
;;;852    					   display_handler(gSystem_t, msg.id);
00196e  f89d1001          LDRB     r1,[sp,#1]
001972  484b              LDR      r0,|L1.6816|
001974  6800              LDR      r0,[r0,#0]  ; gSystem_t
001976  f7fffffe          BL       display_handler
;;;853    					 break;
00197a  e000              B        |L1.6526|
                  |L1.6524|
;;;854    				 
;;;855    				 default:
;;;856    					 break;
00197c  bf00              NOP      
                  |L1.6526|
00197e  bf00              NOP                            ;845
                  |L1.6528|
001980  e7d8              B        |L1.6452|
;;;857    			 }
;;;858    		 }
;;;859    	 }
;;;860    }
;;;861    
                          ENDP

                  dis_send_msg_isr PROC
;;;871    
;;;872    void dis_send_msg_isr(dis_msg_type_t type, menu_id_t id)
001982  b538              PUSH     {r3-r5,lr}
;;;873    {
001984  4605              MOV      r5,r0
001986  460c              MOV      r4,r1
;;;874    	 dis_msg_t msg;
;;;875    
;;;876       msg.msg = type;
001988  f88d5000          STRB     r5,[sp,#0]
;;;877    	 msg.id = id;
00198c  f88d4001          STRB     r4,[sp,#1]
;;;878    	
;;;879    	 xQueueSendToFrontFromISR(gDisQueue, &msg, NULL);
001990  2301              MOVS     r3,#1
001992  2200              MOVS     r2,#0
001994  4669              MOV      r1,sp
001996  4838              LDR      r0,|L1.6776|
001998  6800              LDR      r0,[r0,#0]  ; gDisQueue
00199a  f7fffffe          BL       xQueueGenericSendFromISR
;;;880    }
00199e  bd38              POP      {r3-r5,pc}
;;;881    
                          ENDP

                  menu_list_create PROC
;;;883    /*******************************For Test*********************************************/
;;;884    int menu_list_create(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0019a0  b570              PUSH     {r4-r6,lr}
;;;885    {
0019a2  4604              MOV      r4,r0
0019a4  460d              MOV      r5,r1
0019a6  4616              MOV      r6,r2
;;;886    	display_menu_list_create(&gMenuHead);
0019a8  483b              LDR      r0,|L1.6808|
0019aa  f7fffffe          BL       display_menu_list_create
;;;887    	cur_menu = gMenuHead;
0019ae  483a              LDR      r0,|L1.6808|
0019b0  6800              LDR      r0,[r0,#0]  ; gMenuHead
0019b2  493a              LDR      r1,|L1.6812|
0019b4  6008              STR      r0,[r1,#0]  ; cur_menu
;;;888    	return 0;
0019b6  2000              MOVS     r0,#0
;;;889    }
0019b8  bd70              POP      {r4-r6,pc}
;;;890    
                          ENDP

                  menu_list_next PROC
;;;893    
;;;894    int menu_list_next(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0019ba  b570              PUSH     {r4-r6,lr}
;;;895    {
0019bc  4604              MOV      r4,r0
0019be  460d              MOV      r5,r1
0019c0  4616              MOV      r6,r2
;;;896    	
;;;897    	if(cur_menu->next){
0019c2  4836              LDR      r0,|L1.6812|
0019c4  6800              LDR      r0,[r0,#0]  ; cur_menu
0019c6  6880              LDR      r0,[r0,#8]
0019c8  b128              CBZ      r0,|L1.6614|
;;;898    		cur_menu = cur_menu->next;
0019ca  4834              LDR      r0,|L1.6812|
0019cc  6800              LDR      r0,[r0,#0]  ; cur_menu
0019ce  6880              LDR      r0,[r0,#8]
0019d0  4932              LDR      r1,|L1.6812|
0019d2  6008              STR      r0,[r1,#0]  ; cur_menu
0019d4  e006              B        |L1.6628|
                  |L1.6614|
;;;899    	}else{
;;;900    		SYS_TRACE("reach the list end\r\n");
0019d6  a033              ADR      r0,|L1.6820|
0019d8  f7fffffe          BL       s_printf
;;;901    		cur_menu = gMenuHead;
0019dc  482e              LDR      r0,|L1.6808|
0019de  6800              LDR      r0,[r0,#0]  ; gMenuHead
0019e0  492e              LDR      r1,|L1.6812|
0019e2  6008              STR      r0,[r1,#0]  ; cur_menu
                  |L1.6628|
;;;902    	}
;;;903    	
;;;904    	SYS_TRACE("will display [%d] menu\r\n", cur_menu->id);
0019e4  482d              LDR      r0,|L1.6812|
0019e6  6800              LDR      r0,[r0,#0]  ; cur_menu
0019e8  7801              LDRB     r1,[r0,#0]
0019ea  a034              ADR      r0,|L1.6844|
0019ec  f7fffffe          BL       s_printf
;;;905    	
;;;906    	return 0;
0019f0  2000              MOVS     r0,#0
;;;907    }
0019f2  bd70              POP      {r4-r6,pc}
;;;908    
                          ENDP

                  menu_list_prev PROC
;;;910    
;;;911    int menu_list_prev(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0019f4  b570              PUSH     {r4-r6,lr}
;;;912    {
0019f6  4604              MOV      r4,r0
0019f8  460d              MOV      r5,r1
0019fa  4616              MOV      r6,r2
;;;913    	 
;;;914    	if(cur_menu->prev){
0019fc  4827              LDR      r0,|L1.6812|
0019fe  6800              LDR      r0,[r0,#0]  ; cur_menu
001a00  68c0              LDR      r0,[r0,#0xc]
001a02  b120              CBZ      r0,|L1.6670|
;;;915    		cur_menu = cur_menu->prev;
001a04  4825              LDR      r0,|L1.6812|
001a06  6800              LDR      r0,[r0,#0]  ; cur_menu
001a08  68c0              LDR      r0,[r0,#0xc]
001a0a  4924              LDR      r1,|L1.6812|
001a0c  6008              STR      r0,[r1,#0]  ; cur_menu
                  |L1.6670|
;;;916    	}
;;;917    	
;;;918    	SYS_TRACE("will display [%d] menu\r\n", cur_menu->id);
001a0e  4823              LDR      r0,|L1.6812|
001a10  6800              LDR      r0,[r0,#0]  ; cur_menu
001a12  7801              LDRB     r1,[r0,#0]
001a14  a029              ADR      r0,|L1.6844|
001a16  f7fffffe          BL       s_printf
;;;919    	return 0;
001a1a  2000              MOVS     r0,#0
;;;920    }
001a1c  bd70              POP      {r4-r6,pc}
;;;921    
                          ENDP

                  menu_list_enter PROC
;;;924    
;;;925    int menu_list_enter(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
001a1e  b570              PUSH     {r4-r6,lr}
;;;926    {
001a20  4604              MOV      r4,r0
001a22  460d              MOV      r5,r1
001a24  4616              MOV      r6,r2
;;;927    	if(cur_menu->child){
001a26  481d              LDR      r0,|L1.6812|
001a28  6800              LDR      r0,[r0,#0]  ; cur_menu
001a2a  6900              LDR      r0,[r0,#0x10]
001a2c  b150              CBZ      r0,|L1.6724|
;;;928    		cur_menu = cur_menu->child;
001a2e  481b              LDR      r0,|L1.6812|
001a30  6800              LDR      r0,[r0,#0]  ; cur_menu
001a32  6900              LDR      r0,[r0,#0x10]
001a34  4919              LDR      r1,|L1.6812|
001a36  6008              STR      r0,[r1,#0]  ; cur_menu
;;;929    		SYS_TRACE("will display [%d] menu\r\n", cur_menu->id);
001a38  4608              MOV      r0,r1
001a3a  6800              LDR      r0,[r0,#0]  ; cur_menu
001a3c  7801              LDRB     r1,[r0,#0]
001a3e  a01f              ADR      r0,|L1.6844|
001a40  f7fffffe          BL       s_printf
                  |L1.6724|
;;;930    	}
;;;931    	
;;;932    	 
;;;933    	return 0;
001a44  2000              MOVS     r0,#0
;;;934    }
001a46  bd70              POP      {r4-r6,pc}
;;;935    
                          ENDP

                  dis_test PROC
;;;937    
;;;938    int dis_test(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
001a48  b570              PUSH     {r4-r6,lr}
;;;939    {
001a4a  4604              MOV      r4,r0
001a4c  460d              MOV      r5,r1
001a4e  4616              MOV      r6,r2
;;;940    	  
;;;941    	dis_send_msg(DIS_UPDATE, MENU_NUM);
001a50  2116              MOVS     r1,#0x16
001a52  2001              MOVS     r0,#1
001a54  f7fffffe          BL       dis_send_msg
;;;942    	return 0;
001a58  2000              MOVS     r0,#0
;;;943    }
001a5a  bd70              POP      {r4-r6,pc}
;;;944    
                          ENDP

                  |L1.6748|
                          DCD      welcome_dis_timeout_handler
                  |L1.6752|
001a60  20202049          DCB      "   Initializing...  ",0
001a64  6e697469
001a68  616c697a
001a6c  696e672e
001a70  2e2e2020
001a74  00      
001a75  00                DCB      0
001a76  00                DCB      0
001a77  00                DCB      0
                  |L1.6776|
                          DCD      gDisQueue
                  |L1.6780|
                          DCD      |symbol_number.45|
                  |L1.6784|
001a80  67446973          DCB      "gDisQueue != NULL",0
001a84  51756575
001a88  6520213d
001a8c  204e554c
001a90  4c00    
001a92  00                DCB      0
001a93  00                DCB      0
                  |L1.6804|
                          DCD      ||.text||+0x3ec
                  |L1.6808|
                          DCD      gMenuHead
                  |L1.6812|
                          DCD      cur_menu
                  |L1.6816|
                          DCD      gSystem_t
                  |L1.6820|
001aa4  72656163          DCB      "reach the list end\r\n",0
001aa8  68207468
001aac  65206c69
001ab0  73742065
001ab4  6e640d0a
001ab8  00      
001ab9  00                DCB      0
001aba  00                DCB      0
001abb  00                DCB      0
                  |L1.6844|
001abc  77696c6c          DCB      "will display [%d] menu\r\n",0
001ac0  20646973
001ac4  706c6179
001ac8  205b2564
001acc  5d206d65
001ad0  6e750d0a
001ad4  00      
001ad5  00                DCB      0
001ad6  00                DCB      0
001ad7  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  menu_context
                          %        264

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  src_name
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x5
                          DCD      ||.conststring||+0xa
                  pre_name
                          DCD      ||.conststring||+0x10
                          DCD      ||.conststring||+0x17
                          DCD      ||.conststring||+0x1e
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x2a
                          DCD      ||.conststring||+0x30
                  bright_name
                          DCD      ||.conststring||+0x36
                          DCD      ||.conststring||+0x3a
                          DCD      ||.conststring||+0x41
                  bright_name_center
                          DCD      ||.conststring||+0x46
                          DCD      ||.conststring||+0x3a
                          DCD      ||.conststring||+0x4b
                  sub_name
                          DCD      ||.conststring||+0x51
                          DCD      ||.conststring||+0x60
                          DCD      ||.conststring||+0x71
                          DCD      ||.conststring||+0x81
                          DCD      ||.conststring||+0x91
                          DCD      ||.conststring||+0xa2
                          DCD      ||.conststring||+0xb4
                          DCD      ||.conststring||+0xc4
                          DCD      ||.conststring||+0xd5
                          DCD      ||.conststring||+0xe6
                          DCD      ||.conststring||+0xf7
                          DCD      ||.conststring||+0x106
                          DCD      ||.conststring||+0x118
                  delay_name
                          DCD      ||.conststring||+0x124
                          DCD      ||.conststring||+0x128
                          DCD      ||.conststring||+0x12d
                  power_on_name
                          DCD      ||.conststring||+0x131
                          DCD      ||.conststring||+0x137
                          DCD      ||.conststring||+0x13d
                          DCD      ||.conststring||+0x143
                  power_on_name_center
                          DCD      ||.conststring||+0x149
                          DCD      ||.conststring||+0x151
                          DCD      ||.conststring||+0x158
                          DCD      ||.conststring||+0x160
                  sense_theshold
                          DCD      ||.conststring||+0x167
                          DCD      ||.conststring||+0x16c
                          DCD      ||.conststring||+0x171
                          DCD      ||.conststring||+0x176
                          DCD      ||.conststring||+0x17b
                  sense_timeout
                          DCD      ||.conststring||+0x180
                          DCD      ||.conststring||+0x183
                          DCD      ||.conststring||+0x186
                          DCD      ||.conststring||+0x189
                          DCD      ||.conststring||+0x18c
                  __FUNCTION__
0000c4  6d656e75          DCB      0x6d,0x65,0x6e,0x75
0000c8  5f6c6973          DCB      0x5f,0x6c,0x69,0x73
0000cc  745f6164          DCB      0x74,0x5f,0x61,0x64
0000d0  645f6e65          DCB      0x64,0x5f,0x6e,0x65
0000d4  787400            DCB      0x78,0x74,0x00
                  |symbol_number.35|
0000d7  6d                DCB      0x6d
0000d8  656e755f          DCB      0x65,0x6e,0x75,0x5f
0000dc  6c697374          DCB      0x6c,0x69,0x73,0x74
0000e0  5f616464          DCB      0x5f,0x61,0x64,0x64
0000e4  5f636869          DCB      0x5f,0x63,0x68,0x69
0000e8  6c645f61          DCB      0x6c,0x64,0x5f,0x61
0000ec  6e645f6e          DCB      0x6e,0x64,0x5f,0x6e
0000f0  65787400          DCB      0x65,0x78,0x74,0x00
                  |symbol_number.36|
0000f4  64697370          DCB      0x64,0x69,0x73,0x70
0000f8  6c61795f          DCB      0x6c,0x61,0x79,0x5f
0000fc  6d656e75          DCB      0x6d,0x65,0x6e,0x75
000100  5f6a756d          DCB      0x5f,0x6a,0x75,0x6d
000104  7000              DCB      0x70,0x00
                  |symbol_number.37|
000106  6469              DCB      0x64,0x69
000108  735f7765          DCB      0x73,0x5f,0x77,0x65
00010c  6c636f6d          DCB      0x6c,0x63,0x6f,0x6d
000110  655f6d65          DCB      0x65,0x5f,0x6d,0x65
000114  6e7500            DCB      0x6e,0x75,0x00
                  |symbol_number.38|
000117  64                DCB      0x64
000118  69735f73          DCB      0x69,0x73,0x5f,0x73
00011c  6f757263          DCB      0x6f,0x75,0x72,0x63
000120  655f6d65          DCB      0x65,0x5f,0x6d,0x65
000124  6e7500            DCB      0x6e,0x75,0x00
                  |symbol_number.39|
000127  64                DCB      0x64
000128  69735f70          DCB      0x69,0x73,0x5f,0x70
00012c  72657365          DCB      0x72,0x65,0x73,0x65
000130  745f6d65          DCB      0x74,0x5f,0x6d,0x65
000134  6e7500            DCB      0x6e,0x75,0x00
                  |symbol_number.40|
000137  64                DCB      0x64
000138  69735f62          DCB      0x69,0x73,0x5f,0x62
00013c  72696768          DCB      0x72,0x69,0x67,0x68
000140  746c6573          DCB      0x74,0x6c,0x65,0x73
000144  735f6d65          DCB      0x73,0x5f,0x6d,0x65
000148  6e7500            DCB      0x6e,0x75,0x00
                  |symbol_number.41|
00014b  64                DCB      0x64
00014c  69735f64          DCB      0x69,0x73,0x5f,0x64
000150  656c6179          DCB      0x65,0x6c,0x61,0x79
000154  5f726f75          DCB      0x5f,0x72,0x6f,0x75
000158  7465725f          DCB      0x74,0x65,0x72,0x5f
00015c  6d656e75          DCB      0x6d,0x65,0x6e,0x75
000160  00                DCB      0x00
                  |symbol_number.42|
000161  646973            DCB      0x64,0x69,0x73
000164  5f706f77          DCB      0x5f,0x70,0x6f,0x77
000168  65725f6f          DCB      0x65,0x72,0x5f,0x6f
00016c  6e5f6d65          DCB      0x6e,0x5f,0x6d,0x65
000170  74686f64          DCB      0x74,0x68,0x6f,0x64
000174  5f6d656e          DCB      0x5f,0x6d,0x65,0x6e
000178  7500              DCB      0x75,0x00
                  |symbol_number.43|
00017a  6469              DCB      0x64,0x69
00017c  735f7365          DCB      0x73,0x5f,0x73,0x65
000180  6e73655f          DCB      0x6e,0x73,0x65,0x5f
000184  74687265          DCB      0x74,0x68,0x72,0x65
000188  73686f6c          DCB      0x73,0x68,0x6f,0x6c
00018c  645f6d65          DCB      0x64,0x5f,0x6d,0x65
000190  6e7500            DCB      0x6e,0x75,0x00
                  |symbol_number.44|
000193  64                DCB      0x64
000194  6973706c          DCB      0x69,0x73,0x70,0x6c
000198  61795f68          DCB      0x61,0x79,0x5f,0x68
00019c  616e646c          DCB      0x61,0x6e,0x64,0x6c
0001a0  657200            DCB      0x65,0x72,0x00
                  |symbol_number.45|
0001a3  64                DCB      0x64
0001a4  6973706c          DCB      0x69,0x73,0x70,0x6c
0001a8  61795f74          DCB      0x61,0x79,0x5f,0x74
0001ac  61736b00          DCB      0x61,0x73,0x6b,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  584c5220          DCB      "XLR ",0
000004  00      
000005  52434120          DCB      "RCA ",0
000009  00      
00000a  53706561          DCB      "Speak",0
00000e  6b00    
000010  4e6f726d          DCB      "Normal",0
000014  616c00  
000017  43696e65          DCB      "Cinema",0
00001b  6d6100  
00001e  4e696768          DCB      "Night",0
000022  7400    
000024  55736572          DCB      "User1",0
000028  3100    
00002a  55736572          DCB      "User2",0
00002e  3200    
000030  55736572          DCB      "User3",0
000034  3300    
000036  4c6f7700          DCB      "Low",0
00003a  4d656469          DCB      "Medium",0
00003e  756d00  
000041  48696768          DCB      "High",0
000045  00      
000046  204c6f77          DCB      " Low",0
00004a  00      
00004b  20486967          DCB      " High",0
00004f  6800    
000051  2020204d          DCB      "   Mini InRoom",0
000055  696e6920
000059  496e526f
00005d  6f6d00  
000060  20204d69          DCB      "  Mini InCeiling",0
000064  6e692049
000068  6e436569
00006c  6c696e67
000070  00      
000071  2020204d          DCB      "   Mini FlexSub",0
000075  696e6920
000079  466c6578
00007d  53756200
000081  20204272          DCB      "  Bronze InRoom",0
000085  6f6e7a65
000089  20496e52
00008d  6f6f6d00
000091  20202042          DCB      "   Bronze InWall",0
000095  726f6e7a
000099  6520496e
00009d  57616c6c
0000a1  00      
0000a2  2042726f          DCB      " Bronze InCeiling",0
0000a6  6e7a6520
0000aa  496e4365
0000ae  696c696e
0000b2  6700    
0000b4  2042726f          DCB      " Bronze SlimSub",0
0000b8  6e7a6520
0000bc  536c696d
0000c0  53756200
0000c4  20202053          DCB      "   Silver InRoom",0
0000c8  696c7665
0000cc  7220496e
0000d0  526f6f6d
0000d4  00      
0000d5  20202053          DCB      "   Silver InWall",0
0000d9  696c7665
0000dd  7220496e
0000e1  57616c6c
0000e5  00      
0000e6  20205369          DCB      "  Silver FlexSub",0
0000ea  6c766572
0000ee  20466c65
0000f2  78537562
0000f6  00      
0000f7  20202047          DCB      "   Gold InRoom",0
0000fb  6f6c6420
0000ff  496e526f
000103  6f6d00  
000106  2020506c          DCB      "  Platinum InRoom",0
00010a  6174696e
00010e  756d2049
000112  6e526f6f
000116  6d00    
000118  20202020          DCB      "       Flat",0
00011c  20202046
000120  6c617400
000124  53756200          DCB      "Sub",0
000128  4c696e65          DCB      "Line",0
00012c  00      
00012d  4f666600          DCB      "Off",0
000131  4d616e75          DCB      "Manua",0
000135  6100    
000137  53656e73          DCB      "Sense",0
00013b  6500    
00013d  54726967          DCB      "Trigg",0
000141  6700    
000143  49522f49          DCB      "IR/IP",0
000147  5000    
000149  204d616e          DCB      " Manual",0
00014d  75616c00
000151  2053656e          DCB      " Sense",0
000155  736500  
000158  54726967          DCB      "Trigger",0
00015c  67657200
000160  2049522f          DCB      " IR/IP",0
000164  495000  
000167  30336d56          DCB      "03mV",0
00016b  00      
00016c  30366d56          DCB      "06mV",0
000170  00      
000171  30396d56          DCB      "09mV",0
000175  00      
000176  31326d56          DCB      "12mV",0
00017a  00      
00017b  31356d56          DCB      "15mV",0
00017f  00      
000180  303500            DCB      "05",0
000183  313000            DCB      "10",0
000186  323000            DCB      "20",0
000189  333000            DCB      "30",0
00018c  363000            DCB      "60",0

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=0

000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f637265          DCB      0x5f,0x63,0x72,0x65
000008  61746500          DCB      0x61,0x74,0x65,0x00
00000c  63726561          DCB      0x63,0x72,0x65,0x61
000010  7465206d          DCB      0x74,0x65,0x20,0x6d
000014  656e7520          DCB      0x65,0x6e,0x75,0x20
000018  6c697374          DCB      0x6c,0x69,0x73,0x74
00001c  006c6973          DCB      0x00,0x6c,0x69,0x73
000020  745f6e65          DCB      0x74,0x5f,0x6e,0x65
000024  7874006e          DCB      0x78,0x74,0x00,0x6e
000028  6176206e          DCB      0x61,0x76,0x20,0x6e
00002c  65787420          DCB      0x65,0x78,0x74,0x20
000030  6d656e75          DCB      0x6d,0x65,0x6e,0x75
000034  206c6973          DCB      0x20,0x6c,0x69,0x73
000038  74006c69          DCB      0x74,0x00,0x6c,0x69
00003c  73745f70          DCB      0x73,0x74,0x5f,0x70
000040  72657600          DCB      0x72,0x65,0x76,0x00
000044  6e617620          DCB      0x6e,0x61,0x76,0x20
000048  70726576          DCB      0x70,0x72,0x65,0x76
00004c  206d656e          DCB      0x20,0x6d,0x65,0x6e
000050  75206c69          DCB      0x75,0x20,0x6c,0x69
000054  7374006c          DCB      0x73,0x74,0x00,0x6c
000058  6973745f          DCB      0x69,0x73,0x74,0x5f
00005c  656e7465          DCB      0x65,0x6e,0x74,0x65
000060  72006e61          DCB      0x72,0x00,0x6e,0x61
000064  76206e65          DCB      0x76,0x20,0x6e,0x65
000068  74657220          DCB      0x74,0x65,0x72,0x20
00006c  6d656e75          DCB      0x6d,0x65,0x6e,0x75
000070  206c6973          DCB      0x20,0x6c,0x69,0x73
000074  74006469          DCB      0x74,0x00,0x64,0x69
000078  73006469          DCB      0x73,0x00,0x64,0x69
00007c  73207465          DCB      0x73,0x20,0x74,0x65
000080  737400            DCB      0x73,0x74,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ||cnt||
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  gDisQueue
                          DCD      0x00000000
                  gMenuHead
                          DCD      0x00000000
                  cur_menu
                          DCD      0x00000000
                  last_menu
                          DCD      0x00000000

                          AREA INIT_CMD, DATA, READONLY, ALIGN=2

                  __init_cmd_list_create
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
                          DCD      0x00000001
                          DCD      menu_list_create
                          DCD      ||.conststrlit||+0xc
                  __init_cmd_list_next
                  |symbol_number.92|
                          DCD      ||.conststrlit||+0x1d
                          DCD      0x00000001
                          DCD      menu_list_next
                          DCD      ||.conststrlit||+0x27
                  __init_cmd_list_prev
                  |symbol_number.93|
                          DCD      ||.conststrlit||+0x3a
                          DCD      0x00000001
                          DCD      menu_list_prev
                          DCD      ||.conststrlit||+0x44
                  __init_cmd_list_enter
                  |symbol_number.94|
                          DCD      ||.conststrlit||+0x57
                          DCD      0x00000001
                          DCD      menu_list_enter
                          DCD      ||.conststrlit||+0x62
                  __init_cmd_dis
                  |symbol_number.95|
                          DCD      ||.conststrlit||+0x76
                          DCD      0x00000001
                          DCD      dis_test
                          DCD      ||.conststrlit||+0x7a
