; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\upnpweb.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\upnpweb.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\upnpweb.crf Upnp\UpnpWeb.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_truncate_unsigned
                          REQUIRE _printf_truncate_signed
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_i
                          REQUIRE _printf_u
                          REQUIRE _printf_o
                          REQUIRE _printf_x
                          REQUIRE _printf_p
                          REQUIRE _printf_c
                          REQUIRE _printf_lc
                          REQUIRE _printf_n
                          REQUIRE _printf_charcount
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_oct
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_wctomb
                  xml_data_encode PROC
;;;311     */
;;;312    static void xml_data_encode(char *buf, const char *data, int len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;313    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;314      int i;
;;;315      for (i = 0; i < len; i++) {
00000a  2500              MOVS     r5,#0
00000c  e029              B        |L1.98|
                  |L1.14|
;;;316        BYTE c = ((BYTE *) data)[i];
00000e  5d7c              LDRB     r4,[r7,r5]
;;;317        if (c == '<') {
000010  2c3c              CMP      r4,#0x3c
000012  d104              BNE      |L1.30|
;;;318          strcat(buf, "&lt;");
000014  a1fe              ADR      r1,|L1.1040|
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       strcat
;;;319          continue;
00001c  e020              B        |L1.96|
                  |L1.30|
;;;320        }
;;;321        if (c == '>') {
00001e  2c3e              CMP      r4,#0x3e
000020  d104              BNE      |L1.44|
;;;322          strcat(buf, "&gt;");
000022  a1fd              ADR      r1,|L1.1048|
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       strcat
;;;323          continue;
00002a  e019              B        |L1.96|
                  |L1.44|
;;;324        }
;;;325        if (c == '&') {
00002c  2c26              CMP      r4,#0x26
00002e  d104              BNE      |L1.58|
;;;326          strcat(buf, "&amp;");
000030  a1fb              ADR      r1,|L1.1056|
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       strcat
;;;327          continue;
000038  e012              B        |L1.96|
                  |L1.58|
;;;328        }
;;;329        if (c == '\'') {
00003a  2c27              CMP      r4,#0x27
00003c  d104              BNE      |L1.72|
;;;330          strcat(buf, "&apos;");
00003e  a1fa              ADR      r1,|L1.1064|
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       strcat
;;;331          continue;
000046  e00b              B        |L1.96|
                  |L1.72|
;;;332        }
;;;333        if (c == '"') {
000048  2c22              CMP      r4,#0x22
00004a  d104              BNE      |L1.86|
;;;334          strcat(buf, "&quot;");
00004c  a1f8              ADR      r1,|L1.1072|
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       strcat
;;;335          continue;
000054  e004              B        |L1.96|
                  |L1.86|
;;;336        }
;;;337        /*
;;;338         * We could try to represent control characters using the
;;;339         * sequence: &#x; where x is replaced by a hex numeral, but not
;;;340         * clear why we would do this.
;;;341         */
;;;342        buf[strlen(buf)]=c;
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       strlen
00005c  5434              STRB     r4,[r6,r0]
00005e  bf00              NOP                            ;319
                  |L1.96|
000060  1c6d              ADDS     r5,r5,#1              ;315
                  |L1.98|
000062  4545              CMP      r5,r8                 ;315
000064  dbd3              BLT      |L1.14|
;;;343      }
;;;344    }
000066  e8bd81f0          POP      {r4-r8,pc}
;;;345    #endif
                          ENDP

                  xml_add_tagged_url_data PROC
;;;286    }
;;;287    static void xml_add_tagged_url_data(char *buf, const char *tag, const char *data)
00006a  e92d41f0          PUSH     {r4-r8,lr}
;;;288    {
00006e  4604              MOV      r4,r0
000070  460e              MOV      r6,r1
000072  4615              MOV      r5,r2
;;;289      sprintf(&buf[strlen(buf)], "<%s>http://", tag);
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       strlen
00007a  1907              ADDS     r7,r0,r4
00007c  4632              MOV      r2,r6
00007e  a1ee              ADR      r1,|L1.1080|
000080  4638              MOV      r0,r7
000082  f7fffffe          BL       __2sprintf
;;;290      xml_data_encode(buf, data, strlen(data));
000086  4628              MOV      r0,r5
000088  f7fffffe          BL       strlen
00008c  4607              MOV      r7,r0
00008e  463a              MOV      r2,r7
000090  4629              MOV      r1,r5
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       xml_data_encode
;;;291      sprintf(&buf[strlen(buf)], "</%s>\n", tag);
000098  4620              MOV      r0,r4
00009a  f7fffffe          BL       strlen
00009e  1907              ADDS     r7,r0,r4
0000a0  4632              MOV      r2,r6
0000a2  a1e8              ADR      r1,|L1.1092|
0000a4  4638              MOV      r0,r7
0000a6  f7fffffe          BL       __2sprintf
;;;292    }
0000aa  e8bd81f0          POP      {r4-r8,pc}
;;;293    /* xml_data_encode -- format data for xml file, escaping special characters.
                          ENDP

                  xml_add_tagged_data PROC
;;;280     */
;;;281    static void xml_add_tagged_data(char *buf, const char *tag, const char *data)
0000ae  e92d41f0          PUSH     {r4-r8,lr}
;;;282    {
0000b2  4604              MOV      r4,r0
0000b4  460e              MOV      r6,r1
0000b6  4615              MOV      r5,r2
;;;283      sprintf(&buf[strlen(buf)], "<%s>", tag);
0000b8  4620              MOV      r0,r4
0000ba  f7fffffe          BL       strlen
0000be  1907              ADDS     r7,r0,r4
0000c0  4632              MOV      r2,r6
0000c2  a1e2              ADR      r1,|L1.1100|
0000c4  4638              MOV      r0,r7
0000c6  f7fffffe          BL       __2sprintf
;;;284      xml_data_encode(buf, data, strlen(data));
0000ca  4628              MOV      r0,r5
0000cc  f7fffffe          BL       strlen
0000d0  4607              MOV      r7,r0
0000d2  463a              MOV      r2,r7
0000d4  4629              MOV      r1,r5
0000d6  4620              MOV      r0,r4
0000d8  f7fffffe          BL       xml_data_encode
;;;285      sprintf(&buf[strlen(buf)], "</%s>\n", tag);
0000dc  4620              MOV      r0,r4
0000de  f7fffffe          BL       strlen
0000e2  1907              ADDS     r7,r0,r4
0000e4  4632              MOV      r2,r6
0000e6  a1d7              ADR      r1,|L1.1092|
0000e8  4638              MOV      r0,r7
0000ea  f7fffffe          BL       __2sprintf
;;;286    }
0000ee  e8bd81f0          POP      {r4-r8,pc}
;;;287    static void xml_add_tagged_url_data(char *buf, const char *tag, const char *data)
                          ENDP

                  format_device_xml PROC
;;;174     */
;;;175    static size_t format_device_xml(char *buf)
0000f2  e92d4ff8          PUSH     {r3-r11,lr}
;;;176    {
0000f6  4604              MOV      r4,r0
;;;177      #define ADD_XML_DATA(tag,data) {\
;;;178        if(buf)\
;;;179          xml_add_tagged_data(buf,tag,data);\
;;;180        else{\
;;;181          xml_add_tagged_data(helper,tag,data);\
;;;182          length += strlen(helper);\
;;;183          memset(helper,0,256);\
;;;184        }\
;;;185      }
;;;186      #define ADD_XML_URL(tag,url) {\
;;;187        if(buf)\
;;;188          xml_add_tagged_url_data(buf,tag,url);\
;;;189        else{\
;;;190          xml_add_tagged_url_data(helper,tag,url);\
;;;191          length += strlen(helper);\
;;;192          memset(helper,0,256);\
;;;193        }\
;;;194      }
;;;195      #define ADD_XML_CAT(text) {\
;;;196        if(buf)\
;;;197          strcat(buf,text);\
;;;198        else\
;;;199          length += strlen(text);\
;;;200      }
;;;201      static char *uuid_string=NULL;  
;;;202      const char *s;
;;;203      char *helper=NULL;
0000f8  2700              MOVS     r7,#0
;;;204      size_t length= strlen(device_xml_prefix);
0000fa  48d6              LDR      r0,|L1.1108|
0000fc  6800              LDR      r0,[r0,#0]  ; device_xml_prefix
0000fe  f7fffffe          BL       strlen
000102  4605              MOV      r5,r0
;;;205      if(buf)
000104  b12c              CBZ      r4,|L1.274|
;;;206        strcpy(buf, device_xml_prefix);
000106  48d3              LDR      r0,|L1.1108|
000108  6801              LDR      r1,[r0,#0]  ; device_xml_prefix
00010a  4620              MOV      r0,r4
00010c  f7fffffe          BL       strcpy
000110  e00d              B        |L1.302|
                  |L1.274|
;;;207      else{
;;;208        helper = mem_malloc(256);
000112  f44f7080          MOV      r0,#0x100
000116  f7fffffe          BL       mem_malloc
00011a  4607              MOV      r7,r0
;;;209        if(helper==NULL)
00011c  b917              CBNZ     r7,|L1.292|
;;;210          return 0;
00011e  2000              MOVS     r0,#0
                  |L1.288|
;;;211        memset(helper,0,256);
;;;212      }
;;;213      uuid_string = mem_malloc(80);
;;;214      if(uuid_string==NULL){
;;;215        mem_free(helper);
;;;216        return 0;
;;;217      }
;;;218    /*
;;;219     * Add required fields with default values if not configured. Add
;;;220     * optional and recommended fields only if configured.
;;;221     */
;;;222      if(strlen(UPNP_URL_BASE)){
;;;223        ADD_XML_URL("URLBase",UPNP_URL_BASE);
;;;224      }
;;;225      ADD_XML_CAT(device_xml_midfix);
;;;226      s = UPNP_FRIENDLY_NAME;
;;;227      s = ((s && *s) ? s : "Unknow Device");
;;;228      sprintf(uuid_string,"%s: \'%s\' (%s)",s,GetHostName(),htoa((struct in_addr *)Localhost()));
;;;229      ADD_XML_DATA("friendlyName", uuid_string);
;;;230      s = UPNP_MANUFACTURER;
;;;231      s = ((s && *s) ? s : "");
;;;232      ADD_XML_DATA("manufacturer", s);
;;;233      if (strlen(UPNP_MANUFACTURER_URL)){
;;;234        ADD_XML_DATA("manufacturerURL",UPNP_MANUFACTURER_URL);
;;;235      }
;;;236      if (strlen(UPNP_MODEL_DECRIPTION)){
;;;237        ADD_XML_DATA("modelDescription",UPNP_MODEL_DECRIPTION);
;;;238      }
;;;239      s = UPNP_MODEL_NAME;
;;;240      s = ((s && *s) ? s : "");
;;;241      ADD_XML_DATA("modelName", s);
;;;242      if (strlen(GetHostName())){
;;;243        ADD_XML_DATA( "modelNumber",GetHostName());
;;;244      }
;;;245      if (strlen(UPNP_MODEL_URL)){
;;;246        ADD_XML_DATA("modelURL", UPNP_MODEL_URL);
;;;247      }
;;;248      //memset(uuid_string,0,sizeof(uuid_string));
;;;249      //BSP_GetSerialNumber(uuid_string); 
;;;250      //ADD_XML_DATA("serialNumber",uuid_string);
;;;251      //uuid_bin2str(UUID_DEVICE, uuid_string, sizeof(uuid_string));
;;;252      s = uuid_string;
;;;253    /* Need "uuid:" prefix, thus we can't use xml_add_tagged_data()
;;;254     * easily...
;;;255     */
;;;256      ADD_XML_CAT("<UDN>uuid:");
;;;257      if(buf){
;;;258        xml_data_encode(buf, s, strlen(s));  
;;;259      }else{
;;;260        xml_data_encode(helper, s, strlen(s));
;;;261        length +=strlen(helper);
;;;262        memset(helper,0,256);
;;;263      }
;;;264      ADD_XML_CAT("</UDN>\n");
;;;265      
;;;266      if (strlen(UPNP_UPC)){
;;;267        ADD_XML_DATA("UPC",UPNP_UPC);     
;;;268      }
;;;269      ADD_XML_CAT(device_xml_postfix);
;;;270      ADD_XML_URL("presentationURL",htoa((struct in_addr *)Localhost()));
;;;271      ADD_XML_CAT("</device>\n</root>\n");
;;;272      mem_free(helper);
;;;273      mem_free(uuid_string);  
;;;274      return ((buf)? strlen(buf):length);
;;;275    }
000120  e8bd8ff8          POP      {r3-r11,pc}
                  |L1.292|
000124  f44f7180          MOV      r1,#0x100             ;211
000128  4638              MOV      r0,r7                 ;211
00012a  f7fffffe          BL       __aeabi_memclr
                  |L1.302|
00012e  2050              MOVS     r0,#0x50              ;213
000130  f7fffffe          BL       mem_malloc
000134  49c8              LDR      r1,|L1.1112|
000136  6008              STR      r0,[r1,#0]            ;213  ; uuid_string
000138  4608              MOV      r0,r1                 ;214
00013a  6800              LDR      r0,[r0,#0]            ;214  ; uuid_string
00013c  b920              CBNZ     r0,|L1.328|
00013e  4638              MOV      r0,r7                 ;215
000140  f7fffffe          BL       mem_free
000144  2000              MOVS     r0,#0                 ;216
000146  e7eb              B        |L1.288|
                  |L1.328|
000148  bf00              NOP                            ;222
00014a  b12c              CBZ      r4,|L1.344|
00014c  48c3              LDR      r0,|L1.1116|
00014e  6801              LDR      r1,[r0,#0]            ;225  ; device_xml_midfix
000150  4620              MOV      r0,r4                 ;225
000152  f7fffffe          BL       strcat
000156  e004              B        |L1.354|
                  |L1.344|
000158  48c0              LDR      r0,|L1.1116|
00015a  6800              LDR      r0,[r0,#0]            ;225  ; device_xml_midfix
00015c  f7fffffe          BL       strlen
000160  4405              ADD      r5,r5,r0              ;225
                  |L1.354|
000162  a6bf              ADR      r6,|L1.1120|
000164  b11e              CBZ      r6,|L1.366|
000166  7830              LDRB     r0,[r6,#0]            ;227
000168  b108              CBZ      r0,|L1.366|
00016a  4630              MOV      r0,r6                 ;227
00016c  e000              B        |L1.368|
                  |L1.366|
00016e  a0be              ADR      r0,|L1.1128|
                  |L1.368|
000170  4606              MOV      r6,r0                 ;227
000172  f7fffffe          BL       Localhost
000176  4682              MOV      r10,r0                ;228
000178  f7fffffe          BL       htoa
00017c  4680              MOV      r8,r0                 ;228
00017e  f7fffffe          BL       GetHostName
000182  4681              MOV      r9,r0                 ;228
000184  464b              MOV      r3,r9                 ;228
000186  4632              MOV      r2,r6                 ;228
000188  a1bb              ADR      r1,|L1.1144|
00018a  48b3              LDR      r0,|L1.1112|
00018c  f8cd8000          STR      r8,[sp,#0]            ;228
000190  6800              LDR      r0,[r0,#0]            ;228  ; uuid_string
000192  f7fffffe          BL       __2sprintf
000196  b134              CBZ      r4,|L1.422|
000198  48af              LDR      r0,|L1.1112|
00019a  a1bb              ADR      r1,|L1.1160|
00019c  6802              LDR      r2,[r0,#0]            ;229  ; uuid_string
00019e  4620              MOV      r0,r4                 ;229
0001a0  f7fffffe          BL       xml_add_tagged_data
0001a4  e00e              B        |L1.452|
                  |L1.422|
0001a6  48ac              LDR      r0,|L1.1112|
0001a8  a1b7              ADR      r1,|L1.1160|
0001aa  6802              LDR      r2,[r0,#0]            ;229  ; uuid_string
0001ac  4638              MOV      r0,r7                 ;229
0001ae  f7fffffe          BL       xml_add_tagged_data
0001b2  4638              MOV      r0,r7                 ;229
0001b4  f7fffffe          BL       strlen
0001b8  4405              ADD      r5,r5,r0              ;229
0001ba  f44f7180          MOV      r1,#0x100             ;229
0001be  4638              MOV      r0,r7                 ;229
0001c0  f7fffffe          BL       __aeabi_memclr
                  |L1.452|
0001c4  a6a6              ADR      r6,|L1.1120|
0001c6  b11e              CBZ      r6,|L1.464|
0001c8  7830              LDRB     r0,[r6,#0]            ;231
0001ca  b108              CBZ      r0,|L1.464|
0001cc  4630              MOV      r0,r6                 ;231
0001ce  e000              B        |L1.466|
                  |L1.464|
0001d0  a090              ADR      r0,|L1.1044|
                  |L1.466|
0001d2  4606              MOV      r6,r0                 ;231
0001d4  b12c              CBZ      r4,|L1.482|
0001d6  4632              MOV      r2,r6                 ;232
0001d8  a1af              ADR      r1,|L1.1176|
0001da  4620              MOV      r0,r4                 ;232
0001dc  f7fffffe          BL       xml_add_tagged_data
0001e0  e00d              B        |L1.510|
                  |L1.482|
0001e2  4632              MOV      r2,r6                 ;232
0001e4  a1ac              ADR      r1,|L1.1176|
0001e6  4638              MOV      r0,r7                 ;232
0001e8  f7fffffe          BL       xml_add_tagged_data
0001ec  4638              MOV      r0,r7                 ;232
0001ee  f7fffffe          BL       strlen
0001f2  4405              ADD      r5,r5,r0              ;232
0001f4  f44f7180          MOV      r1,#0x100             ;232
0001f8  4638              MOV      r0,r7                 ;232
0001fa  f7fffffe          BL       __aeabi_memclr
                  |L1.510|
0001fe  bf00              NOP                            ;233
000200  b12c              CBZ      r4,|L1.526|
000202  a2a9              ADR      r2,|L1.1192|
000204  a1ad              ADR      r1,|L1.1212|
000206  4620              MOV      r0,r4                 ;234
000208  f7fffffe          BL       xml_add_tagged_data
00020c  e00d              B        |L1.554|
                  |L1.526|
00020e  a2a6              ADR      r2,|L1.1192|
000210  a1aa              ADR      r1,|L1.1212|
000212  4638              MOV      r0,r7                 ;234
000214  f7fffffe          BL       xml_add_tagged_data
000218  4638              MOV      r0,r7                 ;234
00021a  f7fffffe          BL       strlen
00021e  4405              ADD      r5,r5,r0              ;234
000220  f44f7180          MOV      r1,#0x100             ;234
000224  4638              MOV      r0,r7                 ;234
000226  f7fffffe          BL       __aeabi_memclr
                  |L1.554|
00022a  bf00              NOP                            ;236
00022c  b12c              CBZ      r4,|L1.570|
00022e  a2a7              ADR      r2,|L1.1228|
000230  a1aa              ADR      r1,|L1.1244|
000232  4620              MOV      r0,r4                 ;237
000234  f7fffffe          BL       xml_add_tagged_data
000238  e00d              B        |L1.598|
                  |L1.570|
00023a  a2a4              ADR      r2,|L1.1228|
00023c  a1a7              ADR      r1,|L1.1244|
00023e  4638              MOV      r0,r7                 ;237
000240  f7fffffe          BL       xml_add_tagged_data
000244  4638              MOV      r0,r7                 ;237
000246  f7fffffe          BL       strlen
00024a  4405              ADD      r5,r5,r0              ;237
00024c  f44f7180          MOV      r1,#0x100             ;237
000250  4638              MOV      r0,r7                 ;237
000252  f7fffffe          BL       __aeabi_memclr
                  |L1.598|
000256  a6a6              ADR      r6,|L1.1264|
000258  b11e              CBZ      r6,|L1.610|
00025a  7830              LDRB     r0,[r6,#0]            ;240
00025c  b108              CBZ      r0,|L1.610|
00025e  4630              MOV      r0,r6                 ;240
000260  e000              B        |L1.612|
                  |L1.610|
000262  a06c              ADR      r0,|L1.1044|
                  |L1.612|
000264  4606              MOV      r6,r0                 ;240
000266  b12c              CBZ      r4,|L1.628|
000268  4632              MOV      r2,r6                 ;241
00026a  a1a3              ADR      r1,|L1.1272|
00026c  4620              MOV      r0,r4                 ;241
00026e  f7fffffe          BL       xml_add_tagged_data
000272  e00d              B        |L1.656|
                  |L1.628|
000274  4632              MOV      r2,r6                 ;241
000276  a1a0              ADR      r1,|L1.1272|
000278  4638              MOV      r0,r7                 ;241
00027a  f7fffffe          BL       xml_add_tagged_data
00027e  4638              MOV      r0,r7                 ;241
000280  f7fffffe          BL       strlen
000284  4405              ADD      r5,r5,r0              ;241
000286  f44f7180          MOV      r1,#0x100             ;241
00028a  4638              MOV      r0,r7                 ;241
00028c  f7fffffe          BL       __aeabi_memclr
                  |L1.656|
000290  f7fffffe          BL       GetHostName
000294  4680              MOV      r8,r0                 ;242
000296  f7fffffe          BL       strlen
00029a  b1d0              CBZ      r0,|L1.722|
00029c  b144              CBZ      r4,|L1.688|
00029e  f7fffffe          BL       GetHostName
0002a2  4680              MOV      r8,r0                 ;243
0002a4  4642              MOV      r2,r8                 ;243
0002a6  a197              ADR      r1,|L1.1284|
0002a8  4620              MOV      r0,r4                 ;243
0002aa  f7fffffe          BL       xml_add_tagged_data
0002ae  e010              B        |L1.722|
                  |L1.688|
0002b0  f7fffffe          BL       GetHostName
0002b4  4680              MOV      r8,r0                 ;243
0002b6  4642              MOV      r2,r8                 ;243
0002b8  a192              ADR      r1,|L1.1284|
0002ba  4638              MOV      r0,r7                 ;243
0002bc  f7fffffe          BL       xml_add_tagged_data
0002c0  4638              MOV      r0,r7                 ;243
0002c2  f7fffffe          BL       strlen
0002c6  4405              ADD      r5,r5,r0              ;243
0002c8  f44f7180          MOV      r1,#0x100             ;243
0002cc  4638              MOV      r0,r7                 ;243
0002ce  f7fffffe          BL       __aeabi_memclr
                  |L1.722|
0002d2  bf00              NOP                            ;245
0002d4  b12c              CBZ      r4,|L1.738|
0002d6  a28e              ADR      r2,|L1.1296|
0002d8  a195              ADR      r1,|L1.1328|
0002da  4620              MOV      r0,r4                 ;246
0002dc  f7fffffe          BL       xml_add_tagged_data
0002e0  e00d              B        |L1.766|
                  |L1.738|
0002e2  a28b              ADR      r2,|L1.1296|
0002e4  a192              ADR      r1,|L1.1328|
0002e6  4638              MOV      r0,r7                 ;246
0002e8  f7fffffe          BL       xml_add_tagged_data
0002ec  4638              MOV      r0,r7                 ;246
0002ee  f7fffffe          BL       strlen
0002f2  4405              ADD      r5,r5,r0              ;246
0002f4  f44f7180          MOV      r1,#0x100             ;246
0002f8  4638              MOV      r0,r7                 ;246
0002fa  f7fffffe          BL       __aeabi_memclr
                  |L1.766|
0002fe  4856              LDR      r0,|L1.1112|
000300  6806              LDR      r6,[r0,#0]            ;252  ; uuid_string
000302  b124              CBZ      r4,|L1.782|
000304  a18d              ADR      r1,|L1.1340|
000306  4620              MOV      r0,r4                 ;256
000308  f7fffffe          BL       strcat
00030c  e000              B        |L1.784|
                  |L1.782|
00030e  350a              ADDS     r5,r5,#0xa            ;256
                  |L1.784|
000310  b14c              CBZ      r4,|L1.806|
000312  4630              MOV      r0,r6                 ;258
000314  f7fffffe          BL       strlen
000318  4680              MOV      r8,r0                 ;258
00031a  4642              MOV      r2,r8                 ;258
00031c  4631              MOV      r1,r6                 ;258
00031e  4620              MOV      r0,r4                 ;258
000320  f7fffffe          BL       xml_data_encode
000324  e011              B        |L1.842|
                  |L1.806|
000326  4630              MOV      r0,r6                 ;260
000328  f7fffffe          BL       strlen
00032c  4680              MOV      r8,r0                 ;260
00032e  4642              MOV      r2,r8                 ;260
000330  4631              MOV      r1,r6                 ;260
000332  4638              MOV      r0,r7                 ;260
000334  f7fffffe          BL       xml_data_encode
000338  4638              MOV      r0,r7                 ;261
00033a  f7fffffe          BL       strlen
00033e  4405              ADD      r5,r5,r0              ;261
000340  f44f7180          MOV      r1,#0x100             ;262
000344  4638              MOV      r0,r7                 ;262
000346  f7fffffe          BL       __aeabi_memclr
                  |L1.842|
00034a  b124              CBZ      r4,|L1.854|
00034c  a17e              ADR      r1,|L1.1352|
00034e  4620              MOV      r0,r4                 ;264
000350  f7fffffe          BL       strcat
000354  e000              B        |L1.856|
                  |L1.854|
000356  1ded              ADDS     r5,r5,#7              ;264
                  |L1.856|
000358  bf00              NOP                            ;266
00035a  b12c              CBZ      r4,|L1.872|
00035c  487c              LDR      r0,|L1.1360|
00035e  6801              LDR      r1,[r0,#0]            ;269  ; device_xml_postfix
000360  4620              MOV      r0,r4                 ;269
000362  f7fffffe          BL       strcat
000366  e004              B        |L1.882|
                  |L1.872|
000368  4879              LDR      r0,|L1.1360|
00036a  6800              LDR      r0,[r0,#0]            ;269  ; device_xml_postfix
00036c  f7fffffe          BL       strlen
000370  4405              ADD      r5,r5,r0              ;269
                  |L1.882|
000372  b15c              CBZ      r4,|L1.908|
000374  f7fffffe          BL       Localhost
000378  4681              MOV      r9,r0                 ;270
00037a  f7fffffe          BL       htoa
00037e  4680              MOV      r8,r0                 ;270
000380  4642              MOV      r2,r8                 ;270
000382  a174              ADR      r1,|L1.1364|
000384  4620              MOV      r0,r4                 ;270
000386  f7fffffe          BL       xml_add_tagged_url_data
00038a  e013              B        |L1.948|
                  |L1.908|
00038c  f7fffffe          BL       Localhost
000390  4681              MOV      r9,r0                 ;270
000392  f7fffffe          BL       htoa
000396  4680              MOV      r8,r0                 ;270
000398  4642              MOV      r2,r8                 ;270
00039a  a16e              ADR      r1,|L1.1364|
00039c  4638              MOV      r0,r7                 ;270
00039e  f7fffffe          BL       xml_add_tagged_url_data
0003a2  4638              MOV      r0,r7                 ;270
0003a4  f7fffffe          BL       strlen
0003a8  4405              ADD      r5,r5,r0              ;270
0003aa  f44f7180          MOV      r1,#0x100             ;270
0003ae  4638              MOV      r0,r7                 ;270
0003b0  f7fffffe          BL       __aeabi_memclr
                  |L1.948|
0003b4  b124              CBZ      r4,|L1.960|
0003b6  a16b              ADR      r1,|L1.1380|
0003b8  4620              MOV      r0,r4                 ;271
0003ba  f7fffffe          BL       strcat
0003be  e000              B        |L1.962|
                  |L1.960|
0003c0  3512              ADDS     r5,r5,#0x12           ;271
                  |L1.962|
0003c2  4638              MOV      r0,r7                 ;272
0003c4  f7fffffe          BL       mem_free
0003c8  4823              LDR      r0,|L1.1112|
0003ca  6800              LDR      r0,[r0,#0]            ;273  ; uuid_string
0003cc  f7fffffe          BL       mem_free
0003d0  b11c              CBZ      r4,|L1.986|
0003d2  4620              MOV      r0,r4                 ;274
0003d4  f7fffffe          BL       strlen
0003d8  e6a2              B        |L1.288|
                  |L1.986|
0003da  4628              MOV      r0,r5                 ;274
0003dc  e6a0              B        |L1.288|
;;;276    /* xml_add_tagged_data -- format tagged data as a new xml line.
                          ENDP

                  upnp_server_serve PROC
;;;82       "Accept-Ranges: none\r\n\r\n";
;;;83     static void upnp_server_serve(struct netconn *conn) 
0003de  b5f0              PUSH     {r4-r7,lr}
;;;84     {
0003e0  b087              SUB      sp,sp,#0x1c
0003e2  4606              MOV      r6,r0
;;;85       struct netbuf *inbuf;
;;;86       char* buf, *temp;
;;;87       u16_t  buflen;
;;;88       size_t temp_len=0;
0003e4  2000              MOVS     r0,#0
0003e6  9002              STR      r0,[sp,#8]
;;;89       size_t len_xml;
;;;90       char * xml_buf;
;;;91       
;;;92       /* Read the data from the port, blocking if nothing yet there. 
;;;93        We assume the request (the part we care about) is in one netbuf */
;;;94       netconn_recv(conn,&inbuf);
0003e8  a906              ADD      r1,sp,#0x18
0003ea  4630              MOV      r0,r6
0003ec  f7fffffe          BL       netconn_recv
;;;95       
;;;96       if (inbuf != NULL && netconn_err(conn) == ERR_OK ){
0003f0  9806              LDR      r0,[sp,#0x18]
0003f2  2800              CMP      r0,#0
0003f4  d00a              BEQ      |L1.1036|
0003f6  7a30              LDRB     r0,[r6,#8]
0003f8  2800              CMP      r0,#0
0003fa  d107              BNE      |L1.1036|
;;;97           netbuf_data(inbuf, (void**)&buf, &buflen);
0003fc  aa03              ADD      r2,sp,#0xc
0003fe  a905              ADD      r1,sp,#0x14
000400  9806              LDR      r0,[sp,#0x18]
000402  f7fffffe          BL       netbuf_data
;;;98           LWIP_DEBUGF(HTTPD_DEBUG &0x00, ("\n------------------------------------------------------\n"));
000406  bf00              NOP      
000408  bf00              NOP      
;;;99           LWIP_DEBUGF(HTTPD_DEBUG&0x00, ("Request:\n%s\n", buf));                    
00040a  e0b5              B        |L1.1400|
                  |L1.1036|
00040c  e10e              B        |L1.1580|
00040e  0000              DCW      0x0000
                  |L1.1040|
000410  266c743b          DCB      "&lt;"
                  |L1.1044|
000414  00                DCB      0
000415  00                DCB      0
000416  00                DCB      0
000417  00                DCB      0
                  |L1.1048|
000418  2667743b          DCB      "&gt;",0
00041c  00      
00041d  00                DCB      0
00041e  00                DCB      0
00041f  00                DCB      0
                  |L1.1056|
000420  26616d70          DCB      "&amp;",0
000424  3b00    
000426  00                DCB      0
000427  00                DCB      0
                  |L1.1064|
000428  2661706f          DCB      "&apos;",0
00042c  733b00  
00042f  00                DCB      0
                  |L1.1072|
000430  2671756f          DCB      "&quot;",0
000434  743b00  
000437  00                DCB      0
                  |L1.1080|
000438  3c25733e          DCB      "<%s>http://",0
00043c  68747470
000440  3a2f2f00
                  |L1.1092|
000444  3c2f2573          DCB      "</%s>\n",0
000448  3e0a00  
00044b  00                DCB      0
                  |L1.1100|
00044c  3c25733e          DCB      "<%s>",0
000450  00      
000451  00                DCB      0
000452  00                DCB      0
000453  00                DCB      0
                  |L1.1108|
                          DCD      device_xml_prefix
                  |L1.1112|
                          DCD      uuid_string
                  |L1.1116|
                          DCD      device_xml_midfix
                  |L1.1120|
000460  54726961          DCB      "Triad",0
000464  6400    
000466  00                DCB      0
000467  00                DCB      0
                  |L1.1128|
000468  556e6b6e          DCB      "Unknow Device",0
00046c  6f772044
000470  65766963
000474  6500    
000476  00                DCB      0
000477  00                DCB      0
                  |L1.1144|
000478  25733a20          DCB      "%s: '%s' (%s)",0
00047c  27257327
000480  20282573
000484  2900    
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
000488  66726965          DCB      "friendlyName",0
00048c  6e646c79
000490  4e616d65
000494  00      
000495  00                DCB      0
000496  00                DCB      0
000497  00                DCB      0
                  |L1.1176|
000498  6d616e75          DCB      "manufacturer",0
00049c  66616374
0004a0  75726572
0004a4  00      
0004a5  00                DCB      0
0004a6  00                DCB      0
0004a7  00                DCB      0
                  |L1.1192|
0004a8  68747470          DCB      "http://www.st.com",0
0004ac  3a2f2f77
0004b0  77772e73
0004b4  742e636f
0004b8  6d00    
0004ba  00                DCB      0
0004bb  00                DCB      0
                  |L1.1212|
0004bc  6d616e75          DCB      "manufacturerURL",0
0004c0  66616374
0004c4  75726572
0004c8  55524c00
                  |L1.1228|
0004cc  47726f75          DCB      "Group speaker",0
0004d0  70207370
0004d4  65616b65
0004d8  7200    
0004da  00                DCB      0
0004db  00                DCB      0
                  |L1.1244|
0004dc  6d6f6465          DCB      "modelDescription",0
0004e0  6c446573
0004e4  63726970
0004e8  74696f6e
0004ec  00      
0004ed  00                DCB      0
0004ee  00                DCB      0
0004ef  00                DCB      0
                  |L1.1264|
0004f0  58656f20          DCB      "Xeo II",0
0004f4  494900  
0004f7  00                DCB      0
                  |L1.1272|
0004f8  6d6f6465          DCB      "modelName",0
0004fc  6c4e616d
000500  6500    
000502  00                DCB      0
000503  00                DCB      0
                  |L1.1284|
000504  6d6f6465          DCB      "modelNumber",0
000508  6c4e756d
00050c  62657200
                  |L1.1296|
000510  68747470          DCB      "http://www.hansong-china.com",0
000514  3a2f2f77
000518  77772e68
00051c  616e736f
000520  6e672d63
000524  68696e61
000528  2e636f6d
00052c  00      
00052d  00                DCB      0
00052e  00                DCB      0
00052f  00                DCB      0
                  |L1.1328|
000530  6d6f6465          DCB      "modelURL",0
000534  6c55524c
000538  00      
000539  00                DCB      0
00053a  00                DCB      0
00053b  00                DCB      0
                  |L1.1340|
00053c  3c55444e          DCB      "<UDN>uuid:",0
000540  3e757569
000544  643a00  
000547  00                DCB      0
                  |L1.1352|
000548  3c2f5544          DCB      "</UDN>\n",0
00054c  4e3e0a00
                  |L1.1360|
                          DCD      device_xml_postfix
                  |L1.1364|
000554  70726573          DCB      "presentationURL",0
000558  656e7461
00055c  74696f6e
000560  55524c00
                  |L1.1380|
000564  3c2f6465          DCB      "</device>\n</root>\n",0
000568  76696365
00056c  3e0a3c2f
000570  726f6f74
000574  3e0a00  
000577  00                DCB      0
                  |L1.1400|
000578  bf00              NOP      
00057a  bf00              NOP      
;;;100          
;;;101          if(HttpdReadHdrAnalyze(&buf,&temp,&temp_len)!=HTTPREAD_HDR_TYPE_GET){
00057c  aa02              ADD      r2,sp,#8
00057e  a904              ADD      r1,sp,#0x10
000580  a805              ADD      r0,sp,#0x14
000582  f7fffffe          BL       HttpdReadHdrAnalyze
000586  2802              CMP      r0,#2
000588  d007              BEQ      |L1.1434|
;;;102            netconn_close(conn);
00058a  4630              MOV      r0,r6
00058c  f7fffffe          BL       netconn_close
;;;103            netbuf_delete(inbuf);
000590  9806              LDR      r0,[sp,#0x18]
000592  f7fffffe          BL       netbuf_delete
                  |L1.1430|
;;;104            return;
;;;105          } else 
;;;106            if(!strncmp(temp,UPNP_DEVICE_XML_FILE,temp_len)){
;;;107              vPortEnterCritical();
;;;108              len_xml = format_device_xml(NULL);
;;;109              #if 0
;;;110                xml_buf = (char *)mem_malloc(len_xml +1);
;;;111                memset(xml_buf, 0, len_xml+1);
;;;112              #else
;;;113                xml_buf = send_buf;
;;;114                memset(xml_buf, 0, len_xml+1);
;;;115              #endif
;;;116              vPortExitCritical();          
;;;117              if(!xml_buf)
;;;118              {
;;;119                  netconn_close(conn);
;;;120                  netbuf_delete(inbuf);
;;;121                  return;
;;;122              }
;;;123              vPortEnterCritical();          
;;;124              sprintf(xml_buf,http_header,HttpdResponseHdr(),len_xml);
;;;125              vPortExitCritical();          
;;;126              netconn_write(conn,(const uint8_t *)xml_buf,strlen(xml_buf), NETCONN_COPY);
;;;127              vPortEnterCritical();
;;;128              format_device_xml(xml_buf);
;;;129              vPortExitCritical();          
;;;130              netconn_write(conn,(const uint8_t *)xml_buf,strlen(xml_buf), NETCONN_COPY);
;;;131            }
;;;132      }
;;;133      /* Close the connection (server closes in HTTP) */
;;;134      netconn_close(conn);
;;;135      
;;;136      /* Delete the buffer (netconn_recv gives us ownership,
;;;137       so we have to make sure to deallocate the buffer) */
;;;138      netbuf_delete(inbuf);
;;;139    }
000596  b007              ADD      sp,sp,#0x1c
000598  bdf0              POP      {r4-r7,pc}
                  |L1.1434|
00059a  a140              ADR      r1,|L1.1692|
00059c  9a02              LDR      r2,[sp,#8]            ;106
00059e  9804              LDR      r0,[sp,#0x10]         ;106
0005a0  f7fffffe          BL       strncmp
0005a4  2800              CMP      r0,#0                 ;106
0005a6  d141              BNE      |L1.1580|
0005a8  f7fffffe          BL       vPortEnterCritical
0005ac  2000              MOVS     r0,#0                 ;108
0005ae  f7fffffe          BL       format_device_xml
0005b2  4605              MOV      r5,r0                 ;108
0005b4  4c3c              LDR      r4,|L1.1704|
0005b6  1c69              ADDS     r1,r5,#1              ;114
0005b8  4620              MOV      r0,r4                 ;114
0005ba  f7fffffe          BL       __aeabi_memclr
0005be  f7fffffe          BL       vPortExitCritical
0005c2  b934              CBNZ     r4,|L1.1490|
0005c4  4630              MOV      r0,r6                 ;119
0005c6  f7fffffe          BL       netconn_close
0005ca  9806              LDR      r0,[sp,#0x18]         ;120
0005cc  f7fffffe          BL       netbuf_delete
0005d0  e7e1              B        |L1.1430|
                  |L1.1490|
0005d2  f7fffffe          BL       vPortEnterCritical
0005d6  f7fffffe          BL       HttpdResponseHdr
0005da  4607              MOV      r7,r0                 ;124
0005dc  462b              MOV      r3,r5                 ;124
0005de  463a              MOV      r2,r7                 ;124
0005e0  4832              LDR      r0,|L1.1708|
0005e2  6801              LDR      r1,[r0,#0]            ;124  ; http_header
0005e4  4620              MOV      r0,r4                 ;124
0005e6  f7fffffe          BL       __2sprintf
0005ea  f7fffffe          BL       vPortExitCritical
0005ee  4620              MOV      r0,r4                 ;126
0005f0  f7fffffe          BL       strlen
0005f4  4607              MOV      r7,r0                 ;126
0005f6  2000              MOVS     r0,#0                 ;126
0005f8  2301              MOVS     r3,#1                 ;126
0005fa  463a              MOV      r2,r7                 ;126
0005fc  4621              MOV      r1,r4                 ;126
0005fe  9000              STR      r0,[sp,#0]            ;126
000600  4630              MOV      r0,r6                 ;126
000602  f7fffffe          BL       netconn_write_partly
000606  f7fffffe          BL       vPortEnterCritical
00060a  4620              MOV      r0,r4                 ;128
00060c  f7fffffe          BL       format_device_xml
000610  f7fffffe          BL       vPortExitCritical
000614  4620              MOV      r0,r4                 ;130
000616  f7fffffe          BL       strlen
00061a  4607              MOV      r7,r0                 ;130
00061c  2000              MOVS     r0,#0                 ;130
00061e  2301              MOVS     r3,#1                 ;130
000620  463a              MOV      r2,r7                 ;130
000622  4621              MOV      r1,r4                 ;130
000624  9000              STR      r0,[sp,#0]            ;130
000626  4630              MOV      r0,r6                 ;130
000628  f7fffffe          BL       netconn_write_partly
                  |L1.1580|
00062c  4630              MOV      r0,r6                 ;134
00062e  f7fffffe          BL       netconn_close
000632  9806              LDR      r0,[sp,#0x18]         ;138
000634  f7fffffe          BL       netbuf_delete
000638  bf00              NOP      
00063a  e7ac              B        |L1.1430|
;;;140    /**
                          ENDP

                  upnp_server_netconn_thread PROC
;;;144      */
;;;145    static void upnp_server_netconn_thread(void *arg)
00063c  b5f8              PUSH     {r3-r7,lr}
;;;146    { 
00063e  4606              MOV      r6,r0
;;;147      struct netconn *conn, *newconn;
;;;148      err_t err;
;;;149      /* Create a new TCP connection handle */
;;;150      conn = netconn_new(NETCONN_TCP);
000640  2200              MOVS     r2,#0
000642  4611              MOV      r1,r2
000644  2010              MOVS     r0,#0x10
000646  f7fffffe          BL       netconn_new_with_proto_and_callback
00064a  4605              MOV      r5,r0
;;;151      if (conn!= NULL){
00064c  b1cd              CBZ      r5,|L1.1666|
;;;152        /* Bind to port 5200 with default IP address */
;;;153        err = netconn_bind(conn, NULL, UPNP_HTTP_PORT);
00064e  f2414250          MOV      r2,#0x1450
000652  2100              MOVS     r1,#0
000654  4628              MOV      r0,r5
000656  f7fffffe          BL       netconn_bind
00065a  4604              MOV      r4,r0
;;;154        
;;;155        if (err == ERR_OK){
00065c  b98c              CBNZ     r4,|L1.1666|
;;;156          /* Put the connection into LISTEN state */
;;;157          netconn_listen(conn);
00065e  21ff              MOVS     r1,#0xff
000660  4628              MOV      r0,r5
000662  f7fffffe          BL       netconn_listen_with_backlog
;;;158          while(1){
000666  e00b              B        |L1.1664|
                  |L1.1640|
;;;159            /* accept any icoming connection */
;;;160            netconn_accept(conn,&newconn);
000668  4669              MOV      r1,sp
00066a  4628              MOV      r0,r5
00066c  f7fffffe          BL       netconn_accept
;;;161            if(newconn){
000670  9800              LDR      r0,[sp,#0]
000672  b110              CBZ      r0,|L1.1658|
;;;162              /* serve connection */
;;;163              upnp_server_serve(newconn);
000674  9800              LDR      r0,[sp,#0]
000676  f7fffffe          BL       upnp_server_serve
                  |L1.1658|
;;;164            }        
;;;165              /* delete connection */
;;;166              netconn_delete(newconn);				
00067a  9800              LDR      r0,[sp,#0]
00067c  f7fffffe          BL       netconn_delete
                  |L1.1664|
000680  e7f2              B        |L1.1640|
                  |L1.1666|
;;;167            //vTaskDelay(100/portTICK_RATE_MS);
;;;168          }
;;;169        }
;;;170      }
;;;171    }
000682  bdf8              POP      {r3-r7,pc}
;;;172    /*
                          ENDP

                  UpnpWebInit PROC
;;;67     
;;;68     void  UpnpWebInit(void)
000684  b508              PUSH     {r3,lr}
;;;69     {
;;;70       sys_thread_new("UPNP", upnp_server_netconn_thread, NULL, UPNP_WEB_THREAD_STACK_SIZE, UPNP_WEB_THREAD_PRIO);
000686  2005              MOVS     r0,#5
000688  f44f6380          MOV      r3,#0x400
00068c  2200              MOVS     r2,#0
00068e  4908              LDR      r1,|L1.1712|
000690  9000              STR      r0,[sp,#0]
000692  a008              ADR      r0,|L1.1716|
000694  f7fffffe          BL       sys_thread_new
;;;71     }
000698  bd08              POP      {r3,pc}
;;;72     
                          ENDP

00069a  0000              DCW      0x0000
                  |L1.1692|
00069c  64657669          DCB      "device.xml",0
0006a0  63652e78
0006a4  6d6c00  
0006a7  00                DCB      0
                  |L1.1704|
                          DCD      send_buf
                  |L1.1708|
                          DCD      http_header
                  |L1.1712|
                          DCD      upnp_server_netconn_thread
                  |L1.1716|
0006b4  55504e50          DCB      "UPNP",0
0006b8  00      
0006b9  00                DCB      0
0006ba  00                DCB      0
0006bb  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  send_buf
                          %        1024

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  3c3f786d          DCB      "<?xml version=""1.0""?>\n<root xmlns=""urn:schemas-upnp"
000004  6c207665
000008  7273696f
00000c  6e3d2231
000010  2e30223f
000014  3e0a3c72
000018  6f6f7420
00001c  786d6c6e
000020  733d2275
000024  726e3a73
000028  6368656d
00002c  61732d75
000030  706e70  
000033  2d6f7267          DCB      "-org:device-1-0"">\n<specVersion>\n<major>1</major>\n<m"
000037  3a646576
00003b  6963652d
00003f  312d3022
000043  3e0a3c73
000047  70656356
00004b  65727369
00004f  6f6e3e0a
000053  3c6d616a
000057  6f723e31
00005b  3c2f6d61
00005f  6a6f723e
000063  0a3c6d  
000066  696e6f72          DCB      "inor>0</minor>\n</specVersion>\n",0
00006a  3e303c2f
00006e  6d696e6f
000072  723e0a3c
000076  2f737065
00007a  63566572
00007e  73696f6e
000082  3e0a00  
000085  3c736572          DCB      "<serviceList><service><serviceType>urn:schemas-upnp-org"
000089  76696365
00008d  4c697374
000091  3e3c7365
000095  72766963
000099  653e3c73
00009d  65727669
0000a1  63655479
0000a5  70653e75
0000a9  726e3a73
0000ad  6368656d
0000b1  61732d75
0000b5  706e702d
0000b9  6f7267  
0000bc  3a736572          DCB      ":service:ManagementBasic:1</serviceType>\n<serviceId>ur"
0000c0  76696365
0000c4  3a4d616e
0000c8  6167656d
0000cc  656e7442
0000d0  61736963
0000d4  3a313c2f
0000d8  73657276
0000dc  69636554
0000e0  7970653e
0000e4  0a3c7365
0000e8  72766963
0000ec  6549643e
0000f0  7572    
0000f2  6e3a7570          DCB      "n:upnp-org:serviceId:1</serviceId>\n<SCPDURL>/device.xm"
0000f6  6e702d6f
0000fa  72673a73
0000fe  65727669
000102  63654964
000106  3a313c2f
00010a  73657276
00010e  69636549
000112  643e0a3c
000116  53435044
00011a  55524c3e
00011e  2f646576
000122  6963652e
000126  786d    
000128  6c3c2f53          DCB      "l</SCPDURL>\n<controlURL></controlURL>\n<eventSubURL></"
00012c  43504455
000130  524c3e0a
000134  3c636f6e
000138  74726f6c
00013c  55524c3e
000140  3c2f636f
000144  6e74726f
000148  6c55524c
00014c  3e0a3c65
000150  76656e74
000154  53756255
000158  524c3e3c
00015c  2f      
00015d  6576656e          DCB      "eventSubURL>\n</service></serviceList>",0
000161  74537562
000165  55524c3e
000169  0a3c2f73
00016d  65727669
000171  63653e3c
000175  2f736572
000179  76696365
00017d  4c697374
000181  3e00    
000183  3c646576          DCB      "<device>\n<deviceType>urn:schemas-upnp-org:device:Manag"
000187  6963653e
00018b  0a3c6465
00018f  76696365
000193  54797065
000197  3e75726e
00019b  3a736368
00019f  656d6173
0001a3  2d75706e
0001a7  702d6f72
0001ab  673a6465
0001af  76696365
0001b3  3a4d616e
0001b7  6167    
0001b9  656d656e          DCB      "ement:1</deviceType>\n",0
0001bd  743a313c
0001c1  2f646576
0001c5  69636554
0001c9  7970653e
0001cd  0a00    
0001cf  2573436f          DCB      "%sConnection: close\r\nContent-Type: text/xml;charset=u"
0001d3  6e6e6563
0001d7  74696f6e
0001db  3a20636c
0001df  6f73650d
0001e3  0a436f6e
0001e7  74656e74
0001eb  2d547970
0001ef  653a2074
0001f3  6578742f
0001f7  786d6c3b
0001fb  63686172
0001ff  7365743d
000203  75      
000204  74662d38          DCB      "tf-8\r\nContent-Length: %d\r\nAccept-Ranges: none\r\n\r"
000208  0d0a436f
00020c  6e74656e
000210  742d4c65
000214  6e677468
000218  3a202564
00021c  0d0a4163
000220  63657074
000224  2d52616e
000228  6765733a
00022c  206e6f6e
000230  650d0a0d
000234  0a00              DCB      "\n",0

                          AREA ||.data||, DATA, ALIGN=2

                  device_xml_prefix
                          DCD      ||.conststring||
                  device_xml_postfix
                          DCD      ||.conststring||+0x85
                  device_xml_midfix
                          DCD      ||.conststring||+0x183
                  http_header
                          DCD      ||.conststring||+0x1cf
                  uuid_string
                          DCD      0x00000000
