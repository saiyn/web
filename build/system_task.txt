; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\system_task.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\system_task.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\system_task.crf Task\System_Task.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  power_on_routine PROC
;;;119    
;;;120    static void power_on_routine(void)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122    	uint8 j;
;;;123    	
;;;124      bsp_delay_ms(3000);
000002  f64030b8          MOV      r0,#0xbb8
000006  f7fffffe          BL       bsp_delay_ms
;;;125    	
;;;126    	for(j = 0; j < SYS_INIT_FUNC_NUM; j++){
00000a  2400              MOVS     r4,#0
00000c  e005              B        |L1.26|
                  |L1.14|
;;;127    		sys_init_array[j]();
00000e  49fe              LDR      r1,|L1.1032|
000010  f8510024          LDR      r0,[r1,r4,LSL #2]
000014  4780              BLX      r0
000016  1c60              ADDS     r0,r4,#1              ;126
000018  b2c4              UXTB     r4,r0                 ;126
                  |L1.26|
00001a  2c02              CMP      r4,#2                 ;126
00001c  d3f7              BCC      |L1.14|
;;;128    	}
;;;129    	
;;;130    //	/*init PCM1804 must after DSP boot*/
;;;131    //	PCM1804_RST(0);
;;;132    //	bsp_delay_ms(100);
;;;133    //	PCM1804_RST(1);
;;;134    //	
;;;135    //	RCA_OUT_DSP();
;;;136    //	BAN_OUT_DSP();
;;;137    }
00001e  bd10              POP      {r4,pc}
;;;138    
                          ENDP

                  sys_update_protect_state PROC
;;;139    static void sys_update_protect_state(sys_state_t *sys)
000020  b570              PUSH     {r4-r6,lr}
;;;140    {
000022  4605              MOV      r5,r0
;;;141    	uint8 index;
;;;142    	
;;;143    	for(index = DETECT_OVER_TEMP; index < NUM_OF_DETECT; index++){
000024  2402              MOVS     r4,#2
000026  e00a              B        |L1.62|
                  |L1.40|
;;;144    		if(sys->protect_bitmap & (1 << index)){
000028  f895004a          LDRB     r0,[r5,#0x4a]
00002c  2101              MOVS     r1,#1
00002e  40a1              LSLS     r1,r1,r4
000030  4208              TST      r0,r1
000032  d002              BEQ      |L1.58|
;;;145    			update_detect_state((detect_event_t)index);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       update_detect_state
                  |L1.58|
00003a  1c60              ADDS     r0,r4,#1              ;143
00003c  b2c4              UXTB     r4,r0                 ;143
                  |L1.62|
00003e  2c08              CMP      r4,#8                 ;143
000040  dbf2              BLT      |L1.40|
;;;146    		}
;;;147    	}
;;;148    }
000042  bd70              POP      {r4-r6,pc}
;;;149    
                          ENDP

                  power_on_timeout PROC
;;;216    
;;;217    static void power_on_timeout(void *arg)
000044  b510              PUSH     {r4,lr}
;;;218    {
000046  4604              MOV      r4,r0
;;;219    	if(IS_OVER_CURRENT){
000048  2108              MOVS     r1,#8
00004a  48f0              LDR      r0,|L1.1036|
00004c  f7fffffe          BL       GPIO_ReadSinglePin
000050  2801              CMP      r0,#1
000052  d100              BNE      |L1.86|
000054  e000              B        |L1.88|
                  |L1.86|
000056  2000              MOVS     r0,#0
                  |L1.88|
000058  b120              CBZ      r0,|L1.100|
;;;220    		dis_send_msg(DIS_JUMP, DIS_OVER_CURRENT);
00005a  211b              MOVS     r1,#0x1b
00005c  2002              MOVS     r0,#2
00005e  f7fffffe          BL       dis_send_msg
000062  e028              B        |L1.182|
                  |L1.100|
;;;221    	}else if(IS_OVER_VOLTAGE){
000064  2101              MOVS     r1,#1
000066  48ea              LDR      r0,|L1.1040|
000068  f7fffffe          BL       GPIO_ReadSinglePin
00006c  2801              CMP      r0,#1
00006e  d100              BNE      |L1.114|
000070  e000              B        |L1.116|
                  |L1.114|
000072  2000              MOVS     r0,#0
                  |L1.116|
000074  b120              CBZ      r0,|L1.128|
;;;222    		dis_send_msg(DIS_JUMP, DIS_OVER_VOLTAGE_OR_SHORT);
000076  2118              MOVS     r1,#0x18
000078  2002              MOVS     r0,#2
00007a  f7fffffe          BL       dis_send_msg
00007e  e01a              B        |L1.182|
                  |L1.128|
;;;223    	}else if(IS_OVER_TEMP){
000080  2102              MOVS     r1,#2
000082  48e3              LDR      r0,|L1.1040|
000084  f7fffffe          BL       GPIO_ReadSinglePin
000088  2801              CMP      r0,#1
00008a  d100              BNE      |L1.142|
00008c  e000              B        |L1.144|
                  |L1.142|
00008e  2000              MOVS     r0,#0
                  |L1.144|
000090  b120              CBZ      r0,|L1.156|
;;;224    		dis_send_msg(DIS_JUMP, DIS_OVER_TEMP);
000092  2117              MOVS     r1,#0x17
000094  2002              MOVS     r0,#2
000096  f7fffffe          BL       dis_send_msg
00009a  e00c              B        |L1.182|
                  |L1.156|
;;;225    	}else if(IS_DC_ERROR){
00009c  2110              MOVS     r1,#0x10
00009e  48db              LDR      r0,|L1.1036|
0000a0  f7fffffe          BL       GPIO_ReadSinglePin
0000a4  2801              CMP      r0,#1
0000a6  d100              BNE      |L1.170|
0000a8  e000              B        |L1.172|
                  |L1.170|
0000aa  2000              MOVS     r0,#0
                  |L1.172|
0000ac  b118              CBZ      r0,|L1.182|
;;;226    		dis_send_msg(DIS_JUMP, DIS_OVER_DC_ERROR);
0000ae  211a              MOVS     r1,#0x1a
0000b0  2002              MOVS     r0,#2
0000b2  f7fffffe          BL       dis_send_msg
                  |L1.182|
;;;227    	}
;;;228    	
;;;229    }
0000b6  bd10              POP      {r4,pc}
;;;230    
                          ENDP

                  fix_hardware_bug PROC
;;;149    
;;;150    static void fix_hardware_bug(void *arg)
0000b8  b570              PUSH     {r4-r6,lr}
;;;151    {
0000ba  4605              MOV      r5,r0
;;;152    	 SYS_TRACE("in fix_hardware_bug\r\n");
0000bc  a0d5              ADR      r0,|L1.1044|
0000be  f7fffffe          BL       s_printf
;;;153    	/*hardwrae will be in protection mode when power on*/
;;;154    //	if(gSystem_t->protect_bitmap & ((1 << DETECT_OVER_TEMP) | (1 << DETECT_OVER_VOLTAGE_OR_SHORT) 
;;;155    //		| (1 << DETECT_OVER_CURRENT) | (1 << DETECT_OVER_DC_ERROR))){
;;;156    	if(IS_OVER_CURRENT | IS_OVER_VOLTAGE | IS_OVER_TEMP | IS_DC_ERROR){
0000c2  2108              MOVS     r1,#8
0000c4  48d1              LDR      r0,|L1.1036|
0000c6  f7fffffe          BL       GPIO_ReadSinglePin
0000ca  2801              CMP      r0,#1
0000cc  d101              BNE      |L1.210|
0000ce  2401              MOVS     r4,#1
0000d0  e000              B        |L1.212|
                  |L1.210|
0000d2  2400              MOVS     r4,#0
                  |L1.212|
0000d4  2101              MOVS     r1,#1
0000d6  48ce              LDR      r0,|L1.1040|
0000d8  f7fffffe          BL       GPIO_ReadSinglePin
0000dc  2801              CMP      r0,#1
0000de  d100              BNE      |L1.226|
0000e0  e000              B        |L1.228|
                  |L1.226|
0000e2  2000              MOVS     r0,#0
                  |L1.228|
0000e4  4304              ORRS     r4,r4,r0
0000e6  2102              MOVS     r1,#2
0000e8  48c9              LDR      r0,|L1.1040|
0000ea  f7fffffe          BL       GPIO_ReadSinglePin
0000ee  2801              CMP      r0,#1
0000f0  d100              BNE      |L1.244|
0000f2  e000              B        |L1.246|
                  |L1.244|
0000f4  2000              MOVS     r0,#0
                  |L1.246|
0000f6  4304              ORRS     r4,r4,r0
0000f8  2110              MOVS     r1,#0x10
0000fa  48c4              LDR      r0,|L1.1036|
0000fc  f7fffffe          BL       GPIO_ReadSinglePin
000100  2801              CMP      r0,#1
000102  d100              BNE      |L1.262|
000104  e000              B        |L1.264|
                  |L1.262|
000106  2000              MOVS     r0,#0
                  |L1.264|
000108  4304              ORRS     r4,r4,r0
00010a  d006              BEQ      |L1.282|
;;;157    			
;;;158    			sys_timeout(500, fix_hardware_bug, NULL);	
00010c  2200              MOVS     r2,#0
00010e  49c7              LDR      r1,|L1.1068|
000110  f44f70fa          MOV      r0,#0x1f4
000114  f7fffffe          BL       sys_timeout
000118  e06a              B        |L1.496|
                  |L1.282|
;;;159    		}else{
;;;160    			
;;;161    			sys_untimeout(power_on_timeout, NULL);
00011a  2100              MOVS     r1,#0
00011c  48c4              LDR      r0,|L1.1072|
00011e  f7fffffe          BL       sys_untimeout
;;;162    			/*init PCM1804 must after DSP boot*/
;;;163    			PCM1804_RST(0);
000122  bf00              NOP      
000124  2200              MOVS     r2,#0
000126  2110              MOVS     r1,#0x10
000128  48c2              LDR      r0,|L1.1076|
00012a  f7fffffe          BL       GPIOPinWrite
00012e  bf00              NOP      
;;;164    			bsp_delay_ms(100);
000130  2064              MOVS     r0,#0x64
000132  f7fffffe          BL       bsp_delay_ms
;;;165    			PCM1804_RST(1);
000136  bf00              NOP      
000138  2210              MOVS     r2,#0x10
00013a  4611              MOV      r1,r2
00013c  48bd              LDR      r0,|L1.1076|
00013e  f7fffffe          BL       GPIOPinWrite
000142  bf00              NOP      
;;;166    			
;;;167    			AMP_ENABLE();
000144  bf00              NOP      
000146  2201              MOVS     r2,#1
000148  4611              MOV      r1,r2
00014a  48bb              LDR      r0,|L1.1080|
00014c  f7fffffe          BL       GPIOPinWrite
000150  bf00              NOP      
;;;168    			
;;;169    			bsp_delay_ms(500);
000152  f44f70fa          MOV      r0,#0x1f4
000156  f7fffffe          BL       bsp_delay_ms
;;;170    			AMP_MUTE_OFF();
00015a  bf00              NOP      
00015c  2220              MOVS     r2,#0x20
00015e  4611              MOV      r1,r2
000160  48aa              LDR      r0,|L1.1036|
000162  f7fffffe          BL       GPIOPinWrite
000166  bf00              NOP      
;;;171    			
;;;172    			bsp_delay_ms(100);
000168  2064              MOVS     r0,#0x64
00016a  f7fffffe          BL       bsp_delay_ms
;;;173    			RCA_OUT_DSP();
00016e  bf00              NOP      
000170  2240              MOVS     r2,#0x40
000172  4611              MOV      r1,r2
000174  f04f2040          MOV      r0,#0x40004000
000178  f7fffffe          BL       GPIOPinWrite
00017c  bf00              NOP      
;;;174    			BAN_OUT_DSP();
00017e  bf00              NOP      
000180  2280              MOVS     r2,#0x80
000182  4611              MOV      r1,r2
000184  f04f2040          MOV      r0,#0x40004000
000188  f7fffffe          BL       GPIOPinWrite
00018c  bf00              NOP      
;;;175    			RCA_OUT_MUTE_OFF();
00018e  bf00              NOP      
000190  2204              MOVS     r2,#4
000192  4611              MOV      r1,r2
000194  48a7              LDR      r0,|L1.1076|
000196  f7fffffe          BL       GPIOPinWrite
00019a  bf00              NOP      
;;;176    			BAN_OUT_MUTE_OFF();
00019c  bf00              NOP      
00019e  2202              MOVS     r2,#2
0001a0  4611              MOV      r1,r2
0001a2  48a4              LDR      r0,|L1.1076|
0001a4  f7fffffe          BL       GPIOPinWrite
0001a8  bf00              NOP      
;;;177    			OUTPUT_M_MUTE_OFF();
0001aa  bf00              NOP      
0001ac  2201              MOVS     r2,#1
0001ae  4611              MOV      r1,r2
0001b0  48a2              LDR      r0,|L1.1084|
0001b2  f7fffffe          BL       GPIOPinWrite
0001b6  bf00              NOP      
;;;178    			
;;;179    			SYS_TRACE("out of fix_hardware_bug\r\n");
0001b8  a0a1              ADR      r0,|L1.1088|
0001ba  f7fffffe          BL       s_printf
;;;180    			gSystem_t->is_out_of_fix_hardware = true;
0001be  2001              MOVS     r0,#1
0001c0  49a6              LDR      r1,|L1.1116|
0001c2  6809              LDR      r1,[r1,#0]  ; gSystem_t
0001c4  f8810050          STRB     r0,[r1,#0x50]
;;;181    			
;;;182    			/*update protection event detect*/
;;;183    	    update_all_protect_state();
0001c8  f7fffffe          BL       update_all_protect_state
;;;184    	    gSystem_t->protect_bitmap = 0;
0001cc  2000              MOVS     r0,#0
0001ce  49a3              LDR      r1,|L1.1116|
0001d0  6809              LDR      r1,[r1,#0]  ; gSystem_t
0001d2  f881004a          STRB     r0,[r1,#0x4a]
;;;185    	    gSystem_t->is_in_protection = false;
0001d6  49a1              LDR      r1,|L1.1116|
0001d8  6809              LDR      r1,[r1,#0]  ; gSystem_t
0001da  f881004e          STRB     r0,[r1,#0x4e]
;;;186    	    /*when set the new state, the protection detection will be on the run*/
;;;187    	    gSystem_t->status = STATUS_WORKING;   
0001de  2002              MOVS     r0,#2
0001e0  499e              LDR      r1,|L1.1116|
0001e2  6809              LDR      r1,[r1,#0]  ; gSystem_t
0001e4  f8810053          STRB     r0,[r1,#0x53]
;;;188    			dis_send_msg(DIS_WELCOME, MENU_NUM);
0001e8  2116              MOVS     r1,#0x16
0001ea  2000              MOVS     r0,#0
0001ec  f7fffffe          BL       dis_send_msg
                  |L1.496|
;;;189    		}
;;;190    }
0001f0  bd70              POP      {r4-r6,pc}
;;;191    
                          ENDP

                  sys_master_vol_set PROC
;;;1033   
;;;1034   void sys_master_vol_set(sys_state_t *sys)
0001f2  e92d41f0          PUSH     {r4-r8,lr}
;;;1035   {
0001f6  4605              MOV      r5,r0
;;;1036   	int gain;
;;;1037   	int dsp_gain;
;;;1038   	int njw_gain;
;;;1039   	uint8 vol;
;;;1040   	
;;;1041   	if(sys->is_mute){
0001f8  f8950049          LDRB     r0,[r5,#0x49]
0001fc  b120              CBZ      r0,|L1.520|
;;;1042   		dsp_master_vol_set(MASTER_VOL_MUTE_REG_VALUE);
0001fe  f06f0028          MVN      r0,#0x28
000202  f7fffffe          BL       dsp_master_vol_set
000206  e027              B        |L1.600|
                  |L1.520|
;;;1043   	}else{
;;;1044   		gain = VOLUME_OFFSET_BETWEEN_VALUE_AND_GAIN(sys->input_gain) + sys->master_vol;
000208  69e8              LDR      r0,[r5,#0x1c]
00020a  3029              ADDS     r0,r0,#0x29
00020c  6969              LDR      r1,[r5,#0x14]
00020e  eb000801          ADD      r8,r0,r1
;;;1045   	
;;;1046   		dsp_gain = VOLUME_GAIN_IN_DSP(gain);
000212  f1a80423          SUB      r4,r8,#0x23
;;;1047   		SYS_TRACE("set dsp_gain to %d\r\n", dsp_gain);
000216  4621              MOV      r1,r4
000218  a091              ADR      r0,|L1.1120|
00021a  f7fffffe          BL       s_printf
;;;1048   		
;;;1049   	
;;;1050   		if(dsp_gain > VOLUME_GAIN_IN_DSP_MAX){
00021e  2c06              CMP      r4,#6
000220  dd12              BLE      |L1.584|
;;;1051   			njw_gain = dsp_gain - VOLUME_GAIN_IN_DSP_MAX + VOLUME_GAIN_IN_1195_DEFAULT;
000222  4626              MOV      r6,r4
;;;1052   			SYS_TRACE("set njw_gain to %d\r\n", njw_gain);
000224  4631              MOV      r1,r6
000226  a094              ADR      r0,|L1.1144|
000228  f7fffffe          BL       s_printf
;;;1053   			vol = NJW1195_0DB_GAIN - (njw_gain * 2);
00022c  2040              MOVS     r0,#0x40
00022e  eba00046          SUB      r0,r0,r6,LSL #1
000232  b2c7              UXTB     r7,r0
;;;1054   		  SYS_TRACE("njw1195_volume_set to %d\r\n", vol);
000234  4639              MOV      r1,r7
000236  a096              ADR      r0,|L1.1168|
000238  f7fffffe          BL       s_printf
;;;1055   		  njw1195_volume_set(vol ,SUB_CHANNEL);
00023c  2100              MOVS     r1,#0
00023e  4638              MOV      r0,r7
000240  f7fffffe          BL       njw1195_volume_set
;;;1056   			
;;;1057   			dsp_gain = VOLUME_GAIN_IN_DSP_MAX;
000244  2406              MOVS     r4,#6
000246  e004              B        |L1.594|
                  |L1.584|
;;;1058   		}else{
;;;1059   			vol = NJW1195_0DB_GAIN - (VOLUME_GAIN_IN_1195_DEFAULT * 2);
000248  2734              MOVS     r7,#0x34
;;;1060   			njw1195_volume_set(vol ,SUB_CHANNEL);
00024a  2100              MOVS     r1,#0
00024c  4638              MOV      r0,r7
00024e  f7fffffe          BL       njw1195_volume_set
                  |L1.594|
;;;1061   		}
;;;1062   	
;;;1063   		dsp_master_vol_set(dsp_gain);
000252  4620              MOV      r0,r4
000254  f7fffffe          BL       dsp_master_vol_set
                  |L1.600|
;;;1064   	  
;;;1065   	}
;;;1066   	
;;;1067   }
000258  e8bd81f0          POP      {r4-r8,pc}
;;;1068   
                          ENDP

                  sys_input_init PROC
;;;874    
;;;875    int sys_input_init(void)
00025c  b570              PUSH     {r4-r6,lr}
;;;876    {
;;;877    	njw1194_channel_t cha;
;;;878    	uint8 vol;
;;;879    	
;;;880    	bsp_delay_ms(3000);
00025e  f64030b8          MOV      r0,#0xbb8
000262  f7fffffe          BL       bsp_delay_ms
;;;881    	
;;;882    	if(gSystem_t->src == BALANCE){
000266  487d              LDR      r0,|L1.1116|
000268  6800              LDR      r0,[r0,#0]  ; gSystem_t
00026a  7e00              LDRB     r0,[r0,#0x18]
00026c  b908              CBNZ     r0,|L1.626|
;;;883    		cha = NJW_BALANCE;
00026e  2401              MOVS     r4,#1
000270  e00c              B        |L1.652|
                  |L1.626|
;;;884    	}else if(gSystem_t->src == RCA){
000272  487a              LDR      r0,|L1.1116|
000274  6800              LDR      r0,[r0,#0]  ; gSystem_t
000276  7e00              LDRB     r0,[r0,#0x18]
000278  2801              CMP      r0,#1
00027a  d101              BNE      |L1.640|
;;;885    		cha = NJW_RCA;
00027c  2402              MOVS     r4,#2
00027e  e005              B        |L1.652|
                  |L1.640|
;;;886    	}else if(gSystem_t->src == SPEAHER){
000280  4876              LDR      r0,|L1.1116|
000282  6800              LDR      r0,[r0,#0]  ; gSystem_t
000284  7e00              LDRB     r0,[r0,#0x18]
000286  2802              CMP      r0,#2
000288  d100              BNE      |L1.652|
;;;887    		cha = NJW_SPEAK;
00028a  2403              MOVS     r4,#3
                  |L1.652|
;;;888    	}
;;;889    	
;;;890    	njw1195_input_select(cha);
00028c  4620              MOV      r0,r4
00028e  f7fffffe          BL       njw1195_input_select
;;;891    	
;;;892    	vol = NJW1195_0DB_GAIN - (VOLUME_GAIN_IN_1195_DEFAULT * 2);
000292  2534              MOVS     r5,#0x34
;;;893    	njw1195_volume_set(vol, SUB_CHANNEL);
000294  2100              MOVS     r1,#0
000296  4628              MOV      r0,r5
000298  f7fffffe          BL       njw1195_volume_set
;;;894    	njw1195_volume_set(NJW1195_4_5DB_GAIN, LINEOUT_CHANNEL);
00029c  2101              MOVS     r1,#1
00029e  2038              MOVS     r0,#0x38
0002a0  f7fffffe          BL       njw1195_volume_set
;;;895    	
;;;896    	SYS_TRACE("sys_input_init done[%d]\r\n", cha);
0002a4  4621              MOV      r1,r4
0002a6  a081              ADR      r0,|L1.1196|
0002a8  f7fffffe          BL       s_printf
;;;897    	
;;;898    	return 0;
0002ac  2000              MOVS     r0,#0
;;;899    }
0002ae  bd70              POP      {r4-r6,pc}
;;;900    
                          ENDP

                  fix_power_bug PROC
;;;191    
;;;192    static void fix_power_bug(void *arg)
0002b0  b510              PUSH     {r4,lr}
;;;193    {
0002b2  4604              MOV      r4,r0
;;;194    	
;;;195      if(IS_POWER_READY){
0002b4  2110              MOVS     r1,#0x10
0002b6  4884              LDR      r0,|L1.1224|
0002b8  f7fffffe          BL       GPIO_ReadSinglePin
0002bc  2801              CMP      r0,#1
0002be  d100              BNE      |L1.706|
0002c0  e000              B        |L1.708|
                  |L1.706|
0002c2  2000              MOVS     r0,#0
                  |L1.708|
0002c4  b308              CBZ      r0,|L1.778|
;;;196    		SYS_TRACE("power ready now\r\n");
0002c6  a081              ADR      r0,|L1.1228|
0002c8  f7fffffe          BL       s_printf
;;;197    		bsp_delay_ms(100);
0002cc  2064              MOVS     r0,#0x64
0002ce  f7fffffe          BL       bsp_delay_ms
;;;198    		CS4251X_Init();
0002d2  f7fffffe          BL       CS4251X_Init
;;;199    		bsp_delay_ms(5);
0002d6  2005              MOVS     r0,#5
0002d8  f7fffffe          BL       bsp_delay_ms
;;;200    		sys_input_init();
0002dc  f7fffffe          BL       sys_input_init
;;;201    		
;;;202    		bsp_delay_ms(100);
0002e0  2064              MOVS     r0,#0x64
0002e2  f7fffffe          BL       bsp_delay_ms
;;;203    		sys_master_vol_set(gSystem_t);
0002e6  485d              LDR      r0,|L1.1116|
0002e8  6800              LDR      r0,[r0,#0]  ; gSystem_t
0002ea  f7fffffe          BL       sys_master_vol_set
;;;204    		bsp_delay_ms(100);
0002ee  2064              MOVS     r0,#0x64
0002f0  f7fffffe          BL       bsp_delay_ms
;;;205    		/*since the hardwrare will be in protection mode, so unmute the AMP someime later*/
;;;206    		sys_untimeout(fix_hardware_bug, NULL);
0002f4  2100              MOVS     r1,#0
0002f6  484d              LDR      r0,|L1.1068|
0002f8  f7fffffe          BL       sys_untimeout
;;;207    		sys_timeout(500, fix_hardware_bug, NULL);	
0002fc  2200              MOVS     r2,#0
0002fe  494b              LDR      r1,|L1.1068|
000300  f44f70fa          MOV      r0,#0x1f4
000304  f7fffffe          BL       sys_timeout
000308  e008              B        |L1.796|
                  |L1.778|
;;;208    		
;;;209    	}else{
;;;210    		SYS_TRACE("wait for power ready...\r\n");
00030a  a075              ADR      r0,|L1.1248|
00030c  f7fffffe          BL       s_printf
;;;211    		sys_timeout(500, fix_power_bug, NULL);	
000310  2200              MOVS     r2,#0
000312  497a              LDR      r1,|L1.1276|
000314  f44f70fa          MOV      r0,#0x1f4
000318  f7fffffe          BL       sys_timeout
                  |L1.796|
;;;212    	}
;;;213    		
;;;214    
;;;215    }
00031c  bd10              POP      {r4,pc}
;;;216    
                          ENDP

                  fix_power_off_bug PROC
;;;230    
;;;231    static void fix_power_off_bug(void *arg)
00031e  b510              PUSH     {r4,lr}
;;;232    {
000320  4604              MOV      r4,r0
;;;233    	SYS_TRACE("in fix_power_off_bug\r\n");
000322  a077              ADR      r0,|L1.1280|
000324  f7fffffe          BL       s_printf
;;;234    	
;;;235    	OUTPUT_M_MUTE_OFF();
000328  bf00              NOP      
00032a  2201              MOVS     r2,#1
00032c  4611              MOV      r1,r2
00032e  4843              LDR      r0,|L1.1084|
000330  f7fffffe          BL       GPIOPinWrite
000334  bf00              NOP      
;;;236    }
000336  bd10              POP      {r4,pc}
;;;237    
                          ENDP

                  sys_lcd_bright_change PROC
;;;766    
;;;767    void sys_lcd_bright_change(sys_state_t *cur)
000338  b510              PUSH     {r4,lr}
;;;768    {
00033a  4604              MOV      r4,r0
;;;769    	if(cur->bright == BRI_LOW){
00033c  7ea0              LDRB     r0,[r4,#0x1a]
00033e  b918              CBNZ     r0,|L1.840|
;;;770    		bsp_lcd_bright_control(2);
000340  2002              MOVS     r0,#2
000342  f7fffffe          BL       bsp_lcd_bright_control
000346  e00c              B        |L1.866|
                  |L1.840|
;;;771    	}else if(cur->bright == BRI_MEDIUM){
000348  7ea0              LDRB     r0,[r4,#0x1a]
00034a  2801              CMP      r0,#1
00034c  d103              BNE      |L1.854|
;;;772    		bsp_lcd_bright_control(30);
00034e  201e              MOVS     r0,#0x1e
000350  f7fffffe          BL       bsp_lcd_bright_control
000354  e005              B        |L1.866|
                  |L1.854|
;;;773    	}else if(cur->bright == BRI_HIGH){
000356  7ea0              LDRB     r0,[r4,#0x1a]
000358  2802              CMP      r0,#2
00035a  d102              BNE      |L1.866|
;;;774    		bsp_lcd_bright_control(95);
00035c  205f              MOVS     r0,#0x5f
00035e  f7fffffe          BL       bsp_lcd_bright_control
                  |L1.866|
;;;775    	}
;;;776    }
000362  bd10              POP      {r4,pc}
;;;777    
                          ENDP

                  sys_bled_flash PROC
;;;356    
;;;357    static void sys_bled_flash(void *arg)
000364  b510              PUSH     {r4,lr}
;;;358    {
000366  4604              MOV      r4,r0
;;;359    	static uint8 j = 1;
;;;360    	
;;;361    	if(j){
000368  486b              LDR      r0,|L1.1304|
00036a  7800              LDRB     r0,[r0,#0]  ; j
00036c  b198              CBZ      r0,|L1.918|
;;;362    		LED_OFF();
00036e  bf00              NOP      
000370  bf00              NOP      
000372  2280              MOVS     r2,#0x80
000374  4611              MOV      r1,r2
000376  4869              LDR      r0,|L1.1308|
000378  f7fffffe          BL       GPIOPinWrite
00037c  bf00              NOP      
00037e  bf00              NOP      
000380  2240              MOVS     r2,#0x40
000382  4611              MOV      r1,r2
000384  4865              LDR      r0,|L1.1308|
000386  f7fffffe          BL       GPIOPinWrite
00038a  bf00              NOP      
00038c  bf00              NOP      
;;;363    		j = 0;
00038e  2000              MOVS     r0,#0
000390  4961              LDR      r1,|L1.1304|
000392  7008              STRB     r0,[r1,#0]
000394  e012              B        |L1.956|
                  |L1.918|
;;;364    	}else{
;;;365    		BLED_SET(1);
000396  bf00              NOP      
000398  bf00              NOP      
00039a  2200              MOVS     r2,#0
00039c  2180              MOVS     r1,#0x80
00039e  485f              LDR      r0,|L1.1308|
0003a0  f7fffffe          BL       GPIOPinWrite
0003a4  bf00              NOP      
0003a6  bf00              NOP      
0003a8  2240              MOVS     r2,#0x40
0003aa  4611              MOV      r1,r2
0003ac  485b              LDR      r0,|L1.1308|
0003ae  f7fffffe          BL       GPIOPinWrite
0003b2  bf00              NOP      
0003b4  bf00              NOP      
;;;366    		j = 1;
0003b6  2001              MOVS     r0,#1
0003b8  4957              LDR      r1,|L1.1304|
0003ba  7008              STRB     r0,[r1,#0]
                  |L1.956|
;;;367    	}
;;;368    	
;;;369    	if(gSystem_t->status == STATUS_STANDBY){
0003bc  4827              LDR      r0,|L1.1116|
0003be  6800              LDR      r0,[r0,#0]  ; gSystem_t
0003c0  f8900053          LDRB     r0,[r0,#0x53]
0003c4  b930              CBNZ     r0,|L1.980|
;;;370    		sys_timeout(500, sys_bled_flash, NULL);
0003c6  2200              MOVS     r2,#0
0003c8  4955              LDR      r1,|L1.1312|
0003ca  f44f70fa          MOV      r0,#0x1f4
0003ce  f7fffffe          BL       sys_timeout
0003d2  e0ac              B        |L1.1326|
                  |L1.980|
;;;371    	}else if(gSystem_t->status == STATUS_WORKING || gSystem_t->status == STATUS_INITING){
0003d4  4821              LDR      r0,|L1.1116|
0003d6  6800              LDR      r0,[r0,#0]  ; gSystem_t
0003d8  f8900053          LDRB     r0,[r0,#0x53]
0003dc  2802              CMP      r0,#2
0003de  d005              BEQ      |L1.1004|
0003e0  481e              LDR      r0,|L1.1116|
0003e2  6800              LDR      r0,[r0,#0]  ; gSystem_t
0003e4  f8900053          LDRB     r0,[r0,#0x53]
0003e8  2801              CMP      r0,#1
0003ea  d10b              BNE      |L1.1028|
                  |L1.1004|
;;;372    		BLED_SET(1);
0003ec  bf00              NOP      
0003ee  bf00              NOP      
0003f0  2200              MOVS     r2,#0
0003f2  2180              MOVS     r1,#0x80
0003f4  4849              LDR      r0,|L1.1308|
0003f6  f7fffffe          BL       GPIOPinWrite
0003fa  bf00              NOP      
0003fc  bf00              NOP      
0003fe  2240              MOVS     r2,#0x40
000400  4611              MOV      r1,r2
000402  e08f              B        |L1.1316|
                  |L1.1028|
000404  e093              B        |L1.1326|
000406  0000              DCW      0x0000
                  |L1.1032|
                          DCD      sys_init_array
                  |L1.1036|
                          DCD      0x40064000
                  |L1.1040|
                          DCD      0x40065000
                  |L1.1044|
000414  696e2066          DCB      "in fix_hardware_bug\r\n",0
000418  69785f68
00041c  61726477
000420  6172655f
000424  6275670d
000428  0a00    
00042a  00                DCB      0
00042b  00                DCB      0
                  |L1.1068|
                          DCD      fix_hardware_bug
                  |L1.1072|
                          DCD      power_on_timeout
                  |L1.1076|
                          DCD      0x40025000
                  |L1.1080|
                          DCD      0x4003d000
                  |L1.1084|
                          DCD      0x40026000
                  |L1.1088|
000440  6f757420          DCB      "out of fix_hardware_bug\r\n",0
000444  6f662066
000448  69785f68
00044c  61726477
000450  6172655f
000454  6275670d
000458  0a00    
00045a  00                DCB      0
00045b  00                DCB      0
                  |L1.1116|
                          DCD      gSystem_t
                  |L1.1120|
000460  73657420          DCB      "set dsp_gain to %d\r\n",0
000464  6473705f
000468  6761696e
00046c  20746f20
000470  25640d0a
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L1.1144|
000478  73657420          DCB      "set njw_gain to %d\r\n",0
00047c  6e6a775f
000480  6761696e
000484  20746f20
000488  25640d0a
00048c  00      
00048d  00                DCB      0
00048e  00                DCB      0
00048f  00                DCB      0
                  |L1.1168|
000490  6e6a7731          DCB      "njw1195_volume_set to %d\r\n",0
000494  3139355f
000498  766f6c75
00049c  6d655f73
0004a0  65742074
0004a4  6f202564
0004a8  0d0a00  
0004ab  00                DCB      0
                  |L1.1196|
0004ac  7379735f          DCB      "sys_input_init done[%d]\r\n",0
0004b0  696e7075
0004b4  745f696e
0004b8  69742064
0004bc  6f6e655b
0004c0  25645d0d
0004c4  0a00    
0004c6  00                DCB      0
0004c7  00                DCB      0
                  |L1.1224|
                          DCD      0x40062000
                  |L1.1228|
0004cc  706f7765          DCB      "power ready now\r\n",0
0004d0  72207265
0004d4  61647920
0004d8  6e6f770d
0004dc  0a00    
0004de  00                DCB      0
0004df  00                DCB      0
                  |L1.1248|
0004e0  77616974          DCB      "wait for power ready...\r\n",0
0004e4  20666f72
0004e8  20706f77
0004ec  65722072
0004f0  65616479
0004f4  2e2e2e0d
0004f8  0a00    
0004fa  00                DCB      0
0004fb  00                DCB      0
                  |L1.1276|
                          DCD      fix_power_bug
                  |L1.1280|
000500  696e2066          DCB      "in fix_power_off_bug\r\n",0
000504  69785f70
000508  6f776572
00050c  5f6f6666
000510  5f627567
000514  0d0a00  
000517  00                DCB      0
                  |L1.1304|
                          DCD      j
                  |L1.1308|
                          DCD      0x40006000
                  |L1.1312|
                          DCD      sys_bled_flash
                  |L1.1316|
000524  48fc              LDR      r0,|L1.2328|
000526  f7fffffe          BL       GPIOPinWrite
00052a  bf00              NOP      
00052c  bf00              NOP      
                  |L1.1326|
;;;373    	}
;;;374    }
00052e  bd10              POP      {r4,pc}
;;;375    
                          ENDP

                  sys_power_on_handler PROC
;;;237    
;;;238    void sys_power_on_handler(sys_state_t *sys)
000530  b510              PUSH     {r4,lr}
;;;239    {
000532  4604              MOV      r4,r0
;;;240    	sys_untimeout(fix_power_off_bug, NULL);
000534  2100              MOVS     r1,#0
000536  48f9              LDR      r0,|L1.2332|
000538  f7fffffe          BL       sys_untimeout
;;;241    	
;;;242    	/*first do hardware power on*/
;;;243    	AC_STANDBY(1);
00053c  bf00              NOP      
00053e  2202              MOVS     r2,#2
000540  4611              MOV      r1,r2
000542  48f7              LDR      r0,|L1.2336|
000544  f7fffffe          BL       GPIOPinWrite
000548  bf00              NOP      
;;;244    	DC5V_ON();
00054a  bf00              NOP      
00054c  2204              MOVS     r2,#4
00054e  4611              MOV      r1,r2
000550  48f3              LDR      r0,|L1.2336|
000552  f7fffffe          BL       GPIOPinWrite
000556  bf00              NOP      
;;;245    	BLED_SET(1);
000558  bf00              NOP      
00055a  bf00              NOP      
00055c  2200              MOVS     r2,#0
00055e  2180              MOVS     r1,#0x80
000560  48ed              LDR      r0,|L1.2328|
000562  f7fffffe          BL       GPIOPinWrite
000566  bf00              NOP      
000568  bf00              NOP      
00056a  2240              MOVS     r2,#0x40
00056c  4611              MOV      r1,r2
00056e  48ea              LDR      r0,|L1.2328|
000570  f7fffffe          BL       GPIOPinWrite
000574  bf00              NOP      
000576  bf00              NOP      
;;;246    	
;;;247    	/*add for fix repeat power on bug from v0.4.3*/
;;;248    	sys->status = STATUS_INITING;
000578  2001              MOVS     r0,#1
00057a  f8840053          STRB     r0,[r4,#0x53]
;;;249    	
;;;250    	OUTPUT_M_MUTE_ON();
00057e  bf00              NOP      
000580  2200              MOVS     r2,#0
000582  2101              MOVS     r1,#1
000584  48e7              LDR      r0,|L1.2340|
000586  f7fffffe          BL       GPIOPinWrite
00058a  bf00              NOP      
;;;251    	
;;;252    	sys_untimeout(sys_bled_flash, NULL);
00058c  2100              MOVS     r1,#0
00058e  48e6              LDR      r0,|L1.2344|
000590  f7fffffe          BL       sys_untimeout
;;;253    	
;;;254    	bsp_delay_ms(100);
000594  2064              MOVS     r0,#0x64
000596  f7fffffe          BL       bsp_delay_ms
;;;255    	lcd_init();
00059a  f7fffffe          BL       lcd_init
;;;256    
;;;257      sys_lcd_bright_change(sys);
00059e  4620              MOV      r0,r4
0005a0  f7fffffe          BL       sys_lcd_bright_change
;;;258    	sys->is_dis_timeout = false;
0005a4  2000              MOVS     r0,#0
0005a6  f8840051          STRB     r0,[r4,#0x51]
;;;259    	//OUTPUT_M_MUTE_OFF();
;;;260    	/*do system power on routine*/
;;;261    	power_on_routine();
0005aa  f7fffffe          BL       power_on_routine
;;;262    		
;;;263    	if(sys->method == AUDIO){
0005ae  7ce0              LDRB     r0,[r4,#0x13]
0005b0  2801              CMP      r0,#1
0005b2  d103              BNE      |L1.1468|
;;;264    		update_detect_state(DETECT_AUDIO);
0005b4  2000              MOVS     r0,#0
0005b6  f7fffffe          BL       update_detect_state
0005ba  e005              B        |L1.1480|
                  |L1.1468|
;;;265    	}else if(sys->method == TRIGGER){
0005bc  7ce0              LDRB     r0,[r4,#0x13]
0005be  2802              CMP      r0,#2
0005c0  d102              BNE      |L1.1480|
;;;266    		update_detect_state(DETECT_TRIGGER);
0005c2  2001              MOVS     r0,#1
0005c4  f7fffffe          BL       update_detect_state
                  |L1.1480|
;;;267    	}
;;;268    	
;;;269    //	/*update protection event detect*/
;;;270    //	update_all_protect_state();
;;;271    //	sys->protect_bitmap = 0;
;;;272    //	sys->is_in_protection = false;
;;;273    //	/*when set the new state, the protection detection will be on the run*/
;;;274    //	sys->status = STATUS_WORKING;
;;;275    	sys->is_out_of_fix_hardware = false;
0005c8  2000              MOVS     r0,#0
0005ca  f8840050          STRB     r0,[r4,#0x50]
;;;276    
;;;277    	sys_untimeout(power_on_timeout, NULL);
0005ce  2100              MOVS     r1,#0
0005d0  48d6              LDR      r0,|L1.2348|
0005d2  f7fffffe          BL       sys_untimeout
;;;278    	sys_timeout(1000*30, power_on_timeout, NULL);
0005d6  2200              MOVS     r2,#0
0005d8  49d4              LDR      r1,|L1.2348|
0005da  f2475030          MOV      r0,#0x7530
0005de  f7fffffe          BL       sys_timeout
;;;279    	
;;;280    	sys_untimeout(fix_power_bug, NULL);
0005e2  2100              MOVS     r1,#0
0005e4  48d2              LDR      r0,|L1.2352|
0005e6  f7fffffe          BL       sys_untimeout
;;;281      sys_timeout(500, fix_power_bug, NULL);	
0005ea  2200              MOVS     r2,#0
0005ec  49d0              LDR      r1,|L1.2352|
0005ee  f44f70fa          MOV      r0,#0x1f4
0005f2  f7fffffe          BL       sys_timeout
;;;282    	
;;;283    }
0005f6  bd10              POP      {r4,pc}
;;;284    
                          ENDP

                  sys_power_off_handler PROC
;;;286    
;;;287    void sys_power_off_handler(sys_state_t *sys)
0005f8  b510              PUSH     {r4,lr}
;;;288    {
0005fa  4604              MOV      r4,r0
;;;289    	bsp_lcd_bright_control(0);
0005fc  2000              MOVS     r0,#0
0005fe  f7fffffe          BL       bsp_lcd_bright_control
;;;290    	OUTPUT_M_MUTE_ON();
000602  bf00              NOP      
000604  2200              MOVS     r2,#0
000606  2101              MOVS     r1,#1
000608  48c6              LDR      r0,|L1.2340|
00060a  f7fffffe          BL       GPIOPinWrite
00060e  bf00              NOP      
;;;291    	
;;;292      RCA_OUT_BYPASS();
000610  bf00              NOP      
000612  2200              MOVS     r2,#0
000614  2140              MOVS     r1,#0x40
000616  f04f2040          MOV      r0,#0x40004000
00061a  f7fffffe          BL       GPIOPinWrite
00061e  bf00              NOP      
;;;293    	BAN_OUT_BYPASS();
000620  bf00              NOP      
000622  2200              MOVS     r2,#0
000624  2180              MOVS     r1,#0x80
000626  f04f2040          MOV      r0,#0x40004000
00062a  f7fffffe          BL       GPIOPinWrite
00062e  bf00              NOP      
;;;294    	RCA_OUT_MUTE_ON();
000630  bf00              NOP      
000632  2200              MOVS     r2,#0
000634  2104              MOVS     r1,#4
000636  48bf              LDR      r0,|L1.2356|
000638  f7fffffe          BL       GPIOPinWrite
00063c  bf00              NOP      
;;;295    	BAN_OUT_MUTE_ON();
00063e  bf00              NOP      
000640  2200              MOVS     r2,#0
000642  2102              MOVS     r1,#2
000644  48bb              LDR      r0,|L1.2356|
000646  f7fffffe          BL       GPIOPinWrite
00064a  bf00              NOP      
;;;296    	AMP_MUTE_ON();
00064c  bf00              NOP      
00064e  2200              MOVS     r2,#0
000650  2120              MOVS     r1,#0x20
000652  48b3              LDR      r0,|L1.2336|
000654  f7fffffe          BL       GPIOPinWrite
000658  bf00              NOP      
;;;297     
;;;298    	bsp_delay_ms(100);
00065a  2064              MOVS     r0,#0x64
00065c  f7fffffe          BL       bsp_delay_ms
;;;299    	
;;;300    	AMP_DISENABLE();
000660  bf00              NOP      
000662  2200              MOVS     r2,#0
000664  2101              MOVS     r1,#1
000666  48b4              LDR      r0,|L1.2360|
000668  f7fffffe          BL       GPIOPinWrite
00066c  bf00              NOP      
;;;301    	
;;;302    	njw1195_channel_mute();
00066e  f7fffffe          BL       njw1195_channel_mute
;;;303    	bsp_delay_ms(500);
000672  f44f70fa          MOV      r0,#0x1f4
000676  f7fffffe          BL       bsp_delay_ms
;;;304    	DC5V_OFF();
00067a  bf00              NOP      
00067c  2200              MOVS     r2,#0
00067e  2104              MOVS     r1,#4
000680  48a7              LDR      r0,|L1.2336|
000682  f7fffffe          BL       GPIOPinWrite
000686  bf00              NOP      
;;;305    	AC_STANDBY(0);
000688  bf00              NOP      
00068a  2200              MOVS     r2,#0
00068c  2102              MOVS     r1,#2
00068e  48a4              LDR      r0,|L1.2336|
000690  f7fffffe          BL       GPIOPinWrite
000694  bf00              NOP      
;;;306    	RLED_SET(1);
000696  bf00              NOP      
000698  bf00              NOP      
00069a  2280              MOVS     r2,#0x80
00069c  4611              MOV      r1,r2
00069e  489e              LDR      r0,|L1.2328|
0006a0  f7fffffe          BL       GPIOPinWrite
0006a4  bf00              NOP      
0006a6  bf00              NOP      
0006a8  2200              MOVS     r2,#0
0006aa  2140              MOVS     r1,#0x40
0006ac  489a              LDR      r0,|L1.2328|
0006ae  f7fffffe          BL       GPIOPinWrite
0006b2  bf00              NOP      
0006b4  bf00              NOP      
;;;307    
;;;308    	bsp_delay_ms(500);
0006b6  f44f70fa          MOV      r0,#0x1f4
0006ba  f7fffffe          BL       bsp_delay_ms
;;;309    	gSystem_t->is_trigger_off_need_delay = false;
0006be  2000              MOVS     r0,#0
0006c0  499e              LDR      r1,|L1.2364|
0006c2  6809              LDR      r1,[r1,#0]  ; gSystem_t
0006c4  f881004d          STRB     r0,[r1,#0x4d]
;;;310    	sys_untimeout(dis_timeout_handler, NULL);
0006c8  2100              MOVS     r1,#0
0006ca  489d              LDR      r0,|L1.2368|
0006cc  f7fffffe          BL       sys_untimeout
;;;311    	
;;;312    	sys->status = STATUS_STANDBY;
0006d0  2000              MOVS     r0,#0
0006d2  f8840053          STRB     r0,[r4,#0x53]
;;;313    	
;;;314    	sys_timeout(1000*10, fix_power_off_bug, NULL);	
0006d6  2200              MOVS     r2,#0
0006d8  4990              LDR      r1,|L1.2332|
0006da  f2427010          MOV      r0,#0x2710
0006de  f7fffffe          BL       sys_timeout
;;;315    }
0006e2  bd10              POP      {r4,pc}
;;;316    
                          ENDP

                  sys_shutdown_handler PROC
;;;317    static void sys_shutdown_handler(sys_state_t *sys)
0006e4  b510              PUSH     {r4,lr}
;;;318    {
0006e6  4604              MOV      r4,r0
;;;319    	if(sys->status == STATUS_SHUTDOWN) return;
0006e8  f8940053          LDRB     r0,[r4,#0x53]
0006ec  2803              CMP      r0,#3
0006ee  d100              BNE      |L1.1778|
                  |L1.1776|
;;;320    	
;;;321    	SYS_TRACE("will shut down\r\n");
;;;322    	
;;;323    	njw1195_channel_mute();
;;;324    	RCA_OUT_BYPASS();
;;;325    	BAN_OUT_BYPASS();
;;;326    	eeprom_write(SYS_LOW_POWER_FLAG_ADDRESS, (uint8 *)"LOWPOWER", strlen("LOWPOWER"));
;;;327    	bsp_delay_ms(100);
;;;328    
;;;329    	sys->status = STATUS_SHUTDOWN;
;;;330    	SysCtlPeripheralEnable(SYSCTL_PERIPH_WDOG0);
;;;331    	WatchdogReloadSet(WATCHDOG0_BASE, 100);
;;;332    	WatchdogResetEnable(WATCHDOG0_BASE);
;;;333    	WatchdogEnable(WATCHDOG0_BASE);
;;;334    }
0006f0  bd10              POP      {r4,pc}
                  |L1.1778|
0006f2  a094              ADR      r0,|L1.2372|
0006f4  f7fffffe          BL       s_printf
0006f8  f7fffffe          BL       njw1195_channel_mute
0006fc  bf00              NOP                            ;324
0006fe  2200              MOVS     r2,#0                 ;324
000700  2140              MOVS     r1,#0x40              ;324
000702  f04f2040          MOV      r0,#0x40004000        ;324
000706  f7fffffe          BL       GPIOPinWrite
00070a  bf00              NOP                            ;324
00070c  bf00              NOP                            ;325
00070e  2200              MOVS     r2,#0                 ;325
000710  2180              MOVS     r1,#0x80              ;325
000712  f04f2040          MOV      r0,#0x40004000        ;325
000716  f7fffffe          BL       GPIOPinWrite
00071a  bf00              NOP                            ;325
00071c  2208              MOVS     r2,#8                 ;326
00071e  a18e              ADR      r1,|L1.2392|
000720  0190              LSLS     r0,r2,#6              ;326
000722  f7fffffe          BL       eeprom_write
000726  2064              MOVS     r0,#0x64              ;327
000728  f7fffffe          BL       bsp_delay_ms
00072c  2003              MOVS     r0,#3                 ;329
00072e  f8840053          STRB     r0,[r4,#0x53]         ;329
000732  f04f4070          MOV      r0,#0xf0000000        ;330
000736  f7fffffe          BL       SysCtlPeripheralEnable
00073a  2164              MOVS     r1,#0x64              ;331
00073c  0708              LSLS     r0,r1,#28             ;331
00073e  f7fffffe          BL       WatchdogReloadSet
000742  f04f4080          MOV      r0,#0x40000000        ;332
000746  f7fffffe          BL       WatchdogResetEnable
00074a  f04f4080          MOV      r0,#0x40000000        ;333
00074e  f7fffffe          BL       WatchdogEnable
000752  bf00              NOP      
000754  e7cc              B        |L1.1776|
;;;335    
                          ENDP

                  do_wake_up PROC
;;;336    static void do_wake_up(void *arg)
000756  b510              PUSH     {r4,lr}
;;;337    {
000758  4604              MOV      r4,r0
;;;338    	  SYS_TRACE("do_wake_up\r\n");
00075a  a082              ADR      r0,|L1.2404|
00075c  f7fffffe          BL       s_printf
;;;339    	  /*first disable power key intrrupt*/
;;;340    	  IntDisable(INT_KEY_POWER);
000760  2014              MOVS     r0,#0x14
000762  f7fffffe          BL       IntDisable
;;;341    		sys_power_on_handler(gSystem_t);
000766  4875              LDR      r0,|L1.2364|
000768  6800              LDR      r0,[r0,#0]  ; gSystem_t
00076a  f7fffffe          BL       sys_power_on_handler
;;;342    }
00076e  bd10              POP      {r4,pc}
;;;343    
                          ENDP

                  sys_wake_up_handler PROC
;;;344    void sys_wake_up_handler(void)
000770  b510              PUSH     {r4,lr}
;;;345    {
;;;346    	uint32 status;
;;;347    	
;;;348    	status = GPIOIntStatus(POWER_KEY_PORT, 1);
000772  2101              MOVS     r1,#1
000774  487f              LDR      r0,|L1.2420|
000776  f7fffffe          BL       GPIOIntStatus
00077a  4604              MOV      r4,r0
;;;349    	GPIOIntClear(POWER_KEY_PORT, status);
00077c  4621              MOV      r1,r4
00077e  487d              LDR      r0,|L1.2420|
000780  f7fffffe          BL       GPIOIntClear
;;;350    	
;;;351    
;;;352    	sys_untimeout(do_wake_up, NULL);
000784  2100              MOVS     r1,#0
000786  487c              LDR      r0,|L1.2424|
000788  f7fffffe          BL       sys_untimeout
;;;353      sys_timeout(500, do_wake_up, NULL);	
00078c  2200              MOVS     r2,#0
00078e  497a              LDR      r1,|L1.2424|
000790  f44f70fa          MOV      r0,#0x1f4
000794  f7fffffe          BL       sys_timeout
;;;354    	
;;;355    }
000798  bd10              POP      {r4,pc}
;;;356    
                          ENDP

                  sys_Rled_flash PROC
;;;375    
;;;376    static void sys_Rled_flash(void *arg)
00079a  b510              PUSH     {r4,lr}
;;;377    {
00079c  4604              MOV      r4,r0
;;;378    	static uint8 j = 1;
;;;379    	
;;;380    	if(j){
00079e  4877              LDR      r0,|L1.2428|
0007a0  7800              LDRB     r0,[r0,#0]  ; j
0007a2  b198              CBZ      r0,|L1.1996|
;;;381    		LED_OFF();
0007a4  bf00              NOP      
0007a6  bf00              NOP      
0007a8  2280              MOVS     r2,#0x80
0007aa  4611              MOV      r1,r2
0007ac  485a              LDR      r0,|L1.2328|
0007ae  f7fffffe          BL       GPIOPinWrite
0007b2  bf00              NOP      
0007b4  bf00              NOP      
0007b6  2240              MOVS     r2,#0x40
0007b8  4611              MOV      r1,r2
0007ba  4857              LDR      r0,|L1.2328|
0007bc  f7fffffe          BL       GPIOPinWrite
0007c0  bf00              NOP      
0007c2  bf00              NOP      
;;;382    		j = 0;
0007c4  2000              MOVS     r0,#0
0007c6  496d              LDR      r1,|L1.2428|
0007c8  7008              STRB     r0,[r1,#0]
0007ca  e012              B        |L1.2034|
                  |L1.1996|
;;;383    	}else{
;;;384    		RLED_SET(1);
0007cc  bf00              NOP      
0007ce  bf00              NOP      
0007d0  2280              MOVS     r2,#0x80
0007d2  4611              MOV      r1,r2
0007d4  4850              LDR      r0,|L1.2328|
0007d6  f7fffffe          BL       GPIOPinWrite
0007da  bf00              NOP      
0007dc  bf00              NOP      
0007de  2200              MOVS     r2,#0
0007e0  2140              MOVS     r1,#0x40
0007e2  484d              LDR      r0,|L1.2328|
0007e4  f7fffffe          BL       GPIOPinWrite
0007e8  bf00              NOP      
0007ea  bf00              NOP      
;;;385    		j = 1;
0007ec  2001              MOVS     r0,#1
0007ee  4963              LDR      r1,|L1.2428|
0007f0  7008              STRB     r0,[r1,#0]
                  |L1.2034|
;;;386    	}
;;;387    	
;;;388    	if(gSystem_t->is_in_protection == true && (gSystem_t->status == STATUS_WORKING || gSystem_t->status == STATUS_INITING)){
0007f2  4852              LDR      r0,|L1.2364|
0007f4  6800              LDR      r0,[r0,#0]  ; gSystem_t
0007f6  f890004e          LDRB     r0,[r0,#0x4e]
0007fa  2801              CMP      r0,#1
0007fc  d112              BNE      |L1.2084|
0007fe  484f              LDR      r0,|L1.2364|
000800  6800              LDR      r0,[r0,#0]  ; gSystem_t
000802  f8900053          LDRB     r0,[r0,#0x53]
000806  2802              CMP      r0,#2
000808  d005              BEQ      |L1.2070|
00080a  484c              LDR      r0,|L1.2364|
00080c  6800              LDR      r0,[r0,#0]  ; gSystem_t
00080e  f8900053          LDRB     r0,[r0,#0x53]
000812  2801              CMP      r0,#1
000814  d106              BNE      |L1.2084|
                  |L1.2070|
;;;389    		sys_timeout(500, sys_Rled_flash, NULL);
000816  2200              MOVS     r2,#0
000818  4959              LDR      r1,|L1.2432|
00081a  f44f70fa          MOV      r0,#0x1f4
00081e  f7fffffe          BL       sys_timeout
000822  e046              B        |L1.2226|
                  |L1.2084|
;;;390    	}else{
;;;391    		if(gSystem_t->status == STATUS_WORKING || gSystem_t->status == STATUS_INITING){
000824  4845              LDR      r0,|L1.2364|
000826  6800              LDR      r0,[r0,#0]  ; gSystem_t
000828  f8900053          LDRB     r0,[r0,#0x53]
00082c  2802              CMP      r0,#2
00082e  d005              BEQ      |L1.2108|
000830  4842              LDR      r0,|L1.2364|
000832  6800              LDR      r0,[r0,#0]  ; gSystem_t
000834  f8900053          LDRB     r0,[r0,#0x53]
000838  2801              CMP      r0,#1
00083a  d10f              BNE      |L1.2140|
                  |L1.2108|
;;;392    			BLED_SET(1);
00083c  bf00              NOP      
00083e  bf00              NOP      
000840  2200              MOVS     r2,#0
000842  2180              MOVS     r1,#0x80
000844  4834              LDR      r0,|L1.2328|
000846  f7fffffe          BL       GPIOPinWrite
00084a  bf00              NOP      
00084c  bf00              NOP      
00084e  2240              MOVS     r2,#0x40
000850  4611              MOV      r1,r2
000852  4831              LDR      r0,|L1.2328|
000854  f7fffffe          BL       GPIOPinWrite
000858  bf00              NOP      
00085a  e02a              B        |L1.2226|
                  |L1.2140|
;;;393    		}else if(gSystem_t->status == STATUS_STANDBY){
00085c  4837              LDR      r0,|L1.2364|
00085e  6800              LDR      r0,[r0,#0]  ; gSystem_t
000860  f8900053          LDRB     r0,[r0,#0x53]
000864  b978              CBNZ     r0,|L1.2182|
;;;394    			RLED_SET(1);
000866  bf00              NOP      
000868  bf00              NOP      
00086a  2280              MOVS     r2,#0x80
00086c  4611              MOV      r1,r2
00086e  482a              LDR      r0,|L1.2328|
000870  f7fffffe          BL       GPIOPinWrite
000874  bf00              NOP      
000876  bf00              NOP      
000878  2200              MOVS     r2,#0
00087a  2140              MOVS     r1,#0x40
00087c  4826              LDR      r0,|L1.2328|
00087e  f7fffffe          BL       GPIOPinWrite
000882  bf00              NOP      
000884  e015              B        |L1.2226|
                  |L1.2182|
;;;395    		}else if(gSystem_t->status == STATUS_SHUTDOWN){
000886  482d              LDR      r0,|L1.2364|
000888  6800              LDR      r0,[r0,#0]  ; gSystem_t
00088a  f8900053          LDRB     r0,[r0,#0x53]
00088e  2803              CMP      r0,#3
000890  d10f              BNE      |L1.2226|
;;;396    			LED_OFF();
000892  bf00              NOP      
000894  bf00              NOP      
000896  2280              MOVS     r2,#0x80
000898  4611              MOV      r1,r2
00089a  481f              LDR      r0,|L1.2328|
00089c  f7fffffe          BL       GPIOPinWrite
0008a0  bf00              NOP      
0008a2  bf00              NOP      
0008a4  2240              MOVS     r2,#0x40
0008a6  4611              MOV      r1,r2
0008a8  481b              LDR      r0,|L1.2328|
0008aa  f7fffffe          BL       GPIOPinWrite
0008ae  bf00              NOP      
0008b0  bf00              NOP      
                  |L1.2226|
;;;397    		}
;;;398    	}
;;;399    }
0008b2  bd10              POP      {r4,pc}
;;;400    
                          ENDP

                  power_key_msg_handler PROC
;;;401    
;;;402    static void power_key_msg_handler(sys_state_t *sys, key_value_t key)
0008b4  b570              PUSH     {r4-r6,lr}
;;;403    {
0008b6  4604              MOV      r4,r0
0008b8  460d              MOV      r5,r1
;;;404    	SYS_TRACE("get power key down msg, state=%d\r\n", sys->status);
0008ba  f8941053          LDRB     r1,[r4,#0x53]
0008be  a031              ADR      r0,|L1.2436|
0008c0  f7fffffe          BL       s_printf
;;;405    	
;;;406    	if(KEY_POWER == key){
0008c4  2d0c              CMP      r5,#0xc
0008c6  d170              BNE      |L1.2474|
;;;407    		if(sys->status != STATUS_WORKING && sys->status != STATUS_INITING){
0008c8  f8940053          LDRB     r0,[r4,#0x53]
0008cc  2802              CMP      r0,#2
0008ce  d010              BEQ      |L1.2290|
0008d0  f8940053          LDRB     r0,[r4,#0x53]
0008d4  2801              CMP      r0,#1
0008d6  d00c              BEQ      |L1.2290|
;;;408    			if(sys->method == AUDIO || sys->method == TRIGGER){
0008d8  7ce0              LDRB     r0,[r4,#0x13]
0008da  2801              CMP      r0,#1
0008dc  d002              BEQ      |L1.2276|
0008de  7ce0              LDRB     r0,[r4,#0x13]
0008e0  2802              CMP      r0,#2
0008e2  d102              BNE      |L1.2282|
                  |L1.2276|
;;;409    				sys->is_trigger_off_need_delay = true;
0008e4  2001              MOVS     r0,#1
0008e6  f884004d          STRB     r0,[r4,#0x4d]
                  |L1.2282|
;;;410    			}
;;;411    			sys_power_on_handler(sys);
0008ea  4620              MOV      r0,r4
0008ec  f7fffffe          BL       sys_power_on_handler
0008f0  e060              B        |L1.2484|
                  |L1.2290|
;;;412    		}else{
;;;413    			if(sys->method == AUDIO || sys->method == TRIGGER){
0008f2  7ce0              LDRB     r0,[r4,#0x13]
0008f4  2801              CMP      r0,#1
0008f6  d002              BEQ      |L1.2302|
0008f8  7ce0              LDRB     r0,[r4,#0x13]
0008fa  2802              CMP      r0,#2
0008fc  d108              BNE      |L1.2320|
                  |L1.2302|
;;;414    				sys->is_auto_power_on_enable = false;
0008fe  2000              MOVS     r0,#0
000900  f884004c          STRB     r0,[r4,#0x4c]
;;;415    				sys_timeout(500, sys_bled_flash, NULL);
000904  2200              MOVS     r2,#0
000906  4908              LDR      r1,|L1.2344|
000908  f44f70fa          MOV      r0,#0x1f4
00090c  f7fffffe          BL       sys_timeout
                  |L1.2320|
;;;416    			}
;;;417    			sys_power_off_handler(sys);
000910  4620              MOV      r0,r4
000912  f7fffffe          BL       sys_power_off_handler
000916  e04d              B        |L1.2484|
                  |L1.2328|
                          DCD      0x40006000
                  |L1.2332|
                          DCD      fix_power_off_bug
                  |L1.2336|
                          DCD      0x40064000
                  |L1.2340|
                          DCD      0x40026000
                  |L1.2344|
                          DCD      sys_bled_flash
                  |L1.2348|
                          DCD      power_on_timeout
                  |L1.2352|
                          DCD      fix_power_bug
                  |L1.2356|
                          DCD      0x40025000
                  |L1.2360|
                          DCD      0x4003d000
                  |L1.2364|
                          DCD      gSystem_t
                  |L1.2368|
                          DCD      dis_timeout_handler
                  |L1.2372|
000944  77696c6c          DCB      "will shut down\r\n",0
000948  20736875
00094c  7420646f
000950  776e0d0a
000954  00      
000955  00                DCB      0
000956  00                DCB      0
000957  00                DCB      0
                  |L1.2392|
000958  4c4f5750          DCB      "LOWPOWER",0
00095c  4f574552
000960  00      
000961  00                DCB      0
000962  00                DCB      0
000963  00                DCB      0
                  |L1.2404|
000964  646f5f77          DCB      "do_wake_up\r\n",0
000968  616b655f
00096c  75700d0a
000970  00      
000971  00                DCB      0
000972  00                DCB      0
000973  00                DCB      0
                  |L1.2420|
                          DCD      0x40024000
                  |L1.2424|
                          DCD      do_wake_up
                  |L1.2428|
                          DCD      |symbol_number.41|
                  |L1.2432|
                          DCD      sys_Rled_flash
                  |L1.2436|
000984  67657420          DCB      "get power key down msg, state=%d\r\n",0
000988  706f7765
00098c  72206b65
000990  7920646f
000994  776e206d
000998  73672c20
00099c  73746174
0009a0  653d2564
0009a4  0d0a00  
0009a7  00                DCB      0
0009a8  e7ff              B        |L1.2474|
                  |L1.2474|
;;;418    		}
;;;419    	}else if(KEY_POWER_LONG == key){
0009aa  2d0d              CMP      r5,#0xd
0009ac  d102              BNE      |L1.2484|
;;;420    		sys_shutdown_handler(sys);
0009ae  4620              MOV      r0,r4
0009b0  f7fffffe          BL       sys_shutdown_handler
                  |L1.2484|
;;;421    	}
;;;422    }
0009b4  bd70              POP      {r4-r6,pc}
;;;423    
                          ENDP

                  sys_code_pass_handler PROC
;;;424    static void sys_code_pass_handler(sys_state_t *sys)
0009b6  b510              PUSH     {r4,lr}
;;;425    {
0009b8  4604              MOV      r4,r0
;;;426    	 if(cur_menu->child){
0009ba  48fd              LDR      r0,|L1.3504|
0009bc  6800              LDR      r0,[r0,#0]  ; cur_menu
0009be  6900              LDR      r0,[r0,#0x10]
0009c0  b120              CBZ      r0,|L1.2508|
;;;427    		cur_menu = cur_menu->child;
0009c2  48fb              LDR      r0,|L1.3504|
0009c4  6800              LDR      r0,[r0,#0]  ; cur_menu
0009c6  6900              LDR      r0,[r0,#0x10]
0009c8  49f9              LDR      r1,|L1.3504|
0009ca  6008              STR      r0,[r1,#0]  ; cur_menu
                  |L1.2508|
;;;428    	 }
;;;429    	 
;;;430    	 dis_send_msg(DIS_UPDATE, MENU_NUM);
0009cc  2116              MOVS     r1,#0x16
0009ce  2001              MOVS     r0,#1
0009d0  f7fffffe          BL       dis_send_msg
;;;431    }
0009d4  bd10              POP      {r4,pc}
;;;432    
                          ENDP

                  sys_database_save PROC
;;;721    
;;;722    static void sys_database_save(sys_state_t *sys, uint8 type)
0009d6  e92d41f0          PUSH     {r4-r8,lr}
;;;723    {
0009da  4604              MOV      r4,r0
0009dc  460f              MOV      r7,r1
;;;724    	 uint32 crc = 0;
0009de  2500              MOVS     r5,#0
;;;725    	 int retval;
;;;726    	
;;;727    	 if(type == 1){
0009e0  2f01              CMP      r7,#1
0009e2  d11d              BNE      |L1.2592|
;;;728    		 crc = calc_crc32(crc, sys->sub, SIZEOF_SUB_NV);
0009e4  229c              MOVS     r2,#0x9c
0009e6  4628              MOV      r0,r5
0009e8  6be1              LDR      r1,[r4,#0x3c]
0009ea  f7fffffe          BL       calc_crc32
0009ee  4605              MOV      r5,r0
;;;729    		 
;;;730    		 SYS_TRACE("will save sub crc=%x\r\n", crc);	
0009f0  4629              MOV      r1,r5
0009f2  a0f0              ADR      r0,|L1.3508|
0009f4  f7fffffe          BL       s_printf
;;;731    		 
;;;732    		 sys->sub_crc32 = crc;
0009f8  6325              STR      r5,[r4,#0x30]
;;;733    		 
;;;734    		 vPortEnterCritical();
0009fa  f7fffffe          BL       vPortEnterCritical
;;;735    	   retval = eeprom_write(SYS_NV_ADDRESS_SUB, (uint8 *)sys->sub, SIZEOF_SUB_NV);
0009fe  229c              MOVS     r2,#0x9c
000a00  02b8              LSLS     r0,r7,#10
000a02  6be1              LDR      r1,[r4,#0x3c]
000a04  f7fffffe          BL       eeprom_write
000a08  4606              MOV      r6,r0
;;;736    	   vPortExitCritical();
000a0a  f7fffffe          BL       vPortExitCritical
;;;737    	   OSAL_ASSERT(retval > 0);
000a0e  2e00              CMP      r6,#0
000a10  dc28              BGT      |L1.2660|
000a12  4aee              LDR      r2,|L1.3532|
000a14  a1ee              ADR      r1,|L1.3536|
000a16  a0f1              ADR      r0,|L1.3548|
000a18  f7fffffe          BL       s_printf
000a1c  bf00              NOP      
                  |L1.2590|
000a1e  e7fe              B        |L1.2590|
                  |L1.2592|
;;;738    	 }else if(type == 2){
000a20  2f02              CMP      r7,#2
000a22  d11f              BNE      |L1.2660|
;;;739    		 crc = calc_crc32(crc, sys->eq, SIZEOF_EQ_NV);
000a24  f44f72c0          MOV      r2,#0x180
000a28  4628              MOV      r0,r5
000a2a  6c21              LDR      r1,[r4,#0x40]
000a2c  f7fffffe          BL       calc_crc32
000a30  4605              MOV      r5,r0
;;;740    		 
;;;741    		 SYS_TRACE("will save sub crc=%x\r\n", crc);	
000a32  4629              MOV      r1,r5
000a34  a0df              ADR      r0,|L1.3508|
000a36  f7fffffe          BL       s_printf
;;;742    		 
;;;743    		 sys->eq_crc32 = crc;
000a3a  6365              STR      r5,[r4,#0x34]
;;;744    		 
;;;745    		 vPortEnterCritical();
000a3c  f7fffffe          BL       vPortEnterCritical
;;;746    	   retval = eeprom_write(SYS_NV_ADDRESS_EQ, (uint8 *)sys->eq, SIZEOF_EQ_NV);
000a40  f44f72c0          MOV      r2,#0x180
000a44  02b8              LSLS     r0,r7,#10
000a46  6c21              LDR      r1,[r4,#0x40]
000a48  f7fffffe          BL       eeprom_write
000a4c  4606              MOV      r6,r0
;;;747    	   vPortExitCritical();
000a4e  f7fffffe          BL       vPortExitCritical
;;;748    	   OSAL_ASSERT(retval > 0);
000a52  2e00              CMP      r6,#0
000a54  dc06              BGT      |L1.2660|
000a56  4add              LDR      r2,|L1.3532|
000a58  a1dd              ADR      r1,|L1.3536|
000a5a  a0e0              ADR      r0,|L1.3548|
000a5c  f7fffffe          BL       s_printf
000a60  bf00              NOP      
                  |L1.2658|
000a62  e7fe              B        |L1.2658|
                  |L1.2660|
;;;749    	 }
;;;750    
;;;751    	 crc = 0;
000a64  2500              MOVS     r5,#0
;;;752    	 
;;;753    	 crc = calc_crc32(crc, sys, SIZEOF_SYS_NV - 12);
000a66  48e5              LDR      r0,|L1.3580|
000a68  6800              LDR      r0,[r0,#0]  ; gSystem_t
000a6a  3038              ADDS     r0,r0,#0x38
000a6c  49e3              LDR      r1,|L1.3580|
000a6e  6809              LDR      r1,[r1,#0]  ; gSystem_t
000a70  1a40              SUBS     r0,r0,r1
000a72  f1a0020c          SUB      r2,r0,#0xc
000a76  4621              MOV      r1,r4
000a78  4628              MOV      r0,r5
000a7a  f7fffffe          BL       calc_crc32
000a7e  4605              MOV      r5,r0
;;;754    	
;;;755       SYS_TRACE("will save sys crc=%x\r\n", crc);	
000a80  4629              MOV      r1,r5
000a82  a0df              ADR      r0,|L1.3584|
000a84  f7fffffe          BL       s_printf
;;;756    	  
;;;757    	 sys->sys_crc32 = crc;
000a88  62e5              STR      r5,[r4,#0x2c]
;;;758    	
;;;759    	 vPortEnterCritical();
000a8a  f7fffffe          BL       vPortEnterCritical
;;;760    	 retval = eeprom_write(SYS_NV_ADDRESS, (uint8 *)sys, SIZEOF_SYS_NV);
000a8e  48db              LDR      r0,|L1.3580|
000a90  6800              LDR      r0,[r0,#0]  ; gSystem_t
000a92  3038              ADDS     r0,r0,#0x38
000a94  49d9              LDR      r1,|L1.3580|
000a96  6809              LDR      r1,[r1,#0]  ; gSystem_t
000a98  1a42              SUBS     r2,r0,r1
000a9a  4621              MOV      r1,r4
000a9c  2000              MOVS     r0,#0
000a9e  f7fffffe          BL       eeprom_write
000aa2  4606              MOV      r6,r0
;;;761    	 vPortExitCritical();
000aa4  f7fffffe          BL       vPortExitCritical
;;;762    	 OSAL_ASSERT(retval > 0);
000aa8  2e00              CMP      r6,#0
000aaa  dc06              BGT      |L1.2746|
000aac  4ac7              LDR      r2,|L1.3532|
000aae  a1c8              ADR      r1,|L1.3536|
000ab0  a0ca              ADR      r0,|L1.3548|
000ab2  f7fffffe          BL       s_printf
000ab6  bf00              NOP      
                  |L1.2744|
000ab8  e7fe              B        |L1.2744|
                  |L1.2746|
;;;763    }
000aba  e8bd81f0          POP      {r4-r8,pc}
;;;764    
                          ENDP

                  sys_msg_handler PROC
;;;432    
;;;433    static void sys_msg_handler(sys_msg_t *msg)
000abe  b510              PUSH     {r4,lr}
;;;434    {
000ac0  4604              MOV      r4,r0
;;;435      OSAL_ASSERT(msg != NULL);
000ac2  b934              CBNZ     r4,|L1.2770|
000ac4  4ad4              LDR      r2,|L1.3608|
000ac6  a1d5              ADR      r1,|L1.3612|
000ac8  a0c4              ADR      r0,|L1.3548|
000aca  f7fffffe          BL       s_printf
000ace  bf00              NOP      
                  |L1.2768|
000ad0  e7fe              B        |L1.2768|
                  |L1.2770|
;;;436    	
;;;437    	switch(msg->msg){
000ad2  7820              LDRB     r0,[r4,#0]
000ad4  b130              CBZ      r0,|L1.2788|
000ad6  2801              CMP      r0,#1
000ad8  d00a              BEQ      |L1.2800|
000ada  2802              CMP      r0,#2
000adc  d00e              BEQ      |L1.2812|
000ade  2803              CMP      r0,#3
000ae0  d117              BNE      |L1.2834|
000ae2  e011              B        |L1.2824|
                  |L1.2788|
;;;438    		case KEYBOARD_MSG:
;;;439    			keyboard_msg_handler(gSystem_t, (key_value_t)msg->data);
000ae4  7861              LDRB     r1,[r4,#1]
000ae6  48c5              LDR      r0,|L1.3580|
000ae8  6800              LDR      r0,[r0,#0]  ; gSystem_t
000aea  f7fffffe          BL       keyboard_msg_handler
;;;440    		break;
000aee  e011              B        |L1.2836|
                  |L1.2800|
;;;441    		
;;;442    		case POWER_KEY_MSG:
;;;443    			power_key_msg_handler(gSystem_t, (key_value_t)msg->data);
000af0  7861              LDRB     r1,[r4,#1]
000af2  48c2              LDR      r0,|L1.3580|
000af4  6800              LDR      r0,[r0,#0]  ; gSystem_t
000af6  f7fffffe          BL       power_key_msg_handler
;;;444    			break;
000afa  e00b              B        |L1.2836|
                  |L1.2812|
;;;445    		
;;;446    		case DATABASE_UPDATE_MSG:
;;;447    			sys_database_save(gSystem_t, msg->data);
000afc  7861              LDRB     r1,[r4,#1]
000afe  48bf              LDR      r0,|L1.3580|
000b00  6800              LDR      r0,[r0,#0]  ; gSystem_t
000b02  f7fffffe          BL       sys_database_save
;;;448    			break;
000b06  e005              B        |L1.2836|
                  |L1.2824|
;;;449    		
;;;450    		case CODE_PASS_MSG:
;;;451    			sys_code_pass_handler(gSystem_t);
000b08  48bc              LDR      r0,|L1.3580|
000b0a  6800              LDR      r0,[r0,#0]  ; gSystem_t
000b0c  f7fffffe          BL       sys_code_pass_handler
;;;452    			break;
000b10  e000              B        |L1.2836|
                  |L1.2834|
;;;453    		
;;;454    		default:
;;;455    			break;
000b12  bf00              NOP      
                  |L1.2836|
000b14  bf00              NOP                            ;440
;;;456    		
;;;457    	}
;;;458    }
000b16  bd10              POP      {r4,pc}
;;;459    
                          ENDP

                  sys_nv_set_default PROC
;;;460    static void sys_nv_set_default(sys_state_t *sys, uint8 type)
000b18  e92d41f0          PUSH     {r4-r8,lr}
;;;461    {
000b1c  4604              MOV      r4,r0
000b1e  460f              MOV      r7,r1
;;;462      uint8 i,j; 
;;;463    	
;;;464    	if(type == 0){
000b20  bb5f              CBNZ     r7,|L1.2938|
;;;465    	 sys->ip = (uint32)((192 << 24) | (168 << 16) | (1 << 8) | (222 << 0));
000b22  48c1              LDR      r0,|L1.3624|
000b24  6020              STR      r0,[r4,#0]
;;;466    	 sys->netmask = (uint32)((255 << 24) | (255 << 16) | (255 << 8) | (0 << 0));
000b26  f06f00ff          MVN      r0,#0xff
000b2a  6060              STR      r0,[r4,#4]
;;;467    	 sys->gateway = (uint32)((192 << 24) | (168 << 16) | (1 << 8) | (1 << 0));
000b2c  48be              LDR      r0,|L1.3624|
000b2e  38dd              SUBS     r0,r0,#0xdd
000b30  60a0              STR      r0,[r4,#8]
;;;468    	 sys->ip_mode = 1;//IPADDR_USE_DHCP
000b32  2001              MOVS     r0,#1
000b34  74a0              STRB     r0,[r4,#0x12]
;;;469    	 sys->method = POWER_ON_METHOD_DEFAULT; 
000b36  74e0              STRB     r0,[r4,#0x13]
;;;470    	 sys->bright = LCD_BRIGHTNESS_DEFAULT;
000b38  76a0              STRB     r0,[r4,#0x1a]
;;;471    	 sys->input_gain = 0;
000b3a  2000              MOVS     r0,#0
000b3c  61e0              STR      r0,[r4,#0x1c]
;;;472    	 sys->lineout_highpass = LINEOUT_HIGHPASS_DEFAULT;
000b3e  f44f70a5          MOV      r0,#0x14a
000b42  8420              STRH     r0,[r4,#0x20]
;;;473    	 sys->lineout_highpass_slope = 1;
000b44  2001              MOVS     r0,#1
000b46  f8840022          STRB     r0,[r4,#0x22]
;;;474    	 sys->line_delay_time = 0;
000b4a  2000              MOVS     r0,#0
000b4c  84a0              STRH     r0,[r4,#0x24]
;;;475    	 sys->master_vol = 0;
000b4e  6160              STR      r0,[r4,#0x14]
;;;476    	 sys->src = DEFAULTT_SOURCE;
000b50  2001              MOVS     r0,#1
000b52  7620              STRB     r0,[r4,#0x18]
;;;477    	 sys->d_router = DSP_DELAY_DEFAULT_ROUTER;
000b54  2002              MOVS     r0,#2
000b56  f8840026          STRB     r0,[r4,#0x26]
;;;478    	 sys->preset = DSP_DEFAULT_PRESET;
000b5a  2000              MOVS     r0,#0
000b5c  7660              STRB     r0,[r4,#0x19]
;;;479    	 sys->sub_model = SUB_DEFAULT_MODE;
000b5e  2006              MOVS     r0,#6
000b60  76e0              STRB     r0,[r4,#0x1b]
;;;480    	 sys->sense_thres = SENSE_LEVEL_DEFAULT;
000b62  2001              MOVS     r0,#1
000b64  f8840027          STRB     r0,[r4,#0x27]
;;;481    	 sys->se_timeout = SE_TIMEOUT_20;
000b68  2002              MOVS     r0,#2
000b6a  f8840028          STRB     r0,[r4,#0x28]
;;;482    	 sys->eq_on_off = 0;
000b6e  2000              MOVS     r0,#0
000b70  f884002a          STRB     r0,[r4,#0x2a]
;;;483    	 sys->is_out_of_fix_hardware = false;
000b74  f8840050          STRB     r0,[r4,#0x50]
                  |L1.2936|
000b78  e213              B        |L1.4002|
                  |L1.2938|
;;;484    	}else if(type == 1){
000b7a  2f01              CMP      r7,#1
000b7c  d130              BNE      |L1.3040|
;;;485    	
;;;486    	 for(j = 0; j < SUB_MODEL_NUM; j++){
000b7e  2500              MOVS     r5,#0
000b80  e02b              B        |L1.3034|
                  |L1.2946|
;;;487    		 sys->sub[j].delay = 0;
000b82  2000              MOVS     r0,#0
000b84  eb050245          ADD      r2,r5,r5,LSL #1
000b88  6be1              LDR      r1,[r4,#0x3c]
000b8a  eb010182          ADD      r1,r1,r2,LSL #2
000b8e  8148              STRH     r0,[r1,#0xa]
;;;488    		 sys->sub[j].highpass = sub_highpass_array[j];
000b90  48a6              LDR      r0,|L1.3628|
000b92  5d40              LDRB     r0,[r0,r5]
000b94  eb050245          ADD      r2,r5,r5,LSL #1
000b98  6be1              LDR      r1,[r4,#0x3c]
000b9a  eb010182          ADD      r1,r1,r2,LSL #2
000b9e  80c8              STRH     r0,[r1,#6]
;;;489    		 sys->sub[j].lowpass = SUB_LOWPASS_DEFAULT;
000ba0  f44f70a5          MOV      r0,#0x14a
000ba4  eb050245          ADD      r2,r5,r5,LSL #1
000ba8  6be1              LDR      r1,[r4,#0x3c]
000baa  eb010182          ADD      r1,r1,r2,LSL #2
000bae  8048              STRH     r0,[r1,#2]
;;;490    		 sys->sub[j].lowpass_slope = 1;
000bb0  2001              MOVS     r0,#1
000bb2  eb050245          ADD      r2,r5,r5,LSL #1
000bb6  6be1              LDR      r1,[r4,#0x3c]
000bb8  eb010182          ADD      r1,r1,r2,LSL #2
000bbc  7108              STRB     r0,[r1,#4]
;;;491    		 sys->sub[j].highpass_slope = 1;
000bbe  eb050245          ADD      r2,r5,r5,LSL #1
000bc2  6be1              LDR      r1,[r4,#0x3c]
000bc4  eb010182          ADD      r1,r1,r2,LSL #2
000bc8  7208              STRB     r0,[r1,#8]
;;;492    		 sys->sub[j].phrase = 0;	 
000bca  2000              MOVS     r0,#0
000bcc  eb050245          ADD      r2,r5,r5,LSL #1
000bd0  6be1              LDR      r1,[r4,#0x3c]
000bd2  f8010022          STRB     r0,[r1,r2,LSL #2]
000bd6  1c68              ADDS     r0,r5,#1              ;486
000bd8  b2c5              UXTB     r5,r0                 ;486
                  |L1.3034|
000bda  2d0d              CMP      r5,#0xd               ;486
000bdc  dbd1              BLT      |L1.2946|
000bde  e1e0              B        |L1.4002|
                  |L1.3040|
;;;493    	 }
;;;494    	 
;;;495     }else if(type == 2){
000be0  2f02              CMP      r7,#2
000be2  d1c9              BNE      |L1.2936|
;;;496    	 for(j = 0; j < PRESET_NUM; j++){
000be4  2500              MOVS     r5,#0
000be6  e1a9              B        |L1.3900|
                  |L1.3048|
;;;497    		 if(j == PRE_CINEMA){
000be8  2d01              CMP      r5,#1
000bea  d177              BNE      |L1.3292|
;;;498    			 //for(i = 0; i < PRESET_EQ_FILTER_NUM; i++){
;;;499    				sys->eq->peq[j].filter[0].freq = 35;
000bec  2123              MOVS     r1,#0x23
000bee  6c20              LDR      r0,[r4,#0x40]
000bf0  3078              ADDS     r0,r0,#0x78
000bf2  eb050245          ADD      r2,r5,r5,LSL #1
000bf6  eb0202c5          ADD      r2,r2,r5,LSL #3
000bfa  f8201022          STRH     r1,[r0,r2,LSL #2]
;;;500    				sys->eq->peq[j].filter[0].gain = 4;
000bfe  2104              MOVS     r1,#4
000c00  6c20              LDR      r0,[r4,#0x40]
000c02  3078              ADDS     r0,r0,#0x78
000c04  eb050245          ADD      r2,r5,r5,LSL #1
000c08  eb0202c5          ADD      r2,r2,r5,LSL #3
000c0c  eb000082          ADD      r0,r0,r2,LSL #2
000c10  6041              STR      r1,[r0,#4]
;;;501    				sys->eq->peq[j].filter[0].Q = 13;
000c12  210d              MOVS     r1,#0xd
000c14  6c20              LDR      r0,[r4,#0x40]
000c16  3078              ADDS     r0,r0,#0x78
000c18  eb050245          ADD      r2,r5,r5,LSL #1
000c1c  eb0202c5          ADD      r2,r2,r5,LSL #3
000c20  eb000082          ADD      r0,r0,r2,LSL #2
000c24  7081              STRB     r1,[r0,#2]
;;;502    				sys->eq->peq[j].filter[0].a = 0x7faf1886;
000c26  4982              LDR      r1,|L1.3632|
000c28  6c20              LDR      r0,[r4,#0x40]
000c2a  3078              ADDS     r0,r0,#0x78
000c2c  eb050245          ADD      r2,r5,r5,LSL #1
000c30  eb0202c5          ADD      r2,r2,r5,LSL #3
000c34  eb000082          ADD      r0,r0,r2,LSL #2
000c38  6081              STR      r1,[r0,#8]
;;;503    				sys->eq->peq[j].filter[0].b = 0x7fffac1d;
000c3a  497e              LDR      r1,|L1.3636|
000c3c  6c20              LDR      r0,[r4,#0x40]
000c3e  3078              ADDS     r0,r0,#0x78
000c40  eb050245          ADD      r2,r5,r5,LSL #1
000c44  eb0202c5          ADD      r2,r2,r5,LSL #3
000c48  eb000082          ADD      r0,r0,r2,LSL #2
000c4c  60c1              STR      r1,[r0,#0xc]
;;;504    				sys->eq->peq[j].filter[0].g = 0x32b77186;
000c4e  497a              LDR      r1,|L1.3640|
000c50  6c20              LDR      r0,[r4,#0x40]
000c52  3078              ADDS     r0,r0,#0x78
000c54  eb050245          ADD      r2,r5,r5,LSL #1
000c58  eb0202c5          ADD      r2,r2,r5,LSL #3
000c5c  eb000082          ADD      r0,r0,r2,LSL #2
000c60  6101              STR      r1,[r0,#0x10]
;;;505    			 
;;;506    			  sys->eq->peq[j].filter[0].freq = 100;
000c62  2164              MOVS     r1,#0x64
000c64  6c20              LDR      r0,[r4,#0x40]
000c66  3078              ADDS     r0,r0,#0x78
000c68  eb050245          ADD      r2,r5,r5,LSL #1
000c6c  eb0202c5          ADD      r2,r2,r5,LSL #3
000c70  f8201022          STRH     r1,[r0,r2,LSL #2]
;;;507    				sys->eq->peq[j].filter[0].gain = 3;
000c74  2103              MOVS     r1,#3
000c76  6c20              LDR      r0,[r4,#0x40]
000c78  3078              ADDS     r0,r0,#0x78
000c7a  eb050245          ADD      r2,r5,r5,LSL #1
000c7e  eb0202c5          ADD      r2,r2,r5,LSL #3
000c82  eb000082          ADD      r0,r0,r2,LSL #2
000c86  6041              STR      r1,[r0,#4]
;;;508    				sys->eq->peq[j].filter[0].Q = 0;
000c88  2100              MOVS     r1,#0
000c8a  6c20              LDR      r0,[r4,#0x40]
000c8c  3078              ADDS     r0,r0,#0x78
000c8e  eb050245          ADD      r2,r5,r5,LSL #1
000c92  eb0202c5          ADD      r2,r2,r5,LSL #3
000c96  eb000082          ADD      r0,r0,r2,LSL #2
000c9a  7081              STRB     r1,[r0,#2]
;;;509    				sys->eq->peq[j].filter[0].a = 0x7ed21bc1;
000c9c  4967              LDR      r1,|L1.3644|
000c9e  6c20              LDR      r0,[r4,#0x40]
000ca0  3078              ADDS     r0,r0,#0x78
000ca2  eb050245          ADD      r2,r5,r5,LSL #1
000ca6  eb0202c5          ADD      r2,r2,r5,LSL #3
000caa  eb000082          ADD      r0,r0,r2,LSL #2
000cae  6081              STR      r1,[r0,#8]
;;;510    				sys->eq->peq[j].filter[0].b = 0x7ffd2e94;
000cb0  4963              LDR      r1,|L1.3648|
000cb2  6c20              LDR      r0,[r4,#0x40]
000cb4  3078              ADDS     r0,r0,#0x78
000cb6  eb050245          ADD      r2,r5,r5,LSL #1
000cba  eb0202c5          ADD      r2,r2,r5,LSL #3
000cbe  eb000082          ADD      r0,r0,r2,LSL #2
000cc2  60c1              STR      r1,[r0,#0xc]
;;;511    				sys->eq->peq[j].filter[0].g = 0x20000000;
000cc4  0769              LSLS     r1,r5,#29
000cc6  6c20              LDR      r0,[r4,#0x40]
000cc8  3078              ADDS     r0,r0,#0x78
000cca  eb050245          ADD      r2,r5,r5,LSL #1
000cce  eb0202c5          ADD      r2,r2,r5,LSL #3
000cd2  eb000082          ADD      r0,r0,r2,LSL #2
000cd6  6101              STR      r1,[r0,#0x10]
000cd8  e12e              B        |L1.3896|
000cda  e7ff              B        |L1.3292|
                  |L1.3292|
;;;512    			//}
;;;513    			 
;;;514    		 }else if(j == PRE_NIGHT){
000cdc  2d02              CMP      r5,#2
000cde  d166              BNE      |L1.3502|
;;;515    			 //for(i = 0; i < PRESET_EQ_FILTER_NUM; i++){
;;;516    				sys->eq->peq[j].filter[0].freq = 30;
000ce0  211e              MOVS     r1,#0x1e
000ce2  6c20              LDR      r0,[r4,#0x40]
000ce4  3078              ADDS     r0,r0,#0x78
000ce6  eb050245          ADD      r2,r5,r5,LSL #1
000cea  eb0202c5          ADD      r2,r2,r5,LSL #3
000cee  f8201022          STRH     r1,[r0,r2,LSL #2]
;;;517    				sys->eq->peq[j].filter[0].gain = -6;
000cf2  f06f0105          MVN      r1,#5
000cf6  6c20              LDR      r0,[r4,#0x40]
000cf8  3078              ADDS     r0,r0,#0x78
000cfa  eb050245          ADD      r2,r5,r5,LSL #1
000cfe  eb0202c5          ADD      r2,r2,r5,LSL #3
000d02  eb000082          ADD      r0,r0,r2,LSL #2
000d06  6041              STR      r1,[r0,#4]
;;;518    				sys->eq->peq[j].filter[0].Q = 40;
000d08  2128              MOVS     r1,#0x28
000d0a  6c20              LDR      r0,[r4,#0x40]
000d0c  3078              ADDS     r0,r0,#0x78
000d0e  eb050245          ADD      r2,r5,r5,LSL #1
000d12  eb0202c5          ADD      r2,r2,r5,LSL #3
000d16  eb000082          ADD      r0,r0,r2,LSL #2
000d1a  7081              STRB     r1,[r0,#2]
;;;519    				sys->eq->peq[j].filter[0].a = 0x7faf1886;
000d1c  4944              LDR      r1,|L1.3632|
000d1e  6c20              LDR      r0,[r4,#0x40]
000d20  3078              ADDS     r0,r0,#0x78
000d22  eb050245          ADD      r2,r5,r5,LSL #1
000d26  eb0202c5          ADD      r2,r2,r5,LSL #3
000d2a  eb000082          ADD      r0,r0,r2,LSL #2
000d2e  6081              STR      r1,[r0,#8]
;;;520    				sys->eq->peq[j].filter[0].b = 0x7fffbce4;
000d30  4944              LDR      r1,|L1.3652|
000d32  6c20              LDR      r0,[r4,#0x40]
000d34  3078              ADDS     r0,r0,#0x78
000d36  eb050245          ADD      r2,r5,r5,LSL #1
000d3a  eb0202c5          ADD      r2,r2,r5,LSL #3
000d3e  eb000082          ADD      r0,r0,r2,LSL #2
000d42  60c1              STR      r1,[r0,#0xc]
;;;521    				sys->eq->peq[j].filter[0].g = 0x1009b951;
000d44  4940              LDR      r1,|L1.3656|
000d46  6c20              LDR      r0,[r4,#0x40]
000d48  3078              ADDS     r0,r0,#0x78
000d4a  eb050245          ADD      r2,r5,r5,LSL #1
000d4e  eb0202c5          ADD      r2,r2,r5,LSL #3
000d52  eb000082          ADD      r0,r0,r2,LSL #2
000d56  6101              STR      r1,[r0,#0x10]
;;;522    			// }
;;;523    			 
;;;524    			  sys->eq->peq[j].filter[0].freq = 100;
000d58  2164              MOVS     r1,#0x64
000d5a  6c20              LDR      r0,[r4,#0x40]
000d5c  3078              ADDS     r0,r0,#0x78
000d5e  eb050245          ADD      r2,r5,r5,LSL #1
000d62  eb0202c5          ADD      r2,r2,r5,LSL #3
000d66  f8201022          STRH     r1,[r0,r2,LSL #2]
;;;525    				sys->eq->peq[j].filter[0].gain = 3;
000d6a  2103              MOVS     r1,#3
000d6c  6c20              LDR      r0,[r4,#0x40]
000d6e  3078              ADDS     r0,r0,#0x78
000d70  eb050245          ADD      r2,r5,r5,LSL #1
000d74  eb0202c5          ADD      r2,r2,r5,LSL #3
000d78  eb000082          ADD      r0,r0,r2,LSL #2
000d7c  6041              STR      r1,[r0,#4]
;;;526    				sys->eq->peq[j].filter[0].Q = 0;
000d7e  2100              MOVS     r1,#0
000d80  6c20              LDR      r0,[r4,#0x40]
000d82  3078              ADDS     r0,r0,#0x78
000d84  eb050245          ADD      r2,r5,r5,LSL #1
000d88  eb0202c5          ADD      r2,r2,r5,LSL #3
000d8c  eb000082          ADD      r0,r0,r2,LSL #2
000d90  7081              STRB     r1,[r0,#2]
;;;527    				sys->eq->peq[j].filter[0].a = 0x7ed21bc1;
000d92  492a              LDR      r1,|L1.3644|
000d94  6c20              LDR      r0,[r4,#0x40]
000d96  3078              ADDS     r0,r0,#0x78
000d98  eb050245          ADD      r2,r5,r5,LSL #1
000d9c  eb0202c5          ADD      r2,r2,r5,LSL #3
000da0  eb000082          ADD      r0,r0,r2,LSL #2
000da4  6081              STR      r1,[r0,#8]
;;;528    				sys->eq->peq[j].filter[0].b = 0x7ffd2e94;
000da6  4926              LDR      r1,|L1.3648|
000da8  6c20              LDR      r0,[r4,#0x40]
000daa  3078              ADDS     r0,r0,#0x78
000dac  e04e              B        |L1.3660|
                  |L1.3502|
000dae  e05f              B        |L1.3696|
                  |L1.3504|
                          DCD      cur_menu
                  |L1.3508|
000db4  77696c6c          DCB      "will save sub crc=%x\r\n",0
000db8  20736176
000dbc  65207375
000dc0  62206372
000dc4  633d2578
000dc8  0d0a00  
000dcb  00                DCB      0
                  |L1.3532|
                          DCD      |symbol_number.33|
                  |L1.3536|
000dd0  72657476          DCB      "retval > 0",0
000dd4  616c203e
000dd8  203000  
000ddb  00                DCB      0
                  |L1.3548|
000ddc  28257329          DCB      "(%s) has assert failed at %s.\n",0
000de0  20686173
000de4  20617373
000de8  65727420
000dec  6661696c
000df0  65642061
000df4  74202573
000df8  2e0a00  
000dfb  00                DCB      0
                  |L1.3580|
                          DCD      gSystem_t
                  |L1.3584|
000e00  77696c6c          DCB      "will save sys crc=%x\r\n",0
000e04  20736176
000e08  65207379
000e0c  73206372
000e10  633d2578
000e14  0d0a00  
000e17  00                DCB      0
                  |L1.3608|
                          DCD      __FUNCTION__
                  |L1.3612|
000e1c  6d736720          DCB      "msg != NULL",0
000e20  213d204e
000e24  554c4c00
                  |L1.3624|
                          DCD      0xc0a801de
                  |L1.3628|
                          DCD      sub_highpass_array
                  |L1.3632|
                          DCD      0x7faf1886
                  |L1.3636|
                          DCD      0x7fffac1d
                  |L1.3640|
                          DCD      0x32b77186
                  |L1.3644|
                          DCD      0x7ed21bc1
                  |L1.3648|
                          DCD      0x7ffd2e94
                  |L1.3652|
                          DCD      0x7fffbce4
                  |L1.3656|
                          DCD      0x1009b951
                  |L1.3660|
000e4c  eb050245          ADD      r2,r5,r5,LSL #1
000e50  eb0202c5          ADD      r2,r2,r5,LSL #3
000e54  eb000082          ADD      r0,r0,r2,LSL #2
000e58  60c1              STR      r1,[r0,#0xc]
;;;529    				sys->eq->peq[j].filter[0].g = 0x20000000;
000e5a  0729              LSLS     r1,r5,#28
000e5c  6c20              LDR      r0,[r4,#0x40]
000e5e  3078              ADDS     r0,r0,#0x78
000e60  eb050245          ADD      r2,r5,r5,LSL #1
000e64  eb0202c5          ADD      r2,r2,r5,LSL #3
000e68  eb000082          ADD      r0,r0,r2,LSL #2
000e6c  6101              STR      r1,[r0,#0x10]
000e6e  e063              B        |L1.3896|
                  |L1.3696|
;;;530    	 
;;;531    		 }else{
;;;532    			for(i = 0; i < PRESET_EQ_FILTER_NUM; i++){
000e70  2600              MOVS     r6,#0
000e72  e055              B        |L1.3872|
                  |L1.3700|
;;;533    			 
;;;534    				sys->eq->peq[j].filter[i].freq = EQ_FREQ_DEFAULT;
000e74  2164              MOVS     r1,#0x64
000e76  6c20              LDR      r0,[r4,#0x40]
000e78  3078              ADDS     r0,r0,#0x78
000e7a  eb050245          ADD      r2,r5,r5,LSL #1
000e7e  eb0202c5          ADD      r2,r2,r5,LSL #3
000e82  eb000082          ADD      r0,r0,r2,LSL #2
000e86  eb060286          ADD      r2,r6,r6,LSL #2
000e8a  f8201022          STRH     r1,[r0,r2,LSL #2]
;;;535    				sys->eq->peq[j].filter[i].gain = 0;
000e8e  2100              MOVS     r1,#0
000e90  6c20              LDR      r0,[r4,#0x40]
000e92  3078              ADDS     r0,r0,#0x78
000e94  eb050245          ADD      r2,r5,r5,LSL #1
000e98  eb0202c5          ADD      r2,r2,r5,LSL #3
000e9c  eb000082          ADD      r0,r0,r2,LSL #2
000ea0  eb060286          ADD      r2,r6,r6,LSL #2
000ea4  eb000082          ADD      r0,r0,r2,LSL #2
000ea8  6041              STR      r1,[r0,#4]
;;;536    				sys->eq->peq[j].filter[i].Q = EQ_Q_MIN;
000eaa  2103              MOVS     r1,#3
000eac  6c20              LDR      r0,[r4,#0x40]
000eae  3078              ADDS     r0,r0,#0x78
000eb0  eb050245          ADD      r2,r5,r5,LSL #1
000eb4  eb0202c5          ADD      r2,r2,r5,LSL #3
000eb8  eb000082          ADD      r0,r0,r2,LSL #2
000ebc  eb060286          ADD      r2,r6,r6,LSL #2
000ec0  eb000082          ADD      r0,r0,r2,LSL #2
000ec4  7081              STRB     r1,[r0,#2]
;;;537    				sys->eq->peq[j].filter[i].a = 0x7ed21bc1;
000ec6  49f9              LDR      r1,|L1.4780|
000ec8  6c20              LDR      r0,[r4,#0x40]
000eca  3078              ADDS     r0,r0,#0x78
000ecc  eb050245          ADD      r2,r5,r5,LSL #1
000ed0  eb0202c5          ADD      r2,r2,r5,LSL #3
000ed4  eb000082          ADD      r0,r0,r2,LSL #2
000ed8  eb060286          ADD      r2,r6,r6,LSL #2
000edc  eb000082          ADD      r0,r0,r2,LSL #2
000ee0  6081              STR      r1,[r0,#8]
;;;538    				sys->eq->peq[j].filter[i].b = 0x7ffd2e94;
000ee2  49f3              LDR      r1,|L1.4784|
000ee4  6c20              LDR      r0,[r4,#0x40]
000ee6  3078              ADDS     r0,r0,#0x78
000ee8  eb050245          ADD      r2,r5,r5,LSL #1
000eec  eb0202c5          ADD      r2,r2,r5,LSL #3
000ef0  eb000082          ADD      r0,r0,r2,LSL #2
000ef4  eb060286          ADD      r2,r6,r6,LSL #2
000ef8  eb000082          ADD      r0,r0,r2,LSL #2
000efc  60c1              STR      r1,[r0,#0xc]
;;;539    				sys->eq->peq[j].filter[i].g = 0x20000000;
000efe  f04f5100          MOV      r1,#0x20000000
000f02  6c20              LDR      r0,[r4,#0x40]
000f04  3078              ADDS     r0,r0,#0x78
000f06  eb050245          ADD      r2,r5,r5,LSL #1
000f0a  eb0202c5          ADD      r2,r2,r5,LSL #3
000f0e  eb000082          ADD      r0,r0,r2,LSL #2
000f12  eb060286          ADD      r2,r6,r6,LSL #2
000f16  eb000082          ADD      r0,r0,r2,LSL #2
000f1a  6101              STR      r1,[r0,#0x10]
000f1c  1c70              ADDS     r0,r6,#1              ;532
000f1e  b2c6              UXTB     r6,r0                 ;532
                  |L1.3872|
000f20  2e02              CMP      r6,#2                 ;532
000f22  dba7              BLT      |L1.3700|
;;;540    			}
;;;541    		 
;;;542    			sys->eq->peq[j].vol = 0;
000f24  2100              MOVS     r1,#0
000f26  6c20              LDR      r0,[r4,#0x40]
000f28  3078              ADDS     r0,r0,#0x78
000f2a  eb050245          ADD      r2,r5,r5,LSL #1
000f2e  eb0202c5          ADD      r2,r2,r5,LSL #3
000f32  eb000082          ADD      r0,r0,r2,LSL #2
000f36  6281              STR      r1,[r0,#0x28]
                  |L1.3896|
000f38  1c68              ADDS     r0,r5,#1              ;496
000f3a  b2c5              UXTB     r5,r0                 ;496
                  |L1.3900|
000f3c  2d06              CMP      r5,#6                 ;496
000f3e  f6ffae53          BLT      |L1.3048|
;;;543    		 
;;;544    	   }
;;;545    	 }
;;;546    	 
;;;547    	 for(i = 0; i < ROOM_EQ_FILTER_NUM; i++){
000f42  2600              MOVS     r6,#0
000f44  e02b              B        |L1.3998|
                  |L1.3910|
;;;548    		  sys->eq->req.filter[i].freq = EQ_FREQ_DEFAULT;
000f46  2064              MOVS     r0,#0x64
000f48  eb060286          ADD      r2,r6,r6,LSL #2
000f4c  6c21              LDR      r1,[r4,#0x40]
000f4e  f8210022          STRH     r0,[r1,r2,LSL #2]
;;;549    		  sys->eq->req.filter[i].gain = 0;
000f52  2000              MOVS     r0,#0
000f54  eb060286          ADD      r2,r6,r6,LSL #2
000f58  6c21              LDR      r1,[r4,#0x40]
000f5a  eb010182          ADD      r1,r1,r2,LSL #2
000f5e  6048              STR      r0,[r1,#4]
;;;550    			sys->eq->req.filter[i].Q = EQ_Q_MIN;
000f60  2003              MOVS     r0,#3
000f62  eb060286          ADD      r2,r6,r6,LSL #2
000f66  6c21              LDR      r1,[r4,#0x40]
000f68  eb010182          ADD      r1,r1,r2,LSL #2
000f6c  7088              STRB     r0,[r1,#2]
;;;551    			sys->eq->req.filter[i].a = 0x7ed21bc1;
000f6e  48cf              LDR      r0,|L1.4780|
000f70  eb060286          ADD      r2,r6,r6,LSL #2
000f74  6c21              LDR      r1,[r4,#0x40]
000f76  eb010182          ADD      r1,r1,r2,LSL #2
000f7a  6088              STR      r0,[r1,#8]
;;;552    			sys->eq->req.filter[i].b = 0x7ffd2e94;
000f7c  48cc              LDR      r0,|L1.4784|
000f7e  eb060286          ADD      r2,r6,r6,LSL #2
000f82  6c21              LDR      r1,[r4,#0x40]
000f84  eb010182          ADD      r1,r1,r2,LSL #2
000f88  60c8              STR      r0,[r1,#0xc]
;;;553    			sys->eq->req.filter[i].g = 0x20000000;
000f8a  f04f5000          MOV      r0,#0x20000000
000f8e  eb060286          ADD      r2,r6,r6,LSL #2
000f92  6c21              LDR      r1,[r4,#0x40]
000f94  eb010182          ADD      r1,r1,r2,LSL #2
000f98  6108              STR      r0,[r1,#0x10]
000f9a  1c70              ADDS     r0,r6,#1              ;547
000f9c  b2c6              UXTB     r6,r0                 ;547
                  |L1.3998|
000f9e  2e06              CMP      r6,#6                 ;547
000fa0  dbd1              BLT      |L1.3910|
                  |L1.4002|
;;;554    	 }
;;;555    
;;;556     }
;;;557     
;;;558    	 sys_database_save(sys, type);
000fa2  4639              MOV      r1,r7
000fa4  4620              MOV      r0,r4
000fa6  f7fffffe          BL       sys_database_save
;;;559    
;;;560    }
000faa  e8bd81f0          POP      {r4-r8,pc}
;;;561    
                          ENDP

                  sys_send_msg PROC
;;;843    
;;;844    void sys_send_msg(sys_msg_type_t type, uint8 data)
000fae  b538              PUSH     {r3-r5,lr}
;;;845    {
000fb0  4605              MOV      r5,r0
000fb2  460c              MOV      r4,r1
;;;846    	 sys_msg_t msg;
;;;847    
;;;848       msg.msg = type;
000fb4  f88d5000          STRB     r5,[sp,#0]
;;;849    	 msg.data = data;  
000fb8  f88d4001          STRB     r4,[sp,#1]
;;;850    	
;;;851    	 xQueueSend(gSysQueue, &msg, portMAX_DELAY);
000fbc  2300              MOVS     r3,#0
000fbe  1e5a              SUBS     r2,r3,#1
000fc0  4669              MOV      r1,sp
000fc2  48bc              LDR      r0,|L1.4788|
000fc4  6800              LDR      r0,[r0,#0]  ; gSysQueue
000fc6  f7fffffe          BL       xQueueGenericSend
;;;852    }
000fca  bd38              POP      {r3-r5,pc}
;;;853    
                          ENDP

                  sys_ip_set_to_default PROC
;;;562    
;;;563    void sys_ip_set_to_default(sys_state_t *sys)
000fcc  e92d41f0          PUSH     {r4-r8,lr}
;;;564    {
000fd0  4604              MOV      r4,r0
;;;565    	uint32 ip = (uint32)((192 << 24) | (168 << 16) | (1 << 8) | (222 << 0));
000fd2  4fb9              LDR      r7,|L1.4792|
;;;566    	uint32 netmask = (uint32)((255 << 24) | (255 << 16) | (255 << 8) | (0 << 0));
000fd4  f06f05ff          MVN      r5,#0xff
;;;567    	uint32 gateway = (uint32)((192 << 24) | (168 << 16) | (1 << 8) | (1 << 0));
000fd8  4eb7              LDR      r6,|L1.4792|
000fda  3edd              SUBS     r6,r6,#0xdd
;;;568    	
;;;569    	lwIPNetworkConfigChange(ip, netmask, gateway, 0);
000fdc  2300              MOVS     r3,#0
000fde  4632              MOV      r2,r6
000fe0  4629              MOV      r1,r5
000fe2  4638              MOV      r0,r7
000fe4  f7fffffe          BL       lwIPNetworkConfigChange
;;;570    	
;;;571    	sys->ip_mode = 0;
000fe8  2000              MOVS     r0,#0
000fea  74a0              STRB     r0,[r4,#0x12]
;;;572    	sys->ip = ip;
000fec  6027              STR      r7,[r4,#0]
;;;573    	sys->netmask = netmask;
000fee  6065              STR      r5,[r4,#4]
;;;574    	sys->gateway = gateway;
000ff0  60a6              STR      r6,[r4,#8]
;;;575    	
;;;576    	dis_send_msg(DIS_UPDATE, MENU_NUM);
000ff2  2116              MOVS     r1,#0x16
000ff4  2001              MOVS     r0,#1
000ff6  f7fffffe          BL       dis_send_msg
;;;577    	
;;;578    	sys_send_msg(DATABASE_UPDATE_MSG, 0);
000ffa  2100              MOVS     r1,#0
000ffc  2002              MOVS     r0,#2
000ffe  f7fffffe          BL       sys_send_msg
;;;579    }
001002  e8bd81f0          POP      {r4-r8,pc}
;;;580    
                          ENDP

                  sys_print_sys_nv PROC
;;;581    
;;;582    static void sys_print_sys_nv(sys_state_t *sys)
001006  b510              PUSH     {r4,lr}
;;;583    {
001008  4604              MOV      r4,r0
;;;584    	 SYS_TRACE("*******************************");
00100a  a0ac              ADR      r0,|L1.4796|
00100c  f7fffffe          BL       s_printf
;;;585    	 SYS_TRACE("method = %d\r\n", sys->method);
001010  7ce1              LDRB     r1,[r4,#0x13]
001012  a0b2              ADR      r0,|L1.4828|
001014  f7fffffe          BL       s_printf
;;;586    	 SYS_TRACE("bright = %d\r\n", sys->bright);
001018  7ea1              LDRB     r1,[r4,#0x1a]
00101a  a0b4              ADR      r0,|L1.4844|
00101c  f7fffffe          BL       s_printf
;;;587    	 SYS_TRACE("vol = %d\r\n", sys->master_vol);
001020  a0b6              ADR      r0,|L1.4860|
001022  6961              LDR      r1,[r4,#0x14]
001024  f7fffffe          BL       s_printf
;;;588    }
001028  bd10              POP      {r4,pc}
;;;589    
                          ENDP

                  sys_runtime_parameter_init PROC
;;;590    static void sys_runtime_parameter_init(sys_state_t *sys)
00102a  2100              MOVS     r1,#0
;;;591    {
;;;592    	 sys->cur_room_eq = PRE_NORMAL;
00102c  f8001f44          STRB     r1,[r0,#0x44]!
;;;593    	 sys->room_eq_index = 0;
001030  f8001c1b          STRB     r1,[r0,#-0x1b]
;;;594    	 sys->cur_cust_eq = PRE_USER1;
001034  2103              MOVS     r1,#3
001036  7041              STRB     r1,[r0,#1]
;;;595    	 sys->temp_sub_model = SUB_DEFAULT_MODE;
001038  2106              MOVS     r1,#6
00103a  7381              STRB     r1,[r0,#0xe]
;;;596    	 sys->is_trigger_off_need_delay = false;
00103c  2100              MOVS     r1,#0
00103e  7241              STRB     r1,[r0,#9]
;;;597    	 sys->is_auto_power_on_enable = true;
001040  2101              MOVS     r1,#1
001042  7201              STRB     r1,[r0,#8]
;;;598    	 sys->confirm_reset = false;
001044  2100              MOVS     r1,#0
001046  70c1              STRB     r1,[r0,#3]
;;;599    	 sys->do_reset = false;
001048  7081              STRB     r1,[r0,#2]
;;;600    	 sys->is_in_protection = false;
00104a  7281              STRB     r1,[r0,#0xa]
;;;601    	 sys->is_short_circuit = false;
00104c  72c1              STRB     r1,[r0,#0xb]
;;;602    	 sys->protect_bitmap = 0;
00104e  7181              STRB     r1,[r0,#6]
;;;603    	 sys->is_dis_timeout = false;
001050  7341              STRB     r1,[r0,#0xd]
001052  f1a00044          SUB      r0,r0,#0x44
;;;604    }
001056  4770              BX       lr
;;;605    
                          ENDP

                  _get_sub_lp_freq_index PROC
;;;1080   
;;;1081   static uint8 _get_sub_lp_freq_index(uint16 freq)
001058  4601              MOV      r1,r0
;;;1082   {
;;;1083     uint8 index = 0;
00105a  2000              MOVS     r0,#0
;;;1084   	
;;;1085   	if(freq < SUB_LOWPASS_MIN){
00105c  291e              CMP      r1,#0x1e
00105e  db19              BLT      |L1.4244|
;;;1086   		
;;;1087   	}else if(freq < SUB_LOWPASS_NODE1){
001060  293c              CMP      r1,#0x3c
001062  da03              BGE      |L1.4204|
;;;1088   		index = (freq - SUB_LOWPASS_MIN + SUB_LP_OFFSET_OF_FILTER) / SUB_LP_NODE1_STEP;
001064  f1a10214          SUB      r2,r1,#0x14
001068  b2d0              UXTB     r0,r2
00106a  e013              B        |L1.4244|
                  |L1.4204|
;;;1089   	}else if(freq < SUB_LOWPASS_NODE2){
00106c  2978              CMP      r1,#0x78
00106e  da07              BGE      |L1.4224|
;;;1090   #define NODE1_OFFSET ((SUB_LOWPASS_NODE1 - SUB_LOWPASS_MIN + SUB_LP_OFFSET_OF_FILTER) / SUB_LP_NODE1_STEP)
;;;1091   		index = (freq - SUB_LOWPASS_NODE1) / SUB_LP_NODE2_STEP + NODE1_OFFSET;
001070  f1a1023c          SUB      r2,r1,#0x3c
001074  2305              MOVS     r3,#5
001076  fb92f2f3          SDIV     r2,r2,r3
00107a  3228              ADDS     r2,r2,#0x28
00107c  b2d0              UXTB     r0,r2
00107e  e009              B        |L1.4244|
                  |L1.4224|
;;;1092   	}else if(freq <= SUB_LOWPASS_MAX){
001080  f5b17f96          CMP      r1,#0x12c
001084  dc06              BGT      |L1.4244|
;;;1093   #define NODE2_OFFSET ((SUB_LOWPASS_NODE2 - SUB_LOWPASS_NODE1) / SUB_LP_NODE2_STEP + ((SUB_LOWPASS_NODE1 - SUB_LOWPASS_MIN + SUB_LP_OFFSET_OF_FILTER) / SUB_LP_NODE1_STEP))
;;;1094      	index = (freq - SUB_LOWPASS_NODE2) / SUB_LP_NODE3_STEP + NODE2_OFFSET;	
001086  f1a10278          SUB      r2,r1,#0x78
00108a  230a              MOVS     r3,#0xa
00108c  fb92f2f3          SDIV     r2,r2,r3
001090  3234              ADDS     r2,r2,#0x34
001092  b2d0              UXTB     r0,r2
                  |L1.4244|
;;;1095   	}
;;;1096   	
;;;1097   	return index;
;;;1098   }
001094  4770              BX       lr
;;;1099   
                          ENDP

                  sys_line_highpass_set PROC
;;;1170   
;;;1171   void sys_line_highpass_set(sys_state_t *sys)
001096  b538              PUSH     {r3-r5,lr}
;;;1172   {
001098  4604              MOV      r4,r0
;;;1173   	uint8 index;
;;;1174   	
;;;1175   	if(sys->lineout_highpass == LINEOUT_HIGHPASS_DEFAULT){
00109a  8c20              LDRH     r0,[r4,#0x20]
00109c  f5b07fa5          CMP      r0,#0x14a
0010a0  d102              BNE      |L1.4264|
;;;1176   		 dsp_lineout_hp_bypass();
0010a2  f7fffffe          BL       dsp_lineout_hp_bypass
0010a6  e02e              B        |L1.4358|
                  |L1.4264|
;;;1177   	}else{
;;;1178   	
;;;1179   		index = _get_sub_lp_freq_index(sys->lineout_highpass);
0010a8  8c20              LDRH     r0,[r4,#0x20]
0010aa  f7fffffe          BL       _get_sub_lp_freq_index
0010ae  4605              MOV      r5,r0
;;;1180   	
;;;1181   		switch(sys->lineout_highpass_slope){
0010b0  f8940022          LDRB     r0,[r4,#0x22]
0010b4  2801              CMP      r0,#1
0010b6  d004              BEQ      |L1.4290|
0010b8  2802              CMP      r0,#2
0010ba  d00d              BEQ      |L1.4312|
0010bc  2803              CMP      r0,#3
0010be  d121              BNE      |L1.4356|
0010c0  e015              B        |L1.4334|
                  |L1.4290|
;;;1182   			case FILTER_SLOPE_12DB:
;;;1183   				dsp_subLpFre_set(FILTER_SLOPE_12DB, index, SUB_LP12DB_REG_NUM, -0x20, -0x30);
0010c2  f06f002f          MVN      r0,#0x2f
0010c6  f06f031f          MVN      r3,#0x1f
0010ca  2203              MOVS     r2,#3
0010cc  4629              MOV      r1,r5
0010ce  9000              STR      r0,[sp,#0]
0010d0  2001              MOVS     r0,#1
0010d2  f7fffffe          BL       dsp_subLpFre_set
;;;1184   			break;
0010d6  e015              B        |L1.4356|
                  |L1.4312|
;;;1185   		
;;;1186   			case FILTER_SLOPE_24DB:
;;;1187   				dsp_subLpFre_set(FILTER_SLOPE_24DB, index, SUB_LP24DB_REG_NUM, -0x20, -0x30);
0010d8  f06f002f          MVN      r0,#0x2f
0010dc  f06f031f          MVN      r3,#0x1f
0010e0  2206              MOVS     r2,#6
0010e2  4629              MOV      r1,r5
0010e4  9000              STR      r0,[sp,#0]
0010e6  2002              MOVS     r0,#2
0010e8  f7fffffe          BL       dsp_subLpFre_set
;;;1188   			break;
0010ec  e00a              B        |L1.4356|
                  |L1.4334|
;;;1189   		
;;;1190   			case FILTER_SLOPE_48DB:
;;;1191   				dsp_subLpFre_set(FILTER_SLOPE_48DB, index, SUB_LP48DB_REG_NUM, -0x20, -0x30);
0010ee  f06f002f          MVN      r0,#0x2f
0010f2  f06f031f          MVN      r3,#0x1f
0010f6  220c              MOVS     r2,#0xc
0010f8  4629              MOV      r1,r5
0010fa  9000              STR      r0,[sp,#0]
0010fc  2003              MOVS     r0,#3
0010fe  f7fffffe          BL       dsp_subLpFre_set
;;;1192   			break;
001102  bf00              NOP      
                  |L1.4356|
001104  bf00              NOP                            ;1184
                  |L1.4358|
;;;1193   	}
;;;1194   	
;;;1195   }
;;;1196   }
001106  bd38              POP      {r3-r5,pc}
;;;1197   
                          ENDP

                  sys_load_roomeq PROC
;;;1233   
;;;1234   void sys_load_roomeq(sys_state_t *sys)
001108  b570              PUSH     {r4-r6,lr}
;;;1235   {
00110a  4605              MOV      r5,r0
;;;1236   	uint8 j;
;;;1237   	
;;;1238   	for(j = 0; j < ROOM_EQ_FILTER_NUM; j++){
00110c  2400              MOVS     r4,#0
00110e  e01f              B        |L1.4432|
                  |L1.4368|
;;;1239   		dsp_eq_set_freq(sys->eq->req.filter[j].a, j, TYPE_ROOM_EQ);
001110  eb040284          ADD      r2,r4,r4,LSL #2
001114  6c29              LDR      r1,[r5,#0x40]
001116  eb010182          ADD      r1,r1,r2,LSL #2
00111a  2201              MOVS     r2,#1
00111c  6888              LDR      r0,[r1,#8]
00111e  4621              MOV      r1,r4
001120  f7fffffe          BL       dsp_eq_set_freq
;;;1240   		dsp_eq_set_width(sys->eq->req.filter[j].b, j, TYPE_ROOM_EQ);
001124  eb040284          ADD      r2,r4,r4,LSL #2
001128  6c29              LDR      r1,[r5,#0x40]
00112a  eb010182          ADD      r1,r1,r2,LSL #2
00112e  2201              MOVS     r2,#1
001130  68c8              LDR      r0,[r1,#0xc]
001132  4621              MOV      r1,r4
001134  f7fffffe          BL       dsp_eq_set_width
;;;1241   		dsp_eq_set_gain(sys->eq->req.filter[j].g, j, TYPE_ROOM_EQ);
001138  eb040284          ADD      r2,r4,r4,LSL #2
00113c  6c29              LDR      r1,[r5,#0x40]
00113e  eb010182          ADD      r1,r1,r2,LSL #2
001142  2201              MOVS     r2,#1
001144  6908              LDR      r0,[r1,#0x10]
001146  4621              MOV      r1,r4
001148  f7fffffe          BL       dsp_eq_set_gain
00114c  1c60              ADDS     r0,r4,#1              ;1238
00114e  b2c4              UXTB     r4,r0                 ;1238
                  |L1.4432|
001150  2c06              CMP      r4,#6                 ;1238
001152  dbdd              BLT      |L1.4368|
;;;1242   	}
;;;1243   	
;;;1244   	SYS_TRACE("sys_load_roomeq\r\n");
001154  a06c              ADR      r0,|L1.4872|
001156  f7fffffe          BL       s_printf
;;;1245   }
00115a  bd70              POP      {r4-r6,pc}
;;;1246   
                          ENDP

                  sys_eq_state_set PROC
;;;1279   
;;;1280   void sys_eq_state_set(sys_state_t *sys)
00115c  b510              PUSH     {r4,lr}
;;;1281   {
00115e  4604              MOV      r4,r0
;;;1282   	if(sys->eq_on_off == 0){
001160  f894002a          LDRB     r0,[r4,#0x2a]
001164  b910              CBNZ     r0,|L1.4460|
;;;1283   		dsp_eq_off();
001166  f7fffffe          BL       dsp_eq_off
00116a  e004              B        |L1.4470|
                  |L1.4460|
;;;1284   	}else{
;;;1285   		dsp_eq_on();
00116c  f7fffffe          BL       dsp_eq_on
;;;1286   		sys_load_roomeq(sys);
001170  4620              MOV      r0,r4
001172  f7fffffe          BL       sys_load_roomeq
                  |L1.4470|
;;;1287   	}
;;;1288   }
001176  bd10              POP      {r4,pc}
;;;1289   
                          ENDP

                  sys_load_peq PROC
;;;1266   
;;;1267   void sys_load_peq(sys_state_t *sys)
001178  b570              PUSH     {r4-r6,lr}
;;;1268   {
00117a  4604              MOV      r4,r0
;;;1269     uint8 j;
;;;1270   
;;;1271     OSAL_ASSERT(sys->preset < PRESET_NUM);	
00117c  7e60              LDRB     r0,[r4,#0x19]
00117e  2806              CMP      r0,#6
001180  db07              BLT      |L1.4498|
001182  4a66              LDR      r2,|L1.4892|
001184  a166              ADR      r1,|L1.4896|
001186  f2af30ac          ADR      r0,|L1.3548|
00118a  f7fffffe          BL       s_printf
00118e  bf00              NOP      
                  |L1.4496|
001190  e7fe              B        |L1.4496|
                  |L1.4498|
;;;1272   	
;;;1273   	for(j = 0; j < PRESET_EQ_FILTER_NUM; j++){
001192  2500              MOVS     r5,#0
001194  e037              B        |L1.4614|
                  |L1.4502|
;;;1274   		dsp_eq_set_freq(sys->eq->peq[sys->preset].filter[j].a, j, TYPE_PRESET_EQ);
001196  6c21              LDR      r1,[r4,#0x40]
001198  3178              ADDS     r1,r1,#0x78
00119a  7e62              LDRB     r2,[r4,#0x19]
00119c  eb020342          ADD      r3,r2,r2,LSL #1
0011a0  eb0302c2          ADD      r2,r3,r2,LSL #3
0011a4  eb010182          ADD      r1,r1,r2,LSL #2
0011a8  eb050285          ADD      r2,r5,r5,LSL #2
0011ac  eb010182          ADD      r1,r1,r2,LSL #2
0011b0  2202              MOVS     r2,#2
0011b2  6888              LDR      r0,[r1,#8]
0011b4  4629              MOV      r1,r5
0011b6  f7fffffe          BL       dsp_eq_set_freq
;;;1275   		dsp_eq_set_width(sys->eq->peq[sys->preset].filter[j].b, j, TYPE_PRESET_EQ);
0011ba  6c21              LDR      r1,[r4,#0x40]
0011bc  3178              ADDS     r1,r1,#0x78
0011be  7e62              LDRB     r2,[r4,#0x19]
0011c0  eb020342          ADD      r3,r2,r2,LSL #1
0011c4  eb0302c2          ADD      r2,r3,r2,LSL #3
0011c8  eb010182          ADD      r1,r1,r2,LSL #2
0011cc  eb050285          ADD      r2,r5,r5,LSL #2
0011d0  eb010182          ADD      r1,r1,r2,LSL #2
0011d4  2202              MOVS     r2,#2
0011d6  68c8              LDR      r0,[r1,#0xc]
0011d8  4629              MOV      r1,r5
0011da  f7fffffe          BL       dsp_eq_set_width
;;;1276   		dsp_eq_set_gain(sys->eq->peq[sys->preset].filter[j].g, j, TYPE_PRESET_EQ);
0011de  6c21              LDR      r1,[r4,#0x40]
0011e0  3178              ADDS     r1,r1,#0x78
0011e2  7e62              LDRB     r2,[r4,#0x19]
0011e4  eb020342          ADD      r3,r2,r2,LSL #1
0011e8  eb0302c2          ADD      r2,r3,r2,LSL #3
0011ec  eb010182          ADD      r1,r1,r2,LSL #2
0011f0  eb050285          ADD      r2,r5,r5,LSL #2
0011f4  eb010182          ADD      r1,r1,r2,LSL #2
0011f8  2202              MOVS     r2,#2
0011fa  6908              LDR      r0,[r1,#0x10]
0011fc  4629              MOV      r1,r5
0011fe  f7fffffe          BL       dsp_eq_set_gain
001202  1c68              ADDS     r0,r5,#1              ;1273
001204  b2c5              UXTB     r5,r0                 ;1273
                  |L1.4614|
001206  2d02              CMP      r5,#2                 ;1273
001208  dbc5              BLT      |L1.4502|
;;;1277   	}
;;;1278   }
00120a  bd70              POP      {r4-r6,pc}
;;;1279   
                          ENDP

                  sys_sub_eq_set PROC
;;;1289   
;;;1290   static void sys_sub_eq_set(sys_state_t *sys)
00120c  b570              PUSH     {r4-r6,lr}
;;;1291   {
00120e  4605              MOV      r5,r0
;;;1292   	uint8 j;
;;;1293   	
;;;1294   	SYS_TRACE("sys_sub_eq_set:%d\r\n", sys->sub_model);
001210  7ee9              LDRB     r1,[r5,#0x1b]
001212  a04a              ADR      r0,|L1.4924|
001214  f7fffffe          BL       s_printf
;;;1295   	
;;;1296   	for(j = 0; j < SUB_MODE_EQ_FILTER_NUM; j++){
001218  2400              MOVS     r4,#0
00121a  e01f              B        |L1.4700|
                  |L1.4636|
;;;1297   		dsp_eq_set_freq(sub_eq_array_a[sys->sub_model][j], j, TYPE_SUB_EQ);
00121c  7ee9              LDRB     r1,[r5,#0x1b]
00121e  4a4c              LDR      r2,|L1.4944|
001220  eb021141          ADD      r1,r2,r1,LSL #5
001224  f8510024          LDR      r0,[r1,r4,LSL #2]
001228  2203              MOVS     r2,#3
00122a  4621              MOV      r1,r4
00122c  f7fffffe          BL       dsp_eq_set_freq
;;;1298   		dsp_eq_set_width(sub_eq_array_b[sys->sub_model][j], j, TYPE_SUB_EQ);
001230  7ee9              LDRB     r1,[r5,#0x1b]
001232  4a48              LDR      r2,|L1.4948|
001234  eb021141          ADD      r1,r2,r1,LSL #5
001238  f8510024          LDR      r0,[r1,r4,LSL #2]
00123c  2203              MOVS     r2,#3
00123e  4621              MOV      r1,r4
001240  f7fffffe          BL       dsp_eq_set_width
;;;1299   		dsp_eq_set_gain(sub_eq_array_g[sys->sub_model][j], j, TYPE_SUB_EQ);
001244  7ee9              LDRB     r1,[r5,#0x1b]
001246  4a44              LDR      r2,|L1.4952|
001248  eb021141          ADD      r1,r2,r1,LSL #5
00124c  f8510024          LDR      r0,[r1,r4,LSL #2]
001250  2203              MOVS     r2,#3
001252  4621              MOV      r1,r4
001254  f7fffffe          BL       dsp_eq_set_gain
001258  1c60              ADDS     r0,r4,#1              ;1296
00125a  b2c4              UXTB     r4,r0                 ;1296
                  |L1.4700|
00125c  2c08              CMP      r4,#8                 ;1296
00125e  dbdd              BLT      |L1.4636|
;;;1300   	}
;;;1301   	
;;;1302   }
001260  bd70              POP      {r4-r6,pc}
;;;1303   
                          ENDP

                  sys_delay_time_set PROC
;;;1197   
;;;1198   void sys_delay_time_set(sys_state_t *sys)
001262  b510              PUSH     {r4,lr}
;;;1199   {
001264  4604              MOV      r4,r0
;;;1200   	if(sys->d_router == DELAY_SUB){
001266  f8940026          LDRB     r0,[r4,#0x26]
00126a  b948              CBNZ     r0,|L1.4736|
;;;1201   		dsp_delay_time_set(sys->sub[sys->sub_model].delay);
00126c  7ee2              LDRB     r2,[r4,#0x1b]
00126e  eb020242          ADD      r2,r2,r2,LSL #1
001272  6be1              LDR      r1,[r4,#0x3c]
001274  eb010182          ADD      r1,r1,r2,LSL #2
001278  7a88              LDRB     r0,[r1,#0xa]
00127a  f7fffffe          BL       dsp_delay_time_set
00127e  e007              B        |L1.4752|
                  |L1.4736|
;;;1202   	}
;;;1203   	else if(sys->d_router == DELAY_LINEOUT){
001280  f8940026          LDRB     r0,[r4,#0x26]
001284  2801              CMP      r0,#1
001286  d103              BNE      |L1.4752|
;;;1204   		dsp_delay_time_set(sys->line_delay_time);
001288  f8940024          LDRB     r0,[r4,#0x24]
00128c  f7fffffe          BL       dsp_delay_time_set
                  |L1.4752|
;;;1205   	}
;;;1206   }
001290  bd10              POP      {r4,pc}
;;;1207   
                          ENDP

                  sys_delay_switch_to PROC
;;;1208   void sys_delay_switch_to(sys_state_t *sys)
001292  b510              PUSH     {r4,lr}
;;;1209   {
001294  4604              MOV      r4,r0
;;;1210     if(sys->d_router == DELAY_SUB){
001296  f8940026          LDRB     r0,[r4,#0x26]
00129a  b928              CBNZ     r0,|L1.4776|
;;;1211   		dsp_delay_switch_to_sub();
00129c  f7fffffe          BL       dsp_delay_switch_to_sub
;;;1212   		SYS_TRACE("delay switch to sub\r\n");
0012a0  a02e              ADR      r0,|L1.4956|
0012a2  f7fffffe          BL       s_printf
0012a6  e074              B        |L1.5010|
                  |L1.4776|
0012a8  e064              B        |L1.4980|
0012aa  0000              DCW      0x0000
                  |L1.4780|
                          DCD      0x7ed21bc1
                  |L1.4784|
                          DCD      0x7ffd2e94
                  |L1.4788|
                          DCD      gSysQueue
                  |L1.4792|
                          DCD      0xc0a801de
                  |L1.4796|
0012bc  2a2a2a2a          DCB      "*******************************",0
0012c0  2a2a2a2a
0012c4  2a2a2a2a
0012c8  2a2a2a2a
0012cc  2a2a2a2a
0012d0  2a2a2a2a
0012d4  2a2a2a2a
0012d8  2a2a2a00
                  |L1.4828|
0012dc  6d657468          DCB      "method = %d\r\n",0
0012e0  6f64203d
0012e4  2025640d
0012e8  0a00    
0012ea  00                DCB      0
0012eb  00                DCB      0
                  |L1.4844|
0012ec  62726967          DCB      "bright = %d\r\n",0
0012f0  6874203d
0012f4  2025640d
0012f8  0a00    
0012fa  00                DCB      0
0012fb  00                DCB      0
                  |L1.4860|
0012fc  766f6c20          DCB      "vol = %d\r\n",0
001300  3d202564
001304  0d0a00  
001307  00                DCB      0
                  |L1.4872|
001308  7379735f          DCB      "sys_load_roomeq\r\n",0
00130c  6c6f6164
001310  5f726f6f
001314  6d65710d
001318  0a00    
00131a  00                DCB      0
00131b  00                DCB      0
                  |L1.4892|
                          DCD      |symbol_number.37|
                  |L1.4896|
001320  7379732d          DCB      "sys->preset < PRESET_NUM",0
001324  3e707265
001328  73657420
00132c  3c205052
001330  45534554
001334  5f4e554d
001338  00      
001339  00                DCB      0
00133a  00                DCB      0
00133b  00                DCB      0
                  |L1.4924|
00133c  7379735f          DCB      "sys_sub_eq_set:%d\r\n",0
001340  7375625f
001344  65715f73
001348  65743a25
00134c  640d0a00
                  |L1.4944|
                          DCD      sub_eq_array_a
                  |L1.4948|
                          DCD      sub_eq_array_b
                  |L1.4952|
                          DCD      sub_eq_array_g
                  |L1.4956|
00135c  64656c61          DCB      "delay switch to sub\r\n",0
001360  79207377
001364  69746368
001368  20746f20
00136c  7375620d
001370  0a00    
001372  00                DCB      0
001373  00                DCB      0
                  |L1.4980|
;;;1213   	}
;;;1214   	else if(sys->d_router == DELAY_LINEOUT){
001374  f8940026          LDRB     r0,[r4,#0x26]
001378  2801              CMP      r0,#1
00137a  d105              BNE      |L1.5000|
;;;1215   		dsp_delay_switch_to_line();
00137c  f7fffffe          BL       dsp_delay_switch_to_line
;;;1216   		SYS_TRACE("delay switch to lineout\r\n");
001380  a0eb              ADR      r0,|L1.5936|
001382  f7fffffe          BL       s_printf
001386  e004              B        |L1.5010|
                  |L1.5000|
;;;1217   	}else{
;;;1218       dsp_delay_switch_off();
001388  f7fffffe          BL       dsp_delay_switch_off
;;;1219   		SYS_TRACE("delay switch to off\r\n");
00138c  a0ef              ADR      r0,|L1.5964|
00138e  f7fffffe          BL       s_printf
                  |L1.5010|
;;;1220   	}		
;;;1221   }
001392  bd10              POP      {r4,pc}
;;;1222   
                          ENDP

                  sys_phrase_set PROC
;;;1223   
;;;1224   void sys_phrase_set(sys_state_t *sys)
001394  b510              PUSH     {r4,lr}
;;;1225   {
001396  4604              MOV      r4,r0
;;;1226   	if(sys->sub[sys->sub_model].phrase == 1){
001398  7ee1              LDRB     r1,[r4,#0x1b]
00139a  eb010141          ADD      r1,r1,r1,LSL #1
00139e  6be0              LDR      r0,[r4,#0x3c]
0013a0  f8100021          LDRB     r0,[r0,r1,LSL #2]
0013a4  2801              CMP      r0,#1
0013a6  d102              BNE      |L1.5038|
;;;1227   		dsp_phrase_on();
0013a8  f7fffffe          BL       dsp_phrase_on
0013ac  e001              B        |L1.5042|
                  |L1.5038|
;;;1228   	}else{
;;;1229   		dsp_phrase_off();
0013ae  f7fffffe          BL       dsp_phrase_off
                  |L1.5042|
;;;1230   	}
;;;1231   }
0013b2  bd10              POP      {r4,pc}
;;;1232   
                          ENDP

                  _get_sub_hp_freq_index PROC
;;;1126   
;;;1127   static uint8 _get_sub_hp_freq_index(uint16 freq)
0013b4  4601              MOV      r1,r0
;;;1128   {
;;;1129   	uint8 index = 0;
0013b6  2000              MOVS     r0,#0
;;;1130   	
;;;1131   	if(freq < SUB_HIGHPASS_MIN){
0013b8  2914              CMP      r1,#0x14
0013ba  db0e              BLT      |L1.5082|
;;;1132   	}else if(freq < SUB_HIGHPASS_NODE1){
0013bc  293c              CMP      r1,#0x3c
0013be  da03              BGE      |L1.5064|
;;;1133   		index = (freq - SUB_HIGHPASS_MIN) / SUB_HP_NODE1_STEP;
0013c0  f1a10214          SUB      r2,r1,#0x14
0013c4  b2d0              UXTB     r0,r2
0013c6  e008              B        |L1.5082|
                  |L1.5064|
;;;1134   	}else if(freq <=  SUB_HIGHPASS_MAX){
0013c8  2964              CMP      r1,#0x64
0013ca  dc06              BGT      |L1.5082|
;;;1135   #define HP_NODE1_OFFSET ((SUB_HIGHPASS_NODE1 - SUB_HIGHPASS_MIN) / SUB_HP_NODE1_STEP)				
;;;1136   	  index = (freq - SUB_HIGHPASS_NODE1) / SUB_HP_NODE2_STEP + HP_NODE1_OFFSET;
0013cc  f1a1023c          SUB      r2,r1,#0x3c
0013d0  2305              MOVS     r3,#5
0013d2  fb92f2f3          SDIV     r2,r2,r3
0013d6  3228              ADDS     r2,r2,#0x28
0013d8  b2d0              UXTB     r0,r2
                  |L1.5082|
;;;1137   	}
;;;1138   			
;;;1139     return index;
;;;1140   }
0013da  4770              BX       lr
;;;1141   
                          ENDP

                  sys_sub_highpass_set PROC
;;;1142   void sys_sub_highpass_set(sys_state_t *sys)
0013dc  b570              PUSH     {r4-r6,lr}
;;;1143   {
0013de  4604              MOV      r4,r0
;;;1144   	uint8 index = 0;
0013e0  2500              MOVS     r5,#0
;;;1145   	
;;;1146   	if(sys->sub[sys->sub_model].highpass == SUB_HIGHPASS_OFF){
0013e2  7ee1              LDRB     r1,[r4,#0x1b]
0013e4  eb010141          ADD      r1,r1,r1,LSL #1
0013e8  6be0              LDR      r0,[r4,#0x3c]
0013ea  eb000081          ADD      r0,r0,r1,LSL #2
0013ee  88c0              LDRH     r0,[r0,#6]
0013f0  2882              CMP      r0,#0x82
0013f2  d105              BNE      |L1.5120|
;;;1147   		dsp_sub_hp_bypass();
0013f4  f7fffffe          BL       dsp_sub_hp_bypass
;;;1148   		SYS_TRACE("dsp_sub_hp_bypass\r\n");
0013f8  a0da              ADR      r0,|L1.5988|
0013fa  f7fffffe          BL       s_printf
0013fe  e02d              B        |L1.5212|
                  |L1.5120|
;;;1149   	}else{
;;;1150   		
;;;1151   		index = _get_sub_hp_freq_index(sys->sub[sys->sub_model].highpass);
001400  7ee2              LDRB     r2,[r4,#0x1b]
001402  eb020242          ADD      r2,r2,r2,LSL #1
001406  6be1              LDR      r1,[r4,#0x3c]
001408  eb010182          ADD      r1,r1,r2,LSL #2
00140c  88c8              LDRH     r0,[r1,#6]
00140e  f7fffffe          BL       _get_sub_hp_freq_index
001412  4605              MOV      r5,r0
;;;1152   	
;;;1153   		switch(sys->sub[sys->sub_model].highpass_slope){
001414  7ee1              LDRB     r1,[r4,#0x1b]
001416  eb010141          ADD      r1,r1,r1,LSL #1
00141a  6be0              LDR      r0,[r4,#0x3c]
00141c  eb000081          ADD      r0,r0,r1,LSL #2
001420  7a00              LDRB     r0,[r0,#8]
001422  2801              CMP      r0,#1
001424  d004              BEQ      |L1.5168|
001426  2802              CMP      r0,#2
001428  d009              BEQ      |L1.5182|
00142a  2803              CMP      r0,#3
00142c  d115              BNE      |L1.5210|
00142e  e00d              B        |L1.5196|
                  |L1.5168|
;;;1154   			case FILTER_SLOPE_12DB:
;;;1155   				dsp_subHpFreq_set(FILTER_SLOPE_12DB, index, SUB_LP12DB_REG_NUM, 0x30);
001430  2330              MOVS     r3,#0x30
001432  2203              MOVS     r2,#3
001434  4629              MOV      r1,r5
001436  2001              MOVS     r0,#1
001438  f7fffffe          BL       dsp_subHpFreq_set
;;;1156   			break;
00143c  e00d              B        |L1.5210|
                  |L1.5182|
;;;1157   		
;;;1158   			case FILTER_SLOPE_24DB:
;;;1159   				dsp_subHpFreq_set(FILTER_SLOPE_24DB, index, SUB_LP24DB_REG_NUM, 0x30);
00143e  2330              MOVS     r3,#0x30
001440  2206              MOVS     r2,#6
001442  4629              MOV      r1,r5
001444  2002              MOVS     r0,#2
001446  f7fffffe          BL       dsp_subHpFreq_set
;;;1160   			break;
00144a  e006              B        |L1.5210|
                  |L1.5196|
;;;1161   		
;;;1162   			case FILTER_SLOPE_48DB:
;;;1163   				dsp_subHpFreq_set(FILTER_SLOPE_48DB, index, SUB_LP48DB_REG_NUM, 0x30);
00144c  2330              MOVS     r3,#0x30
00144e  220c              MOVS     r2,#0xc
001450  4629              MOV      r1,r5
001452  2003              MOVS     r0,#3
001454  f7fffffe          BL       dsp_subHpFreq_set
;;;1164   			break;
001458  bf00              NOP      
                  |L1.5210|
00145a  bf00              NOP                            ;1156
                  |L1.5212|
;;;1165   	}
;;;1166   	
;;;1167   }
;;;1168   }
00145c  bd70              POP      {r4-r6,pc}
;;;1169   
                          ENDP

                  sys_sub_lowpass_set PROC
;;;1099   
;;;1100   void sys_sub_lowpass_set(sys_state_t *sys)
00145e  b538              PUSH     {r3-r5,lr}
;;;1101   {
001460  4604              MOV      r4,r0
;;;1102   	uint8 index;
;;;1103   	
;;;1104   	if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_DEFAULT){
001462  7ee1              LDRB     r1,[r4,#0x1b]
001464  eb010141          ADD      r1,r1,r1,LSL #1
001468  6be0              LDR      r0,[r4,#0x3c]
00146a  eb000081          ADD      r0,r0,r1,LSL #2
00146e  8840              LDRH     r0,[r0,#2]
001470  f5b07fa5          CMP      r0,#0x14a
001474  d102              BNE      |L1.5244|
;;;1105   		dsp_sub_lp_bypass();
001476  f7fffffe          BL       dsp_sub_lp_bypass
00147a  e037              B        |L1.5356|
                  |L1.5244|
;;;1106   	}else{
;;;1107   		index = _get_sub_lp_freq_index(sys->sub[sys->sub_model].lowpass);
00147c  7ee2              LDRB     r2,[r4,#0x1b]
00147e  eb020242          ADD      r2,r2,r2,LSL #1
001482  6be1              LDR      r1,[r4,#0x3c]
001484  eb010182          ADD      r1,r1,r2,LSL #2
001488  8848              LDRH     r0,[r1,#2]
00148a  f7fffffe          BL       _get_sub_lp_freq_index
00148e  4605              MOV      r5,r0
;;;1108   		SYS_TRACE("sys_sub_lowpass_set index=[%d]\r\n", index);
001490  4629              MOV      r1,r5
001492  a0b9              ADR      r0,|L1.6008|
001494  f7fffffe          BL       s_printf
;;;1109   	
;;;1110   		switch(sys->sub[sys->sub_model].lowpass_slope){
001498  7ee1              LDRB     r1,[r4,#0x1b]
00149a  eb010141          ADD      r1,r1,r1,LSL #1
00149e  6be0              LDR      r0,[r4,#0x3c]
0014a0  eb000081          ADD      r0,r0,r1,LSL #2
0014a4  7900              LDRB     r0,[r0,#4]
0014a6  2801              CMP      r0,#1
0014a8  d004              BEQ      |L1.5300|
0014aa  2802              CMP      r0,#2
0014ac  d00b              BEQ      |L1.5318|
0014ae  2803              CMP      r0,#3
0014b0  d11b              BNE      |L1.5354|
0014b2  e011              B        |L1.5336|
                  |L1.5300|
;;;1111   			case FILTER_SLOPE_12DB:
;;;1112   				dsp_subLpFre_set(FILTER_SLOPE_12DB, index, SUB_LP12DB_REG_NUM, 0, 0);
0014b4  2000              MOVS     r0,#0
0014b6  4603              MOV      r3,r0
0014b8  2203              MOVS     r2,#3
0014ba  4629              MOV      r1,r5
0014bc  9000              STR      r0,[sp,#0]
0014be  2001              MOVS     r0,#1
0014c0  f7fffffe          BL       dsp_subLpFre_set
;;;1113   			break;
0014c4  e011              B        |L1.5354|
                  |L1.5318|
;;;1114   		
;;;1115   			case FILTER_SLOPE_24DB:
;;;1116   				dsp_subLpFre_set(FILTER_SLOPE_24DB, index, SUB_LP24DB_REG_NUM, 0, 0);
0014c6  2000              MOVS     r0,#0
0014c8  4603              MOV      r3,r0
0014ca  2206              MOVS     r2,#6
0014cc  4629              MOV      r1,r5
0014ce  9000              STR      r0,[sp,#0]
0014d0  2002              MOVS     r0,#2
0014d2  f7fffffe          BL       dsp_subLpFre_set
;;;1117   			break;
0014d6  e008              B        |L1.5354|
                  |L1.5336|
;;;1118   		
;;;1119   			case FILTER_SLOPE_48DB:
;;;1120   				dsp_subLpFre_set(FILTER_SLOPE_48DB, index, SUB_LP48DB_REG_NUM, 0, 0);
0014d8  2000              MOVS     r0,#0
0014da  4603              MOV      r3,r0
0014dc  220c              MOVS     r2,#0xc
0014de  4629              MOV      r1,r5
0014e0  9000              STR      r0,[sp,#0]
0014e2  2003              MOVS     r0,#3
0014e4  f7fffffe          BL       dsp_subLpFre_set
;;;1121   			break;
0014e8  bf00              NOP      
                  |L1.5354|
0014ea  bf00              NOP                            ;1113
                  |L1.5356|
;;;1122   	}
;;;1123   	
;;;1124   }
;;;1125   }
0014ec  bd38              POP      {r3-r5,pc}
;;;1126   
                          ENDP

                  sys_sub_preset_load PROC
;;;1303   
;;;1304   void sys_sub_preset_load(sys_state_t *sys)
0014ee  b510              PUSH     {r4,lr}
;;;1305   {
0014f0  4604              MOV      r4,r0
;;;1306   	OSAL_ASSERT(sys->sub_model < SUB_MODEL_NUM);
0014f2  7ee0              LDRB     r0,[r4,#0x1b]
0014f4  280d              CMP      r0,#0xd
0014f6  db07              BLT      |L1.5384|
0014f8  4aa8              LDR      r2,|L1.6044|
0014fa  a1a9              ADR      r1,|L1.6048|
0014fc  f2af7024          ADR      r0,|L1.3548|
001500  f7fffffe          BL       s_printf
001504  bf00              NOP      
                  |L1.5382|
001506  e7fe              B        |L1.5382|
                  |L1.5384|
;;;1307   	
;;;1308   	sys_sub_lowpass_set(sys);
001508  4620              MOV      r0,r4
00150a  f7fffffe          BL       sys_sub_lowpass_set
;;;1309     sys_sub_highpass_set(sys);
00150e  4620              MOV      r0,r4
001510  f7fffffe          BL       sys_sub_highpass_set
;;;1310     sys_phrase_set(sys);
001514  4620              MOV      r0,r4
001516  f7fffffe          BL       sys_phrase_set
;;;1311   	sys_delay_switch_to(sys);
00151a  4620              MOV      r0,r4
00151c  f7fffffe          BL       sys_delay_switch_to
;;;1312   	sys_delay_time_set(sys);
001520  4620              MOV      r0,r4
001522  f7fffffe          BL       sys_delay_time_set
;;;1313   	sys_sub_eq_set(sys);
001526  4620              MOV      r0,r4
001528  f7fffffe          BL       sys_sub_eq_set
;;;1314   }
00152c  bd10              POP      {r4,pc}
;;;1315   
                          ENDP

                  sys_factory_reset PROC
;;;605    
;;;606    void sys_factory_reset(sys_state_t *sys)
00152e  b510              PUSH     {r4,lr}
;;;607    {
001530  4604              MOV      r4,r0
;;;608    	 SYS_TRACE("will do factory reset\r\n");
001532  a0a3              ADR      r0,|L1.6080|
001534  f7fffffe          BL       s_printf
;;;609    	
;;;610    	 sys_nv_set_default(sys, 0);
001538  2100              MOVS     r1,#0
00153a  4620              MOV      r0,r4
00153c  f7fffffe          BL       sys_nv_set_default
;;;611    	 sys_nv_set_default(sys, 1);
001540  2101              MOVS     r1,#1
001542  4620              MOV      r0,r4
001544  f7fffffe          BL       sys_nv_set_default
;;;612    	 sys_nv_set_default(sys, 2);
001548  2102              MOVS     r1,#2
00154a  4620              MOV      r0,r4
00154c  f7fffffe          BL       sys_nv_set_default
;;;613    	 sys_runtime_parameter_init(sys);
001550  4620              MOV      r0,r4
001552  f7fffffe          BL       sys_runtime_parameter_init
;;;614    	
;;;615    	 lwIPNetworkConfigChange(0, 0, 0, 1);
001556  2301              MOVS     r3,#1
001558  2200              MOVS     r2,#0
00155a  4611              MOV      r1,r2
00155c  4610              MOV      r0,r2
00155e  f7fffffe          BL       lwIPNetworkConfigChange
;;;616    	
;;;617    	 sys_lcd_bright_change(sys);
001562  4620              MOV      r0,r4
001564  f7fffffe          BL       sys_lcd_bright_change
;;;618    	 njw1195_input_select(NJW_RCA);
001568  2002              MOVS     r0,#2
00156a  f7fffffe          BL       njw1195_input_select
;;;619    	
;;;620    	 sys_sub_preset_load(gSystem_t);
00156e  489a              LDR      r0,|L1.6104|
001570  6800              LDR      r0,[r0,#0]  ; gSystem_t
001572  f7fffffe          BL       sys_sub_preset_load
;;;621    	 sys_master_vol_set(gSystem_t);
001576  4898              LDR      r0,|L1.6104|
001578  6800              LDR      r0,[r0,#0]  ; gSystem_t
00157a  f7fffffe          BL       sys_master_vol_set
;;;622    	 sys_load_peq(gSystem_t);
00157e  4896              LDR      r0,|L1.6104|
001580  6800              LDR      r0,[r0,#0]  ; gSystem_t
001582  f7fffffe          BL       sys_load_peq
;;;623    	 sys_eq_state_set(gSystem_t);
001586  4894              LDR      r0,|L1.6104|
001588  6800              LDR      r0,[r0,#0]  ; gSystem_t
00158a  f7fffffe          BL       sys_eq_state_set
;;;624    	 sys_line_highpass_set(gSystem_t);
00158e  4892              LDR      r0,|L1.6104|
001590  6800              LDR      r0,[r0,#0]  ; gSystem_t
001592  f7fffffe          BL       sys_line_highpass_set
;;;625    	
;;;626    	 if(sys->method == AUDIO){
001596  7ce0              LDRB     r0,[r4,#0x13]
001598  2801              CMP      r0,#1
00159a  d103              BNE      |L1.5540|
;;;627    		update_detect_state(DETECT_AUDIO);
00159c  2000              MOVS     r0,#0
00159e  f7fffffe          BL       update_detect_state
0015a2  e005              B        |L1.5552|
                  |L1.5540|
;;;628    	 }else if(sys->method == TRIGGER){
0015a4  7ce0              LDRB     r0,[r4,#0x13]
0015a6  2802              CMP      r0,#2
0015a8  d102              BNE      |L1.5552|
;;;629    		update_detect_state(DETECT_TRIGGER);
0015aa  2001              MOVS     r0,#1
0015ac  f7fffffe          BL       update_detect_state
                  |L1.5552|
;;;630    	 }
;;;631    	
;;;632    	 sys->is_in_factory = 1;
0015b0  2001              MOVS     r0,#1
0015b2  f884004b          STRB     r0,[r4,#0x4b]
;;;633    	 display_menu_jump(WELCOM_MENU);
0015b6  2000              MOVS     r0,#0
0015b8  f7fffffe          BL       display_menu_jump
;;;634    	 dis_send_msg(DIS_WELCOME, MENU_NUM);
0015bc  2116              MOVS     r1,#0x16
0015be  2000              MOVS     r0,#0
0015c0  f7fffffe          BL       dis_send_msg
;;;635    }
0015c4  bd10              POP      {r4,pc}
;;;636    
                          ENDP

                  sys_audio_sense_thres_set PROC
;;;1069   
;;;1070   void sys_audio_sense_thres_set(sense_threshold_t thrs)
0015c6  b53e              PUSH     {r1-r5,lr}
;;;1071   {
0015c8  4604              MOV      r4,r0
;;;1072   	uint16 array[SENSE_THRESHOLD_NUM] = {271, 260, 249, 236, 225};
0015ca  4a84              LDR      r2,|L1.6108|
0015cc  ca07              LDM      r2,{r0-r2}
0015ce  e88d0007          STM      sp,{r0-r2}
;;;1073   	
;;;1074   	OSAL_ASSERT(thrs < SENSE_THRESHOLD_NUM);
0015d2  2c05              CMP      r4,#5
0015d4  db07              BLT      |L1.5606|
0015d6  4a82              LDR      r2,|L1.6112|
0015d8  a182              ADR      r1,|L1.6116|
0015da  f6af0000          ADR      r0,|L1.3548|
0015de  f7fffffe          BL       s_printf
0015e2  bf00              NOP      
                  |L1.5604|
0015e4  e7fe              B        |L1.5604|
                  |L1.5606|
;;;1075   	
;;;1076   	bsp_pwm_for_sense_set(array[thrs], 400);
0015e6  f83d0014          LDRH     r0,[sp,r4,LSL #1]
0015ea  f44f71c8          MOV      r1,#0x190
0015ee  f7fffffe          BL       bsp_pwm_for_sense_set
;;;1077   }
0015f2  bd3e              POP      {r1-r5,pc}
;;;1078   
                          ENDP

                  sys_database_init PROC
;;;636    
;;;637    void sys_database_init(void)
0015f4  b570              PUSH     {r4-r6,lr}
;;;638    {
;;;639    	int retval;
;;;640    	uint32 crc = 0;
0015f6  2500              MOVS     r5,#0
;;;641    	uint8 *p = pvPortMalloc(sizeof(sys_state_t));
0015f8  2054              MOVS     r0,#0x54
0015fa  f7fffffe          BL       pvPortMalloc
0015fe  4604              MOV      r4,r0
;;;642    	OSAL_ASSERT(p != NULL);
001600  b93c              CBNZ     r4,|L1.5650|
001602  4a7f              LDR      r2,|L1.6144|
001604  a17f              ADR      r1,|L1.6148|
001606  f6af002c          ADR      r0,|L1.3548|
00160a  f7fffffe          BL       s_printf
00160e  bf00              NOP      
                  |L1.5648|
001610  e7fe              B        |L1.5648|
                  |L1.5650|
;;;643    	memset(p, 0, sizeof(sys_state_t));
001612  2154              MOVS     r1,#0x54
001614  4620              MOV      r0,r4
001616  f7fffffe          BL       __aeabi_memclr
;;;644    	
;;;645      SYS_TRACE("will load %d bytes sys nv data from epprom\r\n", SIZEOF_SYS_NV);
00161a  486f              LDR      r0,|L1.6104|
00161c  6800              LDR      r0,[r0,#0]  ; gSystem_t
00161e  3038              ADDS     r0,r0,#0x38
001620  4a6d              LDR      r2,|L1.6104|
001622  6812              LDR      r2,[r2,#0]  ; gSystem_t
001624  1a81              SUBS     r1,r0,r2
001626  a07a              ADR      r0,|L1.6160|
001628  f7fffffe          BL       s_printf
;;;646    	
;;;647    	vPortEnterCritical();
00162c  f7fffffe          BL       vPortEnterCritical
;;;648    	retval = eeprom_read(SYS_NV_ADDRESS, p, SIZEOF_SYS_NV);
001630  4869              LDR      r0,|L1.6104|
001632  6800              LDR      r0,[r0,#0]  ; gSystem_t
001634  3038              ADDS     r0,r0,#0x38
001636  4968              LDR      r1,|L1.6104|
001638  6809              LDR      r1,[r1,#0]  ; gSystem_t
00163a  1a42              SUBS     r2,r0,r1
00163c  4621              MOV      r1,r4
00163e  2000              MOVS     r0,#0
001640  f7fffffe          BL       eeprom_read
001644  4606              MOV      r6,r0
;;;649    	vPortExitCritical();
001646  f7fffffe          BL       vPortExitCritical
;;;650    	OSAL_ASSERT(retval > 0);
00164a  2e00              CMP      r6,#0
00164c  dc08              BGT      |L1.5728|
00164e  4a6c              LDR      r2,|L1.6144|
001650  f6af0184          ADR      r1,|L1.3536|
001654  f6af007c          ADR      r0,|L1.3548|
001658  f7fffffe          BL       s_printf
00165c  bf00              NOP      
                  |L1.5726|
00165e  e7fe              B        |L1.5726|
                  |L1.5728|
;;;651    	
;;;652    	crc = calc_crc32(crc, p, SIZEOF_SYS_NV - 12);
001660  485d              LDR      r0,|L1.6104|
001662  6800              LDR      r0,[r0,#0]  ; gSystem_t
001664  3038              ADDS     r0,r0,#0x38
001666  495c              LDR      r1,|L1.6104|
001668  6809              LDR      r1,[r1,#0]  ; gSystem_t
00166a  1a40              SUBS     r0,r0,r1
00166c  f1a0020c          SUB      r2,r0,#0xc
001670  4621              MOV      r1,r4
001672  4628              MOV      r0,r5
001674  f7fffffe          BL       calc_crc32
001678  4605              MOV      r5,r0
;;;653    	
;;;654    	gSystem_t = (sys_state_t *)p;
00167a  4857              LDR      r0,|L1.6104|
00167c  6004              STR      r4,[r0,#0]  ; gSystem_t
;;;655    	
;;;656    	if(crc != gSystem_t->sys_crc32){
00167e  6800              LDR      r0,[r0,#0]  ; gSystem_t
001680  6ac0              LDR      r0,[r0,#0x2c]
001682  42a8              CMP      r0,r5
001684  d011              BEQ      |L1.5802|
;;;657    		SYS_TRACE("will set sys nv to default crc=%x, sys_crc=%x\r\n", crc, gSystem_t->sys_crc32);
001686  4854              LDR      r0,|L1.6104|
001688  6800              LDR      r0,[r0,#0]  ; gSystem_t
00168a  4629              MOV      r1,r5
00168c  6ac2              LDR      r2,[r0,#0x2c]
00168e  a06c              ADR      r0,|L1.6208|
001690  f7fffffe          BL       s_printf
;;;658    		sys_nv_set_default(gSystem_t, 0);
001694  2100              MOVS     r1,#0
001696  4850              LDR      r0,|L1.6104|
001698  6800              LDR      r0,[r0,#0]  ; gSystem_t
00169a  f7fffffe          BL       sys_nv_set_default
;;;659    		gSystem_t->is_in_factory = 1;
00169e  2001              MOVS     r0,#1
0016a0  494d              LDR      r1,|L1.6104|
0016a2  6809              LDR      r1,[r1,#0]  ; gSystem_t
0016a4  f881004b          STRB     r0,[r1,#0x4b]
0016a8  e002              B        |L1.5808|
                  |L1.5802|
;;;660    	}else{
;;;661    		SYS_TRACE("sys nv data load succuess\r\n");
0016aa  a071              ADR      r0,|L1.6256|
0016ac  f7fffffe          BL       s_printf
                  |L1.5808|
;;;662    	}
;;;663    /***************sub nv data*********************/	
;;;664      crc = 0;
0016b0  2500              MOVS     r5,#0
;;;665    	p = pvPortMalloc(SIZEOF_SUB_NV);
0016b2  209c              MOVS     r0,#0x9c
0016b4  f7fffffe          BL       pvPortMalloc
0016b8  4604              MOV      r4,r0
;;;666    	OSAL_ASSERT(p != NULL);
0016ba  b93c              CBNZ     r4,|L1.5836|
0016bc  4a50              LDR      r2,|L1.6144|
0016be  a151              ADR      r1,|L1.6148|
0016c0  f6af00e8          ADR      r0,|L1.3548|
0016c4  f7fffffe          BL       s_printf
0016c8  bf00              NOP      
                  |L1.5834|
0016ca  e7fe              B        |L1.5834|
                  |L1.5836|
;;;667    	memset(p, 0, SIZEOF_SUB_NV);
0016cc  219c              MOVS     r1,#0x9c
0016ce  4620              MOV      r0,r4
0016d0  f7fffffe          BL       __aeabi_memclr
;;;668    	
;;;669    	SYS_TRACE("will load %d bytes sub nv data from epprom\r\n", SIZEOF_SUB_NV);
0016d4  219c              MOVS     r1,#0x9c
0016d6  a06d              ADR      r0,|L1.6284|
0016d8  f7fffffe          BL       s_printf
;;;670    	
;;;671    	vPortEnterCritical();
0016dc  f7fffffe          BL       vPortEnterCritical
;;;672    	retval = eeprom_read(SYS_NV_ADDRESS_SUB, p, SIZEOF_SUB_NV);
0016e0  229c              MOVS     r2,#0x9c
0016e2  4621              MOV      r1,r4
0016e4  f44f6080          MOV      r0,#0x400
0016e8  f7fffffe          BL       eeprom_read
0016ec  4606              MOV      r6,r0
;;;673    	vPortExitCritical();
0016ee  f7fffffe          BL       vPortExitCritical
;;;674    	OSAL_ASSERT(retval > 0);
0016f2  2e00              CMP      r6,#0
0016f4  dc08              BGT      |L1.5896|
0016f6  4a42              LDR      r2,|L1.6144|
0016f8  f6af112c          ADR      r1,|L1.3536|
0016fc  f6af1024          ADR      r0,|L1.3548|
001700  f7fffffe          BL       s_printf
001704  bf00              NOP      
                  |L1.5894|
001706  e7fe              B        |L1.5894|
                  |L1.5896|
;;;675    	
;;;676    	crc = calc_crc32(crc, p, SIZEOF_SUB_NV);
001708  229c              MOVS     r2,#0x9c
00170a  4621              MOV      r1,r4
00170c  4628              MOV      r0,r5
00170e  f7fffffe          BL       calc_crc32
001712  4605              MOV      r5,r0
;;;677    	
;;;678    	gSystem_t->sub = (sub_state_t *)p;
001714  4830              LDR      r0,|L1.6104|
001716  6800              LDR      r0,[r0,#0]  ; gSystem_t
001718  63c4              STR      r4,[r0,#0x3c]
;;;679    	
;;;680    	if(crc != gSystem_t->sub_crc32){
00171a  482f              LDR      r0,|L1.6104|
00171c  6800              LDR      r0,[r0,#0]  ; gSystem_t
00171e  6b00              LDR      r0,[r0,#0x30]
001720  42a8              CMP      r0,r5
001722  d004              BEQ      |L1.5934|
;;;681    		SYS_TRACE("will set sub nv to default crc=%x, sys_crc=%x\r\n", crc, gSystem_t->sub_crc32);
001724  482c              LDR      r0,|L1.6104|
001726  6800              LDR      r0,[r0,#0]  ; gSystem_t
001728  4629              MOV      r1,r5
00172a  6b02              LDR      r2,[r0,#0x30]
00172c  e0c6              B        |L1.6332|
                  |L1.5934|
00172e  e0d3              B        |L1.6360|
                  |L1.5936|
001730  64656c61          DCB      "delay switch to lineout\r\n",0
001734  79207377
001738  69746368
00173c  20746f20
001740  6c696e65
001744  6f75740d
001748  0a00    
00174a  00                DCB      0
00174b  00                DCB      0
                  |L1.5964|
00174c  64656c61          DCB      "delay switch to off\r\n",0
001750  79207377
001754  69746368
001758  20746f20
00175c  6f66660d
001760  0a00    
001762  00                DCB      0
001763  00                DCB      0
                  |L1.5988|
001764  6473705f          DCB      "dsp_sub_hp_bypass\r\n",0
001768  7375625f
00176c  68705f62
001770  79706173
001774  730d0a00
                  |L1.6008|
001778  7379735f          DCB      "sys_sub_lowpass_set index=[%d]\r\n",0
00177c  7375625f
001780  6c6f7770
001784  6173735f
001788  73657420
00178c  696e6465
001790  783d5b25
001794  645d0d0a
001798  00      
001799  00                DCB      0
00179a  00                DCB      0
00179b  00                DCB      0
                  |L1.6044|
                          DCD      |symbol_number.38|
                  |L1.6048|
0017a0  7379732d          DCB      "sys->sub_model < SUB_MODEL_NUM",0
0017a4  3e737562
0017a8  5f6d6f64
0017ac  656c203c
0017b0  20535542
0017b4  5f4d4f44
0017b8  454c5f4e
0017bc  554d00  
0017bf  00                DCB      0
                  |L1.6080|
0017c0  77696c6c          DCB      "will do factory reset\r\n",0
0017c4  20646f20
0017c8  66616374
0017cc  6f727920
0017d0  72657365
0017d4  740d0a00
                  |L1.6104|
                          DCD      gSystem_t
                  |L1.6108|
                          DCD      ||.constdata||+0x584
                  |L1.6112|
                          DCD      |symbol_number.36|
                  |L1.6116|
0017e4  74687273          DCB      "thrs < SENSE_THRESHOLD_NUM",0
0017e8  203c2053
0017ec  454e5345
0017f0  5f544852
0017f4  4553484f
0017f8  4c445f4e
0017fc  554d00  
0017ff  00                DCB      0
                  |L1.6144|
                          DCD      |symbol_number.32|
                  |L1.6148|
001804  7020213d          DCB      "p != NULL",0
001808  204e554c
00180c  4c00    
00180e  00                DCB      0
00180f  00                DCB      0
                  |L1.6160|
001810  77696c6c          DCB      "will load %d bytes sys nv data from epprom\r\n",0
001814  206c6f61
001818  64202564
00181c  20627974
001820  65732073
001824  7973206e
001828  76206461
00182c  74612066
001830  726f6d20
001834  65707072
001838  6f6d0d0a
00183c  00      
00183d  00                DCB      0
00183e  00                DCB      0
00183f  00                DCB      0
                  |L1.6208|
001840  77696c6c          DCB      "will set sys nv to default crc=%x, sys_crc=%x\r\n",0
001844  20736574
001848  20737973
00184c  206e7620
001850  746f2064
001854  65666175
001858  6c742063
00185c  72633d25
001860  782c2073
001864  79735f63
001868  72633d25
00186c  780d0a00
                  |L1.6256|
001870  73797320          DCB      "sys nv data load succuess\r\n",0
001874  6e762064
001878  61746120
00187c  6c6f6164
001880  20737563
001884  63756573
001888  730d0a00
                  |L1.6284|
00188c  77696c6c          DCB      "will load %d bytes sub nv data from epprom\r\n",0
001890  206c6f61
001894  64202564
001898  20627974
00189c  65732073
0018a0  7562206e
0018a4  76206461
0018a8  74612066
0018ac  726f6d20
0018b0  65707072
0018b4  6f6d0d0a
0018b8  00      
0018b9  00                DCB      0
0018ba  00                DCB      0
0018bb  00                DCB      0
                  |L1.6332|
0018bc  a0ea              ADR      r0,|L1.7272|
0018be  f7fffffe          BL       s_printf
;;;682    		sys_nv_set_default(gSystem_t, 1);
0018c2  2101              MOVS     r1,#1
0018c4  48f4              LDR      r0,|L1.7320|
0018c6  6800              LDR      r0,[r0,#0]  ; gSystem_t
0018c8  f7fffffe          BL       sys_nv_set_default
;;;683    		gSystem_t->is_in_factory = 1;
0018cc  2001              MOVS     r0,#1
0018ce  49f2              LDR      r1,|L1.7320|
0018d0  6809              LDR      r1,[r1,#0]  ; gSystem_t
0018d2  f881004b          STRB     r0,[r1,#0x4b]
0018d6  e002              B        |L1.6366|
                  |L1.6360|
;;;684    	}else{
;;;685    		SYS_TRACE("sub nv data load succuess\r\n");
0018d8  a0f0              ADR      r0,|L1.7324|
0018da  f7fffffe          BL       s_printf
                  |L1.6366|
;;;686    	}
;;;687    	
;;;688    /***************EQ nv data*************************************/
;;;689    	crc = 0;
0018de  2500              MOVS     r5,#0
;;;690    	p = pvPortMalloc(SIZEOF_EQ_NV);
0018e0  f44f70c0          MOV      r0,#0x180
0018e4  f7fffffe          BL       pvPortMalloc
0018e8  4604              MOV      r4,r0
;;;691    	OSAL_ASSERT(p != NULL);
0018ea  b944              CBNZ     r4,|L1.6398|
0018ec  4af2              LDR      r2,|L1.7352|
0018ee  f2af01ec          ADR      r1,|L1.6148|
0018f2  f6af3018          ADR      r0,|L1.3548|
0018f6  f7fffffe          BL       s_printf
0018fa  bf00              NOP      
                  |L1.6396|
0018fc  e7fe              B        |L1.6396|
                  |L1.6398|
;;;692    	memset(p, 0, SIZEOF_EQ_NV);
0018fe  f44f71c0          MOV      r1,#0x180
001902  4620              MOV      r0,r4
001904  f7fffffe          BL       __aeabi_memclr
;;;693    	
;;;694    	SYS_TRACE("will load %d bytes eq nv data from epprom\r\n", SIZEOF_EQ_NV);
001908  f44f71c0          MOV      r1,#0x180
00190c  a0eb              ADR      r0,|L1.7356|
00190e  f7fffffe          BL       s_printf
;;;695    	
;;;696    	vPortEnterCritical();
001912  f7fffffe          BL       vPortEnterCritical
;;;697    	retval = eeprom_read(SYS_NV_ADDRESS_EQ, p, SIZEOF_EQ_NV);
001916  f44f72c0          MOV      r2,#0x180
00191a  4621              MOV      r1,r4
00191c  f44f6000          MOV      r0,#0x800
001920  f7fffffe          BL       eeprom_read
001924  4606              MOV      r6,r0
;;;698    	vPortExitCritical();
001926  f7fffffe          BL       vPortExitCritical
;;;699    	OSAL_ASSERT(retval > 0);
00192a  2e00              CMP      r6,#0
00192c  dc08              BGT      |L1.6464|
00192e  4ae2              LDR      r2,|L1.7352|
001930  f6af3164          ADR      r1,|L1.3536|
001934  f6af305c          ADR      r0,|L1.3548|
001938  f7fffffe          BL       s_printf
00193c  bf00              NOP      
                  |L1.6462|
00193e  e7fe              B        |L1.6462|
                  |L1.6464|
;;;700    	
;;;701    	crc = calc_crc32(crc, p, SIZEOF_EQ_NV);
001940  f44f72c0          MOV      r2,#0x180
001944  4621              MOV      r1,r4
001946  4628              MOV      r0,r5
001948  f7fffffe          BL       calc_crc32
00194c  4605              MOV      r5,r0
;;;702    	
;;;703    	gSystem_t->eq = (EQ_t *)p;
00194e  48d2              LDR      r0,|L1.7320|
001950  6800              LDR      r0,[r0,#0]  ; gSystem_t
001952  6404              STR      r4,[r0,#0x40]
;;;704    	
;;;705    	if(crc != gSystem_t->eq_crc32){
001954  48d0              LDR      r0,|L1.7320|
001956  6800              LDR      r0,[r0,#0]  ; gSystem_t
001958  6b40              LDR      r0,[r0,#0x34]
00195a  42a8              CMP      r0,r5
00195c  d011              BEQ      |L1.6530|
;;;706    		SYS_TRACE("will set eq nv to default crc=%x, sys_crc=%x\r\n", crc, gSystem_t->eq_crc32);
00195e  48ce              LDR      r0,|L1.7320|
001960  6800              LDR      r0,[r0,#0]  ; gSystem_t
001962  4629              MOV      r1,r5
001964  6b42              LDR      r2,[r0,#0x34]
001966  a0e0              ADR      r0,|L1.7400|
001968  f7fffffe          BL       s_printf
;;;707    		sys_nv_set_default(gSystem_t, 2);
00196c  2102              MOVS     r1,#2
00196e  48ca              LDR      r0,|L1.7320|
001970  6800              LDR      r0,[r0,#0]  ; gSystem_t
001972  f7fffffe          BL       sys_nv_set_default
;;;708    		gSystem_t->is_in_factory = 1;
001976  2001              MOVS     r0,#1
001978  49c7              LDR      r1,|L1.7320|
00197a  6809              LDR      r1,[r1,#0]  ; gSystem_t
00197c  f881004b          STRB     r0,[r1,#0x4b]
001980  e002              B        |L1.6536|
                  |L1.6530|
;;;709    	}else{
;;;710    		SYS_TRACE("eq nv data load succuess\r\n");
001982  a0e5              ADR      r0,|L1.7448|
001984  f7fffffe          BL       s_printf
                  |L1.6536|
;;;711    	}
;;;712    	
;;;713    	
;;;714    	/*init sys runtime parameter*/
;;;715    	sys_runtime_parameter_init(gSystem_t);
001988  48c3              LDR      r0,|L1.7320|
00198a  6800              LDR      r0,[r0,#0]  ; gSystem_t
00198c  f7fffffe          BL       sys_runtime_parameter_init
;;;716    	
;;;717    	sys_audio_sense_thres_set(gSystem_t->sense_thres);
001990  49c1              LDR      r1,|L1.7320|
001992  6809              LDR      r1,[r1,#0]  ; gSystem_t
001994  f8910027          LDRB     r0,[r1,#0x27]
001998  f7fffffe          BL       sys_audio_sense_thres_set
;;;718    
;;;719      memcpy(&gSystem_last, gSystem_t, sizeof(sys_state_t));
00199c  2254              MOVS     r2,#0x54
00199e  48be              LDR      r0,|L1.7320|
0019a0  6801              LDR      r1,[r0,#0]  ; gSystem_t
0019a2  48e4              LDR      r0,|L1.7476|
0019a4  f7fffffe          BL       __aeabi_memcpy4
;;;720    }
0019a8  bd70              POP      {r4-r6,pc}
;;;721    
                          ENDP

                  sys_poll_handler PROC
;;;778    
;;;779    static void sys_poll_handler(void)
0019aa  b508              PUSH     {r3,lr}
;;;780    {
;;;781       ir_commond_t cmd;
;;;782    	
;;;783    	 if(ir_get_commond(IR_FRONT,&cmd)){
0019ac  4669              MOV      r1,sp
0019ae  2001              MOVS     r0,#1
0019b0  f7fffffe          BL       ir_get_commond
0019b4  b150              CBZ      r0,|L1.6604|
;;;784    		 SYS_TRACE("get front ir commond[%2x]\r\n", cmd);
0019b6  f89d1000          LDRB     r1,[sp,#0]
0019ba  a0df              ADR      r0,|L1.7480|
0019bc  f7fffffe          BL       s_printf
;;;785    		 ir_commond_handler(gSystem_t, cmd);
0019c0  f89d1000          LDRB     r1,[sp,#0]
0019c4  48b4              LDR      r0,|L1.7320|
0019c6  6800              LDR      r0,[r0,#0]  ; gSystem_t
0019c8  f7fffffe          BL       ir_commond_handler
                  |L1.6604|
;;;786    //		 vPortEnterCritical();
;;;787    //		 IrOutHandler(ir_commond[cmd]);
;;;788    //		 vPortExitCritical();
;;;789    	 }
;;;790    	 
;;;791    	 if(ir_get_commond(IR_BACK_IN,&cmd)){
0019cc  4669              MOV      r1,sp
0019ce  2002              MOVS     r0,#2
0019d0  f7fffffe          BL       ir_get_commond
0019d4  b150              CBZ      r0,|L1.6636|
;;;792    		 SYS_TRACE("get IR_BACK_IN ir commond[%2x]\r\n", cmd);
0019d6  f89d1000          LDRB     r1,[sp,#0]
0019da  a0de              ADR      r0,|L1.7508|
0019dc  f7fffffe          BL       s_printf
;;;793    		 ir_commond_handler(gSystem_t, cmd);
0019e0  f89d1000          LDRB     r1,[sp,#0]
0019e4  48ac              LDR      r0,|L1.7320|
0019e6  6800              LDR      r0,[r0,#0]  ; gSystem_t
0019e8  f7fffffe          BL       ir_commond_handler
                  |L1.6636|
;;;794    //		 vPortEnterCritical();
;;;795    //		 IrOutHandler(ir_commond[cmd]);
;;;796    //		 vPortExitCritical();
;;;797    	 }
;;;798    	 
;;;799    	 DetectGpioPoll();
0019ec  f7fffffe          BL       DetectGpioPoll
;;;800    }
0019f0  bd08              POP      {r3,pc}
;;;801    
                          ENDP

                  system_task PROC
;;;802    void system_task(void *parameter)
0019f2  b508              PUSH     {r3,lr}
;;;803    {
;;;804    	sys_msg_t msg;
;;;805    	gSysQueue = xQueueCreate(20, sizeof(sys_msg_t));
0019f4  2200              MOVS     r2,#0
0019f6  2102              MOVS     r1,#2
0019f8  2014              MOVS     r0,#0x14
0019fa  f7fffffe          BL       xQueueGenericCreate
0019fe  49de              LDR      r1,|L1.7544|
001a00  6008              STR      r0,[r1,#0]  ; gSysQueue
;;;806    	
;;;807    	OSAL_ASSERT(gSysQueue != NULL);
001a02  4608              MOV      r0,r1
001a04  6800              LDR      r0,[r0,#0]  ; gSysQueue
001a06  b938              CBNZ     r0,|L1.6680|
001a08  4adc              LDR      r2,|L1.7548|
001a0a  a1dd              ADR      r1,|L1.7552|
001a0c  f6af4034          ADR      r0,|L1.3548|
001a10  f7fffffe          BL       s_printf
001a14  bf00              NOP      
                  |L1.6678|
001a16  e7fe              B        |L1.6678|
                  |L1.6680|
;;;808    	
;;;809    	sys_database_init();
001a18  f7fffffe          BL       sys_database_init
;;;810    	SYS_TRACE("sip=%x, smask=%x, sgate=%x\r\n", gSystem_t->ip, gSystem_t->netmask, gSystem_t->gateway);
001a1c  489e              LDR      r0,|L1.7320|
001a1e  6800              LDR      r0,[r0,#0]  ; gSystem_t
001a20  6883              LDR      r3,[r0,#8]
001a22  489d              LDR      r0,|L1.7320|
001a24  6800              LDR      r0,[r0,#0]  ; gSystem_t
001a26  6842              LDR      r2,[r0,#4]
001a28  489b              LDR      r0,|L1.7320|
001a2a  6800              LDR      r0,[r0,#0]  ; gSystem_t
001a2c  6801              LDR      r1,[r0,#0]
001a2e  a0d9              ADR      r0,|L1.7572|
001a30  f7fffffe          BL       s_printf
;;;811    	
;;;812    	
;;;813    	while(1){
001a34  e01a              B        |L1.6764|
                  |L1.6710|
;;;814    		static uint8 is_first = 1;
;;;815    		
;;;816    		if(is_first){
001a36  48df              LDR      r0,|L1.7604|
001a38  7800              LDRB     r0,[r0,#0]  ; is_first
001a3a  b138              CBZ      r0,|L1.6732|
;;;817    	   	vTaskDelay(1000/portTICK_RATE_MS);
001a3c  f44f707a          MOV      r0,#0x3e8
001a40  f7fffffe          BL       vTaskDelay
;;;818    			is_first = 0;
001a44  2000              MOVS     r0,#0
001a46  49db              LDR      r1,|L1.7604|
001a48  7008              STRB     r0,[r1,#0]
001a4a  e002              B        |L1.6738|
                  |L1.6732|
;;;819    		}else{
;;;820    			vTaskDelay(5/portTICK_RATE_MS);
001a4c  2005              MOVS     r0,#5
001a4e  f7fffffe          BL       vTaskDelay
                  |L1.6738|
;;;821    		}
;;;822    		
;;;823    		if(xQueueReceive(gSysQueue, &msg, 0)){
001a52  2300              MOVS     r3,#0
001a54  461a              MOV      r2,r3
001a56  4669              MOV      r1,sp
001a58  48c7              LDR      r0,|L1.7544|
001a5a  6800              LDR      r0,[r0,#0]  ; gSysQueue
001a5c  f7fffffe          BL       xQueueGenericReceive
001a60  b110              CBZ      r0,|L1.6760|
;;;824    			sys_msg_handler(&msg);
001a62  4668              MOV      r0,sp
001a64  f7fffffe          BL       sys_msg_handler
                  |L1.6760|
;;;825    		}
;;;826    		
;;;827    		sys_poll_handler();
001a68  f7fffffe          BL       sys_poll_handler
                  |L1.6764|
001a6c  e7e3              B        |L1.6710|
;;;828    
;;;829    	}
;;;830    
;;;831    }
;;;832    
                          ENDP

                  sys_send_msg_isr PROC
;;;833    
;;;834    void sys_send_msg_isr(sys_msg_type_t type, uint8 data)
001a6e  b538              PUSH     {r3-r5,lr}
;;;835    {
001a70  4605              MOV      r5,r0
001a72  460c              MOV      r4,r1
;;;836    	 sys_msg_t msg;
;;;837    
;;;838       msg.msg = type;
001a74  f88d5000          STRB     r5,[sp,#0]
;;;839    	 msg.data = data;
001a78  f88d4001          STRB     r4,[sp,#1]
;;;840    	
;;;841    	 xQueueSendToFrontFromISR(gSysQueue, &msg, NULL);
001a7c  2301              MOVS     r3,#1
001a7e  2200              MOVS     r2,#0
001a80  4669              MOV      r1,sp
001a82  48bd              LDR      r0,|L1.7544|
001a84  6800              LDR      r0,[r0,#0]  ; gSysQueue
001a86  f7fffffe          BL       xQueueGenericSendFromISR
;;;842    }
001a8a  bd38              POP      {r3-r5,pc}
;;;843    
                          ENDP

                  sys_audio_config_load PROC
;;;853    
;;;854    static int sys_audio_config_load(void)
001a8c  b510              PUSH     {r4,lr}
;;;855    {
;;;856    //	int j;
;;;857    //	int vol = gSystem_t->master_vol;
;;;858    	
;;;859      sys_sub_preset_load(gSystem_t);
001a8e  4882              LDR      r0,|L1.7320|
001a90  6800              LDR      r0,[r0,#0]  ; gSystem_t
001a92  f7fffffe          BL       sys_sub_preset_load
;;;860    	sys_eq_state_set(gSystem_t);
001a96  4880              LDR      r0,|L1.7320|
001a98  6800              LDR      r0,[r0,#0]  ; gSystem_t
001a9a  f7fffffe          BL       sys_eq_state_set
;;;861    	sys_load_peq(gSystem_t);
001a9e  487e              LDR      r0,|L1.7320|
001aa0  6800              LDR      r0,[r0,#0]  ; gSystem_t
001aa2  f7fffffe          BL       sys_load_peq
;;;862    	sys_line_highpass_set(gSystem_t);
001aa6  487c              LDR      r0,|L1.7320|
001aa8  6800              LDR      r0,[r0,#0]  ; gSystem_t
001aaa  f7fffffe          BL       sys_line_highpass_set
;;;863    	
;;;864    //	for(j = -40; j <= vol; j++){
;;;865    //		gSystem_t->master_vol = j;
;;;866    //		sys_master_vol_set(gSystem_t);
;;;867    //	}
;;;868    	
;;;869    	
;;;870    //	AMP_ENABLE(); 
;;;871    //	AMP_MUTE_OFF();
;;;872    	return 0;
001aae  2000              MOVS     r0,#0
;;;873    }
001ab0  bd10              POP      {r4,pc}
;;;874    
                          ENDP

                  sys_input_select PROC
;;;900    
;;;901    void sys_input_select(src_t src)
001ab2  b570              PUSH     {r4-r6,lr}
;;;902    {
001ab4  4604              MOV      r4,r0
;;;903    	njw1194_channel_t cha;
;;;904    	int vol = gSystem_t->master_vol;
001ab6  4878              LDR      r0,|L1.7320|
001ab8  6800              LDR      r0,[r0,#0]  ; gSystem_t
001aba  6946              LDR      r6,[r0,#0x14]
;;;905    	int j;
;;;906    	
;;;907      if(src == BALANCE){
001abc  b90c              CBNZ     r4,|L1.6850|
;;;908    		cha = NJW_BALANCE;
001abe  2501              MOVS     r5,#1
001ac0  e006              B        |L1.6864|
                  |L1.6850|
;;;909    	}else if(src == RCA){
001ac2  2c01              CMP      r4,#1
001ac4  d101              BNE      |L1.6858|
;;;910    		cha = NJW_RCA;
001ac6  2502              MOVS     r5,#2
001ac8  e002              B        |L1.6864|
                  |L1.6858|
;;;911    	}else if(src == SPEAHER){
001aca  2c02              CMP      r4,#2
001acc  d100              BNE      |L1.6864|
;;;912    		cha = NJW_SPEAK;
001ace  2503              MOVS     r5,#3
                  |L1.6864|
;;;913    	}
;;;914    	
;;;915      njw1195_volume_set(0xff, LINEOUT_CHANNEL);
001ad0  2101              MOVS     r1,#1
001ad2  20ff              MOVS     r0,#0xff
001ad4  f7fffffe          BL       njw1195_volume_set
;;;916    	bsp_delay_ms(100);
001ad8  2064              MOVS     r0,#0x64
001ada  f7fffffe          BL       bsp_delay_ms
;;;917    	njw1195_input_select(cha);
001ade  4628              MOV      r0,r5
001ae0  f7fffffe          BL       njw1195_input_select
;;;918    	bsp_delay_ms(100);
001ae4  2064              MOVS     r0,#0x64
001ae6  f7fffffe          BL       bsp_delay_ms
;;;919      njw1195_volume_set(NJW1195_4_5DB_GAIN, LINEOUT_CHANNEL);
001aea  2101              MOVS     r1,#1
001aec  2038              MOVS     r0,#0x38
001aee  f7fffffe          BL       njw1195_volume_set
;;;920    }
001af2  bd70              POP      {r4-r6,pc}
;;;921    
                          ENDP

                  audio_invalid_timeout PROC
;;;922    
;;;923    static void audio_invalid_timeout(void *arg)
001af4  b570              PUSH     {r4-r6,lr}
;;;924    {
001af6  4604              MOV      r4,r0
;;;925    	 uint32 timeout;
;;;926    	 sys_state_t *sys = (sys_state_t *)arg;
001af8  4625              MOV      r5,r4
;;;927    	
;;;928    	 if(sys->method != AUDIO) return;
001afa  7ce8              LDRB     r0,[r5,#0x13]
001afc  2801              CMP      r0,#1
001afe  d000              BEQ      |L1.6914|
                  |L1.6912|
;;;929    	
;;;930    	 if(cur_menu->id <= RESET_CONFIRM_MENU && cur_menu->id >= IP_ADDRESS_MENU){
;;;931    		 SYS_TRACE("audio_invalid_timeout, in install menu, will not power off");
;;;932         update_detect_state(DETECT_AUDIO);		 
;;;933    		 return;
;;;934    	 }
;;;935    	
;;;936    	
;;;937    	 if(!IS_AUDIO_VALID){
;;;938    		 SYS_TRACE("audio_invalid_timeout, will power off\r\n");
;;;939    		 sys->is_auto_power_on_enable = true;
;;;940    		 sys_power_off_handler(sys);
;;;941    	 }
;;;942    }
001b00  bd70              POP      {r4-r6,pc}
                  |L1.6914|
001b02  48ad              LDR      r0,|L1.7608|
001b04  6800              LDR      r0,[r0,#0]            ;930  ; cur_menu
001b06  7800              LDRB     r0,[r0,#0]            ;930
001b08  2815              CMP      r0,#0x15              ;930
001b0a  dc0b              BGT      |L1.6948|
001b0c  48aa              LDR      r0,|L1.7608|
001b0e  6800              LDR      r0,[r0,#0]            ;930  ; cur_menu
001b10  7800              LDRB     r0,[r0,#0]            ;930
001b12  2808              CMP      r0,#8                 ;930
001b14  db06              BLT      |L1.6948|
001b16  a0a9              ADR      r0,|L1.7612|
001b18  f7fffffe          BL       s_printf
001b1c  2000              MOVS     r0,#0                 ;932
001b1e  f7fffffe          BL       update_detect_state
001b22  e7ed              B        |L1.6912|
                  |L1.6948|
001b24  2180              MOVS     r1,#0x80              ;937
001b26  48b4              LDR      r0,|L1.7672|
001b28  f7fffffe          BL       GPIO_ReadSinglePin
001b2c  b108              CBZ      r0,|L1.6962|
001b2e  2001              MOVS     r0,#1                 ;937
001b30  e000              B        |L1.6964|
                  |L1.6962|
001b32  2000              MOVS     r0,#0                 ;937
                  |L1.6964|
001b34  b940              CBNZ     r0,|L1.6984|
001b36  a0b1              ADR      r0,|L1.7676|
001b38  f7fffffe          BL       s_printf
001b3c  2001              MOVS     r0,#1                 ;939
001b3e  f885004c          STRB     r0,[r5,#0x4c]         ;939
001b42  4628              MOV      r0,r5                 ;940
001b44  f7fffffe          BL       sys_power_off_handler
                  |L1.6984|
001b48  bf00              NOP      
001b4a  e7d9              B        |L1.6912|
;;;943    
                          ENDP

                  sys_audio_valid_handler PROC
;;;944    void sys_audio_valid_handler(uint8 index)
001b4c  b510              PUSH     {r4,lr}
;;;945    {
001b4e  4604              MOV      r4,r0
;;;946      SYS_TRACE("audio valid\r\n");
001b50  a0b4              ADR      r0,|L1.7716|
001b52  f7fffffe          BL       s_printf
;;;947    	
;;;948    	if(gSystem_t->method != AUDIO) return;
001b56  4850              LDR      r0,|L1.7320|
001b58  6800              LDR      r0,[r0,#0]  ; gSystem_t
001b5a  7cc0              LDRB     r0,[r0,#0x13]
001b5c  2801              CMP      r0,#1
001b5e  d000              BEQ      |L1.7010|
                  |L1.7008|
;;;949    	
;;;950    	if((gSystem_t->status != STATUS_WORKING && gSystem_t->status != STATUS_INITING) && (gSystem_t->is_auto_power_on_enable == true)){
;;;951    		SYS_TRACE("will power on\r\n");
;;;952    		sys_power_on_handler(gSystem_t);
;;;953    	}else{
;;;954    		SYS_TRACE("will not power on [%d][%d]\r\n", gSystem_t->status, gSystem_t->is_auto_power_on_enable);
;;;955    	}
;;;956    	
;;;957    	sys_untimeout(audio_invalid_timeout, (void *)gSystem_t);
;;;958    }
001b60  bd10              POP      {r4,pc}
                  |L1.7010|
001b62  484d              LDR      r0,|L1.7320|
001b64  6800              LDR      r0,[r0,#0]            ;950  ; gSystem_t
001b66  f8900053          LDRB     r0,[r0,#0x53]         ;950
001b6a  2802              CMP      r0,#2                 ;950
001b6c  d013              BEQ      |L1.7062|
001b6e  484a              LDR      r0,|L1.7320|
001b70  6800              LDR      r0,[r0,#0]            ;950  ; gSystem_t
001b72  f8900053          LDRB     r0,[r0,#0x53]         ;950
001b76  2801              CMP      r0,#1                 ;950
001b78  d00d              BEQ      |L1.7062|
001b7a  4847              LDR      r0,|L1.7320|
001b7c  6800              LDR      r0,[r0,#0]            ;950  ; gSystem_t
001b7e  f890004c          LDRB     r0,[r0,#0x4c]         ;950
001b82  2801              CMP      r0,#1                 ;950
001b84  d107              BNE      |L1.7062|
001b86  a0ab              ADR      r0,|L1.7732|
001b88  f7fffffe          BL       s_printf
001b8c  4842              LDR      r0,|L1.7320|
001b8e  6800              LDR      r0,[r0,#0]            ;952  ; gSystem_t
001b90  f7fffffe          BL       sys_power_on_handler
001b94  e00a              B        |L1.7084|
                  |L1.7062|
001b96  4840              LDR      r0,|L1.7320|
001b98  6800              LDR      r0,[r0,#0]            ;954  ; gSystem_t
001b9a  f890204c          LDRB     r2,[r0,#0x4c]         ;954
001b9e  483e              LDR      r0,|L1.7320|
001ba0  6800              LDR      r0,[r0,#0]            ;954  ; gSystem_t
001ba2  f8901053          LDRB     r1,[r0,#0x53]         ;954
001ba6  a0a7              ADR      r0,|L1.7748|
001ba8  f7fffffe          BL       s_printf
                  |L1.7084|
001bac  483a              LDR      r0,|L1.7320|
001bae  6801              LDR      r1,[r0,#0]            ;957  ; gSystem_t
001bb0  48ac              LDR      r0,|L1.7780|
001bb2  f7fffffe          BL       sys_untimeout
001bb6  bf00              NOP      
001bb8  e7d2              B        |L1.7008|
;;;959    
                          ENDP

                  sys_audio_invalid_handler PROC
;;;960    
;;;961    void sys_audio_invalid_handler(uint8 index)
001bba  b57c              PUSH     {r2-r6,lr}
;;;962    {
001bbc  4605              MOV      r5,r0
;;;963    	uint32 timeout;
;;;964    	uint8 temp[SE_TIMEOUT_NUM] = {5, 10, 20, 30, 60};
001bbe  a1aa              ADR      r1,|L1.7784|
001bc0  c903              LDM      r1,{r0,r1}
001bc2  e9cd0100          STRD     r0,r1,[sp,#0]
;;;965    
;;;966      SYS_TRACE("audio invalid, timeout is[%d]\r\n", gSystem_t->se_timeout);
001bc6  4834              LDR      r0,|L1.7320|
001bc8  6800              LDR      r0,[r0,#0]  ; gSystem_t
001bca  f8901028          LDRB     r1,[r0,#0x28]
001bce  a0a8              ADR      r0,|L1.7792|
001bd0  f7fffffe          BL       s_printf
;;;967     
;;;968      if(gSystem_t->method != AUDIO) return;
001bd4  4830              LDR      r0,|L1.7320|
001bd6  6800              LDR      r0,[r0,#0]  ; gSystem_t
001bd8  7cc0              LDRB     r0,[r0,#0x13]
001bda  2801              CMP      r0,#1
001bdc  d000              BEQ      |L1.7136|
                  |L1.7134|
;;;969    	
;;;970        OSAL_ASSERT(gSystem_t->se_timeout < SE_TIMEOUT_NUM);
;;;971    	
;;;972    	  timeout = temp[gSystem_t->se_timeout]*1000*60;
;;;973    	
;;;974        sys_untimeout(audio_invalid_timeout, (void *)gSystem_t);
;;;975    	  sys_timeout(timeout, audio_invalid_timeout, (void *)gSystem_t);
;;;976    		
;;;977    }
001bde  bd7c              POP      {r2-r6,pc}
                  |L1.7136|
001be0  482d              LDR      r0,|L1.7320|
001be2  6800              LDR      r0,[r0,#0]            ;970  ; gSystem_t
001be4  f8900028          LDRB     r0,[r0,#0x28]         ;970
001be8  2805              CMP      r0,#5                 ;970
001bea  db07              BLT      |L1.7164|
001bec  4aa8              LDR      r2,|L1.7824|
001bee  a1a9              ADR      r1,|L1.7828|
001bf0  f6af6018          ADR      r0,|L1.3548|
001bf4  f7fffffe          BL       s_printf
001bf8  bf00              NOP                            ;970
                  |L1.7162|
001bfa  e7fe              B        |L1.7162|
                  |L1.7164|
001bfc  4826              LDR      r0,|L1.7320|
001bfe  6800              LDR      r0,[r0,#0]            ;972  ; gSystem_t
001c00  f8900028          LDRB     r0,[r0,#0x28]         ;972
001c04  f81d0000          LDRB     r0,[sp,r0]            ;972
001c08  f44f717a          MOV      r1,#0x3e8             ;972
001c0c  fb10f001          SMULBB   r0,r0,r1              ;972
001c10  ebc01000          RSB      r0,r0,r0,LSL #4       ;972
001c14  0084              LSLS     r4,r0,#2              ;972
001c16  4820              LDR      r0,|L1.7320|
001c18  6801              LDR      r1,[r0,#0]            ;974  ; gSystem_t
001c1a  4892              LDR      r0,|L1.7780|
001c1c  f7fffffe          BL       sys_untimeout
001c20  481d              LDR      r0,|L1.7320|
001c22  4990              LDR      r1,|L1.7780|
001c24  6802              LDR      r2,[r0,#0]            ;975  ; gSystem_t
001c26  4620              MOV      r0,r4                 ;975
001c28  f7fffffe          BL       sys_timeout
001c2c  bf00              NOP      
001c2e  e7d6              B        |L1.7134|
;;;978    
                          ENDP

                  trigger_invalid_timeout PROC
;;;979    
;;;980    static void trigger_invalid_timeout(void *arg)
001c30  b570              PUSH     {r4-r6,lr}
;;;981    {
001c32  4604              MOV      r4,r0
;;;982    	sys_state_t *sys = (sys_state_t *)arg;
001c34  4625              MOV      r5,r4
;;;983    	
;;;984    	SYS_TRACE("trigger_invalid_timeout, method=%d\r\n", gSystem_t->method);
001c36  4818              LDR      r0,|L1.7320|
001c38  6800              LDR      r0,[r0,#0]  ; gSystem_t
001c3a  7cc1              LDRB     r1,[r0,#0x13]
001c3c  a09f              ADR      r0,|L1.7868|
001c3e  f7fffffe          BL       s_printf
;;;985    	
;;;986    	if(gSystem_t->method != TRIGGER) return;
001c42  4815              LDR      r0,|L1.7320|
001c44  6800              LDR      r0,[r0,#0]  ; gSystem_t
001c46  7cc0              LDRB     r0,[r0,#0x13]
001c48  2802              CMP      r0,#2
001c4a  d000              BEQ      |L1.7246|
                  |L1.7244|
;;;987    	
;;;988    	if(cur_menu->id <= RESET_CONFIRM_MENU && cur_menu->id >= IP_ADDRESS_MENU){
;;;989    		 SYS_TRACE("trigger_invalid_timeout, in install menu, will not power off\r\n");
;;;990         update_detect_state(DETECT_TRIGGER);		 
;;;991    		 return;
;;;992    	 }
;;;993    	
;;;994    	if(!IS_TRIGGER_VALID){
;;;995    		 sys_power_off_handler(sys);
;;;996    	 }else{
;;;997    		 SYS_TRACE("trigger_invalid_timeout, IS_TRIGGER_VALID\r\n");
;;;998    	 }
;;;999    }
001c4c  bd70              POP      {r4-r6,pc}
                  |L1.7246|
001c4e  485a              LDR      r0,|L1.7608|
001c50  6800              LDR      r0,[r0,#0]            ;988  ; cur_menu
001c52  7800              LDRB     r0,[r0,#0]            ;988
001c54  2815              CMP      r0,#0x15              ;988
001c56  dc05              BGT      |L1.7268|
001c58  4857              LDR      r0,|L1.7608|
001c5a  6800              LDR      r0,[r0,#0]            ;988  ; cur_menu
001c5c  7800              LDRB     r0,[r0,#0]            ;988
001c5e  2808              CMP      r0,#8                 ;988
001c60  db00              BLT      |L1.7268|
001c62  e13f              B        |L1.7908|
                  |L1.7268|
001c64  e145              B        |L1.7922|
001c66  0000              DCW      0x0000
                  |L1.7272|
001c68  77696c6c          DCB      "will set sub nv to default crc=%x, sys_crc=%x\r\n",0
001c6c  20736574
001c70  20737562
001c74  206e7620
001c78  746f2064
001c7c  65666175
001c80  6c742063
001c84  72633d25
001c88  782c2073
001c8c  79735f63
001c90  72633d25
001c94  780d0a00
                  |L1.7320|
                          DCD      gSystem_t
                  |L1.7324|
001c9c  73756220          DCB      "sub nv data load succuess\r\n",0
001ca0  6e762064
001ca4  61746120
001ca8  6c6f6164
001cac  20737563
001cb0  63756573
001cb4  730d0a00
                  |L1.7352|
                          DCD      |symbol_number.32|
                  |L1.7356|
001cbc  77696c6c          DCB      "will load %d bytes eq nv data from epprom\r\n",0
001cc0  206c6f61
001cc4  64202564
001cc8  20627974
001ccc  65732065
001cd0  71206e76
001cd4  20646174
001cd8  61206672
001cdc  6f6d2065
001ce0  7070726f
001ce4  6d0d0a00
                  |L1.7400|
001ce8  77696c6c          DCB      "will set eq nv to default crc=%x, sys_crc=%x\r\n",0
001cec  20736574
001cf0  20657120
001cf4  6e762074
001cf8  6f206465
001cfc  6661756c
001d00  74206372
001d04  633d2578
001d08  2c207379
001d0c  735f6372
001d10  633d2578
001d14  0d0a00  
001d17  00                DCB      0
                  |L1.7448|
001d18  6571206e          DCB      "eq nv data load succuess\r\n",0
001d1c  76206461
001d20  7461206c
001d24  6f616420
001d28  73756363
001d2c  75657373
001d30  0d0a00  
001d33  00                DCB      0
                  |L1.7476|
                          DCD      gSystem_last
                  |L1.7480|
001d38  67657420          DCB      "get front ir commond[%2x]\r\n",0
001d3c  66726f6e
001d40  74206972
001d44  20636f6d
001d48  6d6f6e64
001d4c  5b253278
001d50  5d0d0a00
                  |L1.7508|
001d54  67657420          DCB      "get IR_BACK_IN ir commond[%2x]\r\n",0
001d58  49525f42
001d5c  41434b5f
001d60  494e2069
001d64  7220636f
001d68  6d6d6f6e
001d6c  645b2532
001d70  785d0d0a
001d74  00      
001d75  00                DCB      0
001d76  00                DCB      0
001d77  00                DCB      0
                  |L1.7544|
                          DCD      gSysQueue
                  |L1.7548|
                          DCD      |symbol_number.34|
                  |L1.7552|
001d80  67537973          DCB      "gSysQueue != NULL",0
001d84  51756575
001d88  6520213d
001d8c  204e554c
001d90  4c00    
001d92  00                DCB      0
001d93  00                DCB      0
                  |L1.7572|
001d94  7369703d          DCB      "sip=%x, smask=%x, sgate=%x\r\n",0
001d98  25782c20
001d9c  736d6173
001da0  6b3d2578
001da4  2c207367
001da8  6174653d
001dac  25780d0a
001db0  00      
001db1  00                DCB      0
001db2  00                DCB      0
001db3  00                DCB      0
                  |L1.7604|
                          DCD      is_first
                  |L1.7608|
                          DCD      cur_menu
                  |L1.7612|
001dbc  61756469          DCB      "audio_invalid_timeout, in install menu, will not power "
001dc0  6f5f696e
001dc4  76616c69
001dc8  645f7469
001dcc  6d656f75
001dd0  742c2069
001dd4  6e20696e
001dd8  7374616c
001ddc  6c206d65
001de0  6e752c20
001de4  77696c6c
001de8  206e6f74
001dec  20706f77
001df0  657220  
001df3  6f666600          DCB      "off",0
001df7  00                DCB      0
                  |L1.7672|
                          DCD      0x40061000
                  |L1.7676|
001dfc  61756469          DCB      "audio_invalid_timeout, will power off\r\n",0
001e00  6f5f696e
001e04  76616c69
001e08  645f7469
001e0c  6d656f75
001e10  742c2077
001e14  696c6c20
001e18  706f7765
001e1c  72206f66
001e20  660d0a00
                  |L1.7716|
001e24  61756469          DCB      "audio valid\r\n",0
001e28  6f207661
001e2c  6c69640d
001e30  0a00    
001e32  00                DCB      0
001e33  00                DCB      0
                  |L1.7732|
001e34  77696c6c          DCB      "will power on\r\n",0
001e38  20706f77
001e3c  6572206f
001e40  6e0d0a00
                  |L1.7748|
001e44  77696c6c          DCB      "will not power on [%d][%d]\r\n",0
001e48  206e6f74
001e4c  20706f77
001e50  6572206f
001e54  6e205b25
001e58  645d5b25
001e5c  645d0d0a
001e60  00      
001e61  00                DCB      0
001e62  00                DCB      0
001e63  00                DCB      0
                  |L1.7780|
                          DCD      audio_invalid_timeout
                  |L1.7784|
001e68  050a141e          DCB      5,"\n",20,30,"<",0
001e6c  3c00    
001e6e  00                DCB      0
001e6f  00                DCB      0
                  |L1.7792|
001e70  61756469          DCB      "audio invalid, timeout is[%d]\r\n",0
001e74  6f20696e
001e78  76616c69
001e7c  642c2074
001e80  696d656f
001e84  75742069
001e88  735b2564
001e8c  5d0d0a00
                  |L1.7824|
                          DCD      |symbol_number.35|
                  |L1.7828|
001e94  67537973          DCB      "gSystem_t->se_timeout < SE_TIMEOUT_NUM",0
001e98  74656d5f
001e9c  742d3e73
001ea0  655f7469
001ea4  6d656f75
001ea8  74203c20
001eac  53455f54
001eb0  494d454f
001eb4  55545f4e
001eb8  554d00  
001ebb  00                DCB      0
                  |L1.7868|
001ebc  74726967          DCB      "trigger_invalid_timeout, method=%d\r\n",0
001ec0  6765725f
001ec4  696e7661
001ec8  6c69645f
001ecc  74696d65
001ed0  6f75742c
001ed4  206d6574
001ed8  686f643d
001edc  25640d0a
001ee0  00      
001ee1  00                DCB      0
001ee2  00                DCB      0
001ee3  00                DCB      0
                  |L1.7908|
001ee4  a0e9              ADR      r0,|L1.8844|
001ee6  f7fffffe          BL       s_printf
001eea  2001              MOVS     r0,#1                 ;990
001eec  f7fffffe          BL       update_detect_state
001ef0  e6ac              B        |L1.7244|
                  |L1.7922|
001ef2  2120              MOVS     r1,#0x20              ;994
001ef4  48f5              LDR      r0,|L1.8908|
001ef6  f7fffffe          BL       GPIO_ReadSinglePin
001efa  b908              CBNZ     r0,|L1.7936|
001efc  2001              MOVS     r0,#1                 ;994
001efe  e000              B        |L1.7938|
                  |L1.7936|
001f00  2000              MOVS     r0,#0                 ;994
                  |L1.7938|
001f02  b918              CBNZ     r0,|L1.7948|
001f04  4628              MOV      r0,r5                 ;995
001f06  f7fffffe          BL       sys_power_off_handler
001f0a  e002              B        |L1.7954|
                  |L1.7948|
001f0c  a0f0              ADR      r0,|L1.8912|
001f0e  f7fffffe          BL       s_printf
                  |L1.7954|
001f12  bf00              NOP      
001f14  e69a              B        |L1.7244|
;;;1000   
                          ENDP

                  sys_trigger_valid_handler PROC
;;;1001   void sys_trigger_valid_handler(uint8 index)
001f16  b510              PUSH     {r4,lr}
;;;1002   {
001f18  4604              MOV      r4,r0
;;;1003   	SYS_TRACE("Trigger detect\r\n");
001f1a  a0f8              ADR      r0,|L1.8956|
001f1c  f7fffffe          BL       s_printf
;;;1004   	
;;;1005     if(gSystem_t->method != TRIGGER) return;
001f20  48fb              LDR      r0,|L1.8976|
001f22  6800              LDR      r0,[r0,#0]  ; gSystem_t
001f24  7cc0              LDRB     r0,[r0,#0x13]
001f26  2802              CMP      r0,#2
001f28  d000              BEQ      |L1.7980|
                  |L1.7978|
;;;1006   	
;;;1007   	if((gSystem_t->status != STATUS_WORKING && gSystem_t->status != STATUS_INITING) && (gSystem_t->is_auto_power_on_enable == true)){
;;;1008   		
;;;1009   		gSystem_t->is_trigger_off_need_delay = false;
;;;1010   		sys_power_on_handler(gSystem_t);
;;;1011   	}
;;;1012   	sys_untimeout(trigger_invalid_timeout, (void *)gSystem_t);
;;;1013   }
001f2a  bd10              POP      {r4,pc}
                  |L1.7980|
001f2c  48f8              LDR      r0,|L1.8976|
001f2e  6800              LDR      r0,[r0,#0]            ;1007  ; gSystem_t
001f30  f8900053          LDRB     r0,[r0,#0x53]         ;1007
001f34  2802              CMP      r0,#2                 ;1007
001f36  d014              BEQ      |L1.8034|
001f38  48f5              LDR      r0,|L1.8976|
001f3a  6800              LDR      r0,[r0,#0]            ;1007  ; gSystem_t
001f3c  f8900053          LDRB     r0,[r0,#0x53]         ;1007
001f40  2801              CMP      r0,#1                 ;1007
001f42  d00e              BEQ      |L1.8034|
001f44  48f2              LDR      r0,|L1.8976|
001f46  6800              LDR      r0,[r0,#0]            ;1007  ; gSystem_t
001f48  f890004c          LDRB     r0,[r0,#0x4c]         ;1007
001f4c  2801              CMP      r0,#1                 ;1007
001f4e  d108              BNE      |L1.8034|
001f50  2000              MOVS     r0,#0                 ;1009
001f52  49ef              LDR      r1,|L1.8976|
001f54  6809              LDR      r1,[r1,#0]            ;1009  ; gSystem_t
001f56  f881004d          STRB     r0,[r1,#0x4d]         ;1009
001f5a  48ed              LDR      r0,|L1.8976|
001f5c  6800              LDR      r0,[r0,#0]            ;1010  ; gSystem_t
001f5e  f7fffffe          BL       sys_power_on_handler
                  |L1.8034|
001f62  48eb              LDR      r0,|L1.8976|
001f64  6801              LDR      r1,[r0,#0]            ;1012  ; gSystem_t
001f66  48eb              LDR      r0,|L1.8980|
001f68  f7fffffe          BL       sys_untimeout
001f6c  bf00              NOP      
001f6e  e7dc              B        |L1.7978|
;;;1014   
                          ENDP

                  sys_trigger_invalid_handler PROC
;;;1016   
;;;1017   void sys_trigger_invalid_handler(uint8 index)
001f70  b510              PUSH     {r4,lr}
;;;1018   {
001f72  4604              MOV      r4,r0
;;;1019     
;;;1020   	SYS_TRACE("No Trigger detect, method=%d\r\n", gSystem_t->method);
001f74  48e6              LDR      r0,|L1.8976|
001f76  6800              LDR      r0,[r0,#0]  ; gSystem_t
001f78  7cc1              LDRB     r1,[r0,#0x13]
001f7a  a0e7              ADR      r0,|L1.8984|
001f7c  f7fffffe          BL       s_printf
;;;1021   	
;;;1022   	if(gSystem_t->method != TRIGGER) return;
001f80  48e3              LDR      r0,|L1.8976|
001f82  6800              LDR      r0,[r0,#0]  ; gSystem_t
001f84  7cc0              LDRB     r0,[r0,#0x13]
001f86  2802              CMP      r0,#2
001f88  d000              BEQ      |L1.8076|
                  |L1.8074|
;;;1023   	
;;;1024   	if(gSystem_t->is_trigger_off_need_delay){
;;;1025   		sys_untimeout(trigger_invalid_timeout, (void *)gSystem_t);
;;;1026   		sys_timeout(1000*60, trigger_invalid_timeout, (void *)gSystem_t);
;;;1027   	}else{
;;;1028   		sys_power_off_handler(gSystem_t);
;;;1029   	}
;;;1030   }
001f8a  bd10              POP      {r4,pc}
                  |L1.8076|
001f8c  48e0              LDR      r0,|L1.8976|
001f8e  6800              LDR      r0,[r0,#0]            ;1024  ; gSystem_t
001f90  f890004d          LDRB     r0,[r0,#0x4d]         ;1024
001f94  b160              CBZ      r0,|L1.8112|
001f96  48de              LDR      r0,|L1.8976|
001f98  6801              LDR      r1,[r0,#0]            ;1025  ; gSystem_t
001f9a  48de              LDR      r0,|L1.8980|
001f9c  f7fffffe          BL       sys_untimeout
001fa0  48db              LDR      r0,|L1.8976|
001fa2  49dc              LDR      r1,|L1.8980|
001fa4  6802              LDR      r2,[r0,#0]            ;1026  ; gSystem_t
001fa6  f64e2060          MOV      r0,#0xea60            ;1026
001faa  f7fffffe          BL       sys_timeout
001fae  e003              B        |L1.8120|
                  |L1.8112|
001fb0  48d7              LDR      r0,|L1.8976|
001fb2  6800              LDR      r0,[r0,#0]            ;1028  ; gSystem_t
001fb4  f7fffffe          BL       sys_power_off_handler
                  |L1.8120|
001fb8  bf00              NOP      
001fba  e7e6              B        |L1.8074|
;;;1031   
                          ENDP

                  sys_peq_single_set PROC
;;;1246   
;;;1247   void sys_peq_single_set(sys_state_t *sys, uint8 preset, uint8 index, uint32 a, uint32 b, uint32 g)
001fbc  e92d47f0          PUSH     {r4-r10,lr}
;;;1248   {
001fc0  4680              MOV      r8,r0
001fc2  4689              MOV      r9,r1
001fc4  4614              MOV      r4,r2
001fc6  461d              MOV      r5,r3
001fc8  e9dd6708          LDRD     r6,r7,[sp,#0x20]
;;;1249   
;;;1250   		dsp_eq_set_freq(a, index, TYPE_PRESET_EQ);
001fcc  2202              MOVS     r2,#2
001fce  4621              MOV      r1,r4
001fd0  4628              MOV      r0,r5
001fd2  f7fffffe          BL       dsp_eq_set_freq
;;;1251   		dsp_eq_set_width(b, index, TYPE_PRESET_EQ);
001fd6  2202              MOVS     r2,#2
001fd8  4621              MOV      r1,r4
001fda  4630              MOV      r0,r6
001fdc  f7fffffe          BL       dsp_eq_set_width
;;;1252   		dsp_eq_set_gain(g, index, TYPE_PRESET_EQ);
001fe0  2202              MOVS     r2,#2
001fe2  4621              MOV      r1,r4
001fe4  4638              MOV      r0,r7
001fe6  f7fffffe          BL       dsp_eq_set_gain
;;;1253   
;;;1254   	
;;;1255   	  SYS_TRACE("sys_peq_single_set\r\n");
001fea  a0d3              ADR      r0,|L1.9016|
001fec  f7fffffe          BL       s_printf
;;;1256   }
001ff0  e8bd87f0          POP      {r4-r10,pc}
;;;1257   
                          ENDP

                  sys_req_single_set PROC
;;;1258   void sys_req_single_set(sys_state_t *sys, uint8 index, uint32 a, uint32 b, uint32 g)
001ff4  e92d41f0          PUSH     {r4-r8,lr}
;;;1259   {
001ff8  4680              MOV      r8,r0
001ffa  460e              MOV      r6,r1
001ffc  4614              MOV      r4,r2
001ffe  461d              MOV      r5,r3
002000  9f06              LDR      r7,[sp,#0x18]
;;;1260   	  dsp_eq_set_freq(a, index, TYPE_ROOM_EQ);
002002  2201              MOVS     r2,#1
002004  4631              MOV      r1,r6
002006  4620              MOV      r0,r4
002008  f7fffffe          BL       dsp_eq_set_freq
;;;1261   		dsp_eq_set_width(b, index, TYPE_ROOM_EQ);
00200c  2201              MOVS     r2,#1
00200e  4631              MOV      r1,r6
002010  4628              MOV      r0,r5
002012  f7fffffe          BL       dsp_eq_set_width
;;;1262   		dsp_eq_set_gain(g, index, TYPE_ROOM_EQ);
002016  2201              MOVS     r2,#1
002018  4631              MOV      r1,r6
00201a  4638              MOV      r0,r7
00201c  f7fffffe          BL       dsp_eq_set_gain
;;;1263   }
002020  e8bd81f0          POP      {r4-r8,pc}
;;;1264   
                          ENDP

                  protect_recover_later PROC
;;;1315   
;;;1316   static void protect_recover_later(void *arg)
002024  b570              PUSH     {r4-r6,lr}
;;;1317   {
002026  4604              MOV      r4,r0
;;;1318   	 uint8 index = *((uint8 *)arg);
002028  7825              LDRB     r5,[r4,#0]
;;;1319   	
;;;1320   	 AMP_ENABLE();
00202a  bf00              NOP      
00202c  2201              MOVS     r2,#1
00202e  4611              MOV      r1,r2
002030  48c7              LDR      r0,|L1.9040|
002032  f7fffffe          BL       GPIOPinWrite
002036  bf00              NOP      
;;;1321   	 AMP_MUTE_OFF();
002038  bf00              NOP      
00203a  2220              MOVS     r2,#0x20
00203c  4611              MOV      r1,r2
00203e  48c5              LDR      r0,|L1.9044|
002040  f7fffffe          BL       GPIOPinWrite
002044  bf00              NOP      
;;;1322   	
;;;1323   	 vTaskDelay(100/portTICK_RATE_MS);
002046  2064              MOVS     r0,#0x64
002048  f7fffffe          BL       vTaskDelay
;;;1324   	
;;;1325      if(index == DETECT_OVER_VOLTAGE_OR_SHORT && IS_SHORT_CIRCUIT){
00204c  2d03              CMP      r5,#3
00204e  d109              BNE      |L1.8292|
002050  2101              MOVS     r1,#1
002052  48c1              LDR      r0,|L1.9048|
002054  f7fffffe          BL       GPIO_ReadSinglePin
002058  b908              CBNZ     r0,|L1.8286|
00205a  2001              MOVS     r0,#1
00205c  e000              B        |L1.8288|
                  |L1.8286|
00205e  2000              MOVS     r0,#0
                  |L1.8288|
002060  b100              CBZ      r0,|L1.8292|
                  |L1.8290|
;;;1326   		 return;
;;;1327   	 }
;;;1328   	
;;;1329   	 if(index == DETECT_OVER_CURRENT && IS_OVER_CURRENT) {
;;;1330   		 return;
;;;1331   	 }
;;;1332   
;;;1333   	 gSystem_t->is_in_protection = false;
;;;1334   			 
;;;1335   	 if(gSystem_t->status == STATUS_WORKING  || gSystem_t->status == STATUS_INITING){
;;;1336   			BLED_SET(1);
;;;1337   		}else if(gSystem_t->status == STATUS_STANDBY){
;;;1338   			RLED_SET(1);
;;;1339   		}else if(gSystem_t->status == STATUS_SHUTDOWN){
;;;1340   			LED_OFF();
;;;1341   		}
;;;1342   	
;;;1343   	  dis_send_msg(DIS_UPDATE, MENU_NUM);
;;;1344   		 
;;;1345   	 
;;;1346   }
002062  bd70              POP      {r4-r6,pc}
                  |L1.8292|
002064  2d06              CMP      r5,#6                 ;1329
002066  d109              BNE      |L1.8316|
002068  2108              MOVS     r1,#8                 ;1329
00206a  48ba              LDR      r0,|L1.9044|
00206c  f7fffffe          BL       GPIO_ReadSinglePin
002070  2801              CMP      r0,#1                 ;1329
002072  d100              BNE      |L1.8310|
002074  e000              B        |L1.8312|
                  |L1.8310|
002076  2000              MOVS     r0,#0                 ;1329
                  |L1.8312|
002078  b100              CBZ      r0,|L1.8316|
00207a  e7f2              B        |L1.8290|
                  |L1.8316|
00207c  2000              MOVS     r0,#0                 ;1333
00207e  49a4              LDR      r1,|L1.8976|
002080  6809              LDR      r1,[r1,#0]            ;1333  ; gSystem_t
002082  f881004e          STRB     r0,[r1,#0x4e]         ;1333
002086  48a2              LDR      r0,|L1.8976|
002088  6800              LDR      r0,[r0,#0]            ;1335  ; gSystem_t
00208a  f8900053          LDRB     r0,[r0,#0x53]         ;1335
00208e  2802              CMP      r0,#2                 ;1335
002090  d005              BEQ      |L1.8350|
002092  489f              LDR      r0,|L1.8976|
002094  6800              LDR      r0,[r0,#0]            ;1335  ; gSystem_t
002096  f8900053          LDRB     r0,[r0,#0x53]         ;1335
00209a  2801              CMP      r0,#1                 ;1335
00209c  d10f              BNE      |L1.8382|
                  |L1.8350|
00209e  bf00              NOP                            ;1336
0020a0  bf00              NOP                            ;1336
0020a2  2200              MOVS     r2,#0                 ;1336
0020a4  2180              MOVS     r1,#0x80              ;1336
0020a6  48ad              LDR      r0,|L1.9052|
0020a8  f7fffffe          BL       GPIOPinWrite
0020ac  bf00              NOP                            ;1336
0020ae  bf00              NOP                            ;1336
0020b0  2240              MOVS     r2,#0x40              ;1336
0020b2  4611              MOV      r1,r2                 ;1336
0020b4  48a9              LDR      r0,|L1.9052|
0020b6  f7fffffe          BL       GPIOPinWrite
0020ba  bf00              NOP                            ;1336
0020bc  e02a              B        |L1.8468|
                  |L1.8382|
0020be  4894              LDR      r0,|L1.8976|
0020c0  6800              LDR      r0,[r0,#0]            ;1337  ; gSystem_t
0020c2  f8900053          LDRB     r0,[r0,#0x53]         ;1337
0020c6  b978              CBNZ     r0,|L1.8424|
0020c8  bf00              NOP                            ;1338
0020ca  bf00              NOP                            ;1338
0020cc  2280              MOVS     r2,#0x80              ;1338
0020ce  4611              MOV      r1,r2                 ;1338
0020d0  48a2              LDR      r0,|L1.9052|
0020d2  f7fffffe          BL       GPIOPinWrite
0020d6  bf00              NOP                            ;1338
0020d8  bf00              NOP                            ;1338
0020da  2200              MOVS     r2,#0                 ;1338
0020dc  2140              MOVS     r1,#0x40              ;1338
0020de  489f              LDR      r0,|L1.9052|
0020e0  f7fffffe          BL       GPIOPinWrite
0020e4  bf00              NOP                            ;1338
0020e6  e015              B        |L1.8468|
                  |L1.8424|
0020e8  4889              LDR      r0,|L1.8976|
0020ea  6800              LDR      r0,[r0,#0]            ;1339  ; gSystem_t
0020ec  f8900053          LDRB     r0,[r0,#0x53]         ;1339
0020f0  2803              CMP      r0,#3                 ;1339
0020f2  d10f              BNE      |L1.8468|
0020f4  bf00              NOP                            ;1340
0020f6  bf00              NOP                            ;1340
0020f8  2280              MOVS     r2,#0x80              ;1340
0020fa  4611              MOV      r1,r2                 ;1340
0020fc  4897              LDR      r0,|L1.9052|
0020fe  f7fffffe          BL       GPIOPinWrite
002102  bf00              NOP                            ;1340
002104  bf00              NOP                            ;1340
002106  2240              MOVS     r2,#0x40              ;1340
002108  4611              MOV      r1,r2                 ;1340
00210a  4894              LDR      r0,|L1.9052|
00210c  f7fffffe          BL       GPIOPinWrite
002110  bf00              NOP                            ;1340
002112  bf00              NOP                            ;1340
                  |L1.8468|
002114  2116              MOVS     r1,#0x16              ;1343
002116  2001              MOVS     r0,#1                 ;1343
002118  f7fffffe          BL       dis_send_msg
00211c  bf00              NOP      
00211e  e7a0              B        |L1.8290|
;;;1347   
                          ENDP

                  sys_protect_valid_handler PROC
;;;1348   void sys_protect_valid_handler(uint8 index)
002120  b501              PUSH     {r0,lr}
;;;1349   {
;;;1350   	SYS_TRACE("sys_protect_valid_handler[%s]-[%d]\r\n", protect_name[index], (index - 2 + DIS_OVER_TEMP));
002122  f89d0000          LDRB     r0,[sp,#0]
002126  f1000215          ADD      r2,r0,#0x15
00212a  488d              LDR      r0,|L1.9056|
00212c  f89d3000          LDRB     r3,[sp,#0]
002130  f8501023          LDR      r1,[r0,r3,LSL #2]
002134  a08b              ADR      r0,|L1.9060|
002136  f7fffffe          BL       s_printf
;;;1351   	
;;;1352   	/*since more than one protection event may happen at the same time, we should record these*/
;;;1353   	gSystem_t->protect_bitmap |= (1 << index);
00213a  4875              LDR      r0,|L1.8976|
00213c  6800              LDR      r0,[r0,#0]  ; gSystem_t
00213e  f890004a          LDRB     r0,[r0,#0x4a]
002142  f89d2000          LDRB     r2,[sp,#0]
002146  2101              MOVS     r1,#1
002148  4091              LSLS     r1,r1,r2
00214a  4308              ORRS     r0,r0,r1
00214c  4970              LDR      r1,|L1.8976|
00214e  6809              LDR      r1,[r1,#0]  ; gSystem_t
002150  f881004a          STRB     r0,[r1,#0x4a]
;;;1354   	
;;;1355   	if(gSystem_t->status != STATUS_WORKING && gSystem_t->status != STATUS_INITING){
002154  486e              LDR      r0,|L1.8976|
002156  6800              LDR      r0,[r0,#0]  ; gSystem_t
002158  f8900053          LDRB     r0,[r0,#0x53]
00215c  2802              CMP      r0,#2
00215e  d006              BEQ      |L1.8558|
002160  486b              LDR      r0,|L1.8976|
002162  6800              LDR      r0,[r0,#0]  ; gSystem_t
002164  f8900053          LDRB     r0,[r0,#0x53]
002168  2801              CMP      r0,#1
00216a  d000              BEQ      |L1.8558|
                  |L1.8556|
;;;1356   		/*when protection event happen in standby or shutdown mode, we need do noting but just record the event*/
;;;1357   		return;
;;;1358   	}
;;;1359   	
;;;1360   	/*when short circuit hanppen then must case over current, so don't care it and clear it from gSystem_t->protect_bitmap*/
;;;1361   	if(gSystem_t->is_short_circuit == true && index == DETECT_OVER_CURRENT){
;;;1362   		gSystem_t->protect_bitmap &= ~(1 << index);
;;;1363   		return;
;;;1364   	}
;;;1365   	
;;;1366   	
;;;1367   //	/*before out of fix hardware bug, we don't indicate protection events*/
;;;1368   //	if(gSystem_t->is_out_of_fix_hardware == false) return;
;;;1369   	
;;;1370   	
;;;1371   	
;;;1372   	/*when clip happen, no need mute but just flash the LED*/
;;;1373   	if(index != DETECT_OVER_CLIP){
;;;1374   		AMP_DISENABLE();
;;;1375   		AMP_MUTE_ON();
;;;1376   	}
;;;1377   	
;;;1378   	if(gSystem_t->is_in_protection == false){
;;;1379   	  gSystem_t->is_in_protection = true;
;;;1380   	  sys_Rled_flash(NULL);
;;;1381   	}
;;;1382   	
;;;1383   	/*since the over voltage and short circuit use the same gpio to indicate event, we need do */
;;;1384   	if(index == DETECT_OVER_VOLTAGE_OR_SHORT){
;;;1385   		vTaskDelay(5000/portTICK_RATE_MS);
;;;1386   		if(IS_SHORT_CIRCUIT){
;;;1387   			gSystem_t->is_short_circuit = true;
;;;1388   			SYS_TRACE("is_short_circuit\r\n");
;;;1389   			sys_untimeout(protect_recover_later, (void *)&index);
;;;1390   		}
;;;1391   	}
;;;1392   	
;;;1393   	if(index == DETECT_OVER_CURRENT){
;;;1394   		sys_untimeout(protect_recover_later, (void *)&index);
;;;1395   	}
;;;1396   	
;;;1397   	dis_send_msg(DIS_JUMP, (menu_id_t)(index - 2 + DIS_OVER_TEMP));
;;;1398   }
00216c  bd08              POP      {r3,pc}
                  |L1.8558|
00216e  4868              LDR      r0,|L1.8976|
002170  6800              LDR      r0,[r0,#0]            ;1361  ; gSystem_t
002172  f890004f          LDRB     r0,[r0,#0x4f]         ;1361
002176  2801              CMP      r0,#1                 ;1361
002178  d111              BNE      |L1.8606|
00217a  f89d0000          LDRB     r0,[sp,#0]            ;1361
00217e  2806              CMP      r0,#6                 ;1361
002180  d10d              BNE      |L1.8606|
002182  4863              LDR      r0,|L1.8976|
002184  6800              LDR      r0,[r0,#0]            ;1362  ; gSystem_t
002186  f890004a          LDRB     r0,[r0,#0x4a]         ;1362
00218a  f89d2000          LDRB     r2,[sp,#0]            ;1362
00218e  2101              MOVS     r1,#1                 ;1362
002190  4091              LSLS     r1,r1,r2              ;1362
002192  4388              BICS     r0,r0,r1              ;1362
002194  495e              LDR      r1,|L1.8976|
002196  6809              LDR      r1,[r1,#0]            ;1362  ; gSystem_t
002198  f881004a          STRB     r0,[r1,#0x4a]         ;1362
00219c  e7e6              B        |L1.8556|
                  |L1.8606|
00219e  f89d0000          LDRB     r0,[sp,#0]            ;1373
0021a2  2804              CMP      r0,#4                 ;1373
0021a4  d00d              BEQ      |L1.8642|
0021a6  bf00              NOP                            ;1374
0021a8  2200              MOVS     r2,#0                 ;1374
0021aa  2101              MOVS     r1,#1                 ;1374
0021ac  4868              LDR      r0,|L1.9040|
0021ae  f7fffffe          BL       GPIOPinWrite
0021b2  bf00              NOP                            ;1374
0021b4  bf00              NOP                            ;1375
0021b6  2200              MOVS     r2,#0                 ;1375
0021b8  2120              MOVS     r1,#0x20              ;1375
0021ba  4866              LDR      r0,|L1.9044|
0021bc  f7fffffe          BL       GPIOPinWrite
0021c0  bf00              NOP                            ;1375
                  |L1.8642|
0021c2  4853              LDR      r0,|L1.8976|
0021c4  6800              LDR      r0,[r0,#0]            ;1378  ; gSystem_t
0021c6  f890004e          LDRB     r0,[r0,#0x4e]         ;1378
0021ca  b938              CBNZ     r0,|L1.8668|
0021cc  2001              MOVS     r0,#1                 ;1379
0021ce  4950              LDR      r1,|L1.8976|
0021d0  6809              LDR      r1,[r1,#0]            ;1379  ; gSystem_t
0021d2  f881004e          STRB     r0,[r1,#0x4e]         ;1379
0021d6  2000              MOVS     r0,#0                 ;1380
0021d8  f7fffffe          BL       sys_Rled_flash
                  |L1.8668|
0021dc  f89d0000          LDRB     r0,[sp,#0]            ;1384
0021e0  2803              CMP      r0,#3                 ;1384
0021e2  d118              BNE      |L1.8726|
0021e4  f2413088          MOV      r0,#0x1388            ;1385
0021e8  f7fffffe          BL       vTaskDelay
0021ec  2101              MOVS     r1,#1                 ;1386
0021ee  485a              LDR      r0,|L1.9048|
0021f0  f7fffffe          BL       GPIO_ReadSinglePin
0021f4  b908              CBNZ     r0,|L1.8698|
0021f6  2001              MOVS     r0,#1                 ;1386
0021f8  e000              B        |L1.8700|
                  |L1.8698|
0021fa  2000              MOVS     r0,#0                 ;1386
                  |L1.8700|
0021fc  b158              CBZ      r0,|L1.8726|
0021fe  2001              MOVS     r0,#1                 ;1387
002200  4943              LDR      r1,|L1.8976|
002202  6809              LDR      r1,[r1,#0]            ;1387  ; gSystem_t
002204  f881004f          STRB     r0,[r1,#0x4f]         ;1387
002208  a060              ADR      r0,|L1.9100|
00220a  f7fffffe          BL       s_printf
00220e  4669              MOV      r1,sp                 ;1389
002210  4863              LDR      r0,|L1.9120|
002212  f7fffffe          BL       sys_untimeout
                  |L1.8726|
002216  f89d0000          LDRB     r0,[sp,#0]            ;1393
00221a  2806              CMP      r0,#6                 ;1393
00221c  d103              BNE      |L1.8742|
00221e  4669              MOV      r1,sp                 ;1394
002220  485f              LDR      r0,|L1.9120|
002222  f7fffffe          BL       sys_untimeout
                  |L1.8742|
002226  f89d0000          LDRB     r0,[sp,#0]            ;1397
00222a  3015              ADDS     r0,r0,#0x15           ;1397
00222c  b2c1              UXTB     r1,r0                 ;1397
00222e  2002              MOVS     r0,#2                 ;1397
002230  f7fffffe          BL       dis_send_msg
002234  bf00              NOP      
002236  e799              B        |L1.8556|
;;;1399   
                          ENDP

                  sys_protect_invalid_handler PROC
;;;1401   
;;;1402   void sys_protect_invalid_handler(uint8 index)
002238  b501              PUSH     {r0,lr}
;;;1403   {
;;;1404   	SYS_TRACE("sys_protect_invalid_handler[%s]\r\n", protect_name[index]);
00223a  4849              LDR      r0,|L1.9056|
00223c  f89d2000          LDRB     r2,[sp,#0]
002240  f8501022          LDR      r1,[r0,r2,LSL #2]
002244  a057              ADR      r0,|L1.9124|
002246  f7fffffe          BL       s_printf
;;;1405   	
;;;1406   	if(gSystem_t->protect_bitmap == 0){
00224a  4831              LDR      r0,|L1.8976|
00224c  6800              LDR      r0,[r0,#0]  ; gSystem_t
00224e  f890004a          LDRB     r0,[r0,#0x4a]
002252  b900              CBNZ     r0,|L1.8790|
                  |L1.8788|
;;;1407   		/*since no protection event happened, we need do nothing*/
;;;1408   		return;
;;;1409   	}else{
;;;1410   
;;;1411   		gSystem_t->protect_bitmap &= ~(1 << index);
;;;1412   	}
;;;1413   	
;;;1414   	/*this maybe should remove since v0.3.8*/
;;;1415   	if(gSystem_t->status != STATUS_WORKING && gSystem_t->status != STATUS_INITING) return;
;;;1416   	
;;;1417   	/*when short circuit happen we don't care about over current*/
;;;1418   	if(gSystem_t->is_short_circuit == true && index == DETECT_OVER_CURRENT) return;
;;;1419   	
;;;1420   	/*special handler when short circuit occur*/
;;;1421   	if(index == DETECT_OVER_VOLTAGE_OR_SHORT && gSystem_t->is_short_circuit == true){
;;;1422   		
;;;1423   		/*it is complicated to handler this, we need take consideration of more than one protetion events occur at the same time and power on event*/
;;;1424   		if(gSystem_t->protect_bitmap == 0 && gSystem_t->is_out_of_fix_hardware == true){
;;;1425   			sys_timeout(5*1000, protect_recover_later, (void *)&index);
;;;1426   		}
;;;1427   		
;;;1428   		return;
;;;1429   	}
;;;1430   	
;;;1431   	/*special handler when over current occur*/
;;;1432   	if(index == DETECT_OVER_CURRENT){
;;;1433   		
;;;1434   		/*it is complicated to handler this, we need take consideration of more than one protetion events occur at the same time and power on event*/
;;;1435   		if(gSystem_t->protect_bitmap == 0 && gSystem_t->is_out_of_fix_hardware == true){
;;;1436   			sys_timeout(5*1000, protect_recover_later, (void *)&index);
;;;1437   		}
;;;1438   		
;;;1439   		return;
;;;1440   	}
;;;1441   		
;;;1442   	
;;;1443   	if(gSystem_t->protect_bitmap == 0){
;;;1444   	   gSystem_t->is_in_protection = false;
;;;1445   	   AMP_ENABLE();
;;;1446   	   AMP_MUTE_OFF();
;;;1447   	
;;;1448   	  if(gSystem_t->status == STATUS_WORKING || gSystem_t->status ==STATUS_INITING){
;;;1449   			BLED_SET(1);
;;;1450   		}else if(gSystem_t->status == STATUS_STANDBY){
;;;1451   			RLED_SET(1);
;;;1452   		}else if(gSystem_t->status == STATUS_SHUTDOWN){
;;;1453   			LED_OFF();
;;;1454   		}
;;;1455   	
;;;1456   	  dis_send_msg(DIS_UPDATE, MENU_NUM);
;;;1457   	}
;;;1458   }
002254  bd08              POP      {r3,pc}
                  |L1.8790|
002256  482e              LDR      r0,|L1.8976|
002258  6800              LDR      r0,[r0,#0]            ;1411  ; gSystem_t
00225a  f890004a          LDRB     r0,[r0,#0x4a]         ;1411
00225e  f89d2000          LDRB     r2,[sp,#0]            ;1411
002262  2101              MOVS     r1,#1                 ;1411
002264  4091              LSLS     r1,r1,r2              ;1411
002266  4388              BICS     r0,r0,r1              ;1411
002268  4929              LDR      r1,|L1.8976|
00226a  6809              LDR      r1,[r1,#0]            ;1411  ; gSystem_t
00226c  f881004a          STRB     r0,[r1,#0x4a]         ;1411
002270  4827              LDR      r0,|L1.8976|
002272  6800              LDR      r0,[r0,#0]            ;1415  ; gSystem_t
002274  f8900053          LDRB     r0,[r0,#0x53]         ;1415
002278  2802              CMP      r0,#2                 ;1415
00227a  d006              BEQ      |L1.8842|
00227c  4824              LDR      r0,|L1.8976|
00227e  6800              LDR      r0,[r0,#0]            ;1415  ; gSystem_t
002280  f8900053          LDRB     r0,[r0,#0x53]         ;1415
002284  2801              CMP      r0,#1                 ;1415
002286  d000              BEQ      |L1.8842|
002288  e7e4              B        |L1.8788|
                  |L1.8842|
00228a  e09d              B        |L1.9160|
                  |L1.8844|
00228c  74726967          DCB      "trigger_invalid_timeout, in install menu, will not powe"
002290  6765725f
002294  696e7661
002298  6c69645f
00229c  74696d65
0022a0  6f75742c
0022a4  20696e20
0022a8  696e7374
0022ac  616c6c20
0022b0  6d656e75
0022b4  2c207769
0022b8  6c6c206e
0022bc  6f742070
0022c0  6f7765  
0022c3  72206f66          DCB      "r off"
0022c7  66      
                  |L1.8904|
0022c8  0d0a00            DCB      "\r\n",0
0022cb  00                DCB      0
                  |L1.8908|
                          DCD      0x40062000
                  |L1.8912|
0022d0  74726967          DCB      "trigger_invalid_timeout, IS_TRIGGER_VALID\r\n",0
0022d4  6765725f
0022d8  696e7661
0022dc  6c69645f
0022e0  74696d65
0022e4  6f75742c
0022e8  2049535f
0022ec  54524947
0022f0  4745525f
0022f4  56414c49
0022f8  440d0a00
                  |L1.8956|
0022fc  54726967          DCB      "Trigger detect\r\n",0
002300  67657220
002304  64657465
002308  63740d0a
00230c  00      
00230d  00                DCB      0
00230e  00                DCB      0
00230f  00                DCB      0
                  |L1.8976|
                          DCD      gSystem_t
                  |L1.8980|
                          DCD      trigger_invalid_timeout
                  |L1.8984|
002318  4e6f2054          DCB      "No Trigger detect, method=%d\r\n",0
00231c  72696767
002320  65722064
002324  65746563
002328  742c206d
00232c  6574686f
002330  643d2564
002334  0d0a00  
002337  00                DCB      0
                  |L1.9016|
002338  7379735f          DCB      "sys_peq_single_set\r\n",0
00233c  7065715f
002340  73696e67
002344  6c655f73
002348  65740d0a
00234c  00      
00234d  00                DCB      0
00234e  00                DCB      0
00234f  00                DCB      0
                  |L1.9040|
                          DCD      0x4003d000
                  |L1.9044|
                          DCD      0x40064000
                  |L1.9048|
                          DCD      0x40065000
                  |L1.9052|
                          DCD      0x40006000
                  |L1.9056|
                          DCD      protect_name
                  |L1.9060|
002364  7379735f          DCB      "sys_protect_valid_handler[%s]-[%d]\r\n",0
002368  70726f74
00236c  6563745f
002370  76616c69
002374  645f6861
002378  6e646c65
00237c  725b2573
002380  5d2d5b25
002384  645d0d0a
002388  00      
002389  00                DCB      0
00238a  00                DCB      0
00238b  00                DCB      0
                  |L1.9100|
00238c  69735f73          DCB      "is_short_circuit\r\n",0
002390  686f7274
002394  5f636972
002398  63756974
00239c  0d0a00  
00239f  00                DCB      0
                  |L1.9120|
                          DCD      protect_recover_later
                  |L1.9124|
0023a4  7379735f          DCB      "sys_protect_invalid_handler[%s]\r\n",0
0023a8  70726f74
0023ac  6563745f
0023b0  696e7661
0023b4  6c69645f
0023b8  68616e64
0023bc  6c65725b
0023c0  25735d0d
0023c4  0a00    
0023c6  00                DCB      0
0023c7  00                DCB      0
                  |L1.9160|
0023c8  4889              LDR      r0,|L1.9712|
0023ca  6800              LDR      r0,[r0,#0]            ;1418  ; gSystem_t
0023cc  f890004f          LDRB     r0,[r0,#0x4f]         ;1418
0023d0  2801              CMP      r0,#1                 ;1418
0023d2  d104              BNE      |L1.9182|
0023d4  f89d0000          LDRB     r0,[sp,#0]            ;1418
0023d8  2806              CMP      r0,#6                 ;1418
0023da  d100              BNE      |L1.9182|
0023dc  e73a              B        |L1.8788|
                  |L1.9182|
0023de  f89d0000          LDRB     r0,[sp,#0]            ;1421
0023e2  2803              CMP      r0,#3                 ;1421
0023e4  d117              BNE      |L1.9238|
0023e6  4882              LDR      r0,|L1.9712|
0023e8  6800              LDR      r0,[r0,#0]            ;1421  ; gSystem_t
0023ea  f890004f          LDRB     r0,[r0,#0x4f]         ;1421
0023ee  2801              CMP      r0,#1                 ;1421
0023f0  d111              BNE      |L1.9238|
0023f2  487f              LDR      r0,|L1.9712|
0023f4  6800              LDR      r0,[r0,#0]            ;1424  ; gSystem_t
0023f6  f890004a          LDRB     r0,[r0,#0x4a]         ;1424
0023fa  b958              CBNZ     r0,|L1.9236|
0023fc  487c              LDR      r0,|L1.9712|
0023fe  6800              LDR      r0,[r0,#0]            ;1424  ; gSystem_t
002400  f8900050          LDRB     r0,[r0,#0x50]         ;1424
002404  2801              CMP      r0,#1                 ;1424
002406  d105              BNE      |L1.9236|
002408  466a              MOV      r2,sp                 ;1425
00240a  497a              LDR      r1,|L1.9716|
00240c  f2413088          MOV      r0,#0x1388            ;1425
002410  f7fffffe          BL       sys_timeout
                  |L1.9236|
002414  e71e              B        |L1.8788|
                  |L1.9238|
002416  f89d0000          LDRB     r0,[sp,#0]            ;1432
00241a  2806              CMP      r0,#6                 ;1432
00241c  d111              BNE      |L1.9282|
00241e  4874              LDR      r0,|L1.9712|
002420  6800              LDR      r0,[r0,#0]            ;1435  ; gSystem_t
002422  f890004a          LDRB     r0,[r0,#0x4a]         ;1435
002426  b958              CBNZ     r0,|L1.9280|
002428  4871              LDR      r0,|L1.9712|
00242a  6800              LDR      r0,[r0,#0]            ;1435  ; gSystem_t
00242c  f8900050          LDRB     r0,[r0,#0x50]         ;1435
002430  2801              CMP      r0,#1                 ;1435
002432  d105              BNE      |L1.9280|
002434  466a              MOV      r2,sp                 ;1436
002436  496f              LDR      r1,|L1.9716|
002438  f2413088          MOV      r0,#0x1388            ;1436
00243c  f7fffffe          BL       sys_timeout
                  |L1.9280|
002440  e708              B        |L1.8788|
                  |L1.9282|
002442  486b              LDR      r0,|L1.9712|
002444  6800              LDR      r0,[r0,#0]            ;1443  ; gSystem_t
002446  f890004a          LDRB     r0,[r0,#0x4a]         ;1443
00244a  2800              CMP      r0,#0                 ;1443
00244c  d15c              BNE      |L1.9480|
00244e  4968              LDR      r1,|L1.9712|
002450  6809              LDR      r1,[r1,#0]            ;1444  ; gSystem_t
002452  f881004e          STRB     r0,[r1,#0x4e]         ;1444
002456  bf00              NOP                            ;1445
002458  2201              MOVS     r2,#1                 ;1445
00245a  4611              MOV      r1,r2                 ;1445
00245c  4866              LDR      r0,|L1.9720|
00245e  f7fffffe          BL       GPIOPinWrite
002462  bf00              NOP                            ;1445
002464  bf00              NOP                            ;1446
002466  2220              MOVS     r2,#0x20              ;1446
002468  4611              MOV      r1,r2                 ;1446
00246a  4864              LDR      r0,|L1.9724|
00246c  f7fffffe          BL       GPIOPinWrite
002470  bf00              NOP                            ;1446
002472  485f              LDR      r0,|L1.9712|
002474  6800              LDR      r0,[r0,#0]            ;1448  ; gSystem_t
002476  f8900053          LDRB     r0,[r0,#0x53]         ;1448
00247a  2802              CMP      r0,#2                 ;1448
00247c  d005              BEQ      |L1.9354|
00247e  485c              LDR      r0,|L1.9712|
002480  6800              LDR      r0,[r0,#0]            ;1448  ; gSystem_t
002482  f8900053          LDRB     r0,[r0,#0x53]         ;1448
002486  2801              CMP      r0,#1                 ;1448
002488  d10f              BNE      |L1.9386|
                  |L1.9354|
00248a  bf00              NOP                            ;1449
00248c  bf00              NOP                            ;1449
00248e  2200              MOVS     r2,#0                 ;1449
002490  2180              MOVS     r1,#0x80              ;1449
002492  485b              LDR      r0,|L1.9728|
002494  f7fffffe          BL       GPIOPinWrite
002498  bf00              NOP                            ;1449
00249a  bf00              NOP                            ;1449
00249c  2240              MOVS     r2,#0x40              ;1449
00249e  4611              MOV      r1,r2                 ;1449
0024a0  4857              LDR      r0,|L1.9728|
0024a2  f7fffffe          BL       GPIOPinWrite
0024a6  bf00              NOP                            ;1449
0024a8  e02a              B        |L1.9472|
                  |L1.9386|
0024aa  4851              LDR      r0,|L1.9712|
0024ac  6800              LDR      r0,[r0,#0]            ;1450  ; gSystem_t
0024ae  f8900053          LDRB     r0,[r0,#0x53]         ;1450
0024b2  b978              CBNZ     r0,|L1.9428|
0024b4  bf00              NOP                            ;1451
0024b6  bf00              NOP                            ;1451
0024b8  2280              MOVS     r2,#0x80              ;1451
0024ba  4611              MOV      r1,r2                 ;1451
0024bc  4850              LDR      r0,|L1.9728|
0024be  f7fffffe          BL       GPIOPinWrite
0024c2  bf00              NOP                            ;1451
0024c4  bf00              NOP                            ;1451
0024c6  2200              MOVS     r2,#0                 ;1451
0024c8  2140              MOVS     r1,#0x40              ;1451
0024ca  484d              LDR      r0,|L1.9728|
0024cc  f7fffffe          BL       GPIOPinWrite
0024d0  bf00              NOP                            ;1451
0024d2  e015              B        |L1.9472|
                  |L1.9428|
0024d4  4846              LDR      r0,|L1.9712|
0024d6  6800              LDR      r0,[r0,#0]            ;1452  ; gSystem_t
0024d8  f8900053          LDRB     r0,[r0,#0x53]         ;1452
0024dc  2803              CMP      r0,#3                 ;1452
0024de  d10f              BNE      |L1.9472|
0024e0  bf00              NOP                            ;1453
0024e2  bf00              NOP                            ;1453
0024e4  2280              MOVS     r2,#0x80              ;1453
0024e6  4611              MOV      r1,r2                 ;1453
0024e8  4845              LDR      r0,|L1.9728|
0024ea  f7fffffe          BL       GPIOPinWrite
0024ee  bf00              NOP                            ;1453
0024f0  bf00              NOP                            ;1453
0024f2  2240              MOVS     r2,#0x40              ;1453
0024f4  4611              MOV      r1,r2                 ;1453
0024f6  4842              LDR      r0,|L1.9728|
0024f8  f7fffffe          BL       GPIOPinWrite
0024fc  bf00              NOP                            ;1453
0024fe  bf00              NOP                            ;1453
                  |L1.9472|
002500  2116              MOVS     r1,#0x16              ;1456
002502  2001              MOVS     r0,#1                 ;1456
002504  f7fffffe          BL       dis_send_msg
                  |L1.9480|
002508  bf00              NOP      
00250a  e6a3              B        |L1.8788|
;;;1459   
                          ENDP

                  sys_database0_update_later PROC
;;;1460   void sys_database0_update_later(void *arg)
00250c  b510              PUSH     {r4,lr}
;;;1461   {
00250e  4604              MOV      r4,r0
;;;1462   	 sys_send_msg(DATABASE_UPDATE_MSG, 0);
002510  2100              MOVS     r1,#0
002512  2002              MOVS     r0,#2
002514  f7fffffe          BL       sys_send_msg
;;;1463   }
002518  bd10              POP      {r4,pc}
;;;1464   
                          ENDP

                  sys_database1_update_later PROC
;;;1465   void sys_database1_update_later(void *arg)
00251a  b510              PUSH     {r4,lr}
;;;1466   {
00251c  4604              MOV      r4,r0
;;;1467   	 sys_send_msg(DATABASE_UPDATE_MSG, 1);
00251e  2101              MOVS     r1,#1
002520  2002              MOVS     r0,#2
002522  f7fffffe          BL       sys_send_msg
;;;1468   }
002526  bd10              POP      {r4,pc}
;;;1469   
                          ENDP

                  sys_database2_update_later PROC
;;;1470   void sys_database2_update_later(void *arg)
002528  b510              PUSH     {r4,lr}
;;;1471   {
00252a  4604              MOV      r4,r0
;;;1472   	 sys_send_msg(DATABASE_UPDATE_MSG, 2);
00252c  2102              MOVS     r1,#2
00252e  4608              MOV      r0,r1
002530  f7fffffe          BL       sys_send_msg
;;;1473   }
002534  bd10              POP      {r4,pc}
;;;1474   
                          ENDP

                  sys_15v_valid_handler PROC
;;;1475   void sys_15v_valid_handler(uint8 index)
002536  b510              PUSH     {r4,lr}
;;;1476   {
002538  4604              MOV      r4,r0
;;;1477   	SYS_TRACE("sys_15v_valid_handler\r\n");
00253a  a032              ADR      r0,|L1.9732|
00253c  f7fffffe          BL       s_printf
;;;1478   	
;;;1479   	
;;;1480   }
002540  bd10              POP      {r4,pc}
;;;1481   
                          ENDP

                  sys_15v_invalid_handler PROC
;;;1482   void sys_15v_invalid_handler(uint8 index)
002542  b510              PUSH     {r4,lr}
;;;1483   {
002544  4604              MOV      r4,r0
;;;1484   	SYS_TRACE("sys_15v_invalid_handler\r\n"); 
002546  a035              ADR      r0,|L1.9756|
002548  f7fffffe          BL       s_printf
;;;1485   	
;;;1486   	
;;;1487   }
00254c  bd10              POP      {r4,pc}
;;;1488   
                          ENDP

                  sys_low_power_handler PROC
;;;1489   
;;;1490   void sys_low_power_handler(void)
00254e  b50e              PUSH     {r1-r3,lr}
;;;1491   {
;;;1492   	uint8 buf[10] = {0};
002550  2000              MOVS     r0,#0
002552  9000              STR      r0,[sp,#0]
002554  9001              STR      r0,[sp,#4]
002556  9002              STR      r0,[sp,#8]
;;;1493   	
;;;1494   	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
002558  4837              LDR      r0,|L1.9784|
00255a  f7fffffe          BL       SysCtlPeripheralEnable
;;;1495   
;;;1496   	
;;;1497   	/*eeprom releated gpio init*/
;;;1498     GPIOPinTypeGPIOOutput(EPROM_SDA_PORT, EPROM_SDA_PIN);
00255e  2108              MOVS     r1,#8
002560  4836              LDR      r0,|L1.9788|
002562  f7fffffe          BL       GPIOPinTypeGPIOOutput
;;;1499   	GPIOPinTypeGPIOOutput(EPROM_SCL_PORT, EPROM_SCL_PIN);
002566  2104              MOVS     r1,#4
002568  4834              LDR      r0,|L1.9788|
00256a  f7fffffe          BL       GPIOPinTypeGPIOOutput
;;;1500   	
;;;1501   	eeprom_read(SYS_LOW_POWER_FLAG_ADDRESS, buf, strlen("LOWPOWER"));
00256e  2208              MOVS     r2,#8
002570  4669              MOV      r1,sp
002572  0190              LSLS     r0,r2,#6
002574  f7fffffe          BL       eeprom_read
;;;1502   
;;;1503     if(strcmp((char *)buf, "LOWPOWER") == 0){
002578  4931              LDR      r1,|L1.9792|
00257a  4668              MOV      r0,sp
00257c  f7fffffe          BL       strcmp
002580  b9e8              CBNZ     r0,|L1.9662|
;;;1504   		SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
002582  482d              LDR      r0,|L1.9784|
002584  1cc0              ADDS     r0,r0,#3
002586  f7fffffe          BL       SysCtlPeripheralEnable
;;;1505   		GPIOPinTypeGPIOInput(POWER_KEY_PORT, POWER_KEY_PIN);
00258a  2104              MOVS     r1,#4
00258c  482d              LDR      r0,|L1.9796|
00258e  f7fffffe          BL       GPIOPinTypeGPIOInput
;;;1506   	  GPIOIntTypeSet(POWER_KEY_PORT, POWER_KEY_PIN, GPIO_RISING_EDGE);
002592  2204              MOVS     r2,#4
002594  4611              MOV      r1,r2
002596  482b              LDR      r0,|L1.9796|
002598  f7fffffe          BL       GPIOIntTypeSet
;;;1507   		IntEnable(INT_KEY_POWER);
00259c  2014              MOVS     r0,#0x14
00259e  f7fffffe          BL       IntEnable
;;;1508   	  GPIOIntEnable(POWER_KEY_PORT, POWER_KEY_PIN);
0025a2  2104              MOVS     r1,#4
0025a4  4827              LDR      r0,|L1.9796|
0025a6  f7fffffe          BL       GPIOIntEnable
;;;1509   		
;;;1510   		eeprom_write(SYS_LOW_POWER_FLAG_ADDRESS, (uint8 *)"12345678", 8);
0025aa  2208              MOVS     r2,#8
0025ac  a126              ADR      r1,|L1.9800|
0025ae  0190              LSLS     r0,r2,#6
0025b0  f7fffffe          BL       eeprom_write
;;;1511   		
;;;1512   		bsp_delay_ms(100);
0025b4  2064              MOVS     r0,#0x64
0025b6  f7fffffe          BL       bsp_delay_ms
;;;1513   	
;;;1514   		
;;;1515   		SysCtlDeepSleep();
0025ba  f7fffffe          BL       SysCtlDeepSleep
                  |L1.9662|
;;;1516   	}
;;;1517   }
0025be  bd0e              POP      {r1-r3,pc}
;;;1518   
                          ENDP

                  sys_ip_power_on_handler PROC
;;;1519   void sys_ip_power_on_handler(sys_state_t *sys)
0025c0  b510              PUSH     {r4,lr}
;;;1520   {
0025c2  4604              MOV      r4,r0
;;;1521   	 if(sys->status == STATUS_STANDBY && sys->method == IR_IP){
0025c4  f8940053          LDRB     r0,[r4,#0x53]
0025c8  b928              CBNZ     r0,|L1.9686|
0025ca  7ce0              LDRB     r0,[r4,#0x13]
0025cc  2803              CMP      r0,#3
0025ce  d102              BNE      |L1.9686|
;;;1522   		 sys_power_on_handler(sys);
0025d0  4620              MOV      r0,r4
0025d2  f7fffffe          BL       sys_power_on_handler
                  |L1.9686|
;;;1523   	 }
;;;1524   }
0025d6  bd10              POP      {r4,pc}
;;;1525   
                          ENDP

                  lcd_test PROC
;;;1526   
;;;1527   int lcd_test(struct cmd_tbl_s *cmdtp, int argc, char * const argv[])
0025d8  b570              PUSH     {r4-r6,lr}
;;;1528   {
0025da  4604              MOV      r4,r0
0025dc  460d              MOV      r5,r1
0025de  4616              MOV      r6,r2
;;;1529   	 
;;;1530   	lcd_test_for_nad();
0025e0  f7fffffe          BL       lcd_test_for_nad
;;;1531   	
;;;1532   	SYS_TRACE("\r\n");
0025e4  f2af3020          ADR      r0,|L1.8904|
0025e8  f7fffffe          BL       s_printf
;;;1533   	return 0;
0025ec  2000              MOVS     r0,#0
;;;1534   }
0025ee  bd70              POP      {r4-r6,pc}
;;;1535   
                          ENDP

                  |L1.9712|
                          DCD      gSystem_t
                  |L1.9716|
                          DCD      protect_recover_later
                  |L1.9720|
                          DCD      0x4003d000
                  |L1.9724|
                          DCD      0x40064000
                  |L1.9728|
                          DCD      0x40006000
                  |L1.9732|
002604  7379735f          DCB      "sys_15v_valid_handler\r\n",0
002608  3135765f
00260c  76616c69
002610  645f6861
002614  6e646c65
002618  720d0a00
                  |L1.9756|
00261c  7379735f          DCB      "sys_15v_invalid_handler\r\n",0
002620  3135765f
002624  696e7661
002628  6c69645f
00262c  68616e64
002630  6c65720d
002634  0a00    
002636  00                DCB      0
002637  00                DCB      0
                  |L1.9784|
                          DCD      0xf0000801
                  |L1.9788|
                          DCD      0x40005000
                  |L1.9792|
                          DCD      ||.text||+0x958
                  |L1.9796|
                          DCD      0x40024000
                  |L1.9800|
002648  31323334          DCB      "12345678",0
00264c  35363738
002650  00      
002651  00                DCB      0
002652  00                DCB      0
002653  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  gSystem_last
                          %        84

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  sub_eq_array_a
                          DCD      0x7fec5f39
                          DCD      0x7f95a294
                          DCD      0x7d112fd3
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7fec5f39
                          DCD      0x7f8f57f7
                          DCD      0x7fa2595b
                          DCD      0x7e2d2780
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7eb19a41
                          DCD      0x7f1de69a
                          DCD      0x7fe82d7b
                          DCD      0x7f98b71b
                          DCD      0x7f6c9c0a
                          DCD      0x7ed59d55
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7e889c1b
                          DCD      0x7fed6345
                          DCD      0x7fe2046c
                          DCD      0x7dd7c2ca
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f53c579
                          DCD      0x7fd334c5
                          DCD      0x7fe2046c
                          DCD      0x7dd7c2ca
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f53c579
                          DCD      0x7fd334c5
                          DCD      0x7fe2046c
                          DCD      0x7dd7c2ca
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7fd334c5
                          DCD      0x7f5aa715
                          DCD      0x7eaec8d5
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7fdaad60
                          DCD      0x7f62174c
                          DCD      0x7fb8dc55
                          DCD      0x7f6af038
                          DCD      0x7fbb4916
                          DCD      0x7f79a6b5
                          DCD      0x7fd9fd36
                          DCD      0x7f6af038
                          DCD      0x7fdaad60
                          DCD      0x7f62174c
                          DCD      0x7fc1e796
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7fdaad60
                          DCD      0x7f606d7a
                          DCD      0x7fa0e842
                          DCD      0x7efc9363
                          DCD      0x7f9e6ab9
                          DCD      0x7ec258d5
                          DCD      0x7f581062
                          DCD      0x7f6af038
                          DCD      0x7ff24d8f
                          DCD      0x7fb2edfe
                          DCD      0x7eaa2a0a
                          DCD      0x7e56605e
                          DCD      0x7feebb34
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7ff41aef
                          DCD      0x7fb2edfe
                          DCD      0x7f15379f
                          DCD      0x7f6af038
                          DCD      0x7fdf2239
                          DCD      0x7f9df548
                          DCD      0x7da860dc
                          DCD      0x7be236c1
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                          DCD      0x7f6af038
                  sub_eq_array_b
                          DCD      0x7fffb480
                          DCD      0x7ffefbf4
                          DCD      0x7ffb9bed
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7fffb480
                          DCD      0x7ffefbf4
                          DCD      0x7ffe6d58
                          DCD      0x7fee7818
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffdf7e8
                          DCD      0x7ff12755
                          DCD      0x7fffb480
                          DCD      0x7fff25e5
                          DCD      0x7ffe9fad
                          DCD      0x7ff1c758
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffe9fad
                          DCD      0x7fffd60e
                          DCD      0x7fffd60e
                          DCD      0x7ffb3fa6
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffed202
                          DCD      0x7fffbce4
                          DCD      0x7fffd60e
                          DCD      0x7ffb3fa6
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffed202
                          DCD      0x7fffbce4
                          DCD      0x7fffd60e
                          DCD      0x7ffb3fa6
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7fffbce4
                          DCD      0x7ffe9fad
                          DCD      0x7ffbf833
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7fffd60e
                          DCD      0x7ffe6d58
                          DCD      0x7fff7164
                          DCD      0x7ffd2e94
                          DCD      0x7ffbf833
                          DCD      0x7ffefbf4
                          DCD      0x7ffff79c
                          DCD      0x7ffd2e94
                          DCD      0x7fffd60e
                          DCD      0x7ffe6d58
                          DCD      0x7fffac1d
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7fffd60e
                          DCD      0x7ffdf7e8
                          DCD      0x7ff8d2e5
                          DCD      0x7ff266ba
                          DCD      0x7fff0cba
                          DCD      0x7ffe32a0
                          DCD      0x7ffbf833
                          DCD      0x7ffd2e94
                          DCD      0x7fffd60e
                          DCD      0x7fff25e5
                          DCD      0x7fff25e5
                          DCD      0x7ffd2e94
                          DCD      0x7fffc547
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7fffe6d5
                          DCD      0x7fff25e5
                          DCD      0x7fff25e5
                          DCD      0x7ffd2e94
                          DCD      0x7fffde72
                          DCD      0x7fff92f2
                          DCD      0x7ffd2e94
                          DCD      0x7fee7818
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                          DCD      0x7ffd2e94
                  sub_eq_array_g
                          DCD      0x38e7a95c
                          DCD      0x1aecb535
                          DCD      0x1430ccbc
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x3fd92fb1
                          DCD      0x196b228d
                          DCD      0x196b228d
                          DCD      0x196b228d
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x0809bd83
                          DCD      0x0809bd83
                          DCD      0x2d3382e4
                          DCD      0x196b228d
                          DCD      0x16a77e5e
                          DCD      0x0e4b3c3e
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x11feb28d
                          DCD      0x32b77186
                          DCD      0x196b228d
                          DCD      0x16a77e5e
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x11feb28d
                          DCD      0x47a39a38
                          DCD      0x196b228d
                          DCD      0x16a77e5e
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x11feb28d
                          DCD      0x47a39a38
                          DCD      0x196b228d
                          DCD      0x16a77e5e
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x38e7a95c
                          DCD      0x1430ccbc
                          DCD      0x16a77e5e
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x38e7a95c
                          DCD      0x16a77e5e
                          DCD      0x1e35bf6a
                          DCD      0x20000000
                          DCD      0x196b228d
                          DCD      0x1c8520d1
                          DCD      0x1430ccbc
                          DCD      0x20000000
                          DCD      0x38e7a95c
                          DCD      0x16a77e5e
                          DCD      0x1aecb535
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x38e7a95c
                          DCD      0x0a1e8a2e
                          DCD      0x38e7a95c
                          DCD      0x0809bd83
                          DCD      0x16a77e5e
                          DCD      0x1009b951
                          DCD      0x16a77e5e
                          DCD      0x20000000
                          DCD      0x38e7a95c
                          DCD      0x16a77e5e
                          DCD      0x16a77e5e
                          DCD      0x16a77e5e
                          DCD      0x2d3382e4
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x43a1b3ae
                          DCD      0x16a77e5e
                          DCD      0x16a77e5e
                          DCD      0x20000000
                          DCD      0x28491d14
                          DCD      0x196b228d
                          DCD      0x1009b951
                          DCD      0x16a77e5e
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                          DCD      0x20000000
                  sub_highpass_array
0004e0  21211e21          DCB      0x21,0x21,0x1e,0x21
0004e4  1b1b1814          DCB      0x1b,0x1b,0x18,0x14
0004e8  14141714          DCB      0x14,0x14,0x17,0x14
0004ec  82000000          DCB      0x82,0x00,0x00,0x00
                  protect_name
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x6
                          DCD      ||.conststring||+0xe
                          DCD      ||.conststring||+0x18
                          DCD      ||.conststring||+0x37
                          DCD      ||.conststring||+0x41
                          DCD      ||.conststring||+0x4a
                          DCD      ||.conststring||+0x57
                  __FUNCTION__
000510  7379735f          DCB      0x73,0x79,0x73,0x5f
000514  6d73675f          DCB      0x6d,0x73,0x67,0x5f
000518  68616e64          DCB      0x68,0x61,0x6e,0x64
00051c  6c657200          DCB      0x6c,0x65,0x72,0x00
                  |symbol_number.32|
000520  7379735f          DCB      0x73,0x79,0x73,0x5f
000524  64617461          DCB      0x64,0x61,0x74,0x61
000528  62617365          DCB      0x62,0x61,0x73,0x65
00052c  5f696e69          DCB      0x5f,0x69,0x6e,0x69
000530  7400              DCB      0x74,0x00
                  |symbol_number.33|
000532  7379              DCB      0x73,0x79
000534  735f6461          DCB      0x73,0x5f,0x64,0x61
000538  74616261          DCB      0x74,0x61,0x62,0x61
00053c  73655f73          DCB      0x73,0x65,0x5f,0x73
000540  61766500          DCB      0x61,0x76,0x65,0x00
                  |symbol_number.34|
000544  73797374          DCB      0x73,0x79,0x73,0x74
000548  656d5f74          DCB      0x65,0x6d,0x5f,0x74
00054c  61736b00          DCB      0x61,0x73,0x6b,0x00
                  |symbol_number.35|
000550  7379735f          DCB      0x73,0x79,0x73,0x5f
000554  61756469          DCB      0x61,0x75,0x64,0x69
000558  6f5f696e          DCB      0x6f,0x5f,0x69,0x6e
00055c  76616c69          DCB      0x76,0x61,0x6c,0x69
000560  645f6861          DCB      0x64,0x5f,0x68,0x61
000564  6e646c65          DCB      0x6e,0x64,0x6c,0x65
000568  7200              DCB      0x72,0x00
                  |symbol_number.36|
00056a  7379              DCB      0x73,0x79
00056c  735f6175          DCB      0x73,0x5f,0x61,0x75
000570  64696f5f          DCB      0x64,0x69,0x6f,0x5f
000574  73656e73          DCB      0x73,0x65,0x6e,0x73
000578  655f7468          DCB      0x65,0x5f,0x74,0x68
00057c  7265735f          DCB      0x72,0x65,0x73,0x5f
000580  73657400          DCB      0x73,0x65,0x74,0x00
000584  010f0104          DCW      0x010f,0x0104
000588  00f900ec          DCW      0x00f9,0x00ec
00058c  00e1              DCW      0x00e1
                  |symbol_number.37|
00058e  7379              DCB      0x73,0x79
000590  735f6c6f          DCB      0x73,0x5f,0x6c,0x6f
000594  61645f70          DCB      0x61,0x64,0x5f,0x70
000598  657100            DCB      0x65,0x71,0x00
                  |symbol_number.38|
00059b  73                DCB      0x73
00059c  79735f73          DCB      0x79,0x73,0x5f,0x73
0005a0  75625f70          DCB      0x75,0x62,0x5f,0x70
0005a4  72657365          DCB      0x72,0x65,0x73,0x65
0005a8  745f6c6f          DCB      0x74,0x5f,0x6c,0x6f
0005ac  616400            DCB      0x61,0x64,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  41554449          DCB      "AUDIO",0
000004  4f00    
000006  54524947          DCB      "TRIGGER",0
00000a  47455200
00000e  4f564552          DCB      "OVER_TEMP",0
000012  5f54454d
000016  5000    
000018  4f564552          DCB      "OVER_VOLTAGE_AND_SHORT_CIRCIUT",0
00001c  5f564f4c
000020  54414745
000024  5f414e44
000028  5f53484f
00002c  52545f43
000030  49524349
000034  555400  
000037  4f564552          DCB      "OVER_CLIP",0
00003b  5f434c49
00003f  5000    
000041  44435f45          DCB      "DC_ERROR",0
000045  52524f52
000049  00      
00004a  4f564552          DCB      "OVER_CURRENT",0
00004e  5f435552
000052  52454e54
000056  00      
000057  31355600          DCB      "15V",0

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=0

000000  6c636400          DCB      0x6c,0x63,0x64,0x00
000004  6e617620          DCB      0x6e,0x61,0x76,0x20
000008  70726576          DCB      0x70,0x72,0x65,0x76
00000c  206d656e          DCB      0x20,0x6d,0x65,0x6e
000010  75206c69          DCB      0x75,0x20,0x6c,0x69
000014  737400            DCB      0x73,0x74,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  gEqTemp
000000  0064              DCW      0x0064
000002  0a00              DCB      0x0a,0x00
                          DCD      0x00000000
                          DCD      0x7ed21bc1
                          DCD      0x7ffd2e94
                          DCD      0x20000000
                  sys_init_array
                          DCD      dsp_boot_init
                          DCD      sys_audio_config_load
                  j
00001c  01                DCB      0x01
                  |symbol_number.41|
00001d  01                DCB      0x01
                  is_first
00001e  0100              DCB      0x01,0x00
                  gSysQueue
                          DCD      0x00000000
                  gSystem_t
                          DCD      0x00000000
                  gIrOutputCmd
000028  00                DCB      0x00

                          AREA INIT_CMD, DATA, READONLY, ALIGN=2

                  __init_cmd_lcd
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
                          DCD      0x00000001
                          DCD      lcd_test
                          DCD      ||.conststrlit||+0x4
