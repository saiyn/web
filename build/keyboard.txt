; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\keyboard.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\keyboard.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\keyboard.crf Application\keyboard.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  key_back_handler PROC
;;;53     
;;;54     static void key_back_handler(sys_state_t *sys)
000000  b510              PUSH     {r4,lr}
;;;55     {
000002  4604              MOV      r4,r0
;;;56     	 if(cur_menu != gMenuHead){
000004  48fe              LDR      r0,|L1.1024|
000006  6800              LDR      r0,[r0,#0]  ; cur_menu
000008  49fe              LDR      r1,|L1.1028|
00000a  6809              LDR      r1,[r1,#0]  ; gMenuHead
00000c  4288              CMP      r0,r1
00000e  d007              BEQ      |L1.32|
;;;57     		 cur_menu = gMenuHead;
000010  48fc              LDR      r0,|L1.1028|
000012  6800              LDR      r0,[r0,#0]  ; gMenuHead
000014  49fa              LDR      r1,|L1.1024|
000016  6008              STR      r0,[r1,#0]  ; cur_menu
;;;58     		 dis_send_msg(DIS_UPDATE, MENU_NUM);
000018  2116              MOVS     r1,#0x16
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       dis_send_msg
                  |L1.32|
;;;59     	 }
;;;60     }
000020  bd10              POP      {r4,pc}
;;;61     
                          ENDP

                  key_down_handler PROC
;;;111    
;;;112    static void key_down_handler(sys_state_t *sys)
000022  b510              PUSH     {r4,lr}
;;;113    {
000024  4604              MOV      r4,r0
;;;114       //OSAL_ASSERT(cur_menu->next != NULL);
;;;115    	
;;;116    	 if(cur_menu->next == NULL) return;
000026  48f6              LDR      r0,|L1.1024|
000028  6800              LDR      r0,[r0,#0]  ; cur_menu
00002a  6880              LDR      r0,[r0,#8]
00002c  b900              CBNZ     r0,|L1.48|
                  |L1.46|
;;;117    	
;;;118    	 if(cur_menu->id == DELAY_ROUTER_MENU && sys->d_router == DELAY_OFF){
;;;119    			 cur_menu = cur_menu->next->next;
;;;120    	 }else if(cur_menu->id == POWER_ON_METHOD_MENU && sys->method != AUDIO){
;;;121    			 cur_menu = cur_menu->next->next->next; 
;;;122    	 }else if(cur_menu->id == RESET_MENU && sys->do_reset != true){
;;;123    			 cur_menu = cur_menu->next->next;	 
;;;124    	 }else if(cur_menu->id == WELCOM_MENU){
;;;125    		 cancle_welcome_timeout(sys);
;;;126    		 if(sys->is_in_factory){
;;;127    				cur_menu = cur_menu->next;
;;;128    			}else{
;;;129    				cur_menu = cur_menu->next->next->next;
;;;130    			}
;;;131    	 }else if(cur_menu->id != FACTOTY_SUB_CONFIRM_MENU){
;;;132    		 cur_menu = cur_menu->next;
;;;133    	 }
;;;134    	 
;;;135    	 dis_send_msg(DIS_UPDATE, MENU_NUM);
;;;136    }
00002e  bd10              POP      {r4,pc}
                  |L1.48|
000030  48f3              LDR      r0,|L1.1024|
000032  6800              LDR      r0,[r0,#0]            ;118  ; cur_menu
000034  7800              LDRB     r0,[r0,#0]            ;118
000036  280f              CMP      r0,#0xf               ;118
000038  d10a              BNE      |L1.80|
00003a  f8940026          LDRB     r0,[r4,#0x26]         ;118
00003e  2802              CMP      r0,#2                 ;118
000040  d106              BNE      |L1.80|
000042  48ef              LDR      r0,|L1.1024|
000044  6800              LDR      r0,[r0,#0]            ;119  ; cur_menu
000046  6880              LDR      r0,[r0,#8]            ;119
000048  6880              LDR      r0,[r0,#8]            ;119
00004a  49ed              LDR      r1,|L1.1024|
00004c  6008              STR      r0,[r1,#0]            ;119  ; cur_menu
00004e  e041              B        |L1.212|
                  |L1.80|
000050  48eb              LDR      r0,|L1.1024|
000052  6800              LDR      r0,[r0,#0]            ;120  ; cur_menu
000054  7800              LDRB     r0,[r0,#0]            ;120
000056  2811              CMP      r0,#0x11              ;120
000058  d10a              BNE      |L1.112|
00005a  7ce0              LDRB     r0,[r4,#0x13]         ;120
00005c  2801              CMP      r0,#1                 ;120
00005e  d007              BEQ      |L1.112|
000060  48e7              LDR      r0,|L1.1024|
000062  6800              LDR      r0,[r0,#0]            ;121  ; cur_menu
000064  6880              LDR      r0,[r0,#8]            ;121
000066  6880              LDR      r0,[r0,#8]            ;121
000068  6880              LDR      r0,[r0,#8]            ;121
00006a  49e5              LDR      r1,|L1.1024|
00006c  6008              STR      r0,[r1,#0]            ;121  ; cur_menu
00006e  e031              B        |L1.212|
                  |L1.112|
000070  48e3              LDR      r0,|L1.1024|
000072  6800              LDR      r0,[r0,#0]            ;122  ; cur_menu
000074  7800              LDRB     r0,[r0,#0]            ;122
000076  2814              CMP      r0,#0x14              ;122
000078  d10a              BNE      |L1.144|
00007a  f8940046          LDRB     r0,[r4,#0x46]         ;122
00007e  2801              CMP      r0,#1                 ;122
000080  d006              BEQ      |L1.144|
000082  48df              LDR      r0,|L1.1024|
000084  6800              LDR      r0,[r0,#0]            ;123  ; cur_menu
000086  6880              LDR      r0,[r0,#8]            ;123
000088  6880              LDR      r0,[r0,#8]            ;123
00008a  49dd              LDR      r1,|L1.1024|
00008c  6008              STR      r0,[r1,#0]            ;123  ; cur_menu
00008e  e021              B        |L1.212|
                  |L1.144|
000090  48db              LDR      r0,|L1.1024|
000092  6800              LDR      r0,[r0,#0]            ;124  ; cur_menu
000094  7800              LDRB     r0,[r0,#0]            ;124
000096  b998              CBNZ     r0,|L1.192|
000098  4620              MOV      r0,r4                 ;125
00009a  f7fffffe          BL       cancle_welcome_timeout
00009e  f894004b          LDRB     r0,[r4,#0x4b]         ;126
0000a2  b128              CBZ      r0,|L1.176|
0000a4  48d6              LDR      r0,|L1.1024|
0000a6  6800              LDR      r0,[r0,#0]            ;127  ; cur_menu
0000a8  6880              LDR      r0,[r0,#8]            ;127
0000aa  49d5              LDR      r1,|L1.1024|
0000ac  6008              STR      r0,[r1,#0]            ;127  ; cur_menu
0000ae  e011              B        |L1.212|
                  |L1.176|
0000b0  48d3              LDR      r0,|L1.1024|
0000b2  6800              LDR      r0,[r0,#0]            ;129  ; cur_menu
0000b4  6880              LDR      r0,[r0,#8]            ;129
0000b6  6880              LDR      r0,[r0,#8]            ;129
0000b8  6880              LDR      r0,[r0,#8]            ;129
0000ba  49d1              LDR      r1,|L1.1024|
0000bc  6008              STR      r0,[r1,#0]            ;129  ; cur_menu
0000be  e009              B        |L1.212|
                  |L1.192|
0000c0  48cf              LDR      r0,|L1.1024|
0000c2  6800              LDR      r0,[r0,#0]            ;131  ; cur_menu
0000c4  7800              LDRB     r0,[r0,#0]            ;131
0000c6  2802              CMP      r0,#2                 ;131
0000c8  d004              BEQ      |L1.212|
0000ca  48cd              LDR      r0,|L1.1024|
0000cc  6800              LDR      r0,[r0,#0]            ;132  ; cur_menu
0000ce  6880              LDR      r0,[r0,#8]            ;132
0000d0  49cb              LDR      r1,|L1.1024|
0000d2  6008              STR      r0,[r1,#0]            ;132  ; cur_menu
                  |L1.212|
0000d4  2116              MOVS     r1,#0x16              ;135
0000d6  2001              MOVS     r0,#1                 ;135
0000d8  f7fffffe          BL       dis_send_msg
0000dc  bf00              NOP      
0000de  e7a6              B        |L1.46|
;;;137    
                          ENDP

                  key_enter_handler PROC
;;;62     
;;;63     static void key_enter_handler(sys_state_t *sys)
0000e0  b510              PUSH     {r4,lr}
;;;64     {
0000e2  4604              MOV      r4,r0
;;;65     //	 if(cur_menu->child){
;;;66     //		//cur_menu = cur_menu->child;
;;;67     //	 }else{
;;;68     		 if(cur_menu->id == RESET_CONFIRM_MENU && sys->confirm_reset == true){
0000e4  48c6              LDR      r0,|L1.1024|
0000e6  6800              LDR      r0,[r0,#0]  ; cur_menu
0000e8  7800              LDRB     r0,[r0,#0]
0000ea  2815              CMP      r0,#0x15
0000ec  d10b              BNE      |L1.262|
0000ee  f8940047          LDRB     r0,[r4,#0x47]
0000f2  2801              CMP      r0,#1
0000f4  d107              BNE      |L1.262|
;;;69     			 sys_factory_reset(sys);
0000f6  4620              MOV      r0,r4
0000f8  f7fffffe          BL       sys_factory_reset
;;;70     			 cur_menu = gMenuHead;
0000fc  48c1              LDR      r0,|L1.1028|
0000fe  6800              LDR      r0,[r0,#0]  ; gMenuHead
000100  49bf              LDR      r1,|L1.1024|
000102  6008              STR      r0,[r1,#0]  ; cur_menu
000104  e02a              B        |L1.348|
                  |L1.262|
;;;71     		 }else if(cur_menu->id == WELCOM_MENU){
000106  48be              LDR      r0,|L1.1024|
000108  6800              LDR      r0,[r0,#0]  ; cur_menu
00010a  7800              LDRB     r0,[r0,#0]
00010c  b978              CBNZ     r0,|L1.302|
;;;72     			 cancle_welcome_timeout(sys);
00010e  4620              MOV      r0,r4
000110  f7fffffe          BL       cancle_welcome_timeout
;;;73     			 if(sys->is_in_factory){
000114  f894004b          LDRB     r0,[r4,#0x4b]
000118  b128              CBZ      r0,|L1.294|
;;;74     				  cur_menu = cur_menu->next;
00011a  48b9              LDR      r0,|L1.1024|
00011c  6800              LDR      r0,[r0,#0]  ; cur_menu
00011e  6880              LDR      r0,[r0,#8]
000120  49b7              LDR      r1,|L1.1024|
000122  6008              STR      r0,[r1,#0]  ; cur_menu
000124  e01a              B        |L1.348|
                  |L1.294|
;;;75     				}else{
;;;76     					display_menu_jump(VOLUME_MENU);
000126  2003              MOVS     r0,#3
000128  f7fffffe          BL       display_menu_jump
00012c  e016              B        |L1.348|
                  |L1.302|
;;;77     				}
;;;78     		 }else if(cur_menu->id == FACTOTY_SUB_CONFIRM_MENU){
00012e  48b4              LDR      r0,|L1.1024|
000130  6800              LDR      r0,[r0,#0]  ; cur_menu
000132  7800              LDRB     r0,[r0,#0]
000134  2802              CMP      r0,#2
000136  d10e              BNE      |L1.342|
;;;79     			  sys->sub_model = sys->temp_sub_model;
000138  f8940052          LDRB     r0,[r4,#0x52]
00013c  76e0              STRB     r0,[r4,#0x1b]
;;;80     			  /*load sub eq*/
;;;81     			  sys_sub_preset_load(sys);			 
00013e  4620              MOV      r0,r4
000140  f7fffffe          BL       sys_sub_preset_load
;;;82     			 
;;;83     			  sys->is_in_factory = 0;
000144  2000              MOVS     r0,#0
000146  f884004b          STRB     r0,[r4,#0x4b]
;;;84     			  cur_menu = cur_menu->next;
00014a  48ad              LDR      r0,|L1.1024|
00014c  6800              LDR      r0,[r0,#0]  ; cur_menu
00014e  6880              LDR      r0,[r0,#8]
000150  49ab              LDR      r1,|L1.1024|
000152  6008              STR      r0,[r1,#0]  ; cur_menu
000154  e002              B        |L1.348|
                  |L1.342|
;;;85     		 }else{
;;;86     			 key_down_handler(sys);
000156  4620              MOV      r0,r4
000158  f7fffffe          BL       key_down_handler
                  |L1.348|
;;;87     		 }
;;;88     	// }
;;;89     	
;;;90     	 dis_send_msg(DIS_UPDATE, MENU_NUM);
00015c  2116              MOVS     r1,#0x16
00015e  2001              MOVS     r0,#1
000160  f7fffffe          BL       dis_send_msg
;;;91     }
000164  bd10              POP      {r4,pc}
;;;92     
                          ENDP

                  key_up_handler PROC
;;;93     static void key_up_handler(sys_state_t *sys)
000166  b510              PUSH     {r4,lr}
;;;94     {
000168  4604              MOV      r4,r0
;;;95     	// OSAL_ASSERT(cur_menu->prev != NULL);
;;;96     	
;;;97     	 if(cur_menu->prev == NULL) return;
00016a  48a5              LDR      r0,|L1.1024|
00016c  6800              LDR      r0,[r0,#0]  ; cur_menu
00016e  68c0              LDR      r0,[r0,#0xc]
000170  b900              CBNZ     r0,|L1.372|
                  |L1.370|
;;;98     	
;;;99     	 if(cur_menu->id == RESET_MENU && sys->method != AUDIO){
;;;100    				cur_menu = cur_menu->prev->prev->prev;
;;;101    	 }else if(cur_menu->id == POWER_ON_METHOD_MENU && sys->d_router == DELAY_OFF){
;;;102    			 cur_menu = cur_menu->prev->prev;
;;;103    	 }else if(cur_menu->id == IP_ADDRESS_MENU){
;;;104    		 cur_menu = cur_menu->prev->prev;
;;;105    	 }else if(cur_menu->id != FACTORY_SUB_SELECT_MENU){
;;;106    		 cur_menu = cur_menu->prev;
;;;107    	 }
;;;108    	 
;;;109    	 dis_send_msg(DIS_UPDATE, MENU_NUM);
;;;110    }
000172  bd10              POP      {r4,pc}
                  |L1.372|
000174  48a2              LDR      r0,|L1.1024|
000176  6800              LDR      r0,[r0,#0]            ;99  ; cur_menu
000178  7800              LDRB     r0,[r0,#0]            ;99
00017a  2814              CMP      r0,#0x14              ;99
00017c  d10a              BNE      |L1.404|
00017e  7ce0              LDRB     r0,[r4,#0x13]         ;99
000180  2801              CMP      r0,#1                 ;99
000182  d007              BEQ      |L1.404|
000184  489e              LDR      r0,|L1.1024|
000186  6800              LDR      r0,[r0,#0]            ;100  ; cur_menu
000188  68c0              LDR      r0,[r0,#0xc]          ;100
00018a  68c0              LDR      r0,[r0,#0xc]          ;100
00018c  68c0              LDR      r0,[r0,#0xc]          ;100
00018e  499c              LDR      r1,|L1.1024|
000190  6008              STR      r0,[r1,#0]            ;100  ; cur_menu
000192  e025              B        |L1.480|
                  |L1.404|
000194  489a              LDR      r0,|L1.1024|
000196  6800              LDR      r0,[r0,#0]            ;101  ; cur_menu
000198  7800              LDRB     r0,[r0,#0]            ;101
00019a  2811              CMP      r0,#0x11              ;101
00019c  d10a              BNE      |L1.436|
00019e  f8940026          LDRB     r0,[r4,#0x26]         ;101
0001a2  2802              CMP      r0,#2                 ;101
0001a4  d106              BNE      |L1.436|
0001a6  4896              LDR      r0,|L1.1024|
0001a8  6800              LDR      r0,[r0,#0]            ;102  ; cur_menu
0001aa  68c0              LDR      r0,[r0,#0xc]          ;102
0001ac  68c0              LDR      r0,[r0,#0xc]          ;102
0001ae  4994              LDR      r1,|L1.1024|
0001b0  6008              STR      r0,[r1,#0]            ;102  ; cur_menu
0001b2  e015              B        |L1.480|
                  |L1.436|
0001b4  4892              LDR      r0,|L1.1024|
0001b6  6800              LDR      r0,[r0,#0]            ;103  ; cur_menu
0001b8  7800              LDRB     r0,[r0,#0]            ;103
0001ba  2808              CMP      r0,#8                 ;103
0001bc  d106              BNE      |L1.460|
0001be  4890              LDR      r0,|L1.1024|
0001c0  6800              LDR      r0,[r0,#0]            ;104  ; cur_menu
0001c2  68c0              LDR      r0,[r0,#0xc]          ;104
0001c4  68c0              LDR      r0,[r0,#0xc]          ;104
0001c6  498e              LDR      r1,|L1.1024|
0001c8  6008              STR      r0,[r1,#0]            ;104  ; cur_menu
0001ca  e009              B        |L1.480|
                  |L1.460|
0001cc  488c              LDR      r0,|L1.1024|
0001ce  6800              LDR      r0,[r0,#0]            ;105  ; cur_menu
0001d0  7800              LDRB     r0,[r0,#0]            ;105
0001d2  2801              CMP      r0,#1                 ;105
0001d4  d004              BEQ      |L1.480|
0001d6  488a              LDR      r0,|L1.1024|
0001d8  6800              LDR      r0,[r0,#0]            ;106  ; cur_menu
0001da  68c0              LDR      r0,[r0,#0xc]          ;106
0001dc  4988              LDR      r1,|L1.1024|
0001de  6008              STR      r0,[r1,#0]            ;106  ; cur_menu
                  |L1.480|
0001e0  2116              MOVS     r1,#0x16              ;109
0001e2  2001              MOVS     r0,#1                 ;109
0001e4  f7fffffe          BL       dis_send_msg
0001e8  bf00              NOP      
0001ea  e7c2              B        |L1.370|
;;;111    
                          ENDP

                  volume_decrease_handler PROC
;;;137    
;;;138    static void volume_decrease_handler(sys_state_t *sys)
0001ec  b510              PUSH     {r4,lr}
;;;139    {
0001ee  4604              MOV      r4,r0
;;;140    	 if(sys->master_vol > VOLUME_VALUE_MIN(sys->input_gain)){
0001f0  6961              LDR      r1,[r4,#0x14]
0001f2  69e0              LDR      r0,[r4,#0x1c]
0001f4  2800              CMP      r0,#0
0001f6  db02              BLT      |L1.510|
0001f8  f06f0027          MVN      r0,#0x27
0001fc  e003              B        |L1.518|
                  |L1.510|
0001fe  f06f0227          MVN      r2,#0x27
000202  69e0              LDR      r0,[r4,#0x1c]
000204  1a10              SUBS     r0,r2,r0
                  |L1.518|
000206  4281              CMP      r1,r0
000208  dd0b              BLE      |L1.546|
;;;141    		 if(sys->is_mute == true){
00020a  f8940049          LDRB     r0,[r4,#0x49]
00020e  2801              CMP      r0,#1
000210  d103              BNE      |L1.538|
;;;142    			  sys->is_mute = false;
000212  2000              MOVS     r0,#0
000214  f8840049          STRB     r0,[r4,#0x49]
000218  e006              B        |L1.552|
                  |L1.538|
;;;143    		 }else{
;;;144    				sys->master_vol--;
00021a  6960              LDR      r0,[r4,#0x14]
00021c  1e40              SUBS     r0,r0,#1
00021e  6160              STR      r0,[r4,#0x14]
000220  e002              B        |L1.552|
                  |L1.546|
;;;145    		 }
;;;146    	 }else{
;;;147    		 sys->is_mute = true;
000222  2001              MOVS     r0,#1
000224  f8840049          STRB     r0,[r4,#0x49]
                  |L1.552|
;;;148    	 }
;;;149    	 
;;;150    	 sys_master_vol_set(sys);
000228  4620              MOV      r0,r4
00022a  f7fffffe          BL       sys_master_vol_set
;;;151    	 
;;;152    	 sys_untimeout(sys_database0_update_later, NULL);
00022e  2100              MOVS     r1,#0
000230  4875              LDR      r0,|L1.1032|
000232  f7fffffe          BL       sys_untimeout
;;;153    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000236  2200              MOVS     r2,#0
000238  4973              LDR      r1,|L1.1032|
00023a  20c8              MOVS     r0,#0xc8
00023c  f7fffffe          BL       sys_timeout
;;;154    	 
;;;155    	// sys_send_msg(DATABASE_UPDATE_MSG, 0);
;;;156    }
000240  bd10              POP      {r4,pc}
;;;157    
                          ENDP

                  volume_increase_handler PROC
;;;158    static void volume_increase_handler(sys_state_t *sys)
000242  b510              PUSH     {r4,lr}
;;;159    {
000244  4604              MOV      r4,r0
;;;160    	 if(sys->master_vol < VOLUME_VALUE_MAX(sys->input_gain)){
000246  6961              LDR      r1,[r4,#0x14]
000248  69e0              LDR      r0,[r4,#0x1c]
00024a  2800              CMP      r0,#0
00024c  db03              BLT      |L1.598|
00024e  69e0              LDR      r0,[r4,#0x1c]
000250  f1c0000b          RSB      r0,r0,#0xb
000254  e000              B        |L1.600|
                  |L1.598|
000256  200b              MOVS     r0,#0xb
                  |L1.600|
000258  4281              CMP      r1,r0
00025a  da0a              BGE      |L1.626|
;;;161    		 if(sys->is_mute == true){
00025c  f8940049          LDRB     r0,[r4,#0x49]
000260  2801              CMP      r0,#1
000262  d103              BNE      |L1.620|
;;;162    			 sys->is_mute = false;
000264  2000              MOVS     r0,#0
000266  f8840049          STRB     r0,[r4,#0x49]
00026a  e002              B        |L1.626|
                  |L1.620|
;;;163    		 }else{
;;;164    		    sys->master_vol++;
00026c  6960              LDR      r0,[r4,#0x14]
00026e  1c40              ADDS     r0,r0,#1
000270  6160              STR      r0,[r4,#0x14]
                  |L1.626|
;;;165    		 }
;;;166    	 }
;;;167    	 
;;;168    	 sys_master_vol_set(sys);
000272  4620              MOV      r0,r4
000274  f7fffffe          BL       sys_master_vol_set
;;;169    	 
;;;170    	 sys_untimeout(sys_database0_update_later, NULL);
000278  2100              MOVS     r1,#0
00027a  4863              LDR      r0,|L1.1032|
00027c  f7fffffe          BL       sys_untimeout
;;;171    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000280  2200              MOVS     r2,#0
000282  4961              LDR      r1,|L1.1032|
000284  20c8              MOVS     r0,#0xc8
000286  f7fffffe          BL       sys_timeout
;;;172    	 //sys_send_msg(DATABASE_UPDATE_MSG, 0);
;;;173    }
00028a  bd10              POP      {r4,pc}
;;;174    
                          ENDP

                  source_next_handler PROC
;;;175    static void source_next_handler(sys_state_t *sys)
00028c  b510              PUSH     {r4,lr}
;;;176    {
00028e  4604              MOV      r4,r0
;;;177    	 sys->src = (src_t)((sys->src + 1) % SRC_NUM);
000290  7e20              LDRB     r0,[r4,#0x18]
000292  1c40              ADDS     r0,r0,#1
000294  2103              MOVS     r1,#3
000296  fb90f2f1          SDIV     r2,r0,r1
00029a  fb010012          MLS      r0,r1,r2,r0
00029e  7620              STRB     r0,[r4,#0x18]
;;;178    	
;;;179    	 sys_input_select(sys->src);
0002a0  7e20              LDRB     r0,[r4,#0x18]
0002a2  f7fffffe          BL       sys_input_select
;;;180    	
;;;181    	// sys_send_msg(DATABASE_UPDATE_MSG, 0);
;;;182    	sys_untimeout(sys_database0_update_later, NULL);
0002a6  2100              MOVS     r1,#0
0002a8  4857              LDR      r0,|L1.1032|
0002aa  f7fffffe          BL       sys_untimeout
;;;183    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
0002ae  2200              MOVS     r2,#0
0002b0  4955              LDR      r1,|L1.1032|
0002b2  20c8              MOVS     r0,#0xc8
0002b4  f7fffffe          BL       sys_timeout
;;;184    }
0002b8  bd10              POP      {r4,pc}
;;;185    
                          ENDP

                  source_prev_handler PROC
;;;186    static void source_prev_handler(sys_state_t *sys)
0002ba  b510              PUSH     {r4,lr}
;;;187    {
0002bc  4604              MOV      r4,r0
;;;188    	 sys->src = (src_t)(sys->src == 0? (SRC_NUM - 1):(sys->src - 1));
0002be  7e20              LDRB     r0,[r4,#0x18]
0002c0  b908              CBNZ     r0,|L1.710|
0002c2  2002              MOVS     r0,#2
0002c4  e001              B        |L1.714|
                  |L1.710|
0002c6  7e20              LDRB     r0,[r4,#0x18]
0002c8  1e40              SUBS     r0,r0,#1
                  |L1.714|
0002ca  7620              STRB     r0,[r4,#0x18]
;;;189    	
;;;190    	 sys_input_select(sys->src);
0002cc  7e20              LDRB     r0,[r4,#0x18]
0002ce  f7fffffe          BL       sys_input_select
;;;191    	
;;;192    	// sys_send_msg(DATABASE_UPDATE_MSG, 0);
;;;193    	sys_untimeout(sys_database0_update_later, NULL);
0002d2  2100              MOVS     r1,#0
0002d4  484c              LDR      r0,|L1.1032|
0002d6  f7fffffe          BL       sys_untimeout
;;;194    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
0002da  2200              MOVS     r2,#0
0002dc  494a              LDR      r1,|L1.1032|
0002de  20c8              MOVS     r0,#0xc8
0002e0  f7fffffe          BL       sys_timeout
;;;195    }
0002e4  bd10              POP      {r4,pc}
;;;196    
                          ENDP

                  preset_prev_handler PROC
;;;197    static void preset_prev_handler(sys_state_t *sys)
0002e6  b510              PUSH     {r4,lr}
;;;198    {
0002e8  4604              MOV      r4,r0
;;;199    	sys->preset = (preset_t)(sys->preset == 0? (PRESET_NUM - 1):(sys->preset - 1)); 
0002ea  7e60              LDRB     r0,[r4,#0x19]
0002ec  b908              CBNZ     r0,|L1.754|
0002ee  2005              MOVS     r0,#5
0002f0  e001              B        |L1.758|
                  |L1.754|
0002f2  7e60              LDRB     r0,[r4,#0x19]
0002f4  1e40              SUBS     r0,r0,#1
                  |L1.758|
0002f6  7660              STRB     r0,[r4,#0x19]
;;;200    	
;;;201    	sys_load_peq(sys);
0002f8  4620              MOV      r0,r4
0002fa  f7fffffe          BL       sys_load_peq
;;;202    	
;;;203    	sys_untimeout(sys_database0_update_later, NULL);
0002fe  2100              MOVS     r1,#0
000300  4841              LDR      r0,|L1.1032|
000302  f7fffffe          BL       sys_untimeout
;;;204    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000306  2200              MOVS     r2,#0
000308  493f              LDR      r1,|L1.1032|
00030a  20c8              MOVS     r0,#0xc8
00030c  f7fffffe          BL       sys_timeout
;;;205    }
000310  bd10              POP      {r4,pc}
;;;206    
                          ENDP

                  preset_next_handler PROC
;;;207    static void preset_next_handler(sys_state_t *sys)
000312  b510              PUSH     {r4,lr}
;;;208    {
000314  4604              MOV      r4,r0
;;;209    	sys->preset = (preset_t)((sys->preset + 1) % PRESET_NUM);  
000316  7e60              LDRB     r0,[r4,#0x19]
000318  1c40              ADDS     r0,r0,#1
00031a  2106              MOVS     r1,#6
00031c  fb90f2f1          SDIV     r2,r0,r1
000320  fb010012          MLS      r0,r1,r2,r0
000324  7660              STRB     r0,[r4,#0x19]
;;;210    	
;;;211    	sys_load_peq(sys);
000326  4620              MOV      r0,r4
000328  f7fffffe          BL       sys_load_peq
;;;212    	
;;;213    	sys_untimeout(sys_database0_update_later, NULL);
00032c  2100              MOVS     r1,#0
00032e  4836              LDR      r0,|L1.1032|
000330  f7fffffe          BL       sys_untimeout
;;;214    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000334  2200              MOVS     r2,#0
000336  4934              LDR      r1,|L1.1032|
000338  20c8              MOVS     r0,#0xc8
00033a  f7fffffe          BL       sys_timeout
;;;215    }
00033e  bd10              POP      {r4,pc}
;;;216    
                          ENDP

                  bright_prev_handler PROC
;;;217    static void bright_prev_handler(sys_state_t *sys)
000340  b510              PUSH     {r4,lr}
;;;218    {
000342  4604              MOV      r4,r0
;;;219    	sys->bright = (lcd_bright_t)(sys->bright == 0? (BRI_NUM - 1):(sys->bright - 1));
000344  7ea0              LDRB     r0,[r4,#0x1a]
000346  b908              CBNZ     r0,|L1.844|
000348  2002              MOVS     r0,#2
00034a  e001              B        |L1.848|
                  |L1.844|
00034c  7ea0              LDRB     r0,[r4,#0x1a]
00034e  1e40              SUBS     r0,r0,#1
                  |L1.848|
000350  76a0              STRB     r0,[r4,#0x1a]
;;;220    	
;;;221    	sys_lcd_bright_change(sys);
000352  4620              MOV      r0,r4
000354  f7fffffe          BL       sys_lcd_bright_change
;;;222    	
;;;223    	sys_untimeout(sys_database0_update_later, NULL);
000358  2100              MOVS     r1,#0
00035a  482b              LDR      r0,|L1.1032|
00035c  f7fffffe          BL       sys_untimeout
;;;224    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000360  2200              MOVS     r2,#0
000362  4929              LDR      r1,|L1.1032|
000364  20c8              MOVS     r0,#0xc8
000366  f7fffffe          BL       sys_timeout
;;;225    }
00036a  bd10              POP      {r4,pc}
;;;226    
                          ENDP

                  bright_next_handler PROC
;;;227    static void bright_next_handler(sys_state_t *sys)
00036c  b510              PUSH     {r4,lr}
;;;228    {
00036e  4604              MOV      r4,r0
;;;229    	 sys->bright = (lcd_bright_t)((sys->bright + 1) % BRI_NUM);
000370  7ea0              LDRB     r0,[r4,#0x1a]
000372  1c40              ADDS     r0,r0,#1
000374  2103              MOVS     r1,#3
000376  fb90f2f1          SDIV     r2,r0,r1
00037a  fb010012          MLS      r0,r1,r2,r0
00037e  76a0              STRB     r0,[r4,#0x1a]
;;;230    	
;;;231    	 sys_lcd_bright_change(sys);
000380  4620              MOV      r0,r4
000382  f7fffffe          BL       sys_lcd_bright_change
;;;232    	
;;;233    	 sys_untimeout(sys_database0_update_later, NULL);
000386  2100              MOVS     r1,#0
000388  481f              LDR      r0,|L1.1032|
00038a  f7fffffe          BL       sys_untimeout
;;;234    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
00038e  2200              MOVS     r2,#0
000390  491d              LDR      r1,|L1.1032|
000392  20c8              MOVS     r0,#0xc8
000394  f7fffffe          BL       sys_timeout
;;;235    }
000398  bd10              POP      {r4,pc}
;;;236    
                          ENDP

                  load_code PROC
;;;237    static void load_code(sys_state_t *sys, char code)
00039a  b570              PUSH     {r4-r6,lr}
;;;238    {
00039c  4604              MOV      r4,r0
00039e  460d              MOV      r5,r1
;;;239    	 OSAL_ASSERT(sys->code_index < CODE_NUM);
0003a0  f8940048          LDRB     r0,[r4,#0x48]
0003a4  2803              CMP      r0,#3
0003a6  db06              BLT      |L1.950|
0003a8  4a18              LDR      r2,|L1.1036|
0003aa  a119              ADR      r1,|L1.1040|
0003ac  a01f              ADR      r0,|L1.1068|
0003ae  f7fffffe          BL       s_printf
0003b2  bf00              NOP      
                  |L1.948|
0003b4  e7fe              B        |L1.948|
                  |L1.950|
;;;240    	
;;;241    	 gCode[sys->code_index] = code;
0003b6  f8140f48          LDRB     r0,[r4,#0x48]!
0003ba  4924              LDR      r1,|L1.1100|
0003bc  540d              STRB     r5,[r1,r0]
;;;242    	
;;;243    	 sys->code_index = (sys->code_index + 1) % CODE_NUM;
0003be  7820              LDRB     r0,[r4,#0]
0003c0  1c40              ADDS     r0,r0,#1
0003c2  2103              MOVS     r1,#3
0003c4  fb90f2f1          SDIV     r2,r0,r1
0003c8  fb010012          MLS      r0,r1,r2,r0
0003cc  f8040948          STRB     r0,[r4],#-0x48
;;;244    }
0003d0  bd70              POP      {r4-r6,pc}
;;;245    
                          ENDP

                  sub_model_prev_handler PROC
;;;246    static void sub_model_prev_handler(sys_state_t *sys)
0003d2  b510              PUSH     {r4,lr}
;;;247    {
0003d4  4604              MOV      r4,r0
;;;248    	 sys->sub_model = (sub_model_t)(sys->sub_model == 0? (SUB_MODEL_NUM - 1):(sys->sub_model - 1));
0003d6  7ee0              LDRB     r0,[r4,#0x1b]
0003d8  b908              CBNZ     r0,|L1.990|
0003da  200c              MOVS     r0,#0xc
0003dc  e001              B        |L1.994|
                  |L1.990|
0003de  7ee0              LDRB     r0,[r4,#0x1b]
0003e0  1e40              SUBS     r0,r0,#1
                  |L1.994|
0003e2  76e0              STRB     r0,[r4,#0x1b]
;;;249    	
;;;250    	 sys_sub_preset_load(sys);
0003e4  4620              MOV      r0,r4
0003e6  f7fffffe          BL       sys_sub_preset_load
;;;251    	
;;;252    	 sys_untimeout(sys_database1_update_later, NULL);
0003ea  2100              MOVS     r1,#0
0003ec  4818              LDR      r0,|L1.1104|
0003ee  f7fffffe          BL       sys_untimeout
;;;253    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database1_update_later, NULL);
0003f2  2200              MOVS     r2,#0
0003f4  4916              LDR      r1,|L1.1104|
0003f6  20c8              MOVS     r0,#0xc8
0003f8  f7fffffe          BL       sys_timeout
;;;254    }
0003fc  bd10              POP      {r4,pc}
0003fe  0000              DCW      0x0000
                  |L1.1024|
                          DCD      cur_menu
                  |L1.1028|
                          DCD      gMenuHead
                  |L1.1032|
                          DCD      sys_database0_update_later
                  |L1.1036|
                          DCD      __FUNCTION__
                  |L1.1040|
000410  7379732d          DCB      "sys->code_index < CODE_NUM",0
000414  3e636f64
000418  655f696e
00041c  64657820
000420  3c20434f
000424  44455f4e
000428  554d00  
00042b  00                DCB      0
                  |L1.1068|
00042c  28257329          DCB      "(%s) has assert failed at %s.\n",0
000430  20686173
000434  20617373
000438  65727420
00043c  6661696c
000440  65642061
000444  74202573
000448  2e0a00  
00044b  00                DCB      0
                  |L1.1100|
                          DCD      gCode
                  |L1.1104|
                          DCD      sys_database1_update_later
                          ENDP

                  sub_model_next_handler PROC
;;;255    
;;;256    static void sub_model_next_handler(sys_state_t *sys)
000454  b510              PUSH     {r4,lr}
;;;257    {
000456  4604              MOV      r4,r0
;;;258    	 sys->sub_model = (sub_model_t)((sys->sub_model + 1) % SUB_MODEL_NUM); 
000458  7ee0              LDRB     r0,[r4,#0x1b]
00045a  1c40              ADDS     r0,r0,#1
00045c  210d              MOVS     r1,#0xd
00045e  fb90f2f1          SDIV     r2,r0,r1
000462  fb010012          MLS      r0,r1,r2,r0
000466  76e0              STRB     r0,[r4,#0x1b]
;;;259    
;;;260       sys_sub_preset_load(sys);
000468  4620              MOV      r0,r4
00046a  f7fffffe          BL       sys_sub_preset_load
;;;261    	
;;;262    	 sys_untimeout(sys_database1_update_later, NULL);
00046e  2100              MOVS     r1,#0
000470  48fc              LDR      r0,|L1.2148|
000472  f7fffffe          BL       sys_untimeout
;;;263    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database1_update_later, NULL);
000476  2200              MOVS     r2,#0
000478  49fa              LDR      r1,|L1.2148|
00047a  20c8              MOVS     r0,#0xc8
00047c  f7fffffe          BL       sys_timeout
;;;264    }
000480  bd10              POP      {r4,pc}
;;;265    
                          ENDP

                  input_gain_decrease_handler PROC
;;;266    static void input_gain_decrease_handler(sys_state_t *sys)
000482  b510              PUSH     {r4,lr}
;;;267    {
000484  4604              MOV      r4,r0
;;;268    	 if(sys->input_gain > INPUT_GAIN_MIN){
000486  69e0              LDR      r0,[r4,#0x1c]
000488  f1100f0a          CMN      r0,#0xa
00048c  dd1e              BLE      |L1.1228|
;;;269    		 sys->input_gain--;
00048e  69e0              LDR      r0,[r4,#0x1c]
000490  1e40              SUBS     r0,r0,#1
000492  61e0              STR      r0,[r4,#0x1c]
;;;270    		 
;;;271    		 sys->master_vol++;
000494  6960              LDR      r0,[r4,#0x14]
000496  1c40              ADDS     r0,r0,#1
000498  6160              STR      r0,[r4,#0x14]
;;;272    	 
;;;273    	   if(sys->master_vol < MASTER_VOL_VALUE_MIN){
00049a  6960              LDR      r0,[r4,#0x14]
00049c  f1100f28          CMN      r0,#0x28
0004a0  da03              BGE      |L1.1194|
;;;274    		   sys->master_vol = MASTER_VOL_VALUE_MIN;
0004a2  f06f0027          MVN      r0,#0x27
0004a6  6160              STR      r0,[r4,#0x14]
0004a8  e004              B        |L1.1204|
                  |L1.1194|
;;;275    	   }else if(sys->master_vol > MASTER_VOL_VALUE_MAX){
0004aa  6960              LDR      r0,[r4,#0x14]
0004ac  280b              CMP      r0,#0xb
0004ae  dd01              BLE      |L1.1204|
;;;276    			 sys->master_vol = MASTER_VOL_VALUE_MAX;
0004b0  200b              MOVS     r0,#0xb
0004b2  6160              STR      r0,[r4,#0x14]
                  |L1.1204|
;;;277    		 }
;;;278    		 
;;;279    		 sys_master_vol_set(sys);
0004b4  4620              MOV      r0,r4
0004b6  f7fffffe          BL       sys_master_vol_set
;;;280    		 
;;;281    		 sys_untimeout(sys_database1_update_later, NULL);
0004ba  2100              MOVS     r1,#0
0004bc  48e9              LDR      r0,|L1.2148|
0004be  f7fffffe          BL       sys_untimeout
;;;282    	   sys_timeout(200, sys_database1_update_later, NULL);
0004c2  2200              MOVS     r2,#0
0004c4  49e7              LDR      r1,|L1.2148|
0004c6  20c8              MOVS     r0,#0xc8
0004c8  f7fffffe          BL       sys_timeout
                  |L1.1228|
;;;283    	 }
;;;284    	
;;;285    }
0004cc  bd10              POP      {r4,pc}
;;;286    
                          ENDP

                  input_gain_increase_handler PROC
;;;287    static void input_gain_increase_handler(sys_state_t *sys)
0004ce  b510              PUSH     {r4,lr}
;;;288    {
0004d0  4604              MOV      r4,r0
;;;289    	 if(sys->input_gain < INPUT_GAIN_MAX){
0004d2  69e0              LDR      r0,[r4,#0x1c]
0004d4  280a              CMP      r0,#0xa
0004d6  da1e              BGE      |L1.1302|
;;;290         sys->input_gain++;
0004d8  69e0              LDR      r0,[r4,#0x1c]
0004da  1c40              ADDS     r0,r0,#1
0004dc  61e0              STR      r0,[r4,#0x1c]
;;;291    		 
;;;292    		 sys->master_vol--;
0004de  6960              LDR      r0,[r4,#0x14]
0004e0  1e40              SUBS     r0,r0,#1
0004e2  6160              STR      r0,[r4,#0x14]
;;;293    	 
;;;294    	   if(sys->master_vol < MASTER_VOL_VALUE_MIN){
0004e4  6960              LDR      r0,[r4,#0x14]
0004e6  f1100f28          CMN      r0,#0x28
0004ea  da03              BGE      |L1.1268|
;;;295    		   sys->master_vol = MASTER_VOL_VALUE_MIN;
0004ec  f06f0027          MVN      r0,#0x27
0004f0  6160              STR      r0,[r4,#0x14]
0004f2  e004              B        |L1.1278|
                  |L1.1268|
;;;296    	   }else if(sys->master_vol > MASTER_VOL_VALUE_MAX){
0004f4  6960              LDR      r0,[r4,#0x14]
0004f6  280b              CMP      r0,#0xb
0004f8  dd01              BLE      |L1.1278|
;;;297    			 sys->master_vol = MASTER_VOL_VALUE_MAX;
0004fa  200b              MOVS     r0,#0xb
0004fc  6160              STR      r0,[r4,#0x14]
                  |L1.1278|
;;;298    		 }
;;;299    		 sys_master_vol_set(sys);
0004fe  4620              MOV      r0,r4
000500  f7fffffe          BL       sys_master_vol_set
;;;300    		 
;;;301    		 sys_untimeout(sys_database1_update_later, NULL);
000504  2100              MOVS     r1,#0
000506  48d7              LDR      r0,|L1.2148|
000508  f7fffffe          BL       sys_untimeout
;;;302    	   sys_timeout(200, sys_database1_update_later, NULL);
00050c  2200              MOVS     r2,#0
00050e  49d5              LDR      r1,|L1.2148|
000510  20c8              MOVS     r0,#0xc8
000512  f7fffffe          BL       sys_timeout
                  |L1.1302|
;;;303    	 }		 
;;;304    	 
;;;305    }
000516  bd10              POP      {r4,pc}
;;;306    
                          ENDP

                  phrase_change PROC
;;;307    static void phrase_change(sys_state_t *sys)
000518  b510              PUSH     {r4,lr}
;;;308    {
00051a  4604              MOV      r4,r0
;;;309    	 if(sys->sub[sys->sub_model].phrase){
00051c  7ee1              LDRB     r1,[r4,#0x1b]
00051e  eb010141          ADD      r1,r1,r1,LSL #1
000522  6be0              LDR      r0,[r4,#0x3c]
000524  f8100021          LDRB     r0,[r0,r1,LSL #2]
000528  b138              CBZ      r0,|L1.1338|
;;;310    		 sys->sub[sys->sub_model].phrase = 0;
00052a  2000              MOVS     r0,#0
00052c  7ee2              LDRB     r2,[r4,#0x1b]
00052e  eb020242          ADD      r2,r2,r2,LSL #1
000532  6be1              LDR      r1,[r4,#0x3c]
000534  f8010022          STRB     r0,[r1,r2,LSL #2]
000538  e006              B        |L1.1352|
                  |L1.1338|
;;;311    	 }else{
;;;312    		 sys->sub[sys->sub_model].phrase = 1;
00053a  2001              MOVS     r0,#1
00053c  7ee2              LDRB     r2,[r4,#0x1b]
00053e  eb020242          ADD      r2,r2,r2,LSL #1
000542  6be1              LDR      r1,[r4,#0x3c]
000544  f8010022          STRB     r0,[r1,r2,LSL #2]
                  |L1.1352|
;;;313    	 }
;;;314    	 
;;;315    	 sys_phrase_set(sys);
000548  4620              MOV      r0,r4
00054a  f7fffffe          BL       sys_phrase_set
;;;316    	 
;;;317    	 sys_untimeout(sys_database1_update_later, NULL);
00054e  2100              MOVS     r1,#0
000550  48c4              LDR      r0,|L1.2148|
000552  f7fffffe          BL       sys_untimeout
;;;318    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database1_update_later, NULL);
000556  2200              MOVS     r2,#0
000558  49c2              LDR      r1,|L1.2148|
00055a  20c8              MOVS     r0,#0xc8
00055c  f7fffffe          BL       sys_timeout
;;;319    }
000560  bd10              POP      {r4,pc}
;;;320    
                          ENDP

                  sub_lowpass_increase PROC
;;;321    static void sub_lowpass_increase(sys_state_t *sys)
000562  b510              PUSH     {r4,lr}
;;;322    {
000564  4604              MOV      r4,r0
;;;323    	 if(sys->sub[sys->sub_model].lowpass < SUB_LOWPASS_NODE1){
000566  7ee1              LDRB     r1,[r4,#0x1b]
000568  eb010141          ADD      r1,r1,r1,LSL #1
00056c  6be0              LDR      r0,[r4,#0x3c]
00056e  eb000081          ADD      r0,r0,r1,LSL #2
000572  8840              LDRH     r0,[r0,#2]
000574  283c              CMP      r0,#0x3c
000576  da0f              BGE      |L1.1432|
;;;324          sys->sub[sys->sub_model].lowpass++;
000578  7ee1              LDRB     r1,[r4,#0x1b]
00057a  eb010141          ADD      r1,r1,r1,LSL #1
00057e  6be0              LDR      r0,[r4,#0x3c]
000580  eb000081          ADD      r0,r0,r1,LSL #2
000584  8840              LDRH     r0,[r0,#2]
000586  1c40              ADDS     r0,r0,#1
000588  7ee2              LDRB     r2,[r4,#0x1b]
00058a  eb020242          ADD      r2,r2,r2,LSL #1
00058e  6be1              LDR      r1,[r4,#0x3c]
000590  eb010182          ADD      r1,r1,r2,LSL #2
000594  8048              STRH     r0,[r1,#2]
000596  e058              B        |L1.1610|
                  |L1.1432|
;;;325    	 }else if(sys->sub[sys->sub_model].lowpass < SUB_LOWPASS_NODE2){
000598  7ee1              LDRB     r1,[r4,#0x1b]
00059a  eb010141          ADD      r1,r1,r1,LSL #1
00059e  6be0              LDR      r0,[r4,#0x3c]
0005a0  eb000081          ADD      r0,r0,r1,LSL #2
0005a4  8840              LDRH     r0,[r0,#2]
0005a6  2878              CMP      r0,#0x78
0005a8  da0f              BGE      |L1.1482|
;;;326    		  sys->sub[sys->sub_model].lowpass += 5;
0005aa  7ee1              LDRB     r1,[r4,#0x1b]
0005ac  eb010141          ADD      r1,r1,r1,LSL #1
0005b0  6be0              LDR      r0,[r4,#0x3c]
0005b2  eb000081          ADD      r0,r0,r1,LSL #2
0005b6  8840              LDRH     r0,[r0,#2]
0005b8  1d40              ADDS     r0,r0,#5
0005ba  7ee2              LDRB     r2,[r4,#0x1b]
0005bc  eb020242          ADD      r2,r2,r2,LSL #1
0005c0  6be1              LDR      r1,[r4,#0x3c]
0005c2  eb010182          ADD      r1,r1,r2,LSL #2
0005c6  8048              STRH     r0,[r1,#2]
0005c8  e03f              B        |L1.1610|
                  |L1.1482|
;;;327    	 }else if(sys->sub[sys->sub_model].lowpass < SUB_LOWPASS_MAX){
0005ca  7ee1              LDRB     r1,[r4,#0x1b]
0005cc  eb010141          ADD      r1,r1,r1,LSL #1
0005d0  6be0              LDR      r0,[r4,#0x3c]
0005d2  eb000081          ADD      r0,r0,r1,LSL #2
0005d6  8840              LDRH     r0,[r0,#2]
0005d8  f5b07f96          CMP      r0,#0x12c
0005dc  da0f              BGE      |L1.1534|
;;;328    		  sys->sub[sys->sub_model].lowpass += 10;
0005de  7ee1              LDRB     r1,[r4,#0x1b]
0005e0  eb010141          ADD      r1,r1,r1,LSL #1
0005e4  6be0              LDR      r0,[r4,#0x3c]
0005e6  eb000081          ADD      r0,r0,r1,LSL #2
0005ea  8840              LDRH     r0,[r0,#2]
0005ec  300a              ADDS     r0,r0,#0xa
0005ee  7ee2              LDRB     r2,[r4,#0x1b]
0005f0  eb020242          ADD      r2,r2,r2,LSL #1
0005f4  6be1              LDR      r1,[r4,#0x3c]
0005f6  eb010182          ADD      r1,r1,r2,LSL #2
0005fa  8048              STRH     r0,[r1,#2]
0005fc  e025              B        |L1.1610|
                  |L1.1534|
;;;329    	 }else if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_MAX){
0005fe  7ee1              LDRB     r1,[r4,#0x1b]
000600  eb010141          ADD      r1,r1,r1,LSL #1
000604  6be0              LDR      r0,[r4,#0x3c]
000606  eb000081          ADD      r0,r0,r1,LSL #2
00060a  8840              LDRH     r0,[r0,#2]
00060c  f5b07f96          CMP      r0,#0x12c
000610  d109              BNE      |L1.1574|
;;;330    		  sys->sub[sys->sub_model].lowpass = SUB_LOWPASS_DEFAULT;
000612  f44f70a5          MOV      r0,#0x14a
000616  7ee2              LDRB     r2,[r4,#0x1b]
000618  eb020242          ADD      r2,r2,r2,LSL #1
00061c  6be1              LDR      r1,[r4,#0x3c]
00061e  eb010182          ADD      r1,r1,r2,LSL #2
000622  8048              STRH     r0,[r1,#2]
000624  e011              B        |L1.1610|
                  |L1.1574|
;;;331    	 }else if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_DEFAULT){
000626  7ee1              LDRB     r1,[r4,#0x1b]
000628  eb010141          ADD      r1,r1,r1,LSL #1
00062c  6be0              LDR      r0,[r4,#0x3c]
00062e  eb000081          ADD      r0,r0,r1,LSL #2
000632  8840              LDRH     r0,[r0,#2]
000634  f5b07fa5          CMP      r0,#0x14a
000638  d107              BNE      |L1.1610|
;;;332    		  sys->sub[sys->sub_model].lowpass = SUB_LOWPASS_MIN;
00063a  201e              MOVS     r0,#0x1e
00063c  7ee2              LDRB     r2,[r4,#0x1b]
00063e  eb020242          ADD      r2,r2,r2,LSL #1
000642  6be1              LDR      r1,[r4,#0x3c]
000644  eb010182          ADD      r1,r1,r2,LSL #2
000648  8048              STRH     r0,[r1,#2]
                  |L1.1610|
;;;333    	 }
;;;334    	 
;;;335    	 sys_sub_lowpass_set(sys);
00064a  4620              MOV      r0,r4
00064c  f7fffffe          BL       sys_sub_lowpass_set
;;;336    	 
;;;337    	 sys_untimeout(sys_database1_update_later, NULL);
000650  2100              MOVS     r1,#0
000652  4884              LDR      r0,|L1.2148|
000654  f7fffffe          BL       sys_untimeout
;;;338    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database1_update_later, NULL);
000658  2200              MOVS     r2,#0
00065a  4982              LDR      r1,|L1.2148|
00065c  20c8              MOVS     r0,#0xc8
00065e  f7fffffe          BL       sys_timeout
;;;339    	 //sys_send_msg(DATABASE_UPDATE_MSG, 1);
;;;340    }
000662  bd10              POP      {r4,pc}
;;;341    
                          ENDP

                  sub_lowpass_decrease PROC
;;;342    static void sub_lowpass_decrease(sys_state_t *sys)
000664  b510              PUSH     {r4,lr}
;;;343    {
000666  4604              MOV      r4,r0
;;;344    	 if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_MIN){
000668  7ee1              LDRB     r1,[r4,#0x1b]
00066a  eb010141          ADD      r1,r1,r1,LSL #1
00066e  6be0              LDR      r0,[r4,#0x3c]
000670  eb000081          ADD      r0,r0,r1,LSL #2
000674  8840              LDRH     r0,[r0,#2]
000676  281e              CMP      r0,#0x1e
000678  d109              BNE      |L1.1678|
;;;345    		 sys->sub[sys->sub_model].lowpass = SUB_LOWPASS_DEFAULT;
00067a  f44f70a5          MOV      r0,#0x14a
00067e  7ee2              LDRB     r2,[r4,#0x1b]
000680  eb020242          ADD      r2,r2,r2,LSL #1
000684  6be1              LDR      r1,[r4,#0x3c]
000686  eb010182          ADD      r1,r1,r2,LSL #2
00068a  8048              STRH     r0,[r1,#2]
00068c  e05e              B        |L1.1868|
                  |L1.1678|
;;;346    	 }else if(sys->sub[sys->sub_model].lowpass <= SUB_LOWPASS_NODE1){
00068e  7ee1              LDRB     r1,[r4,#0x1b]
000690  eb010141          ADD      r1,r1,r1,LSL #1
000694  6be0              LDR      r0,[r4,#0x3c]
000696  eb000081          ADD      r0,r0,r1,LSL #2
00069a  8840              LDRH     r0,[r0,#2]
00069c  283c              CMP      r0,#0x3c
00069e  dc0f              BGT      |L1.1728|
;;;347    		 sys->sub[sys->sub_model].lowpass--;
0006a0  7ee1              LDRB     r1,[r4,#0x1b]
0006a2  eb010141          ADD      r1,r1,r1,LSL #1
0006a6  6be0              LDR      r0,[r4,#0x3c]
0006a8  eb000081          ADD      r0,r0,r1,LSL #2
0006ac  8840              LDRH     r0,[r0,#2]
0006ae  1e40              SUBS     r0,r0,#1
0006b0  7ee2              LDRB     r2,[r4,#0x1b]
0006b2  eb020242          ADD      r2,r2,r2,LSL #1
0006b6  6be1              LDR      r1,[r4,#0x3c]
0006b8  eb010182          ADD      r1,r1,r2,LSL #2
0006bc  8048              STRH     r0,[r1,#2]
0006be  e045              B        |L1.1868|
                  |L1.1728|
;;;348    	 }else if(sys->sub[sys->sub_model].lowpass <= SUB_LOWPASS_NODE2){
0006c0  7ee1              LDRB     r1,[r4,#0x1b]
0006c2  eb010141          ADD      r1,r1,r1,LSL #1
0006c6  6be0              LDR      r0,[r4,#0x3c]
0006c8  eb000081          ADD      r0,r0,r1,LSL #2
0006cc  8840              LDRH     r0,[r0,#2]
0006ce  2878              CMP      r0,#0x78
0006d0  dc0f              BGT      |L1.1778|
;;;349    		 sys->sub[sys->sub_model].lowpass -= 5;
0006d2  7ee1              LDRB     r1,[r4,#0x1b]
0006d4  eb010141          ADD      r1,r1,r1,LSL #1
0006d8  6be0              LDR      r0,[r4,#0x3c]
0006da  eb000081          ADD      r0,r0,r1,LSL #2
0006de  8840              LDRH     r0,[r0,#2]
0006e0  1f40              SUBS     r0,r0,#5
0006e2  7ee2              LDRB     r2,[r4,#0x1b]
0006e4  eb020242          ADD      r2,r2,r2,LSL #1
0006e8  6be1              LDR      r1,[r4,#0x3c]
0006ea  eb010182          ADD      r1,r1,r2,LSL #2
0006ee  8048              STRH     r0,[r1,#2]
0006f0  e02c              B        |L1.1868|
                  |L1.1778|
;;;350    	 }else if(sys->sub[sys->sub_model].lowpass <= SUB_LOWPASS_MAX){
0006f2  7ee1              LDRB     r1,[r4,#0x1b]
0006f4  eb010141          ADD      r1,r1,r1,LSL #1
0006f8  6be0              LDR      r0,[r4,#0x3c]
0006fa  eb000081          ADD      r0,r0,r1,LSL #2
0006fe  8840              LDRH     r0,[r0,#2]
000700  f5b07f96          CMP      r0,#0x12c
000704  dc0f              BGT      |L1.1830|
;;;351    		 sys->sub[sys->sub_model].lowpass -= 10;
000706  7ee1              LDRB     r1,[r4,#0x1b]
000708  eb010141          ADD      r1,r1,r1,LSL #1
00070c  6be0              LDR      r0,[r4,#0x3c]
00070e  eb000081          ADD      r0,r0,r1,LSL #2
000712  8840              LDRH     r0,[r0,#2]
000714  380a              SUBS     r0,r0,#0xa
000716  7ee2              LDRB     r2,[r4,#0x1b]
000718  eb020242          ADD      r2,r2,r2,LSL #1
00071c  6be1              LDR      r1,[r4,#0x3c]
00071e  eb010182          ADD      r1,r1,r2,LSL #2
000722  8048              STRH     r0,[r1,#2]
000724  e012              B        |L1.1868|
                  |L1.1830|
;;;352    	 }else if(sys->sub[sys->sub_model].lowpass == SUB_LOWPASS_DEFAULT){
000726  7ee1              LDRB     r1,[r4,#0x1b]
000728  eb010141          ADD      r1,r1,r1,LSL #1
00072c  6be0              LDR      r0,[r4,#0x3c]
00072e  eb000081          ADD      r0,r0,r1,LSL #2
000732  8840              LDRH     r0,[r0,#2]
000734  f5b07fa5          CMP      r0,#0x14a
000738  d108              BNE      |L1.1868|
;;;353    		 sys->sub[sys->sub_model].lowpass = SUB_LOWPASS_MAX;
00073a  f44f7096          MOV      r0,#0x12c
00073e  7ee2              LDRB     r2,[r4,#0x1b]
000740  eb020242          ADD      r2,r2,r2,LSL #1
000744  6be1              LDR      r1,[r4,#0x3c]
000746  eb010182          ADD      r1,r1,r2,LSL #2
00074a  8048              STRH     r0,[r1,#2]
                  |L1.1868|
;;;354    	 }
;;;355    	 
;;;356    	 sys_sub_lowpass_set(sys);
00074c  4620              MOV      r0,r4
00074e  f7fffffe          BL       sys_sub_lowpass_set
;;;357    	 
;;;358    	 sys_untimeout(sys_database1_update_later, NULL);
000752  2100              MOVS     r1,#0
000754  4843              LDR      r0,|L1.2148|
000756  f7fffffe          BL       sys_untimeout
;;;359    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database1_update_later, NULL);
00075a  2200              MOVS     r2,#0
00075c  4941              LDR      r1,|L1.2148|
00075e  20c8              MOVS     r0,#0xc8
000760  f7fffffe          BL       sys_timeout
;;;360    	 //sys_send_msg(DATABASE_UPDATE_MSG, 1);
;;;361    }
000764  bd10              POP      {r4,pc}
;;;362    
                          ENDP

                  sub_highpass_decrease PROC
;;;363    static void sub_highpass_decrease(sys_state_t *sys)
000766  b510              PUSH     {r4,lr}
;;;364    {
000768  4604              MOV      r4,r0
;;;365    	 if(sys->sub[sys->sub_model].highpass == SUB_HIGHPASS_MIN){
00076a  7ee1              LDRB     r1,[r4,#0x1b]
00076c  eb010141          ADD      r1,r1,r1,LSL #1
000770  6be0              LDR      r0,[r4,#0x3c]
000772  eb000081          ADD      r0,r0,r1,LSL #2
000776  88c0              LDRH     r0,[r0,#6]
000778  2814              CMP      r0,#0x14
00077a  d108              BNE      |L1.1934|
;;;366    		 sys->sub[sys->sub_model].highpass = SUB_HIGHPASS_OFF;
00077c  2082              MOVS     r0,#0x82
00077e  7ee2              LDRB     r2,[r4,#0x1b]
000780  eb020242          ADD      r2,r2,r2,LSL #1
000784  6be1              LDR      r1,[r4,#0x3c]
000786  eb010182          ADD      r1,r1,r2,LSL #2
00078a  80c8              STRH     r0,[r1,#6]
00078c  e042              B        |L1.2068|
                  |L1.1934|
;;;367    	 }else if(sys->sub[sys->sub_model].highpass <= SUB_HIGHPASS_NODE1){
00078e  7ee1              LDRB     r1,[r4,#0x1b]
000790  eb010141          ADD      r1,r1,r1,LSL #1
000794  6be0              LDR      r0,[r4,#0x3c]
000796  eb000081          ADD      r0,r0,r1,LSL #2
00079a  88c0              LDRH     r0,[r0,#6]
00079c  283c              CMP      r0,#0x3c
00079e  dc0f              BGT      |L1.1984|
;;;368    		 sys->sub[sys->sub_model].highpass--;
0007a0  7ee1              LDRB     r1,[r4,#0x1b]
0007a2  eb010141          ADD      r1,r1,r1,LSL #1
0007a6  6be0              LDR      r0,[r4,#0x3c]
0007a8  eb000081          ADD      r0,r0,r1,LSL #2
0007ac  88c0              LDRH     r0,[r0,#6]
0007ae  1e40              SUBS     r0,r0,#1
0007b0  7ee2              LDRB     r2,[r4,#0x1b]
0007b2  eb020242          ADD      r2,r2,r2,LSL #1
0007b6  6be1              LDR      r1,[r4,#0x3c]
0007b8  eb010182          ADD      r1,r1,r2,LSL #2
0007bc  80c8              STRH     r0,[r1,#6]
0007be  e029              B        |L1.2068|
                  |L1.1984|
;;;369    	 }else if(sys->sub[sys->sub_model].highpass <= SUB_HIGHPASS_MAX){
0007c0  7ee1              LDRB     r1,[r4,#0x1b]
0007c2  eb010141          ADD      r1,r1,r1,LSL #1
0007c6  6be0              LDR      r0,[r4,#0x3c]
0007c8  eb000081          ADD      r0,r0,r1,LSL #2
0007cc  88c0              LDRH     r0,[r0,#6]
0007ce  2864              CMP      r0,#0x64
0007d0  dc0f              BGT      |L1.2034|
;;;370    		 sys->sub[sys->sub_model].highpass -= 5;
0007d2  7ee1              LDRB     r1,[r4,#0x1b]
0007d4  eb010141          ADD      r1,r1,r1,LSL #1
0007d8  6be0              LDR      r0,[r4,#0x3c]
0007da  eb000081          ADD      r0,r0,r1,LSL #2
0007de  88c0              LDRH     r0,[r0,#6]
0007e0  1f40              SUBS     r0,r0,#5
0007e2  7ee2              LDRB     r2,[r4,#0x1b]
0007e4  eb020242          ADD      r2,r2,r2,LSL #1
0007e8  6be1              LDR      r1,[r4,#0x3c]
0007ea  eb010182          ADD      r1,r1,r2,LSL #2
0007ee  80c8              STRH     r0,[r1,#6]
0007f0  e010              B        |L1.2068|
                  |L1.2034|
;;;371    	 }else if(sys->sub[sys->sub_model].highpass == SUB_HIGHPASS_OFF){
0007f2  7ee1              LDRB     r1,[r4,#0x1b]
0007f4  eb010141          ADD      r1,r1,r1,LSL #1
0007f8  6be0              LDR      r0,[r4,#0x3c]
0007fa  eb000081          ADD      r0,r0,r1,LSL #2
0007fe  88c0              LDRH     r0,[r0,#6]
000800  2882              CMP      r0,#0x82
000802  d107              BNE      |L1.2068|
;;;372    		 sys->sub[sys->sub_model].highpass = SUB_HIGHPASS_MAX;
000804  2064              MOVS     r0,#0x64
000806  7ee2              LDRB     r2,[r4,#0x1b]
000808  eb020242          ADD      r2,r2,r2,LSL #1
00080c  6be1              LDR      r1,[r4,#0x3c]
00080e  eb010182          ADD      r1,r1,r2,LSL #2
000812  80c8              STRH     r0,[r1,#6]
                  |L1.2068|
;;;373    	 }
;;;374    	 
;;;375    	 sys_sub_highpass_set(sys);
000814  4620              MOV      r0,r4
000816  f7fffffe          BL       sys_sub_highpass_set
;;;376    	 
;;;377    	 sys_untimeout(sys_database1_update_later, NULL);
00081a  2100              MOVS     r1,#0
00081c  4811              LDR      r0,|L1.2148|
00081e  f7fffffe          BL       sys_untimeout
;;;378    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database1_update_later, NULL);
000822  2200              MOVS     r2,#0
000824  490f              LDR      r1,|L1.2148|
000826  20c8              MOVS     r0,#0xc8
000828  f7fffffe          BL       sys_timeout
;;;379    	// sys_send_msg(DATABASE_UPDATE_MSG, 1);
;;;380    }
00082c  bd10              POP      {r4,pc}
;;;381    
                          ENDP

                  sub_highpass_increase PROC
;;;382    static void sub_highpass_increase(sys_state_t *sys)
00082e  b510              PUSH     {r4,lr}
;;;383    {
000830  4604              MOV      r4,r0
;;;384    	 if(sys->sub[sys->sub_model].highpass < SUB_HIGHPASS_NODE1){
000832  7ee1              LDRB     r1,[r4,#0x1b]
000834  eb010141          ADD      r1,r1,r1,LSL #1
000838  6be0              LDR      r0,[r4,#0x3c]
00083a  eb000081          ADD      r0,r0,r1,LSL #2
00083e  88c0              LDRH     r0,[r0,#6]
000840  283c              CMP      r0,#0x3c
000842  da11              BGE      |L1.2152|
;;;385          sys->sub[sys->sub_model].highpass++;
000844  7ee1              LDRB     r1,[r4,#0x1b]
000846  eb010141          ADD      r1,r1,r1,LSL #1
00084a  6be0              LDR      r0,[r4,#0x3c]
00084c  eb000081          ADD      r0,r0,r1,LSL #2
000850  88c0              LDRH     r0,[r0,#6]
000852  1c40              ADDS     r0,r0,#1
000854  7ee2              LDRB     r2,[r4,#0x1b]
000856  eb020242          ADD      r2,r2,r2,LSL #1
00085a  6be1              LDR      r1,[r4,#0x3c]
00085c  eb010182          ADD      r1,r1,r2,LSL #2
000860  80c8              STRH     r0,[r1,#6]
000862  e03d              B        |L1.2272|
                  |L1.2148|
                          DCD      sys_database1_update_later
                  |L1.2152|
;;;386    	 }else if(sys->sub[sys->sub_model].highpass < SUB_HIGHPASS_MAX){
000868  7ee1              LDRB     r1,[r4,#0x1b]
00086a  eb010141          ADD      r1,r1,r1,LSL #1
00086e  6be0              LDR      r0,[r4,#0x3c]
000870  eb000081          ADD      r0,r0,r1,LSL #2
000874  88c0              LDRH     r0,[r0,#6]
000876  2864              CMP      r0,#0x64
000878  da0f              BGE      |L1.2202|
;;;387    		  sys->sub[sys->sub_model].highpass += 5;
00087a  7ee1              LDRB     r1,[r4,#0x1b]
00087c  eb010141          ADD      r1,r1,r1,LSL #1
000880  6be0              LDR      r0,[r4,#0x3c]
000882  eb000081          ADD      r0,r0,r1,LSL #2
000886  88c0              LDRH     r0,[r0,#6]
000888  1d40              ADDS     r0,r0,#5
00088a  7ee2              LDRB     r2,[r4,#0x1b]
00088c  eb020242          ADD      r2,r2,r2,LSL #1
000890  6be1              LDR      r1,[r4,#0x3c]
000892  eb010182          ADD      r1,r1,r2,LSL #2
000896  80c8              STRH     r0,[r1,#6]
000898  e022              B        |L1.2272|
                  |L1.2202|
;;;388    	 }else if(sys->sub[sys->sub_model].highpass == SUB_HIGHPASS_MAX){
00089a  7ee1              LDRB     r1,[r4,#0x1b]
00089c  eb010141          ADD      r1,r1,r1,LSL #1
0008a0  6be0              LDR      r0,[r4,#0x3c]
0008a2  eb000081          ADD      r0,r0,r1,LSL #2
0008a6  88c0              LDRH     r0,[r0,#6]
0008a8  2864              CMP      r0,#0x64
0008aa  d108              BNE      |L1.2238|
;;;389    		  sys->sub[sys->sub_model].highpass = SUB_HIGHPASS_OFF;
0008ac  2082              MOVS     r0,#0x82
0008ae  7ee2              LDRB     r2,[r4,#0x1b]
0008b0  eb020242          ADD      r2,r2,r2,LSL #1
0008b4  6be1              LDR      r1,[r4,#0x3c]
0008b6  eb010182          ADD      r1,r1,r2,LSL #2
0008ba  80c8              STRH     r0,[r1,#6]
0008bc  e010              B        |L1.2272|
                  |L1.2238|
;;;390    	 }else if(sys->sub[sys->sub_model].highpass == SUB_HIGHPASS_OFF){
0008be  7ee1              LDRB     r1,[r4,#0x1b]
0008c0  eb010141          ADD      r1,r1,r1,LSL #1
0008c4  6be0              LDR      r0,[r4,#0x3c]
0008c6  eb000081          ADD      r0,r0,r1,LSL #2
0008ca  88c0              LDRH     r0,[r0,#6]
0008cc  2882              CMP      r0,#0x82
0008ce  d107              BNE      |L1.2272|
;;;391    		  sys->sub[sys->sub_model].highpass = SUB_HIGHPASS_MIN;
0008d0  2014              MOVS     r0,#0x14
0008d2  7ee2              LDRB     r2,[r4,#0x1b]
0008d4  eb020242          ADD      r2,r2,r2,LSL #1
0008d8  6be1              LDR      r1,[r4,#0x3c]
0008da  eb010182          ADD      r1,r1,r2,LSL #2
0008de  80c8              STRH     r0,[r1,#6]
                  |L1.2272|
;;;392    	 } 
;;;393    	 
;;;394    	 sys_sub_highpass_set(sys);
0008e0  4620              MOV      r0,r4
0008e2  f7fffffe          BL       sys_sub_highpass_set
;;;395    	 
;;;396    	 sys_untimeout(sys_database1_update_later, NULL);
0008e6  2100              MOVS     r1,#0
0008e8  48fa              LDR      r0,|L1.3284|
0008ea  f7fffffe          BL       sys_untimeout
;;;397    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database1_update_later, NULL);
0008ee  2200              MOVS     r2,#0
0008f0  49f8              LDR      r1,|L1.3284|
0008f2  20c8              MOVS     r0,#0xc8
0008f4  f7fffffe          BL       sys_timeout
;;;398    	 //sys_send_msg(DATABASE_UPDATE_MSG, 1);
;;;399    }
0008f8  bd10              POP      {r4,pc}
;;;400    
                          ENDP

                  lineout_highpass_decrease PROC
;;;401    static void lineout_highpass_decrease(sys_state_t *sys)
0008fa  b510              PUSH     {r4,lr}
;;;402    {
0008fc  4604              MOV      r4,r0
;;;403    	 if(sys->lineout_highpass == LINEOUT_HIGHPASS_MIN){
0008fe  8c20              LDRH     r0,[r4,#0x20]
000900  281e              CMP      r0,#0x1e
000902  d103              BNE      |L1.2316|
;;;404    		 sys->lineout_highpass = LINEOUT_HIGHPASS_DEFAULT;
000904  f44f70a5          MOV      r0,#0x14a
000908  8420              STRH     r0,[r4,#0x20]
00090a  e01c              B        |L1.2374|
                  |L1.2316|
;;;405    	 }else if(sys->lineout_highpass <= LINEOUT_HIGHPASS_NODE1){
00090c  8c20              LDRH     r0,[r4,#0x20]
00090e  283c              CMP      r0,#0x3c
000910  dc03              BGT      |L1.2330|
;;;406    		 sys->lineout_highpass--;
000912  8c20              LDRH     r0,[r4,#0x20]
000914  1e40              SUBS     r0,r0,#1
000916  8420              STRH     r0,[r4,#0x20]
000918  e015              B        |L1.2374|
                  |L1.2330|
;;;407    	 }else if(sys->lineout_highpass <= LINEOUT_HIGHPASS_NODE2){
00091a  8c20              LDRH     r0,[r4,#0x20]
00091c  2878              CMP      r0,#0x78
00091e  dc03              BGT      |L1.2344|
;;;408    		 sys->lineout_highpass -= 5;
000920  8c20              LDRH     r0,[r4,#0x20]
000922  1f40              SUBS     r0,r0,#5
000924  8420              STRH     r0,[r4,#0x20]
000926  e00e              B        |L1.2374|
                  |L1.2344|
;;;409    	 }else if(sys->lineout_highpass <= LINEOUT_HIGHPASS_MAX){
000928  8c20              LDRH     r0,[r4,#0x20]
00092a  f5b07f96          CMP      r0,#0x12c
00092e  dc03              BGT      |L1.2360|
;;;410    		 sys->lineout_highpass -= 10;
000930  8c20              LDRH     r0,[r4,#0x20]
000932  380a              SUBS     r0,r0,#0xa
000934  8420              STRH     r0,[r4,#0x20]
000936  e006              B        |L1.2374|
                  |L1.2360|
;;;411    	 }else if(sys->lineout_highpass == LINEOUT_HIGHPASS_DEFAULT){
000938  8c20              LDRH     r0,[r4,#0x20]
00093a  f5b07fa5          CMP      r0,#0x14a
00093e  d102              BNE      |L1.2374|
;;;412    		 sys->lineout_highpass = LINEOUT_HIGHPASS_MAX; 
000940  f44f7096          MOV      r0,#0x12c
000944  8420              STRH     r0,[r4,#0x20]
                  |L1.2374|
;;;413    	 }
;;;414    	 
;;;415    	 sys_line_highpass_set(sys);
000946  4620              MOV      r0,r4
000948  f7fffffe          BL       sys_line_highpass_set
;;;416    	 
;;;417    	 sys_untimeout(sys_database0_update_later, NULL);
00094c  2100              MOVS     r1,#0
00094e  48e2              LDR      r0,|L1.3288|
000950  f7fffffe          BL       sys_untimeout
;;;418    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000954  2200              MOVS     r2,#0
000956  49e0              LDR      r1,|L1.3288|
000958  20c8              MOVS     r0,#0xc8
00095a  f7fffffe          BL       sys_timeout
;;;419    	// sys_send_msg(DATABASE_UPDATE_MSG, 0);
;;;420    }
00095e  bd10              POP      {r4,pc}
;;;421    
                          ENDP

                  lineout_highpass_increase PROC
;;;422    static void lineout_highpass_increase(sys_state_t *sys)
000960  b510              PUSH     {r4,lr}
;;;423    {
000962  4604              MOV      r4,r0
;;;424    	if(sys->lineout_highpass < LINEOUT_HIGHPASS_NODE1){
000964  8c20              LDRH     r0,[r4,#0x20]
000966  283c              CMP      r0,#0x3c
000968  da03              BGE      |L1.2418|
;;;425          sys->lineout_highpass++;
00096a  8c20              LDRH     r0,[r4,#0x20]
00096c  1c40              ADDS     r0,r0,#1
00096e  8420              STRH     r0,[r4,#0x20]
000970  e01c              B        |L1.2476|
                  |L1.2418|
;;;426    	 }else if(sys->lineout_highpass < LINEOUT_HIGHPASS_NODE2){
000972  8c20              LDRH     r0,[r4,#0x20]
000974  2878              CMP      r0,#0x78
000976  da03              BGE      |L1.2432|
;;;427    		  sys->lineout_highpass += 5;
000978  8c20              LDRH     r0,[r4,#0x20]
00097a  1d40              ADDS     r0,r0,#5
00097c  8420              STRH     r0,[r4,#0x20]
00097e  e015              B        |L1.2476|
                  |L1.2432|
;;;428    	 }else if(sys->lineout_highpass < LINEOUT_HIGHPASS_MAX){
000980  8c20              LDRH     r0,[r4,#0x20]
000982  f5b07f96          CMP      r0,#0x12c
000986  da03              BGE      |L1.2448|
;;;429    		  sys->lineout_highpass += 10;
000988  8c20              LDRH     r0,[r4,#0x20]
00098a  300a              ADDS     r0,r0,#0xa
00098c  8420              STRH     r0,[r4,#0x20]
00098e  e00d              B        |L1.2476|
                  |L1.2448|
;;;430    	 }else if(sys->lineout_highpass == LINEOUT_HIGHPASS_MAX){
000990  8c20              LDRH     r0,[r4,#0x20]
000992  f5b07f96          CMP      r0,#0x12c
000996  d103              BNE      |L1.2464|
;;;431    		  sys->lineout_highpass = LINEOUT_HIGHPASS_DEFAULT;
000998  f44f70a5          MOV      r0,#0x14a
00099c  8420              STRH     r0,[r4,#0x20]
00099e  e005              B        |L1.2476|
                  |L1.2464|
;;;432    	 }else if(sys->lineout_highpass == LINEOUT_HIGHPASS_DEFAULT){
0009a0  8c20              LDRH     r0,[r4,#0x20]
0009a2  f5b07fa5          CMP      r0,#0x14a
0009a6  d101              BNE      |L1.2476|
;;;433    		  sys->lineout_highpass = LINEOUT_HIGHPASS_MIN;
0009a8  201e              MOVS     r0,#0x1e
0009aa  8420              STRH     r0,[r4,#0x20]
                  |L1.2476|
;;;434    	 }  
;;;435    	 
;;;436    	 sys_line_highpass_set(sys);
0009ac  4620              MOV      r0,r4
0009ae  f7fffffe          BL       sys_line_highpass_set
;;;437    	 
;;;438    	 sys_untimeout(sys_database0_update_later, NULL);
0009b2  2100              MOVS     r1,#0
0009b4  48c8              LDR      r0,|L1.3288|
0009b6  f7fffffe          BL       sys_untimeout
;;;439    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
0009ba  2200              MOVS     r2,#0
0009bc  49c6              LDR      r1,|L1.3288|
0009be  20c8              MOVS     r0,#0xc8
0009c0  f7fffffe          BL       sys_timeout
;;;440    	// sys_send_msg(DATABASE_UPDATE_MSG, 0);
;;;441    }
0009c4  bd10              POP      {r4,pc}
;;;442    
                          ENDP

                  delay_switch_to_prev PROC
;;;443    static void delay_switch_to_prev(sys_state_t *sys)
0009c6  b510              PUSH     {r4,lr}
;;;444    {
0009c8  4604              MOV      r4,r0
;;;445    	 sys->d_router = (delay_router_t)(sys->d_router == 0? (DELAY_ROUTER_MAX - 1):(sys->d_router - 1));
0009ca  f8940026          LDRB     r0,[r4,#0x26]
0009ce  b908              CBNZ     r0,|L1.2516|
0009d0  2002              MOVS     r0,#2
0009d2  e002              B        |L1.2522|
                  |L1.2516|
0009d4  f8940026          LDRB     r0,[r4,#0x26]
0009d8  1e40              SUBS     r0,r0,#1
                  |L1.2522|
0009da  f8840026          STRB     r0,[r4,#0x26]
;;;446    	
;;;447    	 sys_delay_switch_to(sys);
0009de  4620              MOV      r0,r4
0009e0  f7fffffe          BL       sys_delay_switch_to
;;;448    	
;;;449    	 sys_untimeout(sys_database0_update_later, NULL);
0009e4  2100              MOVS     r1,#0
0009e6  48bc              LDR      r0,|L1.3288|
0009e8  f7fffffe          BL       sys_untimeout
;;;450    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
0009ec  2200              MOVS     r2,#0
0009ee  49ba              LDR      r1,|L1.3288|
0009f0  20c8              MOVS     r0,#0xc8
0009f2  f7fffffe          BL       sys_timeout
;;;451    }
0009f6  bd10              POP      {r4,pc}
;;;452    
                          ENDP

                  delay_switch_to_next PROC
;;;453    static void delay_switch_to_next(sys_state_t *sys)
0009f8  b510              PUSH     {r4,lr}
;;;454    {
0009fa  4604              MOV      r4,r0
;;;455    	 sys->d_router = (delay_router_t)((sys->d_router + 1) % DELAY_ROUTER_MAX);
0009fc  f8940026          LDRB     r0,[r4,#0x26]
000a00  1c40              ADDS     r0,r0,#1
000a02  2103              MOVS     r1,#3
000a04  fb90f2f1          SDIV     r2,r0,r1
000a08  fb010012          MLS      r0,r1,r2,r0
000a0c  f8840026          STRB     r0,[r4,#0x26]
;;;456    	
;;;457    	 sys_delay_switch_to(sys);
000a10  4620              MOV      r0,r4
000a12  f7fffffe          BL       sys_delay_switch_to
;;;458    	
;;;459    	 sys_untimeout(sys_database0_update_later, NULL);
000a16  2100              MOVS     r1,#0
000a18  48af              LDR      r0,|L1.3288|
000a1a  f7fffffe          BL       sys_untimeout
;;;460    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000a1e  2200              MOVS     r2,#0
000a20  49ad              LDR      r1,|L1.3288|
000a22  20c8              MOVS     r0,#0xc8
000a24  f7fffffe          BL       sys_timeout
;;;461    }
000a28  bd10              POP      {r4,pc}
;;;462    
                          ENDP

                  power_on_method_switch_to_prev PROC
;;;463    static void power_on_method_switch_to_prev(sys_state_t *sys)
000a2a  b510              PUSH     {r4,lr}
;;;464    {
000a2c  4604              MOV      r4,r0
;;;465    	sys->method = (power_on_t)(sys->method == 0? (POWER_ON_MAX - 1):(sys->method - 1));
000a2e  7ce0              LDRB     r0,[r4,#0x13]
000a30  b908              CBNZ     r0,|L1.2614|
000a32  2003              MOVS     r0,#3
000a34  e001              B        |L1.2618|
                  |L1.2614|
000a36  7ce0              LDRB     r0,[r4,#0x13]
000a38  1e40              SUBS     r0,r0,#1
                  |L1.2618|
000a3a  74e0              STRB     r0,[r4,#0x13]
;;;466    	
;;;467    	if(sys->method == AUDIO){
000a3c  7ce0              LDRB     r0,[r4,#0x13]
000a3e  2801              CMP      r0,#1
000a40  d103              BNE      |L1.2634|
;;;468    		update_detect_state(DETECT_AUDIO);
000a42  2000              MOVS     r0,#0
000a44  f7fffffe          BL       update_detect_state
000a48  e007              B        |L1.2650|
                  |L1.2634|
;;;469    	}else if(sys->method == TRIGGER){
000a4a  7ce0              LDRB     r0,[r4,#0x13]
000a4c  2802              CMP      r0,#2
000a4e  d104              BNE      |L1.2650|
;;;470    		sys->is_trigger_off_need_delay = true;
000a50  2001              MOVS     r0,#1
000a52  f884004d          STRB     r0,[r4,#0x4d]
;;;471    		update_detect_state(DETECT_TRIGGER);
000a56  f7fffffe          BL       update_detect_state
                  |L1.2650|
;;;472    	}
;;;473    	
;;;474       sys_untimeout(sys_database0_update_later, NULL);
000a5a  2100              MOVS     r1,#0
000a5c  489e              LDR      r0,|L1.3288|
000a5e  f7fffffe          BL       sys_untimeout
;;;475    	 sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000a62  2200              MOVS     r2,#0
000a64  499c              LDR      r1,|L1.3288|
000a66  20c8              MOVS     r0,#0xc8
000a68  f7fffffe          BL       sys_timeout
;;;476    }
000a6c  bd10              POP      {r4,pc}
;;;477    
                          ENDP

                  power_on_method_switch_to_next PROC
;;;478    static void power_on_method_switch_to_next(sys_state_t *sys)
000a6e  b510              PUSH     {r4,lr}
;;;479    {
000a70  4604              MOV      r4,r0
;;;480    	sys->method = (power_on_t)((sys->method + 1) % POWER_ON_MAX);
000a72  7ce1              LDRB     r1,[r4,#0x13]
000a74  1c48              ADDS     r0,r1,#1
000a76  17c1              ASRS     r1,r0,#31
000a78  eb007191          ADD      r1,r0,r1,LSR #30
000a7c  1089              ASRS     r1,r1,#2
000a7e  eba00181          SUB      r1,r0,r1,LSL #2
000a82  74e1              STRB     r1,[r4,#0x13]
;;;481    	
;;;482    	if(sys->method == AUDIO){
000a84  7ce0              LDRB     r0,[r4,#0x13]
000a86  2801              CMP      r0,#1
000a88  d103              BNE      |L1.2706|
;;;483    		update_detect_state(DETECT_AUDIO);
000a8a  2000              MOVS     r0,#0
000a8c  f7fffffe          BL       update_detect_state
000a90  e007              B        |L1.2722|
                  |L1.2706|
;;;484    	}else if(sys->method == TRIGGER){
000a92  7ce0              LDRB     r0,[r4,#0x13]
000a94  2802              CMP      r0,#2
000a96  d104              BNE      |L1.2722|
;;;485    		sys->is_trigger_off_need_delay = true;
000a98  2001              MOVS     r0,#1
000a9a  f884004d          STRB     r0,[r4,#0x4d]
;;;486    		update_detect_state(DETECT_TRIGGER);
000a9e  f7fffffe          BL       update_detect_state
                  |L1.2722|
;;;487    	}
;;;488    	
;;;489    	
;;;490    	sys_untimeout(sys_database0_update_later, NULL);
000aa2  2100              MOVS     r1,#0
000aa4  488c              LDR      r0,|L1.3288|
000aa6  f7fffffe          BL       sys_untimeout
;;;491    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000aaa  2200              MOVS     r2,#0
000aac  498a              LDR      r1,|L1.3288|
000aae  20c8              MOVS     r0,#0xc8
000ab0  f7fffffe          BL       sys_timeout
;;;492    	
;;;493    }
000ab4  bd10              POP      {r4,pc}
;;;494    
                          ENDP

                  delay_time_decrease PROC
;;;495    static void delay_time_decrease(sys_state_t *sys)
000ab6  b510              PUSH     {r4,lr}
;;;496    {
000ab8  4604              MOV      r4,r0
;;;497    	 if(sys->d_router == DELAY_SUB){
000aba  f8940026          LDRB     r0,[r4,#0x26]
000abe  bb10              CBNZ     r0,|L1.2822|
;;;498          sys->sub[sys->sub_model].delay = sys->sub[sys->sub_model].delay == 0? (SUB_DELAY_MAX):(sys->sub[sys->sub_model].delay - 5);
000ac0  7ee1              LDRB     r1,[r4,#0x1b]
000ac2  eb010141          ADD      r1,r1,r1,LSL #1
000ac6  6be0              LDR      r0,[r4,#0x3c]
000ac8  eb000081          ADD      r0,r0,r1,LSL #2
000acc  8940              LDRH     r0,[r0,#0xa]
000ace  b908              CBNZ     r0,|L1.2772|
000ad0  20fa              MOVS     r0,#0xfa
000ad2  e007              B        |L1.2788|
                  |L1.2772|
000ad4  7ee1              LDRB     r1,[r4,#0x1b]
000ad6  eb010141          ADD      r1,r1,r1,LSL #1
000ada  6be0              LDR      r0,[r4,#0x3c]
000adc  eb000081          ADD      r0,r0,r1,LSL #2
000ae0  8940              LDRH     r0,[r0,#0xa]
000ae2  1f40              SUBS     r0,r0,#5
                  |L1.2788|
000ae4  7ee2              LDRB     r2,[r4,#0x1b]
000ae6  eb020242          ADD      r2,r2,r2,LSL #1
000aea  6be1              LDR      r1,[r4,#0x3c]
000aec  eb010182          ADD      r1,r1,r2,LSL #2
000af0  8148              STRH     r0,[r1,#0xa]
;;;499    		  sys_untimeout(sys_database1_update_later, NULL);
000af2  2100              MOVS     r1,#0
000af4  4877              LDR      r0,|L1.3284|
000af6  f7fffffe          BL       sys_untimeout
;;;500    	    sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database1_update_later, NULL);
000afa  2200              MOVS     r2,#0
000afc  4975              LDR      r1,|L1.3284|
000afe  20c8              MOVS     r0,#0xc8
000b00  f7fffffe          BL       sys_timeout
000b04  e013              B        |L1.2862|
                  |L1.2822|
;;;501    	 }else if(sys->d_router == DELAY_LINEOUT){
000b06  f8940026          LDRB     r0,[r4,#0x26]
000b0a  2801              CMP      r0,#1
000b0c  d10f              BNE      |L1.2862|
;;;502    		  sys->line_delay_time = sys->line_delay_time == 0? (SUB_DELAY_MAX):(sys->line_delay_time - 5);
000b0e  8ca0              LDRH     r0,[r4,#0x24]
000b10  b908              CBNZ     r0,|L1.2838|
000b12  20fa              MOVS     r0,#0xfa
000b14  e001              B        |L1.2842|
                  |L1.2838|
000b16  8ca0              LDRH     r0,[r4,#0x24]
000b18  1f40              SUBS     r0,r0,#5
                  |L1.2842|
000b1a  84a0              STRH     r0,[r4,#0x24]
;;;503    		  sys_untimeout(sys_database0_update_later, NULL);
000b1c  2100              MOVS     r1,#0
000b1e  486e              LDR      r0,|L1.3288|
000b20  f7fffffe          BL       sys_untimeout
;;;504    	    sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000b24  2200              MOVS     r2,#0
000b26  496c              LDR      r1,|L1.3288|
000b28  20c8              MOVS     r0,#0xc8
000b2a  f7fffffe          BL       sys_timeout
                  |L1.2862|
;;;505    	 }
;;;506    	 
;;;507    	 sys_delay_time_set(sys);
000b2e  4620              MOV      r0,r4
000b30  f7fffffe          BL       sys_delay_time_set
;;;508    	 
;;;509    	 
;;;510    }
000b34  bd10              POP      {r4,pc}
;;;511    
                          ENDP

                  delay_time_increase PROC
;;;512    static void delay_time_increase(sys_state_t *sys)
000b36  b510              PUSH     {r4,lr}
;;;513    {
000b38  4604              MOV      r4,r0
;;;514    	  if(sys->d_router == DELAY_SUB){
000b3a  f8940026          LDRB     r0,[r4,#0x26]
000b3e  bb18              CBNZ     r0,|L1.2952|
;;;515    			sys->sub[sys->sub_model].delay = sys->sub[sys->sub_model].delay == SUB_DELAY_MAX ? (0):(sys->sub[sys->sub_model].delay + 5);
000b40  7ee1              LDRB     r1,[r4,#0x1b]
000b42  eb010141          ADD      r1,r1,r1,LSL #1
000b46  6be0              LDR      r0,[r4,#0x3c]
000b48  eb000081          ADD      r0,r0,r1,LSL #2
000b4c  8940              LDRH     r0,[r0,#0xa]
000b4e  28fa              CMP      r0,#0xfa
000b50  d101              BNE      |L1.2902|
000b52  2000              MOVS     r0,#0
000b54  e007              B        |L1.2918|
                  |L1.2902|
000b56  7ee1              LDRB     r1,[r4,#0x1b]
000b58  eb010141          ADD      r1,r1,r1,LSL #1
000b5c  6be0              LDR      r0,[r4,#0x3c]
000b5e  eb000081          ADD      r0,r0,r1,LSL #2
000b62  8940              LDRH     r0,[r0,#0xa]
000b64  1d40              ADDS     r0,r0,#5
                  |L1.2918|
000b66  7ee2              LDRB     r2,[r4,#0x1b]
000b68  eb020242          ADD      r2,r2,r2,LSL #1
000b6c  6be1              LDR      r1,[r4,#0x3c]
000b6e  eb010182          ADD      r1,r1,r2,LSL #2
000b72  8148              STRH     r0,[r1,#0xa]
;;;516    			sys_untimeout(sys_database1_update_later, NULL);
000b74  2100              MOVS     r1,#0
000b76  4857              LDR      r0,|L1.3284|
000b78  f7fffffe          BL       sys_untimeout
;;;517    	    sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database1_update_later, NULL);
000b7c  2200              MOVS     r2,#0
000b7e  4955              LDR      r1,|L1.3284|
000b80  20c8              MOVS     r0,#0xc8
000b82  f7fffffe          BL       sys_timeout
000b86  e014              B        |L1.2994|
                  |L1.2952|
;;;518    		}else if(sys->d_router == DELAY_LINEOUT){
000b88  f8940026          LDRB     r0,[r4,#0x26]
000b8c  2801              CMP      r0,#1
000b8e  d110              BNE      |L1.2994|
;;;519    			sys->line_delay_time = sys->line_delay_time == SUB_DELAY_MAX ? (0):(sys->line_delay_time + 5);
000b90  8ca0              LDRH     r0,[r4,#0x24]
000b92  28fa              CMP      r0,#0xfa
000b94  d101              BNE      |L1.2970|
000b96  2000              MOVS     r0,#0
000b98  e001              B        |L1.2974|
                  |L1.2970|
000b9a  8ca0              LDRH     r0,[r4,#0x24]
000b9c  1d40              ADDS     r0,r0,#5
                  |L1.2974|
000b9e  84a0              STRH     r0,[r4,#0x24]
;;;520    			sys_untimeout(sys_database0_update_later, NULL);
000ba0  2100              MOVS     r1,#0
000ba2  484d              LDR      r0,|L1.3288|
000ba4  f7fffffe          BL       sys_untimeout
;;;521    	    sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000ba8  2200              MOVS     r2,#0
000baa  494b              LDR      r1,|L1.3288|
000bac  20c8              MOVS     r0,#0xc8
000bae  f7fffffe          BL       sys_timeout
                  |L1.2994|
;;;522    		}
;;;523    		
;;;524    		sys_delay_time_set(sys);
000bb2  4620              MOV      r0,r4
000bb4  f7fffffe          BL       sys_delay_time_set
;;;525    }
000bb8  bd10              POP      {r4,pc}
;;;526    
                          ENDP

                  change_reset_state PROC
;;;527    static void change_reset_state(sys_state_t *sys)
000bba  f8901046          LDRB     r1,[r0,#0x46]
;;;528    {
;;;529    	 sys->do_reset = sys->do_reset == true? false:true; 
000bbe  2901              CMP      r1,#1
000bc0  d001              BEQ      |L1.3014|
000bc2  2101              MOVS     r1,#1
000bc4  e000              B        |L1.3016|
                  |L1.3014|
000bc6  2100              MOVS     r1,#0
                  |L1.3016|
000bc8  f8801046          STRB     r1,[r0,#0x46]
;;;530    }
000bcc  4770              BX       lr
;;;531    
                          ENDP

                  change_reset_confirm_state PROC
;;;532    static void change_reset_confirm_state(sys_state_t *sys)
000bce  f8901047          LDRB     r1,[r0,#0x47]
;;;533    {
;;;534    	 sys->confirm_reset = sys->confirm_reset == true? false:true;
000bd2  2901              CMP      r1,#1
000bd4  d001              BEQ      |L1.3034|
000bd6  2101              MOVS     r1,#1
000bd8  e000              B        |L1.3036|
                  |L1.3034|
000bda  2100              MOVS     r1,#0
                  |L1.3036|
000bdc  f8801047          STRB     r1,[r0,#0x47]
;;;535    }
000be0  4770              BX       lr
;;;536    
                          ENDP

                  sense_threshold_prev PROC
;;;537    static void sense_threshold_prev(sys_state_t *sys)
000be2  b510              PUSH     {r4,lr}
;;;538    {
000be4  4604              MOV      r4,r0
;;;539    	 sys->sense_thres = (sense_threshold_t)(sys->sense_thres == 0?(SENSE_THRESHOLD_NUM - 1):(sys->sense_thres - 1));
000be6  f8940027          LDRB     r0,[r4,#0x27]
000bea  b908              CBNZ     r0,|L1.3056|
000bec  2004              MOVS     r0,#4
000bee  e002              B        |L1.3062|
                  |L1.3056|
000bf0  f8940027          LDRB     r0,[r4,#0x27]
000bf4  1e40              SUBS     r0,r0,#1
                  |L1.3062|
000bf6  f8840027          STRB     r0,[r4,#0x27]
;;;540    	
;;;541    	 if(sys->method == AUDIO){
000bfa  7ce0              LDRB     r0,[r4,#0x13]
000bfc  2801              CMP      r0,#1
000bfe  d102              BNE      |L1.3078|
;;;542    		update_detect_state(DETECT_AUDIO);
000c00  2000              MOVS     r0,#0
000c02  f7fffffe          BL       update_detect_state
                  |L1.3078|
;;;543    	}
;;;544    	
;;;545      sys_audio_sense_thres_set(sys->sense_thres);
000c06  f8940027          LDRB     r0,[r4,#0x27]
000c0a  f7fffffe          BL       sys_audio_sense_thres_set
;;;546    	
;;;547    	sys_untimeout(sys_database0_update_later, NULL);
000c0e  2100              MOVS     r1,#0
000c10  4831              LDR      r0,|L1.3288|
000c12  f7fffffe          BL       sys_untimeout
;;;548      sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000c16  2200              MOVS     r2,#0
000c18  492f              LDR      r1,|L1.3288|
000c1a  20c8              MOVS     r0,#0xc8
000c1c  f7fffffe          BL       sys_timeout
;;;549    }
000c20  bd10              POP      {r4,pc}
;;;550    
                          ENDP

                  sense_threshold_next PROC
;;;551    static void sense_threshold_next(sys_state_t *sys)
000c22  b510              PUSH     {r4,lr}
;;;552    {
000c24  4604              MOV      r4,r0
;;;553    	sys->sense_thres = (sense_threshold_t)((sys->sense_thres + 1) % SENSE_THRESHOLD_NUM);
000c26  f8940027          LDRB     r0,[r4,#0x27]
000c2a  1c40              ADDS     r0,r0,#1
000c2c  2105              MOVS     r1,#5
000c2e  fb90f2f1          SDIV     r2,r0,r1
000c32  fb010012          MLS      r0,r1,r2,r0
000c36  f8840027          STRB     r0,[r4,#0x27]
;;;554    	
;;;555    	if(sys->method == AUDIO){
000c3a  7ce0              LDRB     r0,[r4,#0x13]
000c3c  2801              CMP      r0,#1
000c3e  d102              BNE      |L1.3142|
;;;556    		update_detect_state(DETECT_AUDIO);
000c40  2000              MOVS     r0,#0
000c42  f7fffffe          BL       update_detect_state
                  |L1.3142|
;;;557    	}
;;;558    	
;;;559    	 sys_audio_sense_thres_set(sys->sense_thres);
000c46  f8940027          LDRB     r0,[r4,#0x27]
000c4a  f7fffffe          BL       sys_audio_sense_thres_set
;;;560    	
;;;561    	sys_untimeout(sys_database0_update_later, NULL);
000c4e  2100              MOVS     r1,#0
000c50  4821              LDR      r0,|L1.3288|
000c52  f7fffffe          BL       sys_untimeout
;;;562    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000c56  2200              MOVS     r2,#0
000c58  491f              LDR      r1,|L1.3288|
000c5a  20c8              MOVS     r0,#0xc8
000c5c  f7fffffe          BL       sys_timeout
;;;563    }
000c60  bd10              POP      {r4,pc}
;;;564    
                          ENDP

                  sense_off_prev PROC
;;;565    static void sense_off_prev(sys_state_t *sys)
000c62  b510              PUSH     {r4,lr}
;;;566    {
000c64  4604              MOV      r4,r0
;;;567    	 sys->se_timeout = (sense_timeout_t)(sys->se_timeout == 0?(SE_TIMEOUT_NUM - 1):(sys->se_timeout - 1));
000c66  f8940028          LDRB     r0,[r4,#0x28]
000c6a  b908              CBNZ     r0,|L1.3184|
000c6c  2004              MOVS     r0,#4
000c6e  e002              B        |L1.3190|
                  |L1.3184|
000c70  f8940028          LDRB     r0,[r4,#0x28]
000c74  1e40              SUBS     r0,r0,#1
                  |L1.3190|
000c76  f8840028          STRB     r0,[r4,#0x28]
;;;568    	
;;;569    	if(sys->method == AUDIO){
000c7a  7ce0              LDRB     r0,[r4,#0x13]
000c7c  2801              CMP      r0,#1
000c7e  d102              BNE      |L1.3206|
;;;570    		update_detect_state(DETECT_AUDIO);
000c80  2000              MOVS     r0,#0
000c82  f7fffffe          BL       update_detect_state
                  |L1.3206|
;;;571    	}
;;;572    	
;;;573    	sys_untimeout(sys_database0_update_later, NULL);
000c86  2100              MOVS     r1,#0
000c88  4813              LDR      r0,|L1.3288|
000c8a  f7fffffe          BL       sys_untimeout
;;;574    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000c8e  2200              MOVS     r2,#0
000c90  4911              LDR      r1,|L1.3288|
000c92  20c8              MOVS     r0,#0xc8
000c94  f7fffffe          BL       sys_timeout
;;;575    }
000c98  bd10              POP      {r4,pc}
;;;576    
                          ENDP

                  sense_off_next PROC
;;;577    static void sense_off_next(sys_state_t *sys)
000c9a  b510              PUSH     {r4,lr}
;;;578    {
000c9c  4604              MOV      r4,r0
;;;579    	 sys->se_timeout = (sense_timeout_t)((sys->se_timeout + 1) % SE_TIMEOUT_NUM);
000c9e  f8940028          LDRB     r0,[r4,#0x28]
000ca2  1c40              ADDS     r0,r0,#1
000ca4  2105              MOVS     r1,#5
000ca6  fb90f2f1          SDIV     r2,r0,r1
000caa  fb010012          MLS      r0,r1,r2,r0
000cae  f8840028          STRB     r0,[r4,#0x28]
;;;580    	
;;;581    	if(sys->method == AUDIO){
000cb2  7ce0              LDRB     r0,[r4,#0x13]
000cb4  2801              CMP      r0,#1
000cb6  d102              BNE      |L1.3262|
;;;582    		update_detect_state(DETECT_AUDIO);
000cb8  2000              MOVS     r0,#0
000cba  f7fffffe          BL       update_detect_state
                  |L1.3262|
;;;583    	}
;;;584    	
;;;585    	sys_untimeout(sys_database0_update_later, NULL);
000cbe  2100              MOVS     r1,#0
000cc0  4805              LDR      r0,|L1.3288|
000cc2  f7fffffe          BL       sys_untimeout
;;;586    	sys_timeout(DATABASE_UPDATE_TIMEOUT, sys_database0_update_later, NULL);
000cc6  2200              MOVS     r2,#0
000cc8  4903              LDR      r1,|L1.3288|
000cca  20c8              MOVS     r0,#0xc8
000ccc  f7fffffe          BL       sys_timeout
;;;587    }
000cd0  bd10              POP      {r4,pc}
000cd2  0000              DCW      0x0000
                  |L1.3284|
                          DCD      sys_database1_update_later
                  |L1.3288|
                          DCD      sys_database0_update_later
                          ENDP

                  factory_sub_select_next PROC
;;;588    
;;;589    static void factory_sub_select_next(sys_state_t *sys)
000cdc  f8901052          LDRB     r1,[r0,#0x52]
;;;590    {
;;;591    	 sys->temp_sub_model = (sub_model_t)((sys->temp_sub_model + 1) % SUB_MODEL_NUM);  
000ce0  1c49              ADDS     r1,r1,#1
000ce2  220d              MOVS     r2,#0xd
000ce4  fb91f3f2          SDIV     r3,r1,r2
000ce8  fb021113          MLS      r1,r2,r3,r1
000cec  f8801052          STRB     r1,[r0,#0x52]
;;;592    }
000cf0  4770              BX       lr
;;;593    
                          ENDP

                  factory_sub_select_prev PROC
;;;594    static void factory_sub_select_prev(sys_state_t *sys)
000cf2  f8901052          LDRB     r1,[r0,#0x52]
;;;595    {
;;;596    	 sys->temp_sub_model = (sub_model_t)(sys->temp_sub_model == 0? (SUB_MODEL_NUM - 1):(sys->temp_sub_model - 1));
000cf6  b909              CBNZ     r1,|L1.3324|
000cf8  210c              MOVS     r1,#0xc
000cfa  e002              B        |L1.3330|
                  |L1.3324|
000cfc  f8901052          LDRB     r1,[r0,#0x52]
000d00  1e49              SUBS     r1,r1,#1
                  |L1.3330|
000d02  f8801052          STRB     r1,[r0,#0x52]
;;;597    }
000d06  4770              BX       lr
;;;598    
                          ENDP

                  key_left_handler PROC
;;;599    static void key_left_handler(sys_state_t *sys)
000d08  b510              PUSH     {r4,lr}
;;;600    {
000d0a  4604              MOV      r4,r0
;;;601    	
;;;602    	CHECK_AND_CLEAR_CODE();
000d0c  bf00              NOP      
000d0e  48fc              LDR      r0,|L1.4352|
000d10  6800              LDR      r0,[r0,#0]  ; cur_menu
000d12  7800              LDRB     r0,[r0,#0]
000d14  2807              CMP      r0,#7
000d16  d00b              BEQ      |L1.3376|
000d18  48f9              LDR      r0,|L1.4352|
000d1a  6800              LDR      r0,[r0,#0]  ; cur_menu
000d1c  7800              LDRB     r0,[r0,#0]
000d1e  2808              CMP      r0,#8
000d20  d006              BEQ      |L1.3376|
000d22  48f8              LDR      r0,|L1.4356|
000d24  2100              MOVS     r1,#0
000d26  8001              STRH     r1,[r0,#0]
000d28  7081              STRB     r1,[r0,#2]
000d2a  2000              MOVS     r0,#0
000d2c  f8840048          STRB     r0,[r4,#0x48]
                  |L1.3376|
000d30  bf00              NOP      
;;;603    	
;;;604    	switch(cur_menu->id){
000d32  48f3              LDR      r0,|L1.4352|
000d34  6800              LDR      r0,[r0,#0]  ; cur_menu
000d36  7800              LDRB     r0,[r0,#0]
000d38  2816              CMP      r0,#0x16
000d3a  d25a              BCS      |L1.3570|
000d3c  e8dff000          TBB      [pc,r0]
000d40  5955590b          DCB      0x59,0x55,0x59,0x0b
000d44  0f13171c          DCB      0x0f,0x13,0x17,0x1c
000d48  1b212529          DCB      0x1b,0x21,0x25,0x29
000d4c  2d313539          DCB      0x2d,0x31,0x35,0x39
000d50  413d4d51          DCB      0x41,0x3d,0x4d,0x51
000d54  4549              DCB      0x45,0x49
;;;605    		case VOLUME_MENU:
;;;606    			volume_decrease_handler(sys);
000d56  4620              MOV      r0,r4
000d58  f7fffffe          BL       volume_decrease_handler
;;;607    			break;
000d5c  e04a              B        |L1.3572|
;;;608    		
;;;609    		case SOURCE_MENU:
;;;610    			source_prev_handler(sys);
000d5e  4620              MOV      r0,r4
000d60  f7fffffe          BL       source_prev_handler
;;;611    			break;
000d64  e046              B        |L1.3572|
;;;612    		
;;;613    		case PRESET_MENU:
;;;614    			preset_prev_handler(sys);
000d66  4620              MOV      r0,r4
000d68  f7fffffe          BL       preset_prev_handler
;;;615    			break;
000d6c  e042              B        |L1.3572|
;;;616    		
;;;617    		case BRIGHTLESS_MENU:
;;;618    			bright_prev_handler(sys);
000d6e  4620              MOV      r0,r4
000d70  f7fffffe          BL       bright_prev_handler
;;;619    			break;
000d74  e03e              B        |L1.3572|
;;;620    		
;;;621    		case IP_ADDRESS_MENU:
;;;622    		case INSTALL_MENU:
000d76  bf00              NOP      
;;;623    			load_code(sys, '<');
000d78  213c              MOVS     r1,#0x3c
000d7a  4620              MOV      r0,r4
000d7c  f7fffffe          BL       load_code
;;;624    			break;
000d80  e038              B        |L1.3572|
;;;625    		
;;;626    		case SUB_MODEL_MENU:
;;;627    			sub_model_prev_handler(sys);
000d82  4620              MOV      r0,r4
000d84  f7fffffe          BL       sub_model_prev_handler
;;;628    			break;
000d88  e034              B        |L1.3572|
;;;629    		
;;;630    		case INPUT_GAIN_MENU:
;;;631    			input_gain_decrease_handler(sys);
000d8a  4620              MOV      r0,r4
000d8c  f7fffffe          BL       input_gain_decrease_handler
;;;632    			break;
000d90  e030              B        |L1.3572|
;;;633    		
;;;634    		case PHRASE_MENU:
;;;635    			phrase_change(sys);
000d92  4620              MOV      r0,r4
000d94  f7fffffe          BL       phrase_change
;;;636    			break;
000d98  e02c              B        |L1.3572|
;;;637    		
;;;638    		case SUB_LOWPASS_MENU:
;;;639    			sub_lowpass_decrease(sys);
000d9a  4620              MOV      r0,r4
000d9c  f7fffffe          BL       sub_lowpass_decrease
;;;640    			break;
000da0  e028              B        |L1.3572|
;;;641    		
;;;642    		case SUB_HIGHPASS_MENU:
;;;643    			sub_highpass_decrease(sys);
000da2  4620              MOV      r0,r4
000da4  f7fffffe          BL       sub_highpass_decrease
;;;644    			break;
000da8  e024              B        |L1.3572|
;;;645    		
;;;646    		case LINEOUT_HIGHPASS_MENU:
;;;647    			lineout_highpass_decrease(sys);
000daa  4620              MOV      r0,r4
000dac  f7fffffe          BL       lineout_highpass_decrease
;;;648    			break;
000db0  e020              B        |L1.3572|
;;;649    		
;;;650    		case DELAY_ROUTER_MENU:
;;;651    			delay_switch_to_prev(sys);
000db2  4620              MOV      r0,r4
000db4  f7fffffe          BL       delay_switch_to_prev
;;;652    			break;
000db8  e01c              B        |L1.3572|
;;;653    		
;;;654    		case POWER_ON_METHOD_MENU:
;;;655    			power_on_method_switch_to_prev(sys);
000dba  4620              MOV      r0,r4
000dbc  f7fffffe          BL       power_on_method_switch_to_prev
;;;656    			break;
000dc0  e018              B        |L1.3572|
;;;657    		
;;;658    		case DELAY_TIME_MENU:
;;;659    			delay_time_decrease(sys);
000dc2  4620              MOV      r0,r4
000dc4  f7fffffe          BL       delay_time_decrease
;;;660    			break;
000dc8  e014              B        |L1.3572|
;;;661    		
;;;662    		case RESET_MENU:
;;;663    			change_reset_state(sys);
000dca  4620              MOV      r0,r4
000dcc  f7fffffe          BL       change_reset_state
;;;664    			break;
000dd0  e010              B        |L1.3572|
;;;665    		
;;;666    		case RESET_CONFIRM_MENU:
;;;667    			change_reset_confirm_state(sys);
000dd2  4620              MOV      r0,r4
000dd4  f7fffffe          BL       change_reset_confirm_state
;;;668    			break;
000dd8  e00c              B        |L1.3572|
;;;669    		
;;;670    		case SENSE_THRESHOLD:
;;;671    			sense_threshold_prev(sys);
000dda  4620              MOV      r0,r4
000ddc  f7fffffe          BL       sense_threshold_prev
;;;672    			break;
000de0  e008              B        |L1.3572|
;;;673    		
;;;674    		case SENSE_OFF_TIME:
;;;675    			sense_off_prev(sys);
000de2  4620              MOV      r0,r4
000de4  f7fffffe          BL       sense_off_prev
;;;676    			break;
000de8  e004              B        |L1.3572|
;;;677    		
;;;678    		case FACTORY_SUB_SELECT_MENU:
;;;679    			factory_sub_select_prev(sys);
000dea  4620              MOV      r0,r4
000dec  f7fffffe          BL       factory_sub_select_prev
;;;680    		  break;
000df0  e000              B        |L1.3572|
                  |L1.3570|
;;;681    		
;;;682    		default:
;;;683    			break;
000df2  bf00              NOP      
                  |L1.3572|
000df4  bf00              NOP                            ;607
;;;684    	}
;;;685    	
;;;686      dis_send_msg(DIS_UPDATE, MENU_NUM);
000df6  2116              MOVS     r1,#0x16
000df8  2001              MOVS     r0,#1
000dfa  f7fffffe          BL       dis_send_msg
;;;687    }
000dfe  bd10              POP      {r4,pc}
;;;688    
                          ENDP

                  key_right_handler PROC
;;;689    static void key_right_handler(sys_state_t *sys)
000e00  b510              PUSH     {r4,lr}
;;;690    {
000e02  4604              MOV      r4,r0
;;;691      CHECK_AND_CLEAR_CODE();
000e04  bf00              NOP      
000e06  48be              LDR      r0,|L1.4352|
000e08  6800              LDR      r0,[r0,#0]  ; cur_menu
000e0a  7800              LDRB     r0,[r0,#0]
000e0c  2807              CMP      r0,#7
000e0e  d00b              BEQ      |L1.3624|
000e10  48bb              LDR      r0,|L1.4352|
000e12  6800              LDR      r0,[r0,#0]  ; cur_menu
000e14  7800              LDRB     r0,[r0,#0]
000e16  2808              CMP      r0,#8
000e18  d006              BEQ      |L1.3624|
000e1a  48ba              LDR      r0,|L1.4356|
000e1c  2100              MOVS     r1,#0
000e1e  8001              STRH     r1,[r0,#0]
000e20  7081              STRB     r1,[r0,#2]
000e22  2000              MOVS     r0,#0
000e24  f8840048          STRB     r0,[r4,#0x48]
                  |L1.3624|
000e28  bf00              NOP      
;;;692    	
;;;693    	switch(cur_menu->id){
000e2a  48b5              LDR      r0,|L1.4352|
000e2c  6800              LDR      r0,[r0,#0]  ; cur_menu
000e2e  7800              LDRB     r0,[r0,#0]
000e30  2816              CMP      r0,#0x16
000e32  d25a              BCS      |L1.3818|
000e34  e8dff000          TBB      [pc,r0]
000e38  5955590b          DCB      0x59,0x55,0x59,0x0b
000e3c  0f13171c          DCB      0x0f,0x13,0x17,0x1c
000e40  1b212529          DCB      0x1b,0x21,0x25,0x29
000e44  2d313539          DCB      0x2d,0x31,0x35,0x39
000e48  413d4d51          DCB      0x41,0x3d,0x4d,0x51
000e4c  4549              DCB      0x45,0x49
;;;694    		case VOLUME_MENU:
;;;695    			volume_increase_handler(sys);
000e4e  4620              MOV      r0,r4
000e50  f7fffffe          BL       volume_increase_handler
;;;696    			break;
000e54  e04a              B        |L1.3820|
;;;697    		
;;;698    		case SOURCE_MENU:
;;;699    			source_next_handler(sys);
000e56  4620              MOV      r0,r4
000e58  f7fffffe          BL       source_next_handler
;;;700    			break;
000e5c  e046              B        |L1.3820|
;;;701    		
;;;702    		case PRESET_MENU:
;;;703    			preset_next_handler(sys);
000e5e  4620              MOV      r0,r4
000e60  f7fffffe          BL       preset_next_handler
;;;704    			break;
000e64  e042              B        |L1.3820|
;;;705    		
;;;706    		case BRIGHTLESS_MENU:
;;;707    			bright_next_handler(sys);
000e66  4620              MOV      r0,r4
000e68  f7fffffe          BL       bright_next_handler
;;;708    			break;
000e6c  e03e              B        |L1.3820|
;;;709    		
;;;710    		case IP_ADDRESS_MENU:
;;;711    		case INSTALL_MENU:
000e6e  bf00              NOP      
;;;712    			load_code(sys, '>');
000e70  213e              MOVS     r1,#0x3e
000e72  4620              MOV      r0,r4
000e74  f7fffffe          BL       load_code
;;;713    			break;
000e78  e038              B        |L1.3820|
;;;714    		
;;;715    		case SUB_MODEL_MENU:
;;;716    			sub_model_next_handler(sys);
000e7a  4620              MOV      r0,r4
000e7c  f7fffffe          BL       sub_model_next_handler
;;;717    			break;
000e80  e034              B        |L1.3820|
;;;718    		
;;;719    		case INPUT_GAIN_MENU:
;;;720    			input_gain_increase_handler(sys);
000e82  4620              MOV      r0,r4
000e84  f7fffffe          BL       input_gain_increase_handler
;;;721    			break;
000e88  e030              B        |L1.3820|
;;;722    		
;;;723    		case PHRASE_MENU:
;;;724    			phrase_change(sys);
000e8a  4620              MOV      r0,r4
000e8c  f7fffffe          BL       phrase_change
;;;725    			break;
000e90  e02c              B        |L1.3820|
;;;726    		
;;;727    		case SUB_LOWPASS_MENU:
;;;728    			sub_lowpass_increase(sys);
000e92  4620              MOV      r0,r4
000e94  f7fffffe          BL       sub_lowpass_increase
;;;729    			break;
000e98  e028              B        |L1.3820|
;;;730    		
;;;731    		case SUB_HIGHPASS_MENU:
;;;732    			sub_highpass_increase(sys);
000e9a  4620              MOV      r0,r4
000e9c  f7fffffe          BL       sub_highpass_increase
;;;733    			break;
000ea0  e024              B        |L1.3820|
;;;734    		
;;;735    		case LINEOUT_HIGHPASS_MENU:
;;;736    			lineout_highpass_increase(sys);
000ea2  4620              MOV      r0,r4
000ea4  f7fffffe          BL       lineout_highpass_increase
;;;737    			break;
000ea8  e020              B        |L1.3820|
;;;738    		
;;;739    		case DELAY_ROUTER_MENU:
;;;740    			delay_switch_to_next(sys);
000eaa  4620              MOV      r0,r4
000eac  f7fffffe          BL       delay_switch_to_next
;;;741    			break;
000eb0  e01c              B        |L1.3820|
;;;742    		
;;;743    		case POWER_ON_METHOD_MENU:
;;;744    			power_on_method_switch_to_next(sys);
000eb2  4620              MOV      r0,r4
000eb4  f7fffffe          BL       power_on_method_switch_to_next
;;;745    			break;
000eb8  e018              B        |L1.3820|
;;;746    		
;;;747    		case DELAY_TIME_MENU:
;;;748    			delay_time_increase(sys);
000eba  4620              MOV      r0,r4
000ebc  f7fffffe          BL       delay_time_increase
;;;749    			break;
000ec0  e014              B        |L1.3820|
;;;750    		
;;;751    		case RESET_MENU:
;;;752    			change_reset_state(sys);
000ec2  4620              MOV      r0,r4
000ec4  f7fffffe          BL       change_reset_state
;;;753    			break;
000ec8  e010              B        |L1.3820|
;;;754    		
;;;755    		case RESET_CONFIRM_MENU:
;;;756    			change_reset_confirm_state(sys);
000eca  4620              MOV      r0,r4
000ecc  f7fffffe          BL       change_reset_confirm_state
;;;757    			break;
000ed0  e00c              B        |L1.3820|
;;;758    		
;;;759    		case SENSE_THRESHOLD:
;;;760    			sense_threshold_next(sys);
000ed2  4620              MOV      r0,r4
000ed4  f7fffffe          BL       sense_threshold_next
;;;761    			break;
000ed8  e008              B        |L1.3820|
;;;762    		
;;;763    		case SENSE_OFF_TIME:
;;;764    			sense_off_next(sys);
000eda  4620              MOV      r0,r4
000edc  f7fffffe          BL       sense_off_next
;;;765    			break;
000ee0  e004              B        |L1.3820|
;;;766    		
;;;767    		case FACTORY_SUB_SELECT_MENU:
;;;768    			factory_sub_select_next(sys);
000ee2  4620              MOV      r0,r4
000ee4  f7fffffe          BL       factory_sub_select_next
;;;769    			break;
000ee8  e000              B        |L1.3820|
                  |L1.3818|
;;;770    		
;;;771    		default:
;;;772    			break;
000eea  bf00              NOP      
                  |L1.3820|
000eec  bf00              NOP                            ;696
;;;773    	}
;;;774    	
;;;775      dis_send_msg(DIS_UPDATE, MENU_NUM);
000eee  2116              MOVS     r1,#0x16
000ef0  2001              MOVS     r0,#1
000ef2  f7fffffe          BL       dis_send_msg
;;;776    }
000ef6  bd10              POP      {r4,pc}
;;;777    
                          ENDP

                  vol_menu_timeout_handler PROC
;;;876    
;;;877    static void vol_menu_timeout_handler(void *arg)
000ef8  b510              PUSH     {r4,lr}
;;;878    {
000efa  4604              MOV      r4,r0
;;;879    	 dis_send_msg(DIS_UPDATE, MENU_NUM);
000efc  2116              MOVS     r1,#0x16
000efe  2001              MOVS     r0,#1
000f00  f7fffffe          BL       dis_send_msg
;;;880    }
000f04  bd10              POP      {r4,pc}
;;;881    
                          ENDP

                  show_version_infor PROC
;;;777    
;;;778    static void show_version_infor(void)
000f06  b510              PUSH     {r4,lr}
;;;779    {
;;;780    	dis_send_msg(DIS_JUMP, DIS_VERSION_INFOR);
000f08  211e              MOVS     r1,#0x1e
000f0a  2002              MOVS     r0,#2
000f0c  f7fffffe          BL       dis_send_msg
;;;781    	sys_untimeout(vol_menu_timeout_handler, NULL);
000f10  2100              MOVS     r1,#0
000f12  487d              LDR      r0,|L1.4360|
000f14  f7fffffe          BL       sys_untimeout
;;;782    	sys_timeout(VOL_MENU_3S_TIMEOUT, vol_menu_timeout_handler, NULL);
000f18  2200              MOVS     r2,#0
000f1a  497b              LDR      r1,|L1.4360|
000f1c  f64030b8          MOV      r0,#0xbb8
000f20  f7fffffe          BL       sys_timeout
;;;783    }
000f24  bd10              POP      {r4,pc}
;;;784    
                          ENDP

                  dis_timeout_handler PROC
;;;881    
;;;882    void dis_timeout_handler(void *arg)
000f26  b510              PUSH     {r4,lr}
;;;883    {
000f28  4604              MOV      r4,r0
;;;884    	if(cur_menu->id < IP_ADDRESS_MENU && cur_menu->id >= VOLUME_MENU){
000f2a  4875              LDR      r0,|L1.4352|
000f2c  6800              LDR      r0,[r0,#0]  ; cur_menu
000f2e  7800              LDRB     r0,[r0,#0]
000f30  2808              CMP      r0,#8
000f32  da13              BGE      |L1.3932|
000f34  4872              LDR      r0,|L1.4352|
000f36  6800              LDR      r0,[r0,#0]  ; cur_menu
000f38  7800              LDRB     r0,[r0,#0]
000f3a  2803              CMP      r0,#3
000f3c  db0e              BLT      |L1.3932|
;;;885    		gSystem_t->is_dis_timeout = true;
000f3e  2001              MOVS     r0,#1
000f40  4972              LDR      r1,|L1.4364|
000f42  6809              LDR      r1,[r1,#0]  ; gSystem_t
000f44  f8810051          STRB     r0,[r1,#0x51]
;;;886    		bsp_lcd_bright_control(0);
000f48  2000              MOVS     r0,#0
000f4a  f7fffffe          BL       bsp_lcd_bright_control
;;;887    		display_menu_jump(VOLUME_MENU);
000f4e  2003              MOVS     r0,#3
000f50  f7fffffe          BL       display_menu_jump
;;;888    		dis_send_msg(DIS_UPDATE, MENU_NUM);
000f54  2116              MOVS     r1,#0x16
000f56  2001              MOVS     r0,#1
000f58  f7fffffe          BL       dis_send_msg
                  |L1.3932|
;;;889    	}
;;;890    }
000f5c  bd10              POP      {r4,pc}
;;;891    
                          ENDP

                  keyboard_msg_handler PROC
;;;784    
;;;785    void keyboard_msg_handler(sys_state_t *sys, key_value_t key)
000f5e  b570              PUSH     {r4-r6,lr}
;;;786    {
000f60  4604              MOV      r4,r0
000f62  460d              MOV      r5,r1
;;;787    	if(sys->status != STATUS_WORKING){
000f64  f8940053          LDRB     r0,[r4,#0x53]
000f68  2802              CMP      r0,#2
000f6a  d004              BEQ      |L1.3958|
;;;788    		SYS_TRACE("get invalid key %d\r\n", key);
000f6c  4629              MOV      r1,r5
000f6e  a068              ADR      r0,|L1.4368|
000f70  f7fffffe          BL       s_printf
                  |L1.3956|
;;;789    		return;
;;;790    	}
;;;791    	
;;;792    	if(sys->is_dis_timeout == true){
;;;793    		sys_lcd_bright_change(gSystem_t);
;;;794    		sys->is_dis_timeout = false;
;;;795    		sys_untimeout(dis_timeout_handler, NULL);
;;;796    	  sys_timeout(DIS_TIMEOUT, dis_timeout_handler, NULL);
;;;797    		return;
;;;798    	}
;;;799    	
;;;800    	if(sys->protect_bitmap != 0){
;;;801    		SYS_TRACE("in protection\r\n");
;;;802    		return;
;;;803    	}
;;;804    	
;;;805    	 switch(key){
;;;806    		 case KEY_UP:
;;;807    			 key_up_handler(sys);
;;;808    			 break;
;;;809    		 
;;;810    		 case KEY_DOWN:
;;;811    		   key_down_handler(sys);
;;;812    			 break;
;;;813    		 
;;;814    		 case KEY_LEFT:
;;;815    		   key_left_handler(sys);
;;;816    			 break;
;;;817    		 
;;;818    		 case KEY_RIGHT:
;;;819    		   key_right_handler(sys);
;;;820    			 break;
;;;821    		 
;;;822    		 case KEY_ENTER:
;;;823    		   key_enter_handler(sys);
;;;824    			 break;
;;;825    		 
;;;826    		 case KEY_BACK:
;;;827    		   key_back_handler(sys);
;;;828    			 break;
;;;829    		 
;;;830    		 case KEY_LEFT_LONG:
;;;831    			 if(IS_RIGHT_KEY_DOWN){
;;;832    				 vTaskDelay(3000/portTICK_RATE_MS);
;;;833    				 if(IS_RIGHT_KEY_DOWN){
;;;834    					 SYS_TRACE("WILL JUMP TO IP_ADDRESS_MENU");
;;;835    					 display_menu_jump(IP_ADDRESS_MENU);
;;;836    					 dis_send_msg(DIS_UPDATE, MENU_NUM);
;;;837    				 }
;;;838    			 }else{
;;;839    					while(IS_LEFT_KEY_DOWN){
;;;840    						key_left_handler(sys);
;;;841    						vTaskDelay(100/portTICK_RATE_MS);
;;;842    				}
;;;843    			}
;;;844    			 break;
;;;845    				
;;;846    		 case KEY_RIGHT_LONG:
;;;847    			 if(IS_LEFT_KEY_DOWN){
;;;848    				 vTaskDelay(3000/portTICK_RATE_MS);
;;;849    				 if(IS_LEFT_KEY_DOWN){
;;;850    					 SYS_TRACE("WILL JUMP TO IP_ADDRESS_MENU");
;;;851    					 display_menu_jump(IP_ADDRESS_MENU);
;;;852    					 dis_send_msg(DIS_UPDATE, MENU_NUM);
;;;853    				 }
;;;854    			 }else{
;;;855    			    while(IS_RIGHT_KEY_DOWN){
;;;856    						key_right_handler(sys);
;;;857    						vTaskDelay(100/portTICK_RATE_MS);
;;;858    			 }
;;;859    		 }
;;;860    			 break;
;;;861    		 
;;;862    		 case KEY_DOWN_LONG:
;;;863    			 if(IS_UP_KEY_DOWN){
;;;864    				 show_version_infor();
;;;865    			 }
;;;866    			 break;
;;;867    		 
;;;868    		 default:
;;;869    			 break;
;;;870    	 }
;;;871    	
;;;872    	sys_untimeout(dis_timeout_handler, NULL);
;;;873    	 
;;;874    	sys_timeout(DIS_TIMEOUT, dis_timeout_handler, NULL);
;;;875    }
000f74  bd70              POP      {r4-r6,pc}
                  |L1.3958|
000f76  f8940051          LDRB     r0,[r4,#0x51]         ;792
000f7a  2801              CMP      r0,#1                 ;792
000f7c  d113              BNE      |L1.4006|
000f7e  4863              LDR      r0,|L1.4364|
000f80  6800              LDR      r0,[r0,#0]            ;793  ; gSystem_t
000f82  f7fffffe          BL       sys_lcd_bright_change
000f86  2000              MOVS     r0,#0                 ;794
000f88  f8840051          STRB     r0,[r4,#0x51]         ;794
000f8c  2100              MOVS     r1,#0                 ;795
000f8e  f2af0069          ADR      r0,dis_timeout_handler + 1
000f92  f7fffffe          BL       sys_untimeout
000f96  2200              MOVS     r2,#0                 ;796
000f98  f2af0175          ADR      r1,dis_timeout_handler + 1
000f9c  f6446020          MOV      r0,#0x4e20            ;796
000fa0  f7fffffe          BL       sys_timeout
000fa4  e7e6              B        |L1.3956|
                  |L1.4006|
000fa6  f894004a          LDRB     r0,[r4,#0x4a]         ;800
000faa  b118              CBZ      r0,|L1.4020|
000fac  a05e              ADR      r0,|L1.4392|
000fae  f7fffffe          BL       s_printf
000fb2  e7df              B        |L1.3956|
                  |L1.4020|
000fb4  2d0b              CMP      r5,#0xb               ;805
000fb6  d273              BCS      |L1.4256|
000fb8  e8dff005          TBB      [pc,r5]               ;805
000fbc  06910a85          DCB      0x06,0x91,0x0a,0x85
000fc0  0e1e1251          DCB      0x0e,0x1e,0x12,0x51
000fc4  16911a00          DCB      0x16,0x91,0x1a,0x00
000fc8  4620              MOV      r0,r4                 ;807
000fca  f7fffffe          BL       key_up_handler
000fce  e087              B        |L1.4320|
000fd0  4620              MOV      r0,r4                 ;811
000fd2  f7fffffe          BL       key_down_handler
000fd6  e083              B        |L1.4320|
000fd8  4620              MOV      r0,r4                 ;815
000fda  f7fffffe          BL       key_left_handler
000fde  e07f              B        |L1.4320|
000fe0  4620              MOV      r0,r4                 ;819
000fe2  f7fffffe          BL       key_right_handler
000fe6  e07b              B        |L1.4320|
000fe8  4620              MOV      r0,r4                 ;823
000fea  f7fffffe          BL       key_enter_handler
000fee  e077              B        |L1.4320|
000ff0  4620              MOV      r0,r4                 ;827
000ff2  f7fffffe          BL       key_back_handler
000ff6  e073              B        |L1.4320|
000ff8  2102              MOVS     r1,#2                 ;831
000ffa  484f              LDR      r0,|L1.4408|
000ffc  f7fffffe          BL       GPIO_ReadSinglePin
001000  b108              CBZ      r0,|L1.4102|
001002  2001              MOVS     r0,#1                 ;831
001004  e000              B        |L1.4104|
                  |L1.4102|
001006  2000              MOVS     r0,#0                 ;831
                  |L1.4104|
001008  b1b8              CBZ      r0,|L1.4154|
00100a  f64030b8          MOV      r0,#0xbb8             ;832
00100e  f7fffffe          BL       vTaskDelay
001012  2102              MOVS     r1,#2                 ;833
001014  4848              LDR      r0,|L1.4408|
001016  f7fffffe          BL       GPIO_ReadSinglePin
00101a  b108              CBZ      r0,|L1.4128|
00101c  2001              MOVS     r0,#1                 ;833
00101e  e000              B        |L1.4130|
                  |L1.4128|
001020  2000              MOVS     r0,#0                 ;833
                  |L1.4130|
001022  b1d8              CBZ      r0,|L1.4188|
001024  a045              ADR      r0,|L1.4412|
001026  f7fffffe          BL       s_printf
00102a  2008              MOVS     r0,#8                 ;835
00102c  f7fffffe          BL       display_menu_jump
001030  2116              MOVS     r1,#0x16              ;836
001032  2001              MOVS     r0,#1                 ;836
001034  f7fffffe          BL       dis_send_msg
001038  e010              B        |L1.4188|
                  |L1.4154|
00103a  e005              B        |L1.4168|
                  |L1.4156|
00103c  4620              MOV      r0,r4                 ;840
00103e  f7fffffe          BL       key_left_handler
001042  2064              MOVS     r0,#0x64              ;841
001044  f7fffffe          BL       vTaskDelay
                  |L1.4168|
001048  2101              MOVS     r1,#1                 ;839
00104a  483b              LDR      r0,|L1.4408|
00104c  f7fffffe          BL       GPIO_ReadSinglePin
001050  b108              CBZ      r0,|L1.4182|
001052  2001              MOVS     r0,#1                 ;839
001054  e000              B        |L1.4184|
                  |L1.4182|
001056  2000              MOVS     r0,#0                 ;839
                  |L1.4184|
001058  2800              CMP      r0,#0                 ;839
00105a  d1ef              BNE      |L1.4156|
                  |L1.4188|
00105c  e040              B        |L1.4320|
00105e  2101              MOVS     r1,#1                 ;847
001060  4835              LDR      r0,|L1.4408|
001062  f7fffffe          BL       GPIO_ReadSinglePin
001066  b108              CBZ      r0,|L1.4204|
001068  2001              MOVS     r0,#1                 ;847
00106a  e000              B        |L1.4206|
                  |L1.4204|
00106c  2000              MOVS     r0,#0                 ;847
                  |L1.4206|
00106e  b1c0              CBZ      r0,|L1.4258|
001070  f64030b8          MOV      r0,#0xbb8             ;848
001074  f7fffffe          BL       vTaskDelay
001078  2101              MOVS     r1,#1                 ;849
00107a  482f              LDR      r0,|L1.4408|
00107c  f7fffffe          BL       GPIO_ReadSinglePin
001080  b108              CBZ      r0,|L1.4230|
001082  2001              MOVS     r0,#1                 ;849
001084  e000              B        |L1.4232|
                  |L1.4230|
001086  2000              MOVS     r0,#0                 ;849
                  |L1.4232|
001088  b1e0              CBZ      r0,|L1.4292|
00108a  a02c              ADR      r0,|L1.4412|
00108c  f7fffffe          BL       s_printf
001090  2008              MOVS     r0,#8                 ;851
001092  f7fffffe          BL       display_menu_jump
001096  2116              MOVS     r1,#0x16              ;852
001098  2001              MOVS     r0,#1                 ;852
00109a  f7fffffe          BL       dis_send_msg
00109e  e011              B        |L1.4292|
                  |L1.4256|
0010a0  e01d              B        |L1.4318|
                  |L1.4258|
0010a2  e005              B        |L1.4272|
                  |L1.4260|
0010a4  4620              MOV      r0,r4                 ;856
0010a6  f7fffffe          BL       key_right_handler
0010aa  2064              MOVS     r0,#0x64              ;857
0010ac  f7fffffe          BL       vTaskDelay
                  |L1.4272|
0010b0  2102              MOVS     r1,#2                 ;855
0010b2  4821              LDR      r0,|L1.4408|
0010b4  f7fffffe          BL       GPIO_ReadSinglePin
0010b8  b108              CBZ      r0,|L1.4286|
0010ba  2001              MOVS     r0,#1                 ;855
0010bc  e000              B        |L1.4288|
                  |L1.4286|
0010be  2000              MOVS     r0,#0                 ;855
                  |L1.4288|
0010c0  2800              CMP      r0,#0                 ;855
0010c2  d1ef              BNE      |L1.4260|
                  |L1.4292|
0010c4  e00c              B        |L1.4320|
0010c6  2104              MOVS     r1,#4                 ;863
0010c8  481b              LDR      r0,|L1.4408|
0010ca  f7fffffe          BL       GPIO_ReadSinglePin
0010ce  b108              CBZ      r0,|L1.4308|
0010d0  2001              MOVS     r0,#1                 ;863
0010d2  e000              B        |L1.4310|
                  |L1.4308|
0010d4  2000              MOVS     r0,#0                 ;863
                  |L1.4310|
0010d6  b108              CBZ      r0,|L1.4316|
0010d8  f7fffffe          BL       show_version_infor
                  |L1.4316|
0010dc  e000              B        |L1.4320|
                  |L1.4318|
0010de  bf00              NOP                            ;869
                  |L1.4320|
0010e0  bf00              NOP                            ;808
0010e2  2100              MOVS     r1,#0                 ;872
0010e4  f2af10c1          ADR      r0,dis_timeout_handler + 1
0010e8  f7fffffe          BL       sys_untimeout
0010ec  2200              MOVS     r2,#0                 ;874
0010ee  f2af11c9          ADR      r1,dis_timeout_handler + 1
0010f2  f6446020          MOV      r0,#0x4e20            ;874
0010f6  f7fffffe          BL       sys_timeout
0010fa  bf00              NOP      
0010fc  e73a              B        |L1.3956|
0010fe  0000              DCW      0x0000
                  |L1.4352|
                          DCD      cur_menu
                  |L1.4356|
                          DCD      gCode
                  |L1.4360|
                          DCD      vol_menu_timeout_handler
                  |L1.4364|
                          DCD      gSystem_t
                  |L1.4368|
001110  67657420          DCB      "get invalid key %d\r\n",0
001114  696e7661
001118  6c696420
00111c  6b657920
001120  25640d0a
001124  00      
001125  00                DCB      0
001126  00                DCB      0
001127  00                DCB      0
                  |L1.4392|
001128  696e2070          DCB      "in protection\r\n",0
00112c  726f7465
001130  6374696f
001134  6e0d0a00
                  |L1.4408|
                          DCD      0x40061000
                  |L1.4412|
00113c  57494c4c          DCB      "WILL JUMP TO IP_ADDRESS_MENU",0
001140  204a554d
001144  5020544f
001148  2049505f
00114c  41444452
001150  4553535f
001154  4d454e55
001158  00      
001159  00                DCB      0
00115a  00                DCB      0
00115b  00                DCB      0
                          ENDP

                  vol_mute_handler PROC
;;;891    
;;;892    static void vol_mute_handler(sys_state_t *sys)
00115c  b510              PUSH     {r4,lr}
;;;893    {
00115e  4604              MOV      r4,r0
;;;894    	sys->is_mute = (sys->is_mute == true? false:true);
001160  f8940049          LDRB     r0,[r4,#0x49]
001164  2801              CMP      r0,#1
001166  d001              BEQ      |L1.4460|
001168  2001              MOVS     r0,#1
00116a  e000              B        |L1.4462|
                  |L1.4460|
00116c  2000              MOVS     r0,#0
                  |L1.4462|
00116e  f8840049          STRB     r0,[r4,#0x49]
;;;895    	
;;;896    	sys_master_vol_set(sys);
001172  4620              MOV      r0,r4
001174  f7fffffe          BL       sys_master_vol_set
;;;897    	
;;;898    	dis_send_msg(DIS_JUMP, VOLUME_MENU);
001178  2103              MOVS     r1,#3
00117a  2002              MOVS     r0,#2
00117c  f7fffffe          BL       dis_send_msg
;;;899    	sys_untimeout(vol_menu_timeout_handler, NULL);
001180  2100              MOVS     r1,#0
001182  48cb              LDR      r0,|L1.5296|
001184  f7fffffe          BL       sys_untimeout
;;;900    	sys_timeout(VOL_MENU_3S_TIMEOUT, vol_menu_timeout_handler, NULL);
001188  2200              MOVS     r2,#0
00118a  49c9              LDR      r1,|L1.5296|
00118c  f64030b8          MOV      r0,#0xbb8
001190  f7fffffe          BL       sys_timeout
;;;901    }
001194  bd10              POP      {r4,pc}
;;;902    
                          ENDP

                  ir_on_handler PROC
;;;903    static void ir_on_handler(sys_state_t *sys)
001196  b510              PUSH     {r4,lr}
;;;904    { 
001198  4604              MOV      r4,r0
;;;905    	 if(sys->method == IR_IP && (sys->status != STATUS_WORKING && sys->status != STATUS_INITING)){
00119a  7ce0              LDRB     r0,[r4,#0x13]
00119c  2803              CMP      r0,#3
00119e  d10a              BNE      |L1.4534|
0011a0  f8940053          LDRB     r0,[r4,#0x53]
0011a4  2802              CMP      r0,#2
0011a6  d006              BEQ      |L1.4534|
0011a8  f8940053          LDRB     r0,[r4,#0x53]
0011ac  2801              CMP      r0,#1
0011ae  d002              BEQ      |L1.4534|
;;;906    		 sys_power_on_handler(sys);
0011b0  4620              MOV      r0,r4
0011b2  f7fffffe          BL       sys_power_on_handler
                  |L1.4534|
;;;907    	 }
;;;908    }
0011b6  bd10              POP      {r4,pc}
;;;909    
                          ENDP

                  ir_off_handler PROC
;;;910    static void ir_off_handler(sys_state_t *sys)
0011b8  b510              PUSH     {r4,lr}
;;;911    {
0011ba  4604              MOV      r4,r0
;;;912    	 if(sys->method == IR_IP && sys->status != STATUS_STANDBY){
0011bc  7ce0              LDRB     r0,[r4,#0x13]
0011be  2803              CMP      r0,#3
0011c0  d105              BNE      |L1.4558|
0011c2  f8940053          LDRB     r0,[r4,#0x53]
0011c6  b110              CBZ      r0,|L1.4558|
;;;913    		 sys_power_off_handler(sys);
0011c8  4620              MOV      r0,r4
0011ca  f7fffffe          BL       sys_power_off_handler
                  |L1.4558|
;;;914    	 }
;;;915    }
0011ce  bd10              POP      {r4,pc}
;;;916    
                          ENDP

                  ir_preset_select_handler PROC
;;;917    static void ir_preset_select_handler(sys_state_t *sys, preset_t preset)
0011d0  b570              PUSH     {r4-r6,lr}
;;;918    {
0011d2  4604              MOV      r4,r0
0011d4  460d              MOV      r5,r1
;;;919    	 sys->preset = preset;
0011d6  7665              STRB     r5,[r4,#0x19]
;;;920    	
;;;921    	 display_menu_jump(PRESET_MENU);
0011d8  2005              MOVS     r0,#5
0011da  f7fffffe          BL       display_menu_jump
;;;922    	 dis_send_msg(DIS_UPDATE, MENU_NUM);
0011de  2116              MOVS     r1,#0x16
0011e0  2001              MOVS     r0,#1
0011e2  f7fffffe          BL       dis_send_msg
;;;923    	 sys_load_peq(sys);
0011e6  4620              MOV      r0,r4
0011e8  f7fffffe          BL       sys_load_peq
;;;924    	 sys_send_msg(DATABASE_UPDATE_MSG, 0);
0011ec  2100              MOVS     r1,#0
0011ee  2002              MOVS     r0,#2
0011f0  f7fffffe          BL       sys_send_msg
;;;925    }
0011f4  bd70              POP      {r4-r6,pc}
;;;926    
                          ENDP

                  ir_peq_state_control PROC
;;;927    static void ir_peq_state_control(sys_state_t *sys, uint8 state)
0011f6  b570              PUSH     {r4-r6,lr}
;;;928    {
0011f8  4604              MOV      r4,r0
0011fa  460d              MOV      r5,r1
;;;929    	if(ON == state){
0011fc  2d01              CMP      r5,#1
0011fe  d109              BNE      |L1.4628|
;;;930    		if(sys->eq_on_off == 0){
001200  f894002a          LDRB     r0,[r4,#0x2a]
001204  b980              CBNZ     r0,|L1.4648|
;;;931    			sys->eq_on_off = 1;
001206  2001              MOVS     r0,#1
001208  f884002a          STRB     r0,[r4,#0x2a]
;;;932    			sys_eq_state_set(sys);
00120c  4620              MOV      r0,r4
00120e  f7fffffe          BL       sys_eq_state_set
001212  e009              B        |L1.4648|
                  |L1.4628|
;;;933    		}
;;;934    	}else{
;;;935    		if(sys->eq_on_off == 1){
001214  f894002a          LDRB     r0,[r4,#0x2a]
001218  2801              CMP      r0,#1
00121a  d105              BNE      |L1.4648|
;;;936    			sys->eq_on_off = 0;
00121c  2000              MOVS     r0,#0
00121e  f884002a          STRB     r0,[r4,#0x2a]
;;;937    			sys_eq_state_set(sys);
001222  4620              MOV      r0,r4
001224  f7fffffe          BL       sys_eq_state_set
                  |L1.4648|
;;;938    		}
;;;939    	}
;;;940    	
;;;941    	dis_send_msg(DIS_JUMP, DIS_PEQ_STATE);
001228  211d              MOVS     r1,#0x1d
00122a  2002              MOVS     r0,#2
00122c  f7fffffe          BL       dis_send_msg
;;;942    	sys_untimeout(vol_menu_timeout_handler, NULL);
001230  2100              MOVS     r1,#0
001232  489f              LDR      r0,|L1.5296|
001234  f7fffffe          BL       sys_untimeout
;;;943    	sys_timeout(VOL_MENU_3S_TIMEOUT, vol_menu_timeout_handler, NULL);
001238  2200              MOVS     r2,#0
00123a  499d              LDR      r1,|L1.5296|
00123c  f64030b8          MOV      r0,#0xbb8
001240  f7fffffe          BL       sys_timeout
;;;944    }
001244  bd70              POP      {r4-r6,pc}
;;;945    
                          ENDP

                  ir_commond_handler PROC
;;;946    void ir_commond_handler(sys_state_t *sys, ir_commond_t cmd)
001246  b570              PUSH     {r4-r6,lr}
;;;947    {
001248  4605              MOV      r5,r0
00124a  460c              MOV      r4,r1
;;;948    	if(sys == NULL) return;
00124c  b905              CBNZ     r5,|L1.4688|
                  |L1.4686|
;;;949    	
;;;950    	if(cmd != IR_OFF && cmd != IR_ON){
;;;951    		if(sys->is_dis_timeout == true){
;;;952    			sys_lcd_bright_change(gSystem_t);
;;;953    			sys->is_dis_timeout = false;
;;;954    			return;
;;;955    		}
;;;956    	
;;;957    	}
;;;958    	
;;;959    	switch(cmd){
;;;960    		case IR_VOL_UP:
;;;961    			volume_increase_handler(sys);
;;;962    		  dis_send_msg(DIS_JUMP, VOLUME_MENU);
;;;963    		  sys_untimeout(vol_menu_timeout_handler, NULL);
;;;964    		  sys_timeout(VOL_MENU_3S_TIMEOUT, vol_menu_timeout_handler, NULL);
;;;965    			break;
;;;966    		
;;;967    		case IR_VOL_DOWN:
;;;968    			volume_decrease_handler(sys);
;;;969    		  dis_send_msg(DIS_JUMP, VOLUME_MENU);
;;;970    		  sys_untimeout(vol_menu_timeout_handler, NULL);
;;;971    		  sys_timeout(VOL_MENU_3S_TIMEOUT, vol_menu_timeout_handler, NULL);
;;;972    			break;
;;;973    		
;;;974    		case IR_UP:
;;;975    			key_up_handler(sys);
;;;976    			break;
;;;977    		
;;;978    		case IR_LFET:
;;;979    			key_left_handler(sys);
;;;980    			break;
;;;981    		
;;;982    		case IR_RIGHT:
;;;983    			key_right_handler(sys);
;;;984    			break;
;;;985    		
;;;986    		case IR_DOWN:
;;;987    			key_down_handler(sys);
;;;988    			break;
;;;989    		
;;;990    		case IR_BACK:
;;;991    			key_back_handler(sys);
;;;992    			break;
;;;993    		
;;;994    		case IR_CENTER:
;;;995    			key_enter_handler(sys);
;;;996    			break;
;;;997    		
;;;998    		case IR_MUTE:
;;;999    			vol_mute_handler(sys);
;;;1000   			break;
;;;1001   		
;;;1002   		case IR_ON:
;;;1003   			ir_on_handler(sys);
;;;1004   			break;
;;;1005   		
;;;1006   		case IR_OFF:
;;;1007   			ir_off_handler(sys);
;;;1008   			break;
;;;1009   		
;;;1010   		case IR_NORMAL:
;;;1011   		case IR_CINEMA:
;;;1012   		case IR_NIGHT:
;;;1013   		case IR_USER1:
;;;1014   		case IR_USER2:
;;;1015   		case IR_USER3:
;;;1016   			ir_preset_select_handler(sys, (preset_t)(PRE_NORMAL+(cmd - IR_NORMAL)));
;;;1017   			break;
;;;1018   		
;;;1019   		case IR_PQE_ON:
;;;1020   			ir_peq_state_control(sys, ON);
;;;1021   			break;
;;;1022   		
;;;1023   		case IR_PQE_OFF:
;;;1024   			ir_peq_state_control(sys, OFF);
;;;1025   			break;
;;;1026   		
;;;1027   		default:
;;;1028   			break;
;;;1029   	}
;;;1030   	
;;;1031   	if(cmd != IR_OFF){
;;;1032   		sys_untimeout(dis_timeout_handler, NULL);
;;;1033   		sys_timeout(DIS_TIMEOUT, dis_timeout_handler, NULL);
;;;1034   	}
;;;1035   }
00124e  bd70              POP      {r4-r6,pc}
                  |L1.4688|
001250  2c03              CMP      r4,#3                 ;950
001252  d00d              BEQ      |L1.4720|
001254  2c02              CMP      r4,#2                 ;950
001256  d00b              BEQ      |L1.4720|
001258  f8950051          LDRB     r0,[r5,#0x51]         ;951
00125c  2801              CMP      r0,#1                 ;951
00125e  d107              BNE      |L1.4720|
001260  4894              LDR      r0,|L1.5300|
001262  6800              LDR      r0,[r0,#0]            ;952  ; gSystem_t
001264  f7fffffe          BL       sys_lcd_bright_change
001268  2000              MOVS     r0,#0                 ;953
00126a  f8850051          STRB     r0,[r5,#0x51]         ;953
00126e  e7ee              B        |L1.4686|
                  |L1.4720|
001270  2c13              CMP      r4,#0x13              ;959
001272  d268              BCS      |L1.4934|
001274  e8dff004          TBB      [pc,r4]               ;959
001278  0a1c4a4e          DCB      0x0a,0x1c,0x4a,0x4e
00127c  52535455          DCB      0x52,0x53,0x54,0x55
001280  56573e2e          DCB      0x56,0x57,0x3e,0x2e
001284  3242363a          DCB      0x32,0x42,0x36,0x3a
001288  465d6200          DCB      0x46,0x5d,0x62,0x00
00128c  4628              MOV      r0,r5                 ;961
00128e  f7fffffe          BL       volume_increase_handler
001292  2103              MOVS     r1,#3                 ;962
001294  2002              MOVS     r0,#2                 ;962
001296  f7fffffe          BL       dis_send_msg
00129a  2100              MOVS     r1,#0                 ;963
00129c  4884              LDR      r0,|L1.5296|
00129e  f7fffffe          BL       sys_untimeout
0012a2  2200              MOVS     r2,#0                 ;964
0012a4  4982              LDR      r1,|L1.5296|
0012a6  f64030b8          MOV      r0,#0xbb8             ;964
0012aa  f7fffffe          BL       sys_timeout
0012ae  e04b              B        |L1.4936|
0012b0  4628              MOV      r0,r5                 ;968
0012b2  f7fffffe          BL       volume_decrease_handler
0012b6  2103              MOVS     r1,#3                 ;969
0012b8  2002              MOVS     r0,#2                 ;969
0012ba  f7fffffe          BL       dis_send_msg
0012be  2100              MOVS     r1,#0                 ;970
0012c0  487b              LDR      r0,|L1.5296|
0012c2  f7fffffe          BL       sys_untimeout
0012c6  2200              MOVS     r2,#0                 ;971
0012c8  4979              LDR      r1,|L1.5296|
0012ca  f64030b8          MOV      r0,#0xbb8             ;971
0012ce  f7fffffe          BL       sys_timeout
0012d2  e039              B        |L1.4936|
0012d4  4628              MOV      r0,r5                 ;975
0012d6  f7fffffe          BL       key_up_handler
0012da  e035              B        |L1.4936|
0012dc  4628              MOV      r0,r5                 ;979
0012de  f7fffffe          BL       key_left_handler
0012e2  e031              B        |L1.4936|
0012e4  4628              MOV      r0,r5                 ;983
0012e6  f7fffffe          BL       key_right_handler
0012ea  e02d              B        |L1.4936|
0012ec  4628              MOV      r0,r5                 ;987
0012ee  f7fffffe          BL       key_down_handler
0012f2  e029              B        |L1.4936|
0012f4  4628              MOV      r0,r5                 ;991
0012f6  f7fffffe          BL       key_back_handler
0012fa  e025              B        |L1.4936|
0012fc  4628              MOV      r0,r5                 ;995
0012fe  f7fffffe          BL       key_enter_handler
001302  e021              B        |L1.4936|
001304  4628              MOV      r0,r5                 ;999
001306  f7fffffe          BL       vol_mute_handler
00130a  e01d              B        |L1.4936|
00130c  4628              MOV      r0,r5                 ;1003
00130e  f7fffffe          BL       ir_on_handler
001312  e019              B        |L1.4936|
001314  4628              MOV      r0,r5                 ;1007
001316  f7fffffe          BL       ir_off_handler
00131a  e015              B        |L1.4936|
00131c  bf00              NOP                            ;1011
00131e  bf00              NOP                            ;1012
001320  bf00              NOP                            ;1013
001322  bf00              NOP                            ;1014
001324  bf00              NOP                            ;1015
001326  1f20              SUBS     r0,r4,#4              ;1016
001328  b2c1              UXTB     r1,r0                 ;1016
00132a  4628              MOV      r0,r5                 ;1016
00132c  f7fffffe          BL       ir_preset_select_handler
001330  e00a              B        |L1.4936|
001332  2101              MOVS     r1,#1                 ;1020
001334  4628              MOV      r0,r5                 ;1020
001336  f7fffffe          BL       ir_peq_state_control
00133a  e005              B        |L1.4936|
00133c  2100              MOVS     r1,#0                 ;1024
00133e  4628              MOV      r0,r5                 ;1024
001340  f7fffffe          BL       ir_peq_state_control
001344  e000              B        |L1.4936|
                  |L1.4934|
001346  bf00              NOP                            ;1028
                  |L1.4936|
001348  bf00              NOP                            ;965
00134a  2c03              CMP      r4,#3                 ;1031
00134c  d00b              BEQ      |L1.4966|
00134e  2100              MOVS     r1,#0                 ;1032
001350  f2af402d          ADR      r0,dis_timeout_handler + 1
001354  f7fffffe          BL       sys_untimeout
001358  2200              MOVS     r2,#0                 ;1033
00135a  f2af4135          ADR      r1,dis_timeout_handler + 1
00135e  f6446020          MOV      r0,#0x4e20            ;1033
001362  f7fffffe          BL       sys_timeout
                  |L1.4966|
001366  bf00              NOP      
001368  e771              B        |L1.4686|
;;;1036   
                          ENDP

                  KeyScanLoop PROC
;;;1038   
;;;1039   void KeyScanLoop(void)
00136a  b570              PUSH     {r4-r6,lr}
;;;1040   {
;;;1041   	 unsigned char index = 0;
00136c  2400              MOVS     r4,#0
;;;1042   	 unsigned int temp;
;;;1043   	
;;;1044      for(index = 0; index < NUM_OF_KEY; index++)
00136e  bf00              NOP      
001370  e099              B        |L1.5286|
                  |L1.4978|
;;;1045   	{
;;;1046   		 if(keylist[index].pkeyread(keylist[index].port, keylist[index].pin) == 1)
001372  eb040344          ADD      r3,r4,r4,LSL #1
001376  4e50              LDR      r6,|L1.5304|
001378  eb0603c3          ADD      r3,r6,r3,LSL #3
00137c  7a19              LDRB     r1,[r3,#8]
00137e  eb040344          ADD      r3,r4,r4,LSL #1
001382  eb0603c3          ADD      r3,r6,r3,LSL #3
001386  6858              LDR      r0,[r3,#4]
001388  eb040344          ADD      r3,r4,r4,LSL #1
00138c  f8562033          LDR      r2,[r6,r3,LSL #3]
001390  4790              BLX      r2
001392  2801              CMP      r0,#1
001394  d15b              BNE      |L1.5198|
;;;1047   		 {
;;;1048   			  if((keylist[index].key_locked_flag == false) || (keylist[index].repeat_flag == true))
001396  eb040044          ADD      r0,r4,r4,LSL #1
00139a  4631              MOV      r1,r6
00139c  eb0100c0          ADD      r0,r1,r0,LSL #3
0013a0  7c40              LDRB     r0,[r0,#0x11]
0013a2  b130              CBZ      r0,|L1.5042|
0013a4  eb040044          ADD      r0,r4,r4,LSL #1
0013a8  eb0100c0          ADD      r0,r1,r0,LSL #3
0013ac  7c00              LDRB     r0,[r0,#0x10]
0013ae  2801              CMP      r0,#1
0013b0  d13c              BNE      |L1.5164|
                  |L1.5042|
;;;1049   				{
;;;1050   					    if(keylist[index].key_locked_flag)
0013b2  eb040044          ADD      r0,r4,r4,LSL #1
0013b6  4940              LDR      r1,|L1.5304|
0013b8  eb0100c0          ADD      r0,r1,r0,LSL #3
0013bc  7c40              LDRB     r0,[r0,#0x11]
0013be  b108              CBZ      r0,|L1.5060|
;;;1051   							{
;;;1052   								  temp = 200;
0013c0  25c8              MOVS     r5,#0xc8
0013c2  e005              B        |L1.5072|
                  |L1.5060|
;;;1053   							}
;;;1054   							else
;;;1055   							{
;;;1056   								   temp = keylist[index].longpresstime;
0013c4  eb040044          ADD      r0,r4,r4,LSL #1
0013c8  493b              LDR      r1,|L1.5304|
0013ca  eb0100c0          ADD      r0,r1,r0,LSL #3
0013ce  68c5              LDR      r5,[r0,#0xc]
                  |L1.5072|
;;;1057   							}
;;;1058   							
;;;1059   							if(xTaskGetTickCountFromISR() - keylist[index].key_timer > temp)
0013d0  f7fffffe          BL       xTaskGetTickCountFromISR
0013d4  eb040144          ADD      r1,r4,r4,LSL #1
0013d8  4a37              LDR      r2,|L1.5304|
0013da  eb0201c1          ADD      r1,r2,r1,LSL #3
0013de  6949              LDR      r1,[r1,#0x14]
0013e0  1a40              SUBS     r0,r0,r1
0013e2  42a8              CMP      r0,r5
0013e4  d95d              BLS      |L1.5282|
;;;1060   							{
;;;1061   								  if(index == 0){
0013e6  b944              CBNZ     r4,|L1.5114|
;;;1062   								     sys_send_msg_isr(POWER_KEY_MSG, (uint8)keylist[index].longpress);
0013e8  eb040044          ADD      r0,r4,r4,LSL #1
0013ec  eb0200c0          ADD      r0,r2,r0,LSL #3
0013f0  7a81              LDRB     r1,[r0,#0xa]
0013f2  2001              MOVS     r0,#1
0013f4  f7fffffe          BL       sys_send_msg_isr
0013f8  e008              B        |L1.5132|
                  |L1.5114|
;;;1063   									}else{
;;;1064   										 sys_send_msg_isr(KEYBOARD_MSG, (uint8)keylist[index].longpress);
0013fa  eb040044          ADD      r0,r4,r4,LSL #1
0013fe  4a2e              LDR      r2,|L1.5304|
001400  eb0200c0          ADD      r0,r2,r0,LSL #3
001404  7a81              LDRB     r1,[r0,#0xa]
001406  2000              MOVS     r0,#0
001408  f7fffffe          BL       sys_send_msg_isr
                  |L1.5132|
;;;1065   									}
;;;1066   								  keylist[index].key_locked_flag = true;
00140c  2001              MOVS     r0,#1
00140e  eb040144          ADD      r1,r4,r4,LSL #1
001412  4a29              LDR      r2,|L1.5304|
001414  eb0201c1          ADD      r1,r2,r1,LSL #3
001418  7448              STRB     r0,[r1,#0x11]
;;;1067   								  keylist[index].key_timer = xTaskGetTickCountFromISR();
00141a  f7fffffe          BL       xTaskGetTickCountFromISR
00141e  eb040144          ADD      r1,r4,r4,LSL #1
001422  4a25              LDR      r2,|L1.5304|
001424  eb0201c1          ADD      r1,r2,r1,LSL #3
001428  6148              STR      r0,[r1,#0x14]
00142a  e03a              B        |L1.5282|
                  |L1.5164|
;;;1068   							}
;;;1069   				}
;;;1070   				else if(keylist[index].key_locked_flag == true)
00142c  eb040044          ADD      r0,r4,r4,LSL #1
001430  4921              LDR      r1,|L1.5304|
001432  eb0100c0          ADD      r0,r1,r0,LSL #3
001436  7c40              LDRB     r0,[r0,#0x11]
001438  2801              CMP      r0,#1
00143a  d132              BNE      |L1.5282|
;;;1071   				{
;;;1072   					  keylist[index].key_timer = xTaskGetTickCountFromISR();
00143c  f7fffffe          BL       xTaskGetTickCountFromISR
001440  eb040144          ADD      r1,r4,r4,LSL #1
001444  4a1c              LDR      r2,|L1.5304|
001446  eb0201c1          ADD      r1,r2,r1,LSL #3
00144a  6148              STR      r0,[r1,#0x14]
00144c  e029              B        |L1.5282|
                  |L1.5198|
;;;1073   				}
;;;1074   		 }
;;;1075   		 else 
;;;1076   		 {
;;;1077   			    if(xTaskGetTickCountFromISR() - keylist[index].key_timer > 80)
00144e  f7fffffe          BL       xTaskGetTickCountFromISR
001452  eb040144          ADD      r1,r4,r4,LSL #1
001456  4a18              LDR      r2,|L1.5304|
001458  eb0201c1          ADD      r1,r2,r1,LSL #3
00145c  6949              LDR      r1,[r1,#0x14]
00145e  1a40              SUBS     r0,r0,r1
001460  2850              CMP      r0,#0x50
001462  d90f              BLS      |L1.5252|
;;;1078   					{
;;;1079   						  if(index == 0)
001464  b92c              CBNZ     r4,|L1.5234|
;;;1080                      sys_send_msg_isr(POWER_KEY_MSG, (uint8)keylist[0].shortpress);   	
001466  4610              MOV      r0,r2
001468  7a41              LDRB     r1,[r0,#9]  ; keylist
00146a  2001              MOVS     r0,#1
00146c  f7fffffe          BL       sys_send_msg_isr
001470  e008              B        |L1.5252|
                  |L1.5234|
;;;1081                 else							
;;;1082   						       sys_send_msg_isr(KEYBOARD_MSG, (uint8)keylist[index].shortpress);
001472  eb040044          ADD      r0,r4,r4,LSL #1
001476  4a10              LDR      r2,|L1.5304|
001478  eb0200c0          ADD      r0,r2,r0,LSL #3
00147c  7a41              LDRB     r1,[r0,#9]
00147e  2000              MOVS     r0,#0
001480  f7fffffe          BL       sys_send_msg_isr
                  |L1.5252|
;;;1083   					}
;;;1084   					
;;;1085   					keylist[index].key_locked_flag = false;
001484  2000              MOVS     r0,#0
001486  eb040144          ADD      r1,r4,r4,LSL #1
00148a  4a0b              LDR      r2,|L1.5304|
00148c  eb0201c1          ADD      r1,r2,r1,LSL #3
001490  7448              STRB     r0,[r1,#0x11]
;;;1086   					keylist[index].key_timer = xTaskGetTickCountFromISR();
001492  f7fffffe          BL       xTaskGetTickCountFromISR
001496  eb040144          ADD      r1,r4,r4,LSL #1
00149a  4a07              LDR      r2,|L1.5304|
00149c  eb0201c1          ADD      r1,r2,r1,LSL #3
0014a0  6148              STR      r0,[r1,#0x14]
                  |L1.5282|
0014a2  1c60              ADDS     r0,r4,#1              ;1044
0014a4  b2c4              UXTB     r4,r0                 ;1044
                  |L1.5286|
0014a6  2c07              CMP      r4,#7                 ;1044
0014a8  f6ffaf63          BLT      |L1.4978|
;;;1087   		 }
;;;1088   		 
;;;1089   	 }
;;;1090   }
0014ac  bd70              POP      {r4-r6,pc}
;;;1091   
                          ENDP

0014ae  0000              DCW      0x0000
                  |L1.5296|
                          DCD      vol_menu_timeout_handler
                  |L1.5300|
                          DCD      gSystem_t
                  |L1.5304|
                          DCD      keylist

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6c6f6164          DCB      0x6c,0x6f,0x61,0x64
000004  5f636f64          DCB      0x5f,0x63,0x6f,0x64
000008  6500              DCB      0x65,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  keylist
                          DCD      GPIO_ReadSinglePin
                          DCD      0x40024000
000008  040c0d00          DCB      0x04,0x0c,0x0d,0x00
                          DCD      0x00001388
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      GPIO_ReadSinglePin
                          DCD      0x40024000
000020  02080900          DCB      0x02,0x08,0x09,0x00
                          DCD      0x00001388
000028  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      GPIO_ReadSinglePin
                          DCD      0x40024000
000038  010a0b00          DCB      0x01,0x0a,0x0b,0x00
                          DCD      0x00001388
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      GPIO_ReadSinglePin
                          DCD      0x40061000
000050  01040500          DCB      0x01,0x04,0x05,0x00
                          DCD      0x000003e8
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      GPIO_ReadSinglePin
                          DCD      0x40061000
000068  02060700          DCB      0x02,0x06,0x07,0x00
                          DCD      0x000003e8
000070  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      GPIO_ReadSinglePin
                          DCD      0x40061000
000080  04000100          DCB      0x04,0x00,0x01,0x00
                          DCD      0x00001388
000088  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      GPIO_ReadSinglePin
                          DCD      0x40061000
000098  08020300          DCB      0x08,0x02,0x03,0x00
                          DCD      0x00001388
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  gCode
0000a8  000000            DCB      0x00,0x00,0x00
