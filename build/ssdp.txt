; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--c99 --list --debug -c --asm --interleave -o.\build\ssdp.o --asm_dir=.\build\ --list_dir=.\build\ --depend=.\build\ssdp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 -I.\FreeRTOS\include -I.\inc -I.\startup -I.\driverlib -I.\Application -I.\FreeRTOS\portable -I.\Task -I.\Driver -I.\web -I.\third_party\lwip-1.4.1\src\include -I.\third_party\fatfs -I.\third_party\lwip-1.4.1\apps\httpserver_raw -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include -I.\third_party\lwip-1.4.1\ports\tiva-tm4c129\include\arch -I.\third_party\lwip-1.4.1\src\include\ipv4 -I..\MCU -I.\third_party\lwip-1.4.1\apps -I.\third_party -I.\Upnp -I.\Dsp -ID:\Keil\ARM\RV31\INC -ID:\Keil\ARM\CMSIS\Include -ID:\Keil\ARM\Inc\TI\TM4C129 -Drvmdk -DPART_TM4C129XNCZAD -DRTOS_FREERTOS -DTARGET_IS_SNOWFLAKE_RA0 -DUSE_LWIP -DTM4C129ENCPDT --omf_browse=.\build\ssdp.crf Upnp\Ssdp.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  upnp_printf PROC
;;;417    
;;;418    static void upnp_printf(char *buf, char *fmt, ...)
000000  b40f              PUSH     {r0-r3}
;;;419    {
000002  b538              PUSH     {r3-r5,lr}
000004  4604              MOV      r4,r0
;;;420      va_list ap;
;;;421      char *tmp = buf + strlen(buf);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       strlen
00000c  1905              ADDS     r5,r0,r4
;;;422      va_start(ap, fmt);
00000e  a806              ADD      r0,sp,#0x18
000010  9000              STR      r0,[sp,#0]
;;;423      vsprintf(tmp, fmt, ap);
000012  4628              MOV      r0,r5
000014  9a00              LDR      r2,[sp,#0]
000016  9905              LDR      r1,[sp,#0x14]
000018  f7fffffe          BL       vsprintf
;;;424      va_end(ap);
00001c  2000              MOVS     r0,#0
00001e  9000              STR      r0,[sp,#0]
;;;425    }
000020  bc38              POP      {r3-r5}
000022  f85dfb14          LDR      pc,[sp],#0x14
;;;426    
                          ENDP

                  uuid_bin2str PROC
;;;382    
;;;383    int uuid_bin2str(char *str, size_t max_len)
000026  e92d41f0          PUSH     {r4-r8,lr}
;;;384    {
00002a  b0a4              SUB      sp,sp,#0x90
00002c  4680              MOV      r8,r0
00002e  460f              MOV      r7,r1
;;;385      int len;
;;;386      unsigned char i;
;;;387    
;;;388      unsigned char ucBuf[80];
;;;389      portTickType xTick = xTaskGetTickCount();
000030  f7fffffe          BL       xTaskGetTickCount
000034  4604              MOV      r4,r0
;;;390      
;;;391      ucBuf[0] = (unsigned char)(xTick / 86400000);    
000036  48f7              LDR      r0,|L1.1044|
000038  fbb4f0f0          UDIV     r0,r4,r0
00003c  b2c0              UXTB     r0,r0
00003e  f88d0040          STRB     r0,[sp,#0x40]
;;;392      xTick = xTick % 86400000;
000042  48f4              LDR      r0,|L1.1044|
000044  fbb4f1f0          UDIV     r1,r4,r0
000048  fb004411          MLS      r4,r0,r1,r4
;;;393      ucBuf[1] = (unsigned char)(xTick / 3600000);    
00004c  48f2              LDR      r0,|L1.1048|
00004e  fbb4f0f0          UDIV     r0,r4,r0
000052  b2c0              UXTB     r0,r0
000054  f88d0041          STRB     r0,[sp,#0x41]
;;;394      xTick = xTick % 3600000;
000058  48ef              LDR      r0,|L1.1048|
00005a  fbb4f1f0          UDIV     r1,r4,r0
00005e  fb004411          MLS      r4,r0,r1,r4
;;;395      ucBuf[2] = (unsigned char)(xTick / 60000);    
000062  f64e2060          MOV      r0,#0xea60
000066  fbb4f0f0          UDIV     r0,r4,r0
00006a  b2c0              UXTB     r0,r0
00006c  f88d0042          STRB     r0,[sp,#0x42]
;;;396      xTick = xTick % 60000;
000070  f64e2060          MOV      r0,#0xea60
000074  fbb4f1f0          UDIV     r1,r4,r0
000078  fb004411          MLS      r4,r0,r1,r4
;;;397      ucBuf[3] = (unsigned char)(xTick / 1000); 
00007c  f44f707a          MOV      r0,#0x3e8
000080  fbb4f0f0          UDIV     r0,r4,r0
000084  b2c0              UXTB     r0,r0
000086  f88d0043          STRB     r0,[sp,#0x43]
;;;398      xTick = xTick % 1000;
00008a  f44f707a          MOV      r0,#0x3e8
00008e  fbb4f1f0          UDIV     r1,r4,r0
000092  fb004411          MLS      r4,r0,r1,r4
;;;399      ucBuf[4] = xTick / 100;    
000096  2064              MOVS     r0,#0x64
000098  fbb4f0f0          UDIV     r0,r4,r0
00009c  b2c0              UXTB     r0,r0
00009e  f88d0044          STRB     r0,[sp,#0x44]
;;;400      ucBuf[5] = xTick % 100;
0000a2  2064              MOVS     r0,#0x64
0000a4  fbb4f1f0          UDIV     r1,r4,r0
0000a8  fb004011          MLS      r0,r0,r1,r4
0000ac  f88d0045          STRB     r0,[sp,#0x45]
;;;401    
;;;402      for (i = 6; i < 16; i++)
0000b0  2506              MOVS     r5,#6
0000b2  e00d              B        |L1.208|
                  |L1.180|
;;;403      {
;;;404          ucBuf[i] = (LWIP_RAND() / ucBuf[i-1]) + ucBuf[i-2];
0000b4  f7fffffe          BL       rand
0000b8  1e69              SUBS     r1,r5,#1
0000ba  aa10              ADD      r2,sp,#0x40
0000bc  5c51              LDRB     r1,[r2,r1]
0000be  fb90f1f1          SDIV     r1,r0,r1
0000c2  1ea8              SUBS     r0,r5,#2
0000c4  5c10              LDRB     r0,[r2,r0]
0000c6  4408              ADD      r0,r0,r1
0000c8  a910              ADD      r1,sp,#0x40
0000ca  5548              STRB     r0,[r1,r5]
0000cc  1c68              ADDS     r0,r5,#1              ;402
0000ce  b2c5              UXTB     r5,r0                 ;402
                  |L1.208|
0000d0  2d10              CMP      r5,#0x10              ;402
0000d2  dbef              BLT      |L1.180|
;;;405      }
;;;406      
;;;407      len = snprintf(str, max_len, "%02x%02x%02x%02x-%02x%02x-%02x%02x-"
0000d4  f89d004f          LDRB     r0,[sp,#0x4f]
0000d8  f89d104e          LDRB     r1,[sp,#0x4e]
0000dc  f89d204d          LDRB     r2,[sp,#0x4d]
0000e0  f89d304c          LDRB     r3,[sp,#0x4c]
0000e4  e9cd320b          STRD     r3,r2,[sp,#0x2c]
0000e8  e9cd100d          STRD     r1,r0,[sp,#0x34]
0000ec  f89d004b          LDRB     r0,[sp,#0x4b]
0000f0  f89d204a          LDRB     r2,[sp,#0x4a]
0000f4  f89d1049          LDRB     r1,[sp,#0x49]
0000f8  f89d3048          LDRB     r3,[sp,#0x48]
0000fc  e9cd3107          STRD     r3,r1,[sp,#0x1c]
000100  e9cd2009          STRD     r2,r0,[sp,#0x24]
000104  f89d0047          LDRB     r0,[sp,#0x47]
000108  f89d1046          LDRB     r1,[sp,#0x46]
00010c  f89d2045          LDRB     r2,[sp,#0x45]
000110  f89d3044          LDRB     r3,[sp,#0x44]
000114  e9cd3203          STRD     r3,r2,[sp,#0xc]
000118  e9cd1005          STRD     r1,r0,[sp,#0x14]
00011c  f89d0043          LDRB     r0,[sp,#0x43]
000120  f89d1042          LDRB     r1,[sp,#0x42]
000124  f89d2041          LDRB     r2,[sp,#0x41]
000128  e9cd2100          STRD     r2,r1,[sp,#0]
00012c  9002              STR      r0,[sp,#8]
00012e  f89d3040          LDRB     r3,[sp,#0x40]
000132  4aba              LDR      r2,|L1.1052|
000134  4639              MOV      r1,r7
000136  4640              MOV      r0,r8
000138  f7fffffe          BL       __2snprintf
00013c  4606              MOV      r6,r0
;;;408        "%02x%02x-%02x%02x%02x%02x%02x%02x",
;;;409        ucBuf[0], ucBuf[1], ucBuf[2], ucBuf[3],
;;;410        ucBuf[4], ucBuf[5], ucBuf[6], ucBuf[7],
;;;411        ucBuf[8], ucBuf[9], ucBuf[10], ucBuf[11],
;;;412        ucBuf[12], ucBuf[13], ucBuf[14], ucBuf[15]);
;;;413      if (len < 0 || (size_t) len >= max_len)
00013e  2e00              CMP      r6,#0
000140  db01              BLT      |L1.326|
000142  42be              CMP      r6,r7
000144  d304              BCC      |L1.336|
                  |L1.326|
;;;414        return -1;
000146  f04f30ff          MOV      r0,#0xffffffff
                  |L1.330|
;;;415      return 0;
;;;416    }
00014a  b024              ADD      sp,sp,#0x90
00014c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.336|
000150  2000              MOVS     r0,#0                 ;415
000152  e7fa              B        |L1.330|
;;;417    
                          ENDP

                  SsdpRun PROC
;;;212     */
;;;213    static void SsdpRun(void * arg)
000154  e92d47f0          PUSH     {r4-r10,lr}
;;;214    {
000158  b096              SUB      sp,sp,#0x58
00015a  4681              MOV      r9,r0
;;;215        LWIP_DEBUGF(SSDP_DEBUG, ("SSDP Run\n"));
00015c  bf00              NOP      
00015e  bf00              NOP      
;;;216    
;;;217      if( Localhost()){
000160  f7fffffe          BL       Localhost
000164  2800              CMP      r0,#0
000166  d073              BEQ      |L1.592|
;;;218          LWIP_DEBUGF(SSDP_DEBUG, ("SSDP local host\n"));
000168  bf00              NOP      
00016a  bf00              NOP      
;;;219        struct ip_addr reply_ip;
;;;220        IP4_ADDR(&reply_ip,239,255,255,250);
00016c  48ac              LDR      r0,|L1.1056|
00016e  9015              STR      r0,[sp,#0x54]
;;;221    #if LWIP_IGMP    
;;;222        igmp_joingroup(Localhost(),&reply_ip);
000170  f7fffffe          BL       Localhost
000174  4680              MOV      r8,r0
000176  a915              ADD      r1,sp,#0x54
000178  f7fffffe          BL       igmp_joingroup
;;;223    #endif    
;;;224        char *msg;
;;;225        char *NTString = "";
00017c  a6a9              ADR      r6,|L1.1060|
;;;226        char uuid_string[80];
;;;227        WORD  reply_port = UPNP_MULTICAST_PORT;
00017e  f240776c          MOV      r7,#0x76c
;;;228        uuid_bin2str(uuid_string, sizeof(uuid_string));
000182  2150              MOVS     r1,#0x50
000184  a801              ADD      r0,sp,#4
000186  f7fffffe          BL       uuid_bin2str
;;;229        msg = mem_malloc(400); /* more than big enough */
00018a  f44f70c8          MOV      r0,#0x190
00018e  f7fffffe          BL       mem_malloc
000192  4605              MOV      r5,r0
;;;230        if (msg == NULL)
000194  b915              CBNZ     r5,|L1.412|
                  |L1.406|
;;;231    		return;
;;;232        memset(msg,0,400);
;;;233        switch (ssdp_type) {
;;;234        case ADVERTISE_UP:
;;;235        case ADVERTISE_DOWN:
;;;236          NTString = "NT";
;;;237          strcpy(msg, "NOTIFY * HTTP/1.1\r\n");
;;;238          upnp_printf(msg, "HOST: %s:%d\r\n",
;;;239                        UPNP_MULTICAST_ADDRESS, UPNP_MULTICAST_PORT);
;;;240          upnp_printf(msg, "CACHE-CONTROL: max-age=%d\r\n",
;;;241                        UPNP_CACHE_SEC);
;;;242          upnp_printf(msg, "NTS: %s\r\n",
;;;243                        (ssdp_type == ADVERTISE_UP ?
;;;244                         "ssdp:alive" : "ssdp:byebye"));
;;;245          break;
;;;246        case MSEARCH_REPLY:
;;;247          ip_addr_set(&reply_ip,&ssdp_ip_reply);
;;;248          reply_port = ssdp_port_reply;
;;;249          NTString = "ST";
;;;250          strcpy(msg, "HTTP/1.1 200 OK\r\n");
;;;251          upnp_printf(msg, "CACHE-CONTROL: max-age=%d\r\n",
;;;252                        UPNP_CACHE_SEC);
;;;253          strcat(msg, "EXT:\r\n");
;;;254          break;
;;;255        }
;;;256        if (ssdp_type != ADVERTISE_DOWN) {
;;;257    /* Where others may get our XML files from */
;;;258          upnp_printf(msg, "LOCATION: http://%s:%d/%s\r\n",
;;;259                      htoa((struct in_addr *)Localhost()), UPNP_HTTP_PORT,
;;;260                      UPNP_DEVICE_XML_FILE);
;;;261        }
;;;262    
;;;263    /* The SERVER line has three comma-separated fields:
;;;264     *      operating system / version
;;;265     *      upnp version
;;;266     *      software package / version
;;;267     * However, only the UPnP version is really required, the
;;;268     * others can be place holders... for security reasons
;;;269     * it is better to NOT provide extra information.
;;;270     */
;;;271        strcat(msg, "SERVER: unspecified, UPnP/1.0, unspecified\r\n");
;;;272        switch (ssdp_state / UPNP_ADVERTISE_REPEAT) {
;;;273        case 0:
;;;274          upnp_printf(msg, "%s: upnp:rootdevice\r\n", NTString);
;;;275          upnp_printf(msg, "USN: uuid:%s::upnp:rootdevice\r\n",
;;;276                        uuid_string);
;;;277          break;
;;;278        case 1:
;;;279          upnp_printf(msg, "%s: uuid:%s\r\n", NTString, uuid_string);
;;;280          upnp_printf(msg, "USN: uuid:%s\r\n", uuid_string);
;;;281          break;
;;;282        }
;;;283        strcat(msg, "\r\n");
;;;284        struct pbuf * udpbuf = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
;;;285        if(udpbuf == NULL){
;;;286          mem_free(msg);
;;;287          return;
;;;288        }    
;;;289        udpbuf->payload = (void*)msg;
;;;290        udpbuf->len = udpbuf->tot_len = strlen(msg);
;;;291        //LWIP_DEBUGF(SSDP_DEBUG, ("ssdp send:\n%s (size: %d)\n", udpbuf->payload, udpbuf->len));
;;;292        udp_sendto(udp_ssdp,udpbuf,&reply_ip,reply_port);
;;;293        mem_free(msg);
;;;294        udpbuf->payload = NULL;
;;;295        pbuf_free(udpbuf);
;;;296        if (ssdp_state + 1 >= 2 * UPNP_ADVERTISE_REPEAT){
;;;297          ssdp_state =0;
;;;298        }
;;;299        ssdp_type =  ADVERTISE_UP;   
;;;300        LWIP_DEBUGF(SSDP_DEBUG, ("ssdp state is %d", ssdp_type));
;;;301      }
;;;302      tcpip_timeout((UPNP_RANDOM_TIME),SsdpRun,NULL);
;;;303    }
000196  b016              ADD      sp,sp,#0x58
000198  e8bd87f0          POP      {r4-r10,pc}
                  |L1.412|
00019c  f44f71c8          MOV      r1,#0x190             ;232
0001a0  4628              MOV      r0,r5                 ;232
0001a2  f7fffffe          BL       __aeabi_memclr
0001a6  48a0              LDR      r0,|L1.1064|
0001a8  7800              LDRB     r0,[r0,#0]            ;233  ; ssdp_type
0001aa  b120              CBZ      r0,|L1.438|
0001ac  2801              CMP      r0,#1                 ;233
0001ae  d003              BEQ      |L1.440|
0001b0  2802              CMP      r0,#2                 ;233
0001b2  d138              BNE      |L1.550|
0001b4  e01e              B        |L1.500|
                  |L1.438|
0001b6  bf00              NOP                            ;235
                  |L1.440|
0001b8  a69c              ADR      r6,|L1.1068|
0001ba  a19d              ADR      r1,|L1.1072|
0001bc  4628              MOV      r0,r5                 ;237
0001be  f7fffffe          BL       strcpy
0001c2  f240736c          MOV      r3,#0x76c             ;238
0001c6  a29f              ADR      r2,|L1.1092|
0001c8  a1a2              ADR      r1,|L1.1108|
0001ca  4628              MOV      r0,r5                 ;238
0001cc  f7fffffe          BL       upnp_printf
0001d0  f2407209          MOV      r2,#0x709             ;240
0001d4  a1a3              ADR      r1,|L1.1124|
0001d6  4628              MOV      r0,r5                 ;240
0001d8  f7fffffe          BL       upnp_printf
0001dc  4892              LDR      r0,|L1.1064|
0001de  7800              LDRB     r0,[r0,#0]            ;242  ; ssdp_type
0001e0  b908              CBNZ     r0,|L1.486|
0001e2  a0a7              ADR      r0,|L1.1152|
0001e4  e000              B        |L1.488|
                  |L1.486|
0001e6  a0a9              ADR      r0,|L1.1164|
                  |L1.488|
0001e8  4602              MOV      r2,r0                 ;244
0001ea  a1ab              ADR      r1,|L1.1176|
0001ec  4628              MOV      r0,r5                 ;244
0001ee  f7fffffe          BL       upnp_printf
0001f2  e018              B        |L1.550|
                  |L1.500|
0001f4  48ab              LDR      r0,|L1.1188|
0001f6  b908              CBNZ     r0,|L1.508|
0001f8  2000              MOVS     r0,#0                 ;247
0001fa  e001              B        |L1.512|
                  |L1.508|
0001fc  48a9              LDR      r0,|L1.1188|
0001fe  6800              LDR      r0,[r0,#0]            ;247  ; ssdp_ip_reply
                  |L1.512|
000200  9015              STR      r0,[sp,#0x54]         ;247
000202  48a9              LDR      r0,|L1.1192|
000204  8807              LDRH     r7,[r0,#0]            ;248  ; ssdp_port_reply
000206  a6a9              ADR      r6,|L1.1196|
000208  a1a9              ADR      r1,|L1.1200|
00020a  4628              MOV      r0,r5                 ;250
00020c  f7fffffe          BL       strcpy
000210  f2407209          MOV      r2,#0x709             ;251
000214  a193              ADR      r1,|L1.1124|
000216  4628              MOV      r0,r5                 ;251
000218  f7fffffe          BL       upnp_printf
00021c  a1a9              ADR      r1,|L1.1220|
00021e  4628              MOV      r0,r5                 ;253
000220  f7fffffe          BL       strcat
000224  bf00              NOP                            ;254
                  |L1.550|
000226  bf00              NOP                            ;245
000228  487f              LDR      r0,|L1.1064|
00022a  7800              LDRB     r0,[r0,#0]            ;256  ; ssdp_type
00022c  2801              CMP      r0,#1                 ;256
00022e  d00e              BEQ      |L1.590|
000230  f7fffffe          BL       Localhost
000234  4682              MOV      r10,r0                ;258
000236  f7fffffe          BL       htoa
00023a  4680              MOV      r8,r0                 ;258
00023c  a0a3              ADR      r0,|L1.1228|
00023e  f2414350          MOV      r3,#0x1450            ;258
000242  4642              MOV      r2,r8                 ;258
000244  a1a4              ADR      r1,|L1.1240|
000246  9000              STR      r0,[sp,#0]            ;258
000248  4628              MOV      r0,r5                 ;258
00024a  f7fffffe          BL       upnp_printf
                  |L1.590|
00024e  e000              B        |L1.594|
                  |L1.592|
000250  e057              B        |L1.770|
                  |L1.594|
000252  a1a8              ADR      r1,|L1.1268|
000254  4628              MOV      r0,r5                 ;271
000256  f7fffffe          BL       strcat
00025a  49b2              LDR      r1,|L1.1316|
00025c  7808              LDRB     r0,[r1,#0]            ;272  ; ssdp_state
00025e  eb0071d0          ADD      r1,r0,r0,LSR #31      ;272
000262  1049              ASRS     r1,r1,#1              ;272
000264  d002              BEQ      |L1.620|
000266  2901              CMP      r1,#1                 ;272
000268  d117              BNE      |L1.666|
00026a  e00a              B        |L1.642|
                  |L1.620|
00026c  4632              MOV      r2,r6                 ;274
00026e  a1ae              ADR      r1,|L1.1320|
000270  4628              MOV      r0,r5                 ;274
000272  f7fffffe          BL       upnp_printf
000276  aa01              ADD      r2,sp,#4              ;275
000278  a1b1              ADR      r1,|L1.1344|
00027a  4628              MOV      r0,r5                 ;275
00027c  f7fffffe          BL       upnp_printf
000280  e00b              B        |L1.666|
                  |L1.642|
000282  ab01              ADD      r3,sp,#4              ;279
000284  4632              MOV      r2,r6                 ;279
000286  a1b6              ADR      r1,|L1.1376|
000288  4628              MOV      r0,r5                 ;279
00028a  f7fffffe          BL       upnp_printf
00028e  aa01              ADD      r2,sp,#4              ;280
000290  a1b7              ADR      r1,|L1.1392|
000292  4628              MOV      r0,r5                 ;280
000294  f7fffffe          BL       upnp_printf
000298  bf00              NOP                            ;281
                  |L1.666|
00029a  bf00              NOP                            ;277
00029c  a18a              ADR      r1,|L1.1224|
00029e  4628              MOV      r0,r5                 ;283
0002a0  f7fffffe          BL       strcat
0002a4  2202              MOVS     r2,#2                 ;284
0002a6  2100              MOVS     r1,#0                 ;284
0002a8  4608              MOV      r0,r1                 ;284
0002aa  f7fffffe          BL       pbuf_alloc
0002ae  4604              MOV      r4,r0                 ;284
0002b0  b91c              CBNZ     r4,|L1.698|
0002b2  4628              MOV      r0,r5                 ;286
0002b4  f7fffffe          BL       mem_free
0002b8  e76d              B        |L1.406|
                  |L1.698|
0002ba  6065              STR      r5,[r4,#4]            ;289
0002bc  4628              MOV      r0,r5                 ;290
0002be  f7fffffe          BL       strlen
0002c2  b280              UXTH     r0,r0                 ;290
0002c4  8120              STRH     r0,[r4,#8]            ;290
0002c6  8160              STRH     r0,[r4,#0xa]          ;290
0002c8  463b              MOV      r3,r7                 ;292
0002ca  aa15              ADD      r2,sp,#0x54           ;292
0002cc  4621              MOV      r1,r4                 ;292
0002ce  48ac              LDR      r0,|L1.1408|
0002d0  6800              LDR      r0,[r0,#0]            ;292  ; udp_ssdp
0002d2  f7fffffe          BL       udp_sendto
0002d6  4628              MOV      r0,r5                 ;293
0002d8  f7fffffe          BL       mem_free
0002dc  2000              MOVS     r0,#0                 ;294
0002de  6060              STR      r0,[r4,#4]            ;294
0002e0  4620              MOV      r0,r4                 ;295
0002e2  f7fffffe          BL       pbuf_free
0002e6  488f              LDR      r0,|L1.1316|
0002e8  7800              LDRB     r0,[r0,#0]            ;296  ; ssdp_state
0002ea  1c40              ADDS     r0,r0,#1              ;296
0002ec  2804              CMP      r0,#4                 ;296
0002ee  db02              BLT      |L1.758|
0002f0  2000              MOVS     r0,#0                 ;297
0002f2  498c              LDR      r1,|L1.1316|
0002f4  7008              STRB     r0,[r1,#0]            ;297
                  |L1.758|
0002f6  2000              MOVS     r0,#0                 ;299
0002f8  494b              LDR      r1,|L1.1064|
0002fa  7008              STRB     r0,[r1,#0]            ;299
0002fc  bf00              NOP                            ;300
0002fe  bf00              NOP                            ;300
000300  bf00              NOP                            ;301
                  |L1.770|
000302  f7fffffe          BL       rand
000306  f3c00013          UBFX     r0,r0,#0,#20          ;302
00030a  f44f71e1          MOV      r1,#0x1c2             ;302
00030e  4348              MULS     r0,r1,r0              ;302
000310  eb014420          ADD      r4,r1,r0,ASR #16      ;302
000314  2200              MOVS     r2,#0                 ;302
000316  499b              LDR      r1,|L1.1412|
000318  4620              MOV      r0,r4                 ;302
00031a  f7fffffe          BL       tcpip_timeout
00031e  bf00              NOP      
000320  e739              B        |L1.406|
;;;304    
                          ENDP

                  word_separation_length PROC
;;;366     */
;;;367    static int word_separation_length(const char *s)
000322  4601              MOV      r1,r0
;;;368    {
;;;369      const char *begin = s;
000324  460a              MOV      r2,r1
;;;370      for (;; s++) {
000326  bf00              NOP      
                  |L1.808|
;;;371        int c = *s;
000328  7808              LDRB     r0,[r1,#0]
;;;372        if (c == ' ' || c == '\t')
00032a  2820              CMP      r0,#0x20
00032c  d001              BEQ      |L1.818|
00032e  2809              CMP      r0,#9
000330  d100              BNE      |L1.820|
                  |L1.818|
;;;373          continue;
000332  e000              B        |L1.822|
                  |L1.820|
;;;374        break;
000334  e001              B        |L1.826|
                  |L1.822|
000336  1c49              ADDS     r1,r1,#1              ;370
000338  e7f6              B        |L1.808|
                  |L1.826|
00033a  bf00              NOP      
;;;375      }
;;;376      return s - begin;
00033c  1a88              SUBS     r0,r1,r2
;;;377    }
00033e  4770              BX       lr
;;;378    static int str_starts(const char *str, const char *start)
                          ENDP

                  token_length PROC
;;;351    /* Return length of token (see above for definition of token) */
;;;352    static int token_length(const char *s)
000340  e92d41f0          PUSH     {r4-r8,lr}
;;;353    {
000344  4604              MOV      r4,r0
;;;354      const char *begin = s;
000346  4626              MOV      r6,r4
;;;355      for (;; s++) {
000348  bf00              NOP      
                  |L1.842|
;;;356        int c = *s;
00034a  7825              LDRB     r5,[r4,#0]
;;;357        int end = !(isalnum(c) || c == '_' || c == '-');
00034c  f7fffffe          BL       __rt_ctype_table
000350  6800              LDR      r0,[r0,#0]
000352  5d40              LDRB     r0,[r0,r5]
000354  f0100f38          TST      r0,#0x38
000358  d105              BNE      |L1.870|
00035a  2d5f              CMP      r5,#0x5f
00035c  d003              BEQ      |L1.870|
00035e  2d2d              CMP      r5,#0x2d
000360  d001              BEQ      |L1.870|
000362  2001              MOVS     r0,#1
000364  e000              B        |L1.872|
                  |L1.870|
000366  2000              MOVS     r0,#0
                  |L1.872|
000368  4607              MOV      r7,r0
;;;358        if (end)
00036a  b107              CBZ      r7,|L1.878|
;;;359          break;
00036c  e001              B        |L1.882|
                  |L1.878|
00036e  1c64              ADDS     r4,r4,#1              ;355
000370  e7eb              B        |L1.842|
                  |L1.882|
000372  bf00              NOP      
;;;360      }
;;;361      return s - begin;
000374  1ba0              SUBS     r0,r4,r6
;;;362    }
000376  e8bd81f0          POP      {r4-r8,pc}
;;;363    /* return length of interword separation.
                          ENDP

                  token_eq PROC
;;;311     */
;;;312    static int token_eq(const char *s1, const char *s2)
00037a  e92d47f0          PUSH     {r4-r10,lr}
;;;313    {
00037e  4606              MOV      r6,r0
000380  460f              MOV      r7,r1
;;;314      int c1;
;;;315      int c2;
;;;316      int end1 = 0;
000382  f04f0800          MOV      r8,#0
;;;317      int end2 = 0;
000386  46c1              MOV      r9,r8
;;;318      for (;;) {
000388  bf00              NOP      
                  |L1.906|
;;;319        c1 = *s1++;
00038a  f8164b01          LDRB     r4,[r6],#1
;;;320        c2 = *s2++;
00038e  f8175b01          LDRB     r5,[r7],#1
;;;321        if (isalpha(c1) && isupper(c1))
000392  f7fffffe          BL       __rt_ctype_table
000396  6800              LDR      r0,[r0,#0]
000398  5d00              LDRB     r0,[r0,r4]
00039a  f0100f98          TST      r0,#0x98
00039e  d00a              BEQ      |L1.950|
0003a0  f7fffffe          BL       __rt_ctype_table
0003a4  6800              LDR      r0,[r0,#0]
0003a6  5d00              LDRB     r0,[r0,r4]
0003a8  f0100f10          TST      r0,#0x10
0003ac  d003              BEQ      |L1.950|
;;;322                c1 = tolower(c1);
0003ae  4620              MOV      r0,r4
0003b0  f7fffffe          BL       tolower
0003b4  4604              MOV      r4,r0
                  |L1.950|
;;;323        if (isalpha(c2) && isupper(c2))
0003b6  f7fffffe          BL       __rt_ctype_table
0003ba  6800              LDR      r0,[r0,#0]
0003bc  5d40              LDRB     r0,[r0,r5]
0003be  f0100f98          TST      r0,#0x98
0003c2  d00a              BEQ      |L1.986|
0003c4  f7fffffe          BL       __rt_ctype_table
0003c8  6800              LDR      r0,[r0,#0]
0003ca  5d40              LDRB     r0,[r0,r5]
0003cc  f0100f10          TST      r0,#0x10
0003d0  d003              BEQ      |L1.986|
;;;324                c2 = tolower(c2);
0003d2  4628              MOV      r0,r5
0003d4  f7fffffe          BL       tolower
0003d8  4605              MOV      r5,r0
                  |L1.986|
;;;325        end1 = !(isalnum(c1) || c1 == '_' || c1 == '-');
0003da  f7fffffe          BL       __rt_ctype_table
0003de  6800              LDR      r0,[r0,#0]
0003e0  5d00              LDRB     r0,[r0,r4]
0003e2  f0100f38          TST      r0,#0x38
0003e6  d105              BNE      |L1.1012|
0003e8  2c5f              CMP      r4,#0x5f
0003ea  d003              BEQ      |L1.1012|
0003ec  2c2d              CMP      r4,#0x2d
0003ee  d001              BEQ      |L1.1012|
0003f0  2001              MOVS     r0,#1
0003f2  e000              B        |L1.1014|
                  |L1.1012|
0003f4  2000              MOVS     r0,#0
                  |L1.1014|
0003f6  4680              MOV      r8,r0
;;;326        end2 = !(isalnum(c2) || c2 == '_' || c2 == '-');
0003f8  f7fffffe          BL       __rt_ctype_table
0003fc  6800              LDR      r0,[r0,#0]
0003fe  5d40              LDRB     r0,[r0,r5]
000400  f0100f38          TST      r0,#0x38
000404  d105              BNE      |L1.1042|
000406  2d5f              CMP      r5,#0x5f
000408  d003              BEQ      |L1.1042|
00040a  2d2d              CMP      r5,#0x2d
00040c  d001              BEQ      |L1.1042|
00040e  2001              MOVS     r0,#1
000410  e0bb              B        |L1.1418|
                  |L1.1042|
000412  e0b9              B        |L1.1416|
                  |L1.1044|
                          DCD      0x05265c00
                  |L1.1048|
                          DCD      0x0036ee80
                  |L1.1052|
                          DCD      ||.constdata||+0x8
                  |L1.1056|
                          DCD      0xfaffffef
                  |L1.1060|
000424  00                DCB      0
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
                  |L1.1064|
                          DCD      ssdp_type
                  |L1.1068|
00042c  4e5400            DCB      "NT",0
00042f  00                DCB      0
                  |L1.1072|
000430  4e4f5449          DCB      "NOTIFY * HTTP/1.1\r\n",0
000434  4659202a
000438  20485454
00043c  502f312e
000440  310d0a00
                  |L1.1092|
000444  3233392e          DCB      "239.255.255.250",0
000448  3235352e
00044c  3235352e
000450  32353000
                  |L1.1108|
000454  484f5354          DCB      "HOST: %s:%d\r\n",0
000458  3a202573
00045c  3a25640d
000460  0a00    
000462  00                DCB      0
000463  00                DCB      0
                  |L1.1124|
000464  43414348          DCB      "CACHE-CONTROL: max-age=%d\r\n",0
000468  452d434f
00046c  4e54524f
000470  4c3a206d
000474  61782d61
000478  67653d25
00047c  640d0a00
                  |L1.1152|
000480  73736470          DCB      "ssdp:alive",0
000484  3a616c69
000488  766500  
00048b  00                DCB      0
                  |L1.1164|
00048c  73736470          DCB      "ssdp:byebye",0
000490  3a627965
000494  62796500
                  |L1.1176|
000498  4e54533a          DCB      "NTS: %s\r\n",0
00049c  2025730d
0004a0  0a00    
0004a2  00                DCB      0
0004a3  00                DCB      0
                  |L1.1188|
                          DCD      ssdp_ip_reply
                  |L1.1192|
                          DCD      ssdp_port_reply
                  |L1.1196|
0004ac  535400            DCB      "ST",0
0004af  00                DCB      0
                  |L1.1200|
0004b0  48545450          DCB      "HTTP/1.1 200 OK\r\n",0
0004b4  2f312e31
0004b8  20323030
0004bc  204f4b0d
0004c0  0a00    
0004c2  00                DCB      0
0004c3  00                DCB      0
                  |L1.1220|
0004c4  4558543a          DCB      "EXT:"
                  |L1.1224|
0004c8  0d0a00            DCB      "\r\n",0
0004cb  00                DCB      0
                  |L1.1228|
0004cc  64657669          DCB      "device.xml",0
0004d0  63652e78
0004d4  6d6c00  
0004d7  00                DCB      0
                  |L1.1240|
0004d8  4c4f4341          DCB      "LOCATION: http://%s:%d/%s\r\n",0
0004dc  54494f4e
0004e0  3a206874
0004e4  74703a2f
0004e8  2f25733a
0004ec  25642f25
0004f0  730d0a00
                  |L1.1268|
0004f4  53455256          DCB      "SERVER: unspecified, UPnP/1.0, unspecified\r\n",0
0004f8  45523a20
0004fc  756e7370
000500  65636966
000504  6965642c
000508  2055506e
00050c  502f312e
000510  302c2075
000514  6e737065
000518  63696669
00051c  65640d0a
000520  00      
000521  00                DCB      0
000522  00                DCB      0
000523  00                DCB      0
                  |L1.1316|
                          DCD      ssdp_state
                  |L1.1320|
000528  25733a20          DCB      "%s: upnp:rootdevice\r\n",0
00052c  75706e70
000530  3a726f6f
000534  74646576
000538  6963650d
00053c  0a00    
00053e  00                DCB      0
00053f  00                DCB      0
                  |L1.1344|
000540  55534e3a          DCB      "USN: uuid:%s::upnp:rootdevice\r\n",0
000544  20757569
000548  643a2573
00054c  3a3a7570
000550  6e703a72
000554  6f6f7464
000558  65766963
00055c  650d0a00
                  |L1.1376|
000560  25733a20          DCB      "%s: uuid:%s\r\n",0
000564  75756964
000568  3a25730d
00056c  0a00    
00056e  00                DCB      0
00056f  00                DCB      0
                  |L1.1392|
000570  55534e3a          DCB      "USN: uuid:%s\r\n",0
000574  20757569
000578  643a2573
00057c  0d0a00  
00057f  00                DCB      0
                  |L1.1408|
                          DCD      udp_ssdp
                  |L1.1412|
                          DCD      SsdpRun
                  |L1.1416|
000588  2000              MOVS     r0,#0
                  |L1.1418|
00058a  4681              MOV      r9,r0
;;;327        if (end1 || end2 || c1 != c2)
00058c  f1b80f00          CMP      r8,#0
000590  d105              BNE      |L1.1438|
000592  f1b90f00          CMP      r9,#0
000596  d102              BNE      |L1.1438|
000598  42ac              CMP      r4,r5
00059a  f43faef6          BEQ      |L1.906|
                  |L1.1438|
;;;328                break;
00059e  bf00              NOP      
0005a0  bf00              NOP      
;;;329      }
;;;330      return end1 && end2; /* reached end of both words? */
0005a2  f1b80f00          CMP      r8,#0
0005a6  d005              BEQ      |L1.1460|
0005a8  f1b90f00          CMP      r9,#0
0005ac  d002              BEQ      |L1.1460|
0005ae  2001              MOVS     r0,#1
                  |L1.1456|
;;;331    }
0005b0  e8bd87f0          POP      {r4-r10,pc}
                  |L1.1460|
0005b4  2000              MOVS     r0,#0                 ;330
0005b6  e7fb              B        |L1.1456|
;;;332    /* No. of chars through (including) end of line */
                          ENDP

                  str_starts PROC
;;;377    }
;;;378    static int str_starts(const char *str, const char *start)
0005b8  b570              PUSH     {r4-r6,lr}
;;;379    {
0005ba  4605              MOV      r5,r0
0005bc  460c              MOV      r4,r1
;;;380      return strncmp(str, start, strlen(start)) == 0;
0005be  4620              MOV      r0,r4
0005c0  f7fffffe          BL       strlen
0005c4  4606              MOV      r6,r0
0005c6  4632              MOV      r2,r6
0005c8  4621              MOV      r1,r4
0005ca  4628              MOV      r0,r5
0005cc  f7fffffe          BL       strncmp
0005d0  b908              CBNZ     r0,|L1.1494|
0005d2  2001              MOVS     r0,#1
                  |L1.1492|
;;;381    }
0005d4  bd70              POP      {r4-r6,pc}
                  |L1.1494|
0005d6  2000              MOVS     r0,#0                 ;380
0005d8  e7fc              B        |L1.1492|
;;;382    
                          ENDP

                  line_length PROC
;;;332    /* No. of chars through (including) end of line */
;;;333    static int line_length(const char *l)
0005da  4602              MOV      r2,r0
;;;334    {
;;;335      const char *lp = l;
0005dc  4611              MOV      r1,r2
;;;336      while (*lp && *lp != '\n')
0005de  e000              B        |L1.1506|
                  |L1.1504|
;;;337              lp++;
0005e0  1c49              ADDS     r1,r1,#1
                  |L1.1506|
0005e2  7808              LDRB     r0,[r1,#0]            ;336
0005e4  b110              CBZ      r0,|L1.1516|
0005e6  7808              LDRB     r0,[r1,#0]            ;336
0005e8  280a              CMP      r0,#0xa               ;336
0005ea  d1f9              BNE      |L1.1504|
                  |L1.1516|
;;;338      if (*lp == '\n')
0005ec  7808              LDRB     r0,[r1,#0]
0005ee  280a              CMP      r0,#0xa
0005f0  d100              BNE      |L1.1524|
;;;339              lp++;
0005f2  1c49              ADDS     r1,r1,#1
                  |L1.1524|
;;;340      return lp - l;
0005f4  1a88              SUBS     r0,r1,r2
;;;341    }
0005f6  4770              BX       lr
;;;342    /* No. of chars excluding trailing whitespace */
                          ENDP

                  line_length_stripped PROC
;;;343    static int line_length_stripped(const char *l)
0005f8  b570              PUSH     {r4-r6,lr}
;;;344    {
0005fa  4604              MOV      r4,r0
;;;345      const char *lp = l + line_length(l);
0005fc  4620              MOV      r0,r4
0005fe  f7fffffe          BL       line_length
000602  1905              ADDS     r5,r0,r4
;;;346      while (lp > l && !isgraph(lp[-1]))
000604  e000              B        |L1.1544|
                  |L1.1542|
;;;347              lp--;
000606  1e6d              SUBS     r5,r5,#1
                  |L1.1544|
000608  42a5              CMP      r5,r4                 ;346
00060a  d908              BLS      |L1.1566|
00060c  f7fffffe          BL       __rt_ctype_table
000610  6800              LDR      r0,[r0,#0]            ;346
000612  f8151c01          LDRB     r1,[r5,#-1]           ;346
000616  5c40              LDRB     r0,[r0,r1]            ;346
000618  f0100fba          TST      r0,#0xba              ;346
00061c  d0f3              BEQ      |L1.1542|
                  |L1.1566|
;;;348      return lp - l;
00061e  1b28              SUBS     r0,r5,r4
;;;349    }
000620  bd70              POP      {r4-r6,pc}
;;;350    
                          ENDP

                  Ssdp_Udp_Listner PROC
;;;92     }     
;;;93     static  void  Ssdp_Udp_Listner(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
000622  e92d4ff0          PUSH     {r4-r11,lr}
;;;94     {
000626  b099              SUB      sp,sp,#0x64
000628  4617              MOV      r7,r2
00062a  4698              MOV      r8,r3
00062c  f8dd9088          LDR      r9,[sp,#0x88]
;;;95       unsigned char *buff=p->payload;
000630  687d              LDR      r5,[r7,#4]
;;;96       
;;;97       if (strstr((const char*)buff, "NOTIFY ")) {
000632  a19e              ADR      r1,|L1.2220|
000634  4628              MOV      r0,r5
000636  f7fffffe          BL       strstr
00063a  b128              CBZ      r0,|L1.1608|
;;;98     /*
;;;99     * Silently ignore NOTIFYs to avoid filling debug log with
;;;100    * unwanted messages.
;;;101    */
;;;102        pbuf_free(p);
00063c  4638              MOV      r0,r7
00063e  f7fffffe          BL       pbuf_free
                  |L1.1602|
;;;103        return;
;;;104      }  
;;;105      LWIP_DEBUGF(SSDP_DEBUG, ("SSDP udp listen:\n %s", buff));
;;;106    /* Parse first line */
;;;107      if (strncmp((const char*)buff, "M-SEARCH", strlen("M-SEARCH")) == 0 &&
;;;108              !isgraph(buff[strlen("M-SEARCH")])) {
;;;109          const char *buf= (const char*)buff;
;;;110          unsigned char got_host = false;
;;;111          unsigned char got_st = false, st_match = false;
;;;112          unsigned char got_man = false;
;;;113          unsigned char got_mx = false;
;;;114          long ssdp_time_interval=0;
;;;115    /*
;;;116    * Skip first line M-SEARCH * HTTP/1.1
;;;117    * (perhaps we should check remainder of the line for syntax)
;;;118    */
;;;119          buf += line_length(buf);
;;;120    /* Parse remaining lines */
;;;121          for (; *buf != '\0'; buf += line_length(buf)) {
;;;122            const char *	end = buf + line_length_stripped(buf);
;;;123            if (token_eq(buf, "host")) {
;;;124    /* The host line indicates who the packet
;;;125    * is addressed to... but do we really care?
;;;126    * Note that Microsoft sometimes does funny
;;;127    * stuff with the HOST: line.
;;;128    */
;;;129              got_host = true;
;;;130              continue;
;;;131            } else if (token_eq(buf, "st")) {
;;;132    /* There are a number of forms; we look
;;;133    * for one that matches our case.
;;;134    */
;;;135              got_st = true;
;;;136              buf += token_length(buf);
;;;137              buf += word_separation_length(buf);
;;;138              if (*buf != ':')
;;;139                continue;
;;;140              buf++;
;;;141              buf += word_separation_length(buf);
;;;142              if (str_starts(buf, "ssdp:all")) {
;;;143                st_match = true;
;;;144                continue;
;;;145              }
;;;146              if (str_starts(buf, "upnp:rootdevice")) {
;;;147                st_match = true;
;;;148                continue;
;;;149              }
;;;150              if (str_starts(buf, "uuid:")) {
;;;151                char uuid_string[80];
;;;152                buff += strlen("uuid:");
;;;153                uuid_bin2str(uuid_string,
;;;154                            sizeof(uuid_string));
;;;155                if (str_starts(buf, uuid_string))
;;;156                  st_match = true;
;;;157                  continue;
;;;158              }
;;;159              continue;
;;;160          } else if (token_eq(buf, "man")) {
;;;161            buf += token_length(buf);
;;;162            buf += word_separation_length(buf);
;;;163            if (*buf != ':')
;;;164              continue;
;;;165            buf++;
;;;166            buf += word_separation_length(buf);
;;;167            if (!str_starts(buf, "\"ssdp:discover\"")) {
;;;168    /*  WPS UPnP: Unexpected. "M-SEARCH man-field */
;;;169              pbuf_free(p);
;;;170              return;
;;;171            }
;;;172            got_man = true;
;;;173            continue;
;;;174          } else if (token_eq(buf, "mx")) {
;;;175            buf += token_length(buf);
;;;176            buf += word_separation_length(buf);
;;;177            if (*buf != ':')
;;;178              continue;
;;;179            buf++;
;;;180            buf += word_separation_length(buf);
;;;181            ssdp_time_interval = atol(buf);
;;;182            got_mx = true;
;;;183            continue;
;;;184          }
;;;185                /* ignore anything else */
;;;186        }
;;;187        if (!got_host || !got_st || !got_man || !got_mx || ssdp_time_interval < 0) {
;;;188        /* WPS UPnP: Invalid M-SEARCH: */
;;;189          return ;
;;;190        }
;;;191        if (!st_match) {
;;;192        /* WPS UPnP: Ignored M-SEARCH */
;;;193          pbuf_free(p);
;;;194          return;
;;;195        }
;;;196        if (ssdp_time_interval > 120)
;;;197                  ssdp_time_interval = 120; /* UPnP-arch-DeviceArchitecture, 1.2.3 */
;;;198          ssdp_time_interval *= portTICK_RATE_MS;
;;;199          ssdp_type = MSEARCH_REPLY;
;;;200          ssdp_state = 0;
;;;201          tcpip_timeout(ssdp_time_interval,SsdpRun,NULL);
;;;202          ip_addr_set(&ssdp_ip_reply,addr);
;;;203          ssdp_port_reply = port;
;;;204          pbuf_free(p);
;;;205          return;
;;;206      }
;;;207      pbuf_free(p);
;;;208    }
000642  b019              ADD      sp,sp,#0x64
000644  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.1608|
000648  bf00              NOP                            ;105
00064a  bf00              NOP                            ;105
00064c  2208              MOVS     r2,#8                 ;107
00064e  a199              ADR      r1,|L1.2228|
000650  4628              MOV      r0,r5                 ;107
000652  f7fffffe          BL       strncmp
000656  2800              CMP      r0,#0                 ;107
                  |L1.1624|
000658  d16f              BNE      |L1.1850|
00065a  f7fffffe          BL       __rt_ctype_table
00065e  6800              LDR      r0,[r0,#0]            ;108
000660  7a29              LDRB     r1,[r5,#8]            ;108
000662  5c40              LDRB     r0,[r0,r1]            ;108
000664  f0100fba          TST      r0,#0xba              ;108
000668  d1f6              BNE      |L1.1624|
00066a  462c              MOV      r4,r5                 ;109
00066c  f04f0a00          MOV      r10,#0                ;110
000670  46d3              MOV      r11,r10               ;111
000672  2000              MOVS     r0,#0                 ;111
000674  9018              STR      r0,[sp,#0x60]         ;111
000676  9017              STR      r0,[sp,#0x5c]         ;112
000678  9016              STR      r0,[sp,#0x58]         ;113
00067a  2600              MOVS     r6,#0                 ;114
00067c  4620              MOV      r0,r4                 ;119
00067e  f7fffffe          BL       line_length
000682  4404              ADD      r4,r4,r0              ;119
000684  e08d              B        |L1.1954|
                  |L1.1670|
000686  4620              MOV      r0,r4                 ;122
000688  f7fffffe          BL       line_length_stripped
00068c  4420              ADD      r0,r0,r4              ;122
00068e  9015              STR      r0,[sp,#0x54]         ;122
000690  a18b              ADR      r1,|L1.2240|
000692  4620              MOV      r0,r4                 ;123
000694  f7fffffe          BL       token_eq
000698  b110              CBZ      r0,|L1.1696|
00069a  f04f0a01          MOV      r10,#1                ;129
00069e  e07c              B        |L1.1946|
                  |L1.1696|
0006a0  a189              ADR      r1,|L1.2248|
0006a2  4620              MOV      r0,r4                 ;131
0006a4  f7fffffe          BL       token_eq
0006a8  2800              CMP      r0,#0                 ;131
0006aa  d035              BEQ      |L1.1816|
0006ac  f04f0b01          MOV      r11,#1                ;135
0006b0  4620              MOV      r0,r4                 ;136
0006b2  f7fffffe          BL       token_length
0006b6  4404              ADD      r4,r4,r0              ;136
0006b8  4620              MOV      r0,r4                 ;137
0006ba  f7fffffe          BL       word_separation_length
0006be  4404              ADD      r4,r4,r0              ;137
0006c0  7820              LDRB     r0,[r4,#0]            ;138
0006c2  283a              CMP      r0,#0x3a              ;138
0006c4  d000              BEQ      |L1.1736|
0006c6  e068              B        |L1.1946|
                  |L1.1736|
0006c8  1c64              ADDS     r4,r4,#1              ;140
0006ca  4620              MOV      r0,r4                 ;141
0006cc  f7fffffe          BL       word_separation_length
0006d0  4404              ADD      r4,r4,r0              ;141
0006d2  a17e              ADR      r1,|L1.2252|
0006d4  4620              MOV      r0,r4                 ;142
0006d6  f7fffffe          BL       str_starts
0006da  b110              CBZ      r0,|L1.1762|
0006dc  2001              MOVS     r0,#1                 ;143
0006de  9018              STR      r0,[sp,#0x60]         ;143
0006e0  e05b              B        |L1.1946|
                  |L1.1762|
0006e2  a17d              ADR      r1,|L1.2264|
0006e4  4620              MOV      r0,r4                 ;146
0006e6  f7fffffe          BL       str_starts
0006ea  b110              CBZ      r0,|L1.1778|
0006ec  2001              MOVS     r0,#1                 ;147
0006ee  9018              STR      r0,[sp,#0x60]         ;147
0006f0  e053              B        |L1.1946|
                  |L1.1778|
0006f2  a17d              ADR      r1,|L1.2280|
0006f4  4620              MOV      r0,r4                 ;150
0006f6  f7fffffe          BL       str_starts
0006fa  b160              CBZ      r0,|L1.1814|
0006fc  1d6d              ADDS     r5,r5,#5              ;152
0006fe  2150              MOVS     r1,#0x50              ;153
000700  a801              ADD      r0,sp,#4              ;153
000702  f7fffffe          BL       uuid_bin2str
000706  a901              ADD      r1,sp,#4              ;155
000708  4620              MOV      r0,r4                 ;155
00070a  f7fffffe          BL       str_starts
00070e  b108              CBZ      r0,|L1.1812|
000710  2001              MOVS     r0,#1                 ;156
000712  9018              STR      r0,[sp,#0x60]         ;156
                  |L1.1812|
000714  e041              B        |L1.1946|
                  |L1.1814|
000716  e040              B        |L1.1946|
                  |L1.1816|
000718  a175              ADR      r1,|L1.2288|
00071a  4620              MOV      r0,r4                 ;160
00071c  f7fffffe          BL       token_eq
000720  b1e8              CBZ      r0,|L1.1886|
000722  4620              MOV      r0,r4                 ;161
000724  f7fffffe          BL       token_length
000728  4404              ADD      r4,r4,r0              ;161
00072a  4620              MOV      r0,r4                 ;162
00072c  f7fffffe          BL       word_separation_length
000730  4404              ADD      r4,r4,r0              ;162
000732  7820              LDRB     r0,[r4,#0]            ;163
000734  283a              CMP      r0,#0x3a              ;163
000736  d001              BEQ      |L1.1852|
000738  e02f              B        |L1.1946|
                  |L1.1850|
00073a  e068              B        |L1.2062|
                  |L1.1852|
00073c  1c64              ADDS     r4,r4,#1              ;165
00073e  4620              MOV      r0,r4                 ;166
000740  f7fffffe          BL       word_separation_length
000744  4404              ADD      r4,r4,r0              ;166
000746  a16b              ADR      r1,|L1.2292|
000748  4620              MOV      r0,r4                 ;167
00074a  f7fffffe          BL       str_starts
00074e  b918              CBNZ     r0,|L1.1880|
000750  4638              MOV      r0,r7                 ;169
000752  f7fffffe          BL       pbuf_free
000756  e774              B        |L1.1602|
                  |L1.1880|
000758  2001              MOVS     r0,#1                 ;172
00075a  9017              STR      r0,[sp,#0x5c]         ;172
00075c  e01d              B        |L1.1946|
                  |L1.1886|
00075e  a169              ADR      r1,|L1.2308|
000760  4620              MOV      r0,r4                 ;174
000762  f7fffffe          BL       token_eq
000766  b1b8              CBZ      r0,|L1.1944|
000768  4620              MOV      r0,r4                 ;175
00076a  f7fffffe          BL       token_length
00076e  4404              ADD      r4,r4,r0              ;175
000770  4620              MOV      r0,r4                 ;176
000772  f7fffffe          BL       word_separation_length
000776  4404              ADD      r4,r4,r0              ;176
000778  7820              LDRB     r0,[r4,#0]            ;177
00077a  283a              CMP      r0,#0x3a              ;177
00077c  d000              BEQ      |L1.1920|
00077e  e00c              B        |L1.1946|
                  |L1.1920|
000780  1c64              ADDS     r4,r4,#1              ;179
000782  4620              MOV      r0,r4                 ;180
000784  f7fffffe          BL       word_separation_length
000788  4404              ADD      r4,r4,r0              ;180
00078a  4620              MOV      r0,r4                 ;181
00078c  f7fffffe          BL       atol
000790  4606              MOV      r6,r0                 ;181
000792  2001              MOVS     r0,#1                 ;182
000794  9016              STR      r0,[sp,#0x58]         ;182
000796  e000              B        |L1.1946|
                  |L1.1944|
000798  bf00              NOP                            ;130
                  |L1.1946|
00079a  4620              MOV      r0,r4                 ;121
00079c  f7fffffe          BL       line_length
0007a0  4404              ADD      r4,r4,r0              ;121
                  |L1.1954|
0007a2  7820              LDRB     r0,[r4,#0]            ;121
0007a4  2800              CMP      r0,#0                 ;121
0007a6  f47faf6e          BNE      |L1.1670|
0007aa  f1ba0f00          CMP      r10,#0                ;187
0007ae  d008              BEQ      |L1.1986|
0007b0  f1bb0f00          CMP      r11,#0                ;187
0007b4  d005              BEQ      |L1.1986|
0007b6  9817              LDR      r0,[sp,#0x5c]         ;187
0007b8  b118              CBZ      r0,|L1.1986|
0007ba  9816              LDR      r0,[sp,#0x58]         ;187
0007bc  b108              CBZ      r0,|L1.1986|
0007be  2e00              CMP      r6,#0                 ;187
0007c0  da00              BGE      |L1.1988|
                  |L1.1986|
0007c2  e73e              B        |L1.1602|
                  |L1.1988|
0007c4  9818              LDR      r0,[sp,#0x60]         ;191
0007c6  b918              CBNZ     r0,|L1.2000|
0007c8  4638              MOV      r0,r7                 ;193
0007ca  f7fffffe          BL       pbuf_free
0007ce  e738              B        |L1.1602|
                  |L1.2000|
0007d0  2e78              CMP      r6,#0x78              ;196
0007d2  dd00              BLE      |L1.2006|
0007d4  2678              MOVS     r6,#0x78              ;197
                  |L1.2006|
0007d6  bf00              NOP                            ;198
0007d8  2002              MOVS     r0,#2                 ;199
0007da  494b              LDR      r1,|L1.2312|
0007dc  7008              STRB     r0,[r1,#0]            ;199
0007de  2000              MOVS     r0,#0                 ;200
0007e0  494a              LDR      r1,|L1.2316|
0007e2  7008              STRB     r0,[r1,#0]            ;200
0007e4  2200              MOVS     r2,#0                 ;201
0007e6  494a              LDR      r1,|L1.2320|
0007e8  4630              MOV      r0,r6                 ;201
0007ea  f7fffffe          BL       tcpip_timeout
0007ee  f1b80f00          CMP      r8,#0                 ;202
0007f2  d101              BNE      |L1.2040|
0007f4  2000              MOVS     r0,#0                 ;202
0007f6  e001              B        |L1.2044|
                  |L1.2040|
0007f8  f8d80000          LDR      r0,[r8,#0]            ;202
                  |L1.2044|
0007fc  4945              LDR      r1,|L1.2324|
0007fe  6008              STR      r0,[r1,#0]            ;202  ; ssdp_ip_reply
000800  4845              LDR      r0,|L1.2328|
000802  f8a09000          STRH     r9,[r0,#0]            ;203
000806  4638              MOV      r0,r7                 ;204
000808  f7fffffe          BL       pbuf_free
00080c  e719              B        |L1.1602|
                  |L1.2062|
00080e  4638              MOV      r0,r7                 ;207
000810  f7fffffe          BL       pbuf_free
000814  bf00              NOP      
000816  e714              B        |L1.1602|
;;;209    
                          ENDP

                  SsdpInit PROC
;;;63     
;;;64     void SsdpInit(struct netif *net)
000818  b570              PUSH     {r4-r6,lr}
;;;65     {
00081a  4604              MOV      r4,r0
;;;66         SetHostName("RackAmp700");
00081c  a03f              ADR      r0,|L1.2332|
00081e  f7fffffe          BL       SetHostName
;;;67     
;;;68     
;;;69       net->flags |= NETIF_FLAG_IGMP;
000822  f8940031          LDRB     r0,[r4,#0x31]
000826  f0400080          ORR      r0,r0,#0x80
00082a  f8840031          STRB     r0,[r4,#0x31]
;;;70       if((udp_ssdp = udp_new())){
00082e  f7fffffe          BL       udp_new
000832  493d              LDR      r1,|L1.2344|
000834  6008              STR      r0,[r1,#0]  ; udp_ssdp
000836  b170              CBZ      r0,|L1.2134|
;;;71     		udp_bind(udp_ssdp, IP_ADDR_ANY, 1900);
000838  f240726c          MOV      r2,#0x76c
00083c  493b              LDR      r1,|L1.2348|
00083e  483a              LDR      r0,|L1.2344|
000840  6800              LDR      r0,[r0,#0]  ; udp_ssdp
000842  f7fffffe          BL       udp_bind
;;;72         udp_recv(udp_ssdp, Ssdp_Udp_Listner, NULL);
000846  2200              MOVS     r2,#0
000848  4939              LDR      r1,|L1.2352|
00084a  4837              LDR      r0,|L1.2344|
00084c  6800              LDR      r0,[r0,#0]  ; udp_ssdp
00084e  f7fffffe          BL       udp_recv
;;;73         LWIP_DEBUGF(SSDP_DEBUG, ("SSDP udp init finished\n"));
000852  bf00              NOP      
000854  bf00              NOP      
                  |L1.2134|
;;;74       }
;;;75       tcpip_timeout((UPNP_RANDOM_TIME),SsdpRun,NULL);
000856  f7fffffe          BL       rand
00085a  f3c00013          UBFX     r0,r0,#0,#20
00085e  f44f71e1          MOV      r1,#0x1c2
000862  4348              MULS     r0,r1,r0
000864  eb014520          ADD      r5,r1,r0,ASR #16
000868  2200              MOVS     r2,#0
00086a  4929              LDR      r1,|L1.2320|
00086c  4628              MOV      r0,r5
00086e  f7fffffe          BL       tcpip_timeout
;;;76       UpnpWebInit();  
000872  f7fffffe          BL       UpnpWebInit
;;;77       LWIP_DEBUGF(SSDP_DEBUG, ("SSDP init finished\n"));
000876  bf00              NOP      
000878  bf00              NOP      
;;;78     }
00087a  bd70              POP      {r4-r6,pc}
;;;79     
                          ENDP

                  SsdpDown PROC
;;;80     void SsdpDown(void)
00087c  b538              PUSH     {r3-r5,lr}
;;;81     {
;;;82       ssdp_type = ADVERTISE_DOWN;
00087e  2001              MOVS     r0,#1
000880  4921              LDR      r1,|L1.2312|
000882  7008              STRB     r0,[r1,#0]
;;;83       udp_remove(udp_ssdp);
000884  4828              LDR      r0,|L1.2344|
000886  6800              LDR      r0,[r0,#0]  ; udp_ssdp
000888  f7fffffe          BL       udp_remove
;;;84       udp_ssdp = NULL;
00088c  2000              MOVS     r0,#0
00088e  4926              LDR      r1,|L1.2344|
000890  6008              STR      r0,[r1,#0]  ; udp_ssdp
;;;85       tcpip_untimeout(SsdpRun,NULL);
000892  2100              MOVS     r1,#0
000894  481e              LDR      r0,|L1.2320|
000896  f7fffffe          BL       tcpip_untimeout
;;;86       //ETH_MACAddressPerfectFilterCmd(ETH_MAC_Address2,DISABLE);
;;;87     #if LWIP_IGMP     
;;;88       struct ip_addr ip;
;;;89       IP4_ADDR(&ip,239,255,255,250); 
00089a  4826              LDR      r0,|L1.2356|
00089c  9000              STR      r0,[sp,#0]
;;;90       igmp_leavegroup(Localhost(),&ip);
00089e  f7fffffe          BL       Localhost
0008a2  4604              MOV      r4,r0
0008a4  4669              MOV      r1,sp
0008a6  f7fffffe          BL       igmp_leavegroup
;;;91     #endif  
;;;92     }     
0008aa  bd38              POP      {r3-r5,pc}
;;;93     static  void  Ssdp_Udp_Listner(void *arg, struct udp_pcb *upcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
                          ENDP

                  |L1.2220|
0008ac  4e4f5449          DCB      "NOTIFY ",0
0008b0  46592000
                  |L1.2228|
0008b4  4d2d5345          DCB      "M-SEARCH",0
0008b8  41524348
0008bc  00      
0008bd  00                DCB      0
0008be  00                DCB      0
0008bf  00                DCB      0
                  |L1.2240|
0008c0  686f7374          DCB      "host",0
0008c4  00      
0008c5  00                DCB      0
0008c6  00                DCB      0
0008c7  00                DCB      0
                  |L1.2248|
0008c8  737400            DCB      "st",0
0008cb  00                DCB      0
                  |L1.2252|
0008cc  73736470          DCB      "ssdp:all",0
0008d0  3a616c6c
0008d4  00      
0008d5  00                DCB      0
0008d6  00                DCB      0
0008d7  00                DCB      0
                  |L1.2264|
0008d8  75706e70          DCB      "upnp:rootdevice",0
0008dc  3a726f6f
0008e0  74646576
0008e4  69636500
                  |L1.2280|
0008e8  75756964          DCB      "uuid:",0
0008ec  3a00    
0008ee  00                DCB      0
0008ef  00                DCB      0
                  |L1.2288|
0008f0  6d616e00          DCB      "man",0
                  |L1.2292|
0008f4  22737364          DCB      """ssdp:discover""",0
0008f8  703a6469
0008fc  73636f76
000900  65722200
                  |L1.2308|
000904  6d7800            DCB      "mx",0
000907  00                DCB      0
                  |L1.2312|
                          DCD      ssdp_type
                  |L1.2316|
                          DCD      ssdp_state
                  |L1.2320|
                          DCD      SsdpRun
                  |L1.2324|
                          DCD      ssdp_ip_reply
                  |L1.2328|
                          DCD      ssdp_port_reply
                  |L1.2332|
00091c  5261636b          DCB      "RackAmp700",0
000920  416d7037
000924  303000  
000927  00                DCB      0
                  |L1.2344|
                          DCD      udp_ssdp
                  |L1.2348|
                          DCD      ip_addr_any
                  |L1.2352|
                          DCD      Ssdp_Udp_Listner
                  |L1.2356|
                          DCD      0xfaffffef

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  SSDPMAC
000000  01005e7f          DCB      0x01,0x00,0x5e,0x7f
000004  fffa0000          DCB      0xff,0xfa,0x00,0x00
000008  25303278          DCB      0x25,0x30,0x32,0x78
00000c  25303278          DCB      0x25,0x30,0x32,0x78
000010  25303278          DCB      0x25,0x30,0x32,0x78
000014  25303278          DCB      0x25,0x30,0x32,0x78
000018  2d253032          DCB      0x2d,0x25,0x30,0x32
00001c  78253032          DCB      0x78,0x25,0x30,0x32
000020  782d2530          DCB      0x78,0x2d,0x25,0x30
000024  32782530          DCB      0x32,0x78,0x25,0x30
000028  32782d25          DCB      0x32,0x78,0x2d,0x25
00002c  30327825          DCB      0x30,0x32,0x78,0x25
000030  3032782d          DCB      0x30,0x32,0x78,0x2d
000034  25303278          DCB      0x25,0x30,0x32,0x78
000038  25303278          DCB      0x25,0x30,0x32,0x78
00003c  25303278          DCB      0x25,0x30,0x32,0x78
000040  25303278          DCB      0x25,0x30,0x32,0x78
000044  25303278          DCB      0x25,0x30,0x32,0x78
000048  25303278          DCB      0x25,0x30,0x32,0x78
00004c  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  udp_ssdp
                          DCD      0x00000000
                  ssdp_type
000004  00                DCB      0x00
                  ssdp_state
000005  000000            DCB      0x00,0x00,0x00
                  ssdp_ip_reply
                          DCD      0x00000000
                  ssdp_port_reply
00000c  0000              DCB      0x00,0x00
